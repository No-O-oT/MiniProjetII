
prog_Mini-projSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002028  0800ce24  0800ce24  0001ce24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee4c  0800ee4c  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee4c  0800ee4c  0001ee4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee54  0800ee54  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee54  0800ee54  0001ee54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee58  0800ee58  0001ee58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800ee5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c80  20000054  0800eeb0  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008cd4  0800eeb0  00028cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e2f6  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aa6  00000000  00000000  0004e37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025d0  00000000  00000000  00053e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002348  00000000  00000000  000563f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dfb0  00000000  00000000  00058738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a0b7  00000000  00000000  000866e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011482a  00000000  00000000  000b079f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c4fc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a02c  00000000  00000000  001c501c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000054 	.word	0x20000054
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ce0c 	.word	0x0800ce0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000058 	.word	0x20000058
 800020c:	0800ce0c 	.word	0x0800ce0c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4a07      	ldr	r2, [pc, #28]	; (8000568 <vApplicationGetIdleTaskMemory+0x2c>)
 800054c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <vApplicationGetIdleTaskMemory+0x30>)
 8000552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000070 	.word	0x20000070
 800056c:	200000c8 	.word	0x200000c8

08000570 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800057a:	20c8      	movs	r0, #200	; 0xc8
 800057c:	f001 fee4 	bl	8002348 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000580:	f000 f9b4 	bl	80008ec <ft5336_I2C_InitializeIfRequired>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	4603      	mov	r3, r0
 80005aa:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005b4:	2300      	movs	r3, #0
 80005b6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005b8:	f000 f998 	bl	80008ec <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e010      	b.n	80005e4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	21a8      	movs	r1, #168	; 0xa8
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fe9f 	bl	800230c <TS_IO_Read>
 80005ce:	4603      	mov	r3, r0
 80005d0:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80005d2:	7b7b      	ldrb	r3, [r7, #13]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b51      	cmp	r3, #81	; 0x51
 80005d8:	d101      	bne.n	80005de <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3301      	adds	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d802      	bhi.n	80005f0 <ft5336_ReadID+0x4e>
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0e8      	beq.n	80005c2 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005f0:	7b7b      	ldrb	r3, [r7, #13]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	b29b      	uxth	r3, r3
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f97e 	bl	800090c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f932 	bl	800087c <ft5336_TS_DisableIT>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2102      	movs	r1, #2
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fe69 	bl	800230c <TS_IO_Read>
 800063a:	4603      	mov	r3, r0
 800063c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	b2db      	uxtb	r3, r3
 8000648:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b05      	cmp	r3, #5
 8000650:	d901      	bls.n	8000656 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <ft5336_TS_DetectTouch+0x50>)
 800065c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <ft5336_TS_DetectTouch+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	b2db      	uxtb	r3, r3
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200002c8 	.word	0x200002c8

08000674 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000696:	4b6d      	ldr	r3, [pc, #436]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 8000698:	789a      	ldrb	r2, [r3, #2]
 800069a:	4b6c      	ldr	r3, [pc, #432]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 800069c:	785b      	ldrb	r3, [r3, #1]
 800069e:	429a      	cmp	r2, r3
 80006a0:	f080 80cf 	bcs.w	8000842 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006a4:	4b69      	ldr	r3, [pc, #420]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	2b09      	cmp	r3, #9
 80006aa:	d871      	bhi.n	8000790 <ft5336_TS_GetXY+0x11c>
 80006ac:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <ft5336_TS_GetXY+0x40>)
 80006ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b2:	bf00      	nop
 80006b4:	080006dd 	.word	0x080006dd
 80006b8:	080006ef 	.word	0x080006ef
 80006bc:	08000701 	.word	0x08000701
 80006c0:	08000713 	.word	0x08000713
 80006c4:	08000725 	.word	0x08000725
 80006c8:	08000737 	.word	0x08000737
 80006cc:	08000749 	.word	0x08000749
 80006d0:	0800075b 	.word	0x0800075b
 80006d4:	0800076d 	.word	0x0800076d
 80006d8:	0800077f 	.word	0x0800077f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006dc:	2304      	movs	r3, #4
 80006de:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006e0:	2303      	movs	r3, #3
 80006e2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006e4:	2306      	movs	r3, #6
 80006e6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006e8:	2305      	movs	r3, #5
 80006ea:	753b      	strb	r3, [r7, #20]
      break;
 80006ec:	e051      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ee:	230a      	movs	r3, #10
 80006f0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006f2:	2309      	movs	r3, #9
 80006f4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006f6:	230c      	movs	r3, #12
 80006f8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006fa:	230b      	movs	r3, #11
 80006fc:	753b      	strb	r3, [r7, #20]
      break;
 80006fe:	e048      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000700:	2310      	movs	r3, #16
 8000702:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000704:	230f      	movs	r3, #15
 8000706:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000708:	2312      	movs	r3, #18
 800070a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800070c:	2311      	movs	r3, #17
 800070e:	753b      	strb	r3, [r7, #20]
      break;
 8000710:	e03f      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000712:	2316      	movs	r3, #22
 8000714:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000716:	2315      	movs	r3, #21
 8000718:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800071a:	2318      	movs	r3, #24
 800071c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800071e:	2317      	movs	r3, #23
 8000720:	753b      	strb	r3, [r7, #20]
      break;
 8000722:	e036      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000724:	231c      	movs	r3, #28
 8000726:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000728:	231b      	movs	r3, #27
 800072a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800072c:	231e      	movs	r3, #30
 800072e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000730:	231d      	movs	r3, #29
 8000732:	753b      	strb	r3, [r7, #20]
      break;
 8000734:	e02d      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000736:	2322      	movs	r3, #34	; 0x22
 8000738:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800073a:	2321      	movs	r3, #33	; 0x21
 800073c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800073e:	2324      	movs	r3, #36	; 0x24
 8000740:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000742:	2323      	movs	r3, #35	; 0x23
 8000744:	753b      	strb	r3, [r7, #20]
      break;
 8000746:	e024      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000748:	2328      	movs	r3, #40	; 0x28
 800074a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800074c:	2327      	movs	r3, #39	; 0x27
 800074e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000750:	232a      	movs	r3, #42	; 0x2a
 8000752:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000754:	2329      	movs	r3, #41	; 0x29
 8000756:	753b      	strb	r3, [r7, #20]
      break;
 8000758:	e01b      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800075a:	232e      	movs	r3, #46	; 0x2e
 800075c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800075e:	232d      	movs	r3, #45	; 0x2d
 8000760:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000762:	2330      	movs	r3, #48	; 0x30
 8000764:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000766:	232f      	movs	r3, #47	; 0x2f
 8000768:	753b      	strb	r3, [r7, #20]
      break;
 800076a:	e012      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800076c:	2334      	movs	r3, #52	; 0x34
 800076e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000770:	2333      	movs	r3, #51	; 0x33
 8000772:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000774:	2336      	movs	r3, #54	; 0x36
 8000776:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000778:	2335      	movs	r3, #53	; 0x35
 800077a:	753b      	strb	r3, [r7, #20]
      break;
 800077c:	e009      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800077e:	233a      	movs	r3, #58	; 0x3a
 8000780:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000782:	2339      	movs	r3, #57	; 0x39
 8000784:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000786:	233c      	movs	r3, #60	; 0x3c
 8000788:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800078a:	233b      	movs	r3, #59	; 0x3b
 800078c:	753b      	strb	r3, [r7, #20]
      break;
 800078e:	e000      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000790:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	7dfa      	ldrb	r2, [r7, #23]
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fdb6 	bl	800230c <TS_IO_Read>
 80007a0:	4603      	mov	r3, r0
 80007a2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007ac:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ae:	89fb      	ldrh	r3, [r7, #14]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	7dba      	ldrb	r2, [r7, #22]
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fda8 	bl	800230c <TS_IO_Read>
 80007bc:	4603      	mov	r3, r0
 80007be:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007c0:	7cfb      	ldrb	r3, [r7, #19]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007da:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007de:	881a      	ldrh	r2, [r3, #0]
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007e4:	89fb      	ldrh	r3, [r7, #14]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	7d7a      	ldrb	r2, [r7, #21]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fd8d 	bl	800230c <TS_IO_Read>
 80007f2:	4603      	mov	r3, r0
 80007f4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007f6:	7cfb      	ldrb	r3, [r7, #19]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007fe:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	7d3a      	ldrb	r2, [r7, #20]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fd7f 	bl	800230c <TS_IO_Read>
 800080e:	4603      	mov	r3, r0
 8000810:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000812:	7cfb      	ldrb	r3, [r7, #19]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b21b      	sxth	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	b21b      	sxth	r3, r3
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 800082c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 8000830:	881a      	ldrh	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 8000838:	789b      	ldrb	r3, [r3, #2]
 800083a:	3301      	adds	r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b03      	ldr	r3, [pc, #12]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 8000840:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200002c8 	.word	0x200002c8
 8000850:	200002cc 	.word	0x200002cc

08000854 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	7bfa      	ldrb	r2, [r7, #15]
 800086c:	21a4      	movs	r1, #164	; 0xa4
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fd32 	bl	80022d8 <TS_IO_Write>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	21a4      	movs	r1, #164	; 0xa4
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fd1e 	bl	80022d8 <TS_IO_Write>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80008da:	781b      	ldrb	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	200002c8 	.word	0x200002c8

080008ec <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80008f0:	f7ff fff0 	bl	80008d4 <ft5336_Get_I2C_InitializedStatus>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d104      	bne.n	8000904 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80008fa:	f001 fce3 	bl	80022c4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80008fe:	4b02      	ldr	r3, [pc, #8]	; (8000908 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
  }
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200002c8 	.word	0x200002c8

0800090c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b5b0      	push	{r4, r5, r7, lr}
 800092a:	b0aa      	sub	sp, #168	; 0xa8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f003 f84c 	bl	80039ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f8ff 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f000 ff71 	bl	800181c <MX_GPIO_Init>
  MX_ADC3_Init();
 800093a:	f000 f9fd 	bl	8000d38 <MX_ADC3_Init>
  MX_I2C1_Init();
 800093e:	f000 faa9 	bl	8000e94 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000942:	f000 fae7 	bl	8000f14 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000946:	f000 fb25 	bl	8000f94 <MX_LTDC_Init>
  MX_RTC_Init();
 800094a:	f000 fba5 	bl	8001098 <MX_RTC_Init>
  MX_SPI2_Init();
 800094e:	f000 fc49 	bl	80011e4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000952:	f000 fc85 	bl	8001260 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000956:	f000 fcd7 	bl	8001308 <MX_TIM2_Init>
  MX_TIM3_Init();
 800095a:	f000 fd23 	bl	80013a4 <MX_TIM3_Init>
  MX_TIM5_Init();
 800095e:	f000 fd87 	bl	8001470 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000962:	f000 fdd3 	bl	800150c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000966:	f000 feab 	bl	80016c0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800096a:	f000 fed9 	bl	8001720 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800096e:	f000 f991 	bl	8000c94 <MX_ADC1_Init>
  MX_DAC_Init();
 8000972:	f000 fa33 	bl	8000ddc <MX_DAC_Init>
  MX_UART7_Init();
 8000976:	f000 fe73 	bl	8001660 <MX_UART7_Init>
  MX_FMC_Init();
 800097a:	f000 ff01 	bl	8001780 <MX_FMC_Init>
  MX_DMA2D_Init();
 800097e:	f000 fa57 	bl	8000e30 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000982:	f001 fced 	bl	8002360 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000986:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800098a:	2000      	movs	r0, #0
 800098c:	f001 fd80 	bl	8002490 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000990:	f001 fd56 	bl	8002440 <BSP_LCD_GetXSize>
 8000994:	4604      	mov	r4, r0
 8000996:	f001 fd67 	bl	8002468 <BSP_LCD_GetYSize>
 800099a:	4603      	mov	r3, r0
 800099c:	fb03 f304 	mul.w	r3, r3, r4
 80009a0:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4619      	mov	r1, r3
 80009a8:	2001      	movs	r0, #1
 80009aa:	f001 fd71 	bl	8002490 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80009ae:	f001 fecd 	bl	800274c <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f001 fdcc 	bl	8002550 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80009b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009bc:	f001 fe24 	bl	8002608 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 80009c0:	484c      	ldr	r0, [pc, #304]	; (8000af4 <main+0x1cc>)
 80009c2:	f001 fe07 	bl	80025d4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80009c6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ca:	f001 fdd1 	bl	8002570 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80009ce:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009d2:	f001 fde5 	bl	80025a0 <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80009d6:	f001 fd33 	bl	8002440 <BSP_LCD_GetXSize>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29c      	uxth	r4, r3
 80009de:	f001 fd43 	bl	8002468 <BSP_LCD_GetYSize>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4619      	mov	r1, r3
 80009e8:	4620      	mov	r0, r4
 80009ea:	f002 f9c5 	bl	8002d78 <BSP_TS_Init>
	HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 80009ee:	2201      	movs	r2, #1
 80009f0:	4941      	ldr	r1, [pc, #260]	; (8000af8 <main+0x1d0>)
 80009f2:	4842      	ldr	r0, [pc, #264]	; (8000afc <main+0x1d4>)
 80009f4:	f008 fdfc 	bl	80095f0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex_LCD */
  osMutexDef(myMutex_LCD);
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  myMutex_LCDHandle = osMutexCreate(osMutex(myMutex_LCD));
 8000a04:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f009 fee0 	bl	800a7ce <osMutexCreate>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a3b      	ldr	r2, [pc, #236]	; (8000b00 <main+0x1d8>)
 8000a12:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 1, uint8_t);
 8000a14:	4b3b      	ldr	r3, [pc, #236]	; (8000b04 <main+0x1dc>)
 8000a16:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 8000a20:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f009 fee9 	bl	800a7fe <osMessageCreate>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a36      	ldr	r2, [pc, #216]	; (8000b08 <main+0x1e0>)
 8000a30:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000a32:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <main+0x1e4>)
 8000a34:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000a38:	461d      	mov	r5, r3
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a46:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f009 fe5e 	bl	800a70e <osThreadCreate>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <main+0x1e8>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* definition and creation of RRacket */
  osThreadDef(RRacket, StartRRacket, osPriorityAboveNormal, 0, 1024);
 8000a58:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <main+0x1ec>)
 8000a5a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000a5e:	461d      	mov	r5, r3
 8000a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RRacketHandle = osThreadCreate(osThread(RRacket), NULL);
 8000a6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f009 fe4b 	bl	800a70e <osThreadCreate>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4a27      	ldr	r2, [pc, #156]	; (8000b18 <main+0x1f0>)
 8000a7c:	6013      	str	r3, [r2, #0]

  /* definition and creation of BallDisplay */
  osThreadDef(BallDisplay, StartBall, osPriorityHigh, 0, 1024);
 8000a7e:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <main+0x1f4>)
 8000a80:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000a84:	461d      	mov	r5, r3
 8000a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BallDisplayHandle = osThreadCreate(osThread(BallDisplay), NULL);
 8000a92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f009 fe38 	bl	800a70e <osThreadCreate>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <main+0x1f8>)
 8000aa2:	6013      	str	r3, [r2, #0]

  /* definition and creation of BgChanger */
  osThreadDef(BgChanger, StartBgChanger, osPriorityBelowNormal, 0, 1024);
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <main+0x1fc>)
 8000aa6:	f107 0420 	add.w	r4, r7, #32
 8000aaa:	461d      	mov	r5, r3
 8000aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BgChangerHandle = osThreadCreate(osThread(BgChanger), NULL);
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f009 fe25 	bl	800a70e <osThreadCreate>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <main+0x200>)
 8000ac8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Transmitter */
  osThreadDef(Transmitter, StartTransmitter, osPriorityNormal, 0, 128);
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <main+0x204>)
 8000acc:	1d3c      	adds	r4, r7, #4
 8000ace:	461d      	mov	r5, r3
 8000ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ad8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TransmitterHandle = osThreadCreate(osThread(Transmitter), NULL);
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f009 fe14 	bl	800a70e <osThreadCreate>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <main+0x208>)
 8000aea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000aec:	f009 fe08 	bl	800a700 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000af0:	e7fe      	b.n	8000af0 <main+0x1c8>
 8000af2:	bf00      	nop
 8000af4:	20000038 	.word	0x20000038
 8000af8:	20008ba0 	.word	0x20008ba0
 8000afc:	20008964 	.word	0x20008964
 8000b00:	20008b9c 	.word	0x20008b9c
 8000b04:	0800ce5c 	.word	0x0800ce5c
 8000b08:	20008bb0 	.word	0x20008bb0
 8000b0c:	0800ce6c 	.word	0x0800ce6c
 8000b10:	200085e4 	.word	0x200085e4
 8000b14:	0800ce88 	.word	0x0800ce88
 8000b18:	20008a18 	.word	0x20008a18
 8000b1c:	0800cea4 	.word	0x0800cea4
 8000b20:	20008bac 	.word	0x20008bac
 8000b24:	0800cec0 	.word	0x0800cec0
 8000b28:	20008960 	.word	0x20008960
 8000b2c:	0800cedc 	.word	0x0800cedc
 8000b30:	200087a4 	.word	0x200087a4

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0b4      	sub	sp, #208	; 0xd0
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b3e:	2230      	movs	r2, #48	; 0x30
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f00c f95a 	bl	800cdfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	2284      	movs	r2, #132	; 0x84
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f00c f94b 	bl	800cdfc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b66:	f005 fd89 	bl	800667c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b47      	ldr	r3, [pc, #284]	; (8000c88 <SystemClock_Config+0x154>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <SystemClock_Config+0x154>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b44      	ldr	r3, [pc, #272]	; (8000c88 <SystemClock_Config+0x154>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <SystemClock_Config+0x158>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a41      	ldr	r2, [pc, #260]	; (8000c8c <SystemClock_Config+0x158>)
 8000b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <SystemClock_Config+0x158>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bbc:	2319      	movs	r3, #25
 8000bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000bc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000bd0:	2309      	movs	r3, #9
 8000bd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f005 fdae 	bl	800673c <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000be6:	f001 fa11 	bl	800200c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bea:	f005 fd57 	bl	800669c <HAL_PWREx_EnableOverDrive>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bf4:	f001 fa0a 	bl	800200c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c1a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c1e:	2106      	movs	r1, #6
 8000c20:	4618      	mov	r0, r3
 8000c22:	f006 f82f 	bl	8006c84 <HAL_RCC_ClockConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000c2c:	f001 f9ee 	bl	800200c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <SystemClock_Config+0x15c>)
 8000c32:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c38:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c42:	2303      	movs	r3, #3
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c56:	2300      	movs	r3, #0
 8000c58:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f006 fa10 	bl	8007094 <HAL_RCCEx_PeriphCLKConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000c7a:	f001 f9c7 	bl	800200c <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	37d0      	adds	r7, #208	; 0xd0
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	00015868 	.word	0x00015868

08000c94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000ca8:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <MX_ADC1_Init+0x9c>)
 8000caa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <MX_ADC1_Init+0xa0>)
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cf6:	f002 feb9 	bl	8003a6c <HAL_ADC_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d00:	f001 f984 	bl	800200c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000d16:	f003 f83f 	bl	8003d98 <HAL_ADC_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d20:	f001 f974 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200088d0 	.word	0x200088d0
 8000d30:	40012000 	.word	0x40012000
 8000d34:	0f000001 	.word	0x0f000001

08000d38 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d4c:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <MX_ADC3_Init+0x9c>)
 8000d4e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d56:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <MX_ADC3_Init+0xa0>)
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d9a:	f002 fe67 	bl	8003a6c <HAL_ADC_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000da4:	f001 f932 	bl	800200c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000da8:	2306      	movs	r3, #6
 8000daa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000dba:	f002 ffed 	bl	8003d98 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000dc4:	f001 f922 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20008918 	.word	0x20008918
 8000dd4:	40012200 	.word	0x40012200
 8000dd8:	0f000001 	.word	0x0f000001

08000ddc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000de2:	463b      	mov	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_DAC_Init+0x4c>)
 8000dec:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <MX_DAC_Init+0x50>)
 8000dee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_DAC_Init+0x4c>)
 8000df2:	f003 faf7 	bl	80043e4 <HAL_DAC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000dfc:	f001 f906 	bl	800200c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_DAC_Init+0x4c>)
 8000e10:	f003 fb5e 	bl	80044d0 <HAL_DAC_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e1a:	f001 f8f7 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200089e4 	.word	0x200089e4
 8000e2c:	40007400 	.word	0x40007400

08000e30 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e36:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <MX_DMA2D_Init+0x60>)
 8000e38:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e64:	4809      	ldr	r0, [pc, #36]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e66:	f003 fd6b 	bl	8004940 <HAL_DMA2D_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000e70:	f001 f8cc 	bl	800200c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e74:	2101      	movs	r1, #1
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e78:	f003 fec0 	bl	8004bfc <HAL_DMA2D_ConfigLayer>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000e82:	f001 f8c3 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20008ae8 	.word	0x20008ae8
 8000e90:	4002b000 	.word	0x4002b000

08000e94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <MX_I2C1_Init+0x78>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <MX_I2C1_Init+0x7c>)
 8000ea2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ece:	480e      	ldr	r0, [pc, #56]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ed0:	f004 faac 	bl	800542c <HAL_I2C_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eda:	f001 f897 	bl	800200c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ee2:	f004 ffbb 	bl	8005e5c <HAL_I2CEx_ConfigAnalogFilter>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000eec:	f001 f88e 	bl	800200c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ef4:	f004 fffd 	bl	8005ef2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000efe:	f001 f885 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20008758 	.word	0x20008758
 8000f0c:	40005400 	.word	0x40005400
 8000f10:	00c0eaff 	.word	0x00c0eaff

08000f14 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <MX_I2C3_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <MX_I2C3_Init+0x7c>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f4e:	480e      	ldr	r0, [pc, #56]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f50:	f004 fa6c 	bl	800542c <HAL_I2C_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f5a:	f001 f857 	bl	800200c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f62:	f004 ff7b 	bl	8005e5c <HAL_I2CEx_ConfigAnalogFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f6c:	f001 f84e 	bl	800200c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f74:	f004 ffbd 	bl	8005ef2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f001 f845 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200085e8 	.word	0x200085e8
 8000f8c:	40005c00 	.word	0x40005c00
 8000f90:	00c0eaff 	.word	0x00c0eaff

08000f94 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08e      	sub	sp, #56	; 0x38
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2234      	movs	r2, #52	; 0x34
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00b ff2b 	bl	800cdfc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fa8:	4a3a      	ldr	r2, [pc, #232]	; (8001094 <MX_LTDC_Init+0x100>)
 8000faa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000fac:	4b38      	ldr	r3, [pc, #224]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fb2:	4b37      	ldr	r3, [pc, #220]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fbe:	4b34      	ldr	r3, [pc, #208]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000fc4:	4b32      	ldr	r3, [pc, #200]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fc6:	2228      	movs	r2, #40	; 0x28
 8000fc8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000fca:	4b31      	ldr	r3, [pc, #196]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fcc:	2209      	movs	r2, #9
 8000fce:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fd2:	2235      	movs	r2, #53	; 0x35
 8000fd4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fd8:	220b      	movs	r2, #11
 8000fda:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fde:	f240 2215 	movw	r2, #533	; 0x215
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fe6:	f240 121b 	movw	r2, #283	; 0x11b
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fee:	f240 2235 	movw	r2, #565	; 0x235
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000ff6:	f240 121d 	movw	r2, #285	; 0x11d
 8000ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <MX_LTDC_Init+0xfc>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MX_LTDC_Init+0xfc>)
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001014:	481e      	ldr	r0, [pc, #120]	; (8001090 <MX_LTDC_Init+0xfc>)
 8001016:	f004 ffb9 	bl	8005f8c <HAL_LTDC_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001020:	f000 fff4 	bl	800200c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001028:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800102c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001032:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001036:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001038:	2302      	movs	r3, #2
 800103a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800103c:	23ff      	movs	r3, #255	; 0xff
 800103e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001044:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001048:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800104a:	2307      	movs	r3, #7
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800104e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001054:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800105a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_LTDC_Init+0xfc>)
 800107a:	f005 f919 	bl	80062b0 <HAL_LTDC_ConfigLayer>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001084:	f000 ffc2 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3738      	adds	r7, #56	; 0x38
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20008828 	.word	0x20008828
 8001094:	40016800 	.word	0x40016800

08001098 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b092      	sub	sp, #72	; 0x48
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800109e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	222c      	movs	r2, #44	; 0x2c
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f00b fe9e 	bl	800cdfc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MX_RTC_Init+0x144>)
 80010c2:	4a47      	ldr	r2, [pc, #284]	; (80011e0 <MX_RTC_Init+0x148>)
 80010c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010c6:	4b45      	ldr	r3, [pc, #276]	; (80011dc <MX_RTC_Init+0x144>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010cc:	4b43      	ldr	r3, [pc, #268]	; (80011dc <MX_RTC_Init+0x144>)
 80010ce:	227f      	movs	r2, #127	; 0x7f
 80010d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010d2:	4b42      	ldr	r3, [pc, #264]	; (80011dc <MX_RTC_Init+0x144>)
 80010d4:	22ff      	movs	r2, #255	; 0xff
 80010d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MX_RTC_Init+0x144>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <MX_RTC_Init+0x144>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010e4:	4b3d      	ldr	r3, [pc, #244]	; (80011dc <MX_RTC_Init+0x144>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010ea:	483c      	ldr	r0, [pc, #240]	; (80011dc <MX_RTC_Init+0x144>)
 80010ec:	f006 fbc0 	bl	8007870 <HAL_RTC_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80010f6:	f000 ff89 	bl	800200c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001106:	2300      	movs	r3, #0
 8001108:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	482f      	ldr	r0, [pc, #188]	; (80011dc <MX_RTC_Init+0x144>)
 800111e:	f006 fc23 	bl	8007968 <HAL_RTC_SetTime>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001128:	f000 ff70 	bl	800200c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800112c:	2301      	movs	r3, #1
 800112e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001138:	2301      	movs	r3, #1
 800113a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001148:	2201      	movs	r2, #1
 800114a:	4619      	mov	r1, r3
 800114c:	4823      	ldr	r0, [pc, #140]	; (80011dc <MX_RTC_Init+0x144>)
 800114e:	f006 fcc9 	bl	8007ae4 <HAL_RTC_SetDate>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001158:	f000 ff58 	bl	800200c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800115c:	2300      	movs	r3, #0
 800115e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001160:	2300      	movs	r3, #0
 8001162:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001164:	2300      	movs	r3, #0
 8001166:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001180:	2301      	movs	r3, #1
 8001182:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800118c:	463b      	mov	r3, r7
 800118e:	2201      	movs	r2, #1
 8001190:	4619      	mov	r1, r3
 8001192:	4812      	ldr	r0, [pc, #72]	; (80011dc <MX_RTC_Init+0x144>)
 8001194:	f006 fd4e 	bl	8007c34 <HAL_RTC_SetAlarm>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800119e:	f000 ff35 	bl	800200c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80011a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	2201      	movs	r2, #1
 80011ac:	4619      	mov	r1, r3
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <MX_RTC_Init+0x144>)
 80011b0:	f006 fd40 	bl	8007c34 <HAL_RTC_SetAlarm>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80011ba:	f000 ff27 	bl	800200c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80011be:	2202      	movs	r2, #2
 80011c0:	2100      	movs	r1, #0
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <MX_RTC_Init+0x144>)
 80011c4:	f006 fec0 	bl	8007f48 <HAL_RTCEx_SetTimeStamp>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80011ce:	f000 ff1d 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3748      	adds	r7, #72	; 0x48
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200089f8 	.word	0x200089f8
 80011e0:	40002800 	.word	0x40002800

080011e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_SPI2_Init+0x74>)
 80011ea:	4a1c      	ldr	r2, [pc, #112]	; (800125c <MX_SPI2_Init+0x78>)
 80011ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_SPI2_Init+0x74>)
 80011f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_SPI2_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_SPI2_Init+0x74>)
 80011fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001202:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_SPI2_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <MX_SPI2_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_SPI2_Init+0x74>)
 8001212:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001216:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_SPI2_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_SPI2_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_SPI2_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_SPI2_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_SPI2_Init+0x74>)
 8001232:	2207      	movs	r2, #7
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_SPI2_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_SPI2_Init+0x74>)
 800123e:	2208      	movs	r2, #8
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_SPI2_Init+0x74>)
 8001244:	f006 ff55 	bl	80080f2 <HAL_SPI_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800124e:	f000 fedd 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20008634 	.word	0x20008634
 800125c:	40003800 	.word	0x40003800

08001260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <MX_TIM1_Init+0xa0>)
 8001280:	4a20      	ldr	r2, [pc, #128]	; (8001304 <MX_TIM1_Init+0xa4>)
 8001282:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_TIM1_Init+0xa0>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_TIM1_Init+0xa0>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_TIM1_Init+0xa0>)
 8001292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001296:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_TIM1_Init+0xa0>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012aa:	4815      	ldr	r0, [pc, #84]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012ac:	f006 ffb3 	bl	8008216 <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80012b6:	f000 fea9 	bl	800200c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	480e      	ldr	r0, [pc, #56]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012c8:	f007 fa66 	bl	8008798 <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012d2:	f000 fe9b 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012e8:	f007 ffae 	bl	8009248 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012f2:	f000 fe8b 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20008a1c 	.word	0x20008a1c
 8001304:	40010000 	.word	0x40010000

08001308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_TIM2_Init+0x98>)
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_TIM2_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134e:	4814      	ldr	r0, [pc, #80]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001350:	f006 ff61 	bl	8008216 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800135a:	f000 fe57 	bl	800200c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_TIM2_Init+0x98>)
 800136c:	f007 fa14 	bl	8008798 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001376:	f000 fe49 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001388:	f007 ff5e 	bl	8009248 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001392:	f000 fe3b 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20008b28 	.word	0x20008b28

080013a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d2:	4b25      	ldr	r3, [pc, #148]	; (8001468 <MX_TIM3_Init+0xc4>)
 80013d4:	4a25      	ldr	r2, [pc, #148]	; (800146c <MX_TIM3_Init+0xc8>)
 80013d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <MX_TIM3_Init+0xc4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_TIM3_Init+0xc4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013e4:	4b20      	ldr	r3, [pc, #128]	; (8001468 <MX_TIM3_Init+0xc4>)
 80013e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <MX_TIM3_Init+0xc4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_TIM3_Init+0xc4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013f8:	481b      	ldr	r0, [pc, #108]	; (8001468 <MX_TIM3_Init+0xc4>)
 80013fa:	f006 ff0c 	bl	8008216 <HAL_TIM_Base_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001404:	f000 fe02 	bl	800200c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800140e:	f107 0320 	add.w	r3, r7, #32
 8001412:	4619      	mov	r1, r3
 8001414:	4814      	ldr	r0, [pc, #80]	; (8001468 <MX_TIM3_Init+0xc4>)
 8001416:	f007 f9bf 	bl	8008798 <HAL_TIM_ConfigClockSource>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001420:	f000 fdf4 	bl	800200c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4619      	mov	r1, r3
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_TIM3_Init+0xc4>)
 8001434:	f007 fa76 	bl	8008924 <HAL_TIM_SlaveConfigSynchro>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800143e:	f000 fde5 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	4619      	mov	r1, r3
 800144e:	4806      	ldr	r0, [pc, #24]	; (8001468 <MX_TIM3_Init+0xc4>)
 8001450:	f007 fefa 	bl	8009248 <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800145a:	f000 fdd7 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	; 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200087e8 	.word	0x200087e8
 800146c:	40000400 	.word	0x40000400

08001470 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_TIM5_Init+0x94>)
 8001490:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <MX_TIM5_Init+0x98>)
 8001492:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_TIM5_Init+0x94>)
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_TIM5_Init+0x94>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_TIM5_Init+0x94>)
 80014a2:	f04f 32ff 	mov.w	r2, #4294967295
 80014a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_TIM5_Init+0x94>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_TIM5_Init+0x94>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014b4:	4813      	ldr	r0, [pc, #76]	; (8001504 <MX_TIM5_Init+0x94>)
 80014b6:	f006 feae 	bl	8008216 <HAL_TIM_Base_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80014c0:	f000 fda4 	bl	800200c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	4619      	mov	r1, r3
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <MX_TIM5_Init+0x94>)
 80014d2:	f007 f961 	bl	8008798 <HAL_TIM_ConfigClockSource>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80014dc:	f000 fd96 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_TIM5_Init+0x94>)
 80014ee:	f007 feab 	bl	8009248 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80014f8:	f000 fd88 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200087a8 	.word	0x200087a8
 8001508:	40000c00 	.word	0x40000c00

0800150c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b09a      	sub	sp, #104	; 0x68
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001512:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	222c      	movs	r2, #44	; 0x2c
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f00b fc58 	bl	800cdfc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800154c:	4b42      	ldr	r3, [pc, #264]	; (8001658 <MX_TIM8_Init+0x14c>)
 800154e:	4a43      	ldr	r2, [pc, #268]	; (800165c <MX_TIM8_Init+0x150>)
 8001550:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001552:	4b41      	ldr	r3, [pc, #260]	; (8001658 <MX_TIM8_Init+0x14c>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <MX_TIM8_Init+0x14c>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800155e:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <MX_TIM8_Init+0x14c>)
 8001560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001564:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <MX_TIM8_Init+0x14c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800156c:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <MX_TIM8_Init+0x14c>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001572:	4b39      	ldr	r3, [pc, #228]	; (8001658 <MX_TIM8_Init+0x14c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001578:	4837      	ldr	r0, [pc, #220]	; (8001658 <MX_TIM8_Init+0x14c>)
 800157a:	f006 fe4c 	bl	8008216 <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001584:	f000 fd42 	bl	800200c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001592:	4619      	mov	r1, r3
 8001594:	4830      	ldr	r0, [pc, #192]	; (8001658 <MX_TIM8_Init+0x14c>)
 8001596:	f007 f8ff 	bl	8008798 <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80015a0:	f000 fd34 	bl	800200c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80015a4:	482c      	ldr	r0, [pc, #176]	; (8001658 <MX_TIM8_Init+0x14c>)
 80015a6:	f006 fe8b 	bl	80082c0 <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80015b0:	f000 fd2c 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015c4:	4619      	mov	r1, r3
 80015c6:	4824      	ldr	r0, [pc, #144]	; (8001658 <MX_TIM8_Init+0x14c>)
 80015c8:	f007 fe3e 	bl	8009248 <HAL_TIMEx_MasterConfigSynchronization>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80015d2:	f000 fd1b 	bl	800200c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d6:	2360      	movs	r3, #96	; 0x60
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015de:	2300      	movs	r3, #0
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f2:	220c      	movs	r2, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	4818      	ldr	r0, [pc, #96]	; (8001658 <MX_TIM8_Init+0x14c>)
 80015f8:	f006 ffb6 	bl	8008568 <HAL_TIM_PWM_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001602:	f000 fd03 	bl	800200c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001628:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM8_Init+0x14c>)
 800163c:	f007 fe92 	bl	8009364 <HAL_TIMEx_ConfigBreakDeadTime>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001646:	f000 fce1 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800164a:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM8_Init+0x14c>)
 800164c:	f001 ff48 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 8001650:	bf00      	nop
 8001652:	3768      	adds	r7, #104	; 0x68
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20008718 	.word	0x20008718
 800165c:	40010400 	.word	0x40010400

08001660 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_UART7_Init+0x58>)
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <MX_UART7_Init+0x5c>)
 8001668:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MX_UART7_Init+0x58>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_UART7_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_UART7_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_UART7_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_UART7_Init+0x58>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_UART7_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_UART7_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_UART7_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_UART7_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_UART7_Init+0x58>)
 80016a4:	f007 fefa 	bl	800949c <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80016ae:	f000 fcad 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20008698 	.word	0x20008698
 80016bc:	40007800 	.word	0x40007800

080016c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016c6:	4a15      	ldr	r2, [pc, #84]	; (800171c <MX_USART1_UART_Init+0x5c>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_USART1_UART_Init+0x58>)
 8001704:	f007 feca 	bl	800949c <HAL_UART_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800170e:	f000 fc7d 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20008964 	.word	0x20008964
 800171c:	40011000 	.word	0x40011000

08001720 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001726:	4a15      	ldr	r2, [pc, #84]	; (800177c <MX_USART6_UART_Init+0x5c>)
 8001728:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <MX_USART6_UART_Init+0x58>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_USART6_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART6_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART6_UART_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001764:	f007 fe9a 	bl	800949c <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800176e:	f000 fc4d 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20008a68 	.word	0x20008a68
 800177c:	40011400 	.word	0x40011400

08001780 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <MX_FMC_Init+0x94>)
 800179a:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <MX_FMC_Init+0x98>)
 800179c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <MX_FMC_Init+0x94>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_FMC_Init+0x94>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_FMC_Init+0x94>)
 80017ac:	2204      	movs	r2, #4
 80017ae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_FMC_Init+0x94>)
 80017b2:	2210      	movs	r2, #16
 80017b4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_FMC_Init+0x94>)
 80017b8:	2240      	movs	r2, #64	; 0x40
 80017ba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_FMC_Init+0x94>)
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_FMC_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_FMC_Init+0x94>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_FMC_Init+0x94>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_FMC_Init+0x94>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80017da:	2310      	movs	r3, #16
 80017dc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80017de:	2310      	movs	r3, #16
 80017e0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80017e2:	2310      	movs	r3, #16
 80017e4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80017e6:	2310      	movs	r3, #16
 80017e8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80017ea:	2310      	movs	r3, #16
 80017ec:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80017ee:	2310      	movs	r3, #16
 80017f0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80017f2:	2310      	movs	r3, #16
 80017f4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <MX_FMC_Init+0x94>)
 80017fc:	f006 fbfa 	bl	8007ff4 <HAL_SDRAM_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001806:	f000 fc01 	bl	800200c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20008b68 	.word	0x20008b68
 8001818:	a0000140 	.word	0xa0000140

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b090      	sub	sp, #64	; 0x40
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001832:	4bb0      	ldr	r3, [pc, #704]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4aaf      	ldr	r2, [pc, #700]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4bad      	ldr	r3, [pc, #692]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	4baa      	ldr	r3, [pc, #680]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4aa9      	ldr	r2, [pc, #676]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4ba7      	ldr	r3, [pc, #668]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	4ba4      	ldr	r3, [pc, #656]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4aa3      	ldr	r2, [pc, #652]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4ba1      	ldr	r3, [pc, #644]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800187a:	4b9e      	ldr	r3, [pc, #632]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a9d      	ldr	r2, [pc, #628]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b9b      	ldr	r3, [pc, #620]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001892:	4b98      	ldr	r3, [pc, #608]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a97      	ldr	r2, [pc, #604]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001898:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b95      	ldr	r3, [pc, #596]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018aa:	4b92      	ldr	r3, [pc, #584]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a91      	ldr	r2, [pc, #580]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b8f      	ldr	r3, [pc, #572]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80018c2:	4b8c      	ldr	r3, [pc, #560]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a8b      	ldr	r2, [pc, #556]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b89      	ldr	r3, [pc, #548]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018da:	4b86      	ldr	r3, [pc, #536]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a85      	ldr	r2, [pc, #532]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b83      	ldr	r3, [pc, #524]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	4b80      	ldr	r3, [pc, #512]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a7f      	ldr	r2, [pc, #508]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b7d      	ldr	r3, [pc, #500]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800190a:	4b7a      	ldr	r3, [pc, #488]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a79      	ldr	r2, [pc, #484]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001910:	f043 0320 	orr.w	r3, r3, #32
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b77      	ldr	r3, [pc, #476]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001922:	4b74      	ldr	r3, [pc, #464]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a73      	ldr	r2, [pc, #460]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b71      	ldr	r3, [pc, #452]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	2110      	movs	r1, #16
 800193e:	486e      	ldr	r0, [pc, #440]	; (8001af8 <MX_GPIO_Init+0x2dc>)
 8001940:	f003 fd5a 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2160      	movs	r1, #96	; 0x60
 8001948:	486c      	ldr	r0, [pc, #432]	; (8001afc <MX_GPIO_Init+0x2e0>)
 800194a:	f003 fd55 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2120      	movs	r1, #32
 8001952:	486b      	ldr	r0, [pc, #428]	; (8001b00 <MX_GPIO_Init+0x2e4>)
 8001954:	f003 fd50 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2108      	movs	r1, #8
 800195c:	4868      	ldr	r0, [pc, #416]	; (8001b00 <MX_GPIO_Init+0x2e4>)
 800195e:	f003 fd4b 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2108      	movs	r1, #8
 8001966:	4867      	ldr	r0, [pc, #412]	; (8001b04 <MX_GPIO_Init+0x2e8>)
 8001968:	f003 fd46 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	2108      	movs	r1, #8
 8001970:	4865      	ldr	r0, [pc, #404]	; (8001b08 <MX_GPIO_Init+0x2ec>)
 8001972:	f003 fd41 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001976:	2201      	movs	r2, #1
 8001978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197c:	4861      	ldr	r0, [pc, #388]	; (8001b04 <MX_GPIO_Init+0x2e8>)
 800197e:	f003 fd3b 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001982:	2200      	movs	r2, #0
 8001984:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001988:	4860      	ldr	r0, [pc, #384]	; (8001b0c <MX_GPIO_Init+0x2f0>)
 800198a:	f003 fd35 	bl	80053f8 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	2108      	movs	r1, #8
 8001992:	485f      	ldr	r0, [pc, #380]	; (8001b10 <MX_GPIO_Init+0x2f4>)
 8001994:	f003 fd30 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001998:	2308      	movs	r3, #8
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199c:	2300      	movs	r3, #0
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a8:	4619      	mov	r1, r3
 80019aa:	4854      	ldr	r0, [pc, #336]	; (8001afc <MX_GPIO_Init+0x2e0>)
 80019ac:	f003 fa54 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80019b0:	f643 0323 	movw	r3, #14371	; 0x3823
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019c2:	230a      	movs	r3, #10
 80019c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ca:	4619      	mov	r1, r3
 80019cc:	484a      	ldr	r0, [pc, #296]	; (8001af8 <MX_GPIO_Init+0x2dc>)
 80019ce:	f003 fa43 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80019d2:	2310      	movs	r3, #16
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e6:	4619      	mov	r1, r3
 80019e8:	4843      	ldr	r0, [pc, #268]	; (8001af8 <MX_GPIO_Init+0x2dc>)
 80019ea:	f003 fa35 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 80019ee:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f4:	2300      	movs	r3, #0
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a00:	4619      	mov	r1, r3
 8001a02:	4844      	ldr	r0, [pc, #272]	; (8001b14 <MX_GPIO_Init+0x2f8>)
 8001a04:	f003 fa28 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001a08:	2360      	movs	r3, #96	; 0x60
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4837      	ldr	r0, [pc, #220]	; (8001afc <MX_GPIO_Init+0x2e0>)
 8001a20:	f003 fa1a 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a36:	4619      	mov	r1, r3
 8001a38:	4837      	ldr	r0, [pc, #220]	; (8001b18 <MX_GPIO_Init+0x2fc>)
 8001a3a:	f003 fa0d 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a3e:	2340      	movs	r3, #64	; 0x40
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <MX_GPIO_Init+0x300>)
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4e:	4619      	mov	r1, r3
 8001a50:	482b      	ldr	r0, [pc, #172]	; (8001b00 <MX_GPIO_Init+0x2e4>)
 8001a52:	f003 fa01 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001a56:	2328      	movs	r3, #40	; 0x28
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4824      	ldr	r0, [pc, #144]	; (8001b00 <MX_GPIO_Init+0x2e4>)
 8001a6e:	f003 f9f3 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001a72:	f241 0308 	movw	r3, #4104	; 0x1008
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	481e      	ldr	r0, [pc, #120]	; (8001b04 <MX_GPIO_Init+0x2e8>)
 8001a8c:	f003 f9e4 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a96:	2300      	movs	r3, #0
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481e      	ldr	r0, [pc, #120]	; (8001b20 <MX_GPIO_Init+0x304>)
 8001aa6:	f003 f9d7 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001aaa:	2308      	movs	r3, #8
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4811      	ldr	r0, [pc, #68]	; (8001b08 <MX_GPIO_Init+0x2ec>)
 8001ac2:	f003 f9c9 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ac6:	2310      	movs	r3, #16
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aca:	2300      	movs	r3, #0
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4809      	ldr	r0, [pc, #36]	; (8001b00 <MX_GPIO_Init+0x2e4>)
 8001ada:	f003 f9bd 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001ade:	f248 0304 	movw	r3, #32772	; 0x8004
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af0:	4619      	mov	r1, r3
 8001af2:	e017      	b.n	8001b24 <MX_GPIO_Init+0x308>
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40022800 	.word	0x40022800
 8001b0c:	40021c00 	.word	0x40021c00
 8001b10:	40021800 	.word	0x40021800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40022400 	.word	0x40022400
 8001b1c:	10120000 	.word	0x10120000
 8001b20:	40020800 	.word	0x40020800
 8001b24:	4836      	ldr	r0, [pc, #216]	; (8001c00 <MX_GPIO_Init+0x3e4>)
 8001b26:	f003 f997 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001b2a:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b40:	4619      	mov	r1, r3
 8001b42:	482f      	ldr	r0, [pc, #188]	; (8001c00 <MX_GPIO_Init+0x3e4>)
 8001b44:	f003 f988 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <MX_GPIO_Init+0x3e8>)
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	482a      	ldr	r0, [pc, #168]	; (8001c08 <MX_GPIO_Init+0x3ec>)
 8001b5e:	f003 f97b 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b62:	2310      	movs	r3, #16
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b72:	230a      	movs	r3, #10
 8001b74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4820      	ldr	r0, [pc, #128]	; (8001c00 <MX_GPIO_Init+0x3e4>)
 8001b7e:	f003 f96b 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001b82:	2384      	movs	r3, #132	; 0x84
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b86:	2300      	movs	r3, #0
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b92:	4619      	mov	r1, r3
 8001b94:	481d      	ldr	r0, [pc, #116]	; (8001c0c <MX_GPIO_Init+0x3f0>)
 8001b96:	f003 f95f 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001baa:	230a      	movs	r3, #10
 8001bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4816      	ldr	r0, [pc, #88]	; (8001c10 <MX_GPIO_Init+0x3f4>)
 8001bb6:	f003 f94f 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001bba:	2308      	movs	r3, #8
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480e      	ldr	r0, [pc, #56]	; (8001c0c <MX_GPIO_Init+0x3f0>)
 8001bd2:	f003 f941 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001bd6:	2328      	movs	r3, #40	; 0x28
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001be6:	230a      	movs	r3, #10
 8001be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4808      	ldr	r0, [pc, #32]	; (8001c14 <MX_GPIO_Init+0x3f8>)
 8001bf2:	f003 f931 	bl	8004e58 <HAL_GPIO_Init>

}
 8001bf6:	bf00      	nop
 8001bf8:	3740      	adds	r7, #64	; 0x40
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40021c00 	.word	0x40021c00
 8001c04:	10120000 	.word	0x10120000
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	40021800 	.word	0x40021800
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020000 	.word	0x40020000

08001c18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

	int16_t xballe=rxbuffer[1] << 8 | rxbuffer[2];
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_UART_RxCpltCallback+0x90>)
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_UART_RxCpltCallback+0x90>)
 8001c2a:	789b      	ldrb	r3, [r3, #2]
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	81fb      	strh	r3, [r7, #14]
	int16_t yballe=rxbuffer[3] << 8 | rxbuffer[4];
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <HAL_UART_RxCpltCallback+0x90>)
 8001c36:	78db      	ldrb	r3, [r3, #3]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_UART_RxCpltCallback+0x90>)
 8001c3e:	791b      	ldrb	r3, [r3, #4]
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	81bb      	strh	r3, [r7, #12]

	if(uxQueueMessagesWaiting(myQueueU2HHandle) == 0){
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_UART_RxCpltCallback+0x94>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f009 fb07 	bl	800b260 <uxQueueMessagesWaiting>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d122      	bne.n	8001c9e <HAL_UART_RxCpltCallback+0x86>
		HAL_UART_Receive_IT(&huart1,rxbuffer,6);
 8001c58:	2206      	movs	r2, #6
 8001c5a:	4913      	ldr	r1, [pc, #76]	; (8001ca8 <HAL_UART_RxCpltCallback+0x90>)
 8001c5c:	4814      	ldr	r0, [pc, #80]	; (8001cb0 <HAL_UART_RxCpltCallback+0x98>)
 8001c5e:	f007 fcc7 	bl	80095f0 <HAL_UART_Receive_IT>
		xQueueSendFromISR(myQueueU2HHandle, &rxbuffer[0], 0);
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_UART_RxCpltCallback+0x94>)
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	2200      	movs	r2, #0
 8001c6a:	490f      	ldr	r1, [pc, #60]	; (8001ca8 <HAL_UART_RxCpltCallback+0x90>)
 8001c6c:	f009 f944 	bl	800aef8 <xQueueGenericSendFromISR>
		xQueueSendFromISR(myQueueU2HHandle, &xballe, 0);
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_UART_RxCpltCallback+0x94>)
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	f107 010e 	add.w	r1, r7, #14
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f009 f93c 	bl	800aef8 <xQueueGenericSendFromISR>
		xQueueSendFromISR(myQueueU2HHandle, &yballe, 0);
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_UART_RxCpltCallback+0x94>)
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	f107 010c 	add.w	r1, r7, #12
 8001c88:	2300      	movs	r3, #0
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f009 f934 	bl	800aef8 <xQueueGenericSendFromISR>
		xQueueSendFromISR(myQueueU2HHandle, &rxbuffer[5], 0);
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_UART_RxCpltCallback+0x94>)
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	2300      	movs	r3, #0
 8001c96:	2200      	movs	r2, #0
 8001c98:	4906      	ldr	r1, [pc, #24]	; (8001cb4 <HAL_UART_RxCpltCallback+0x9c>)
 8001c9a:	f009 f92d 	bl	800aef8 <xQueueGenericSendFromISR>
	}
}
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20008ba0 	.word	0x20008ba0
 8001cac:	20008bb0 	.word	0x20008bb0
 8001cb0:	20008964 	.word	0x20008964
 8001cb4:	20008ba5 	.word	0x20008ba5

08001cb8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8001cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cc4:	f008 fd6f 	bl	800a7a6 <osDelay>
 8001cc8:	e7fa      	b.n	8001cc0 <StartDefaultTask+0x8>
	...

08001ccc <StartRRacket>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRRacket */
void StartRRacket(void const * argument)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRRacket */
	int32_t joystick_h, joystick_v;
	joystick_h = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
	joystick_v = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
	int16_t x_RRacket_hold;
	int16_t y_RRacket_hold;

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]


	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	485b      	ldr	r0, [pc, #364]	; (8001e68 <StartRRacket+0x19c>)
 8001cfa:	f002 f84d 	bl	8003d98 <HAL_ADC_ConfigChannel>
	/* Infinite loop */
	for (;;) {
		x_RRacket_hold = x_RRacket;
 8001cfe:	4b5b      	ldr	r3, [pc, #364]	; (8001e6c <StartRRacket+0x1a0>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	83fb      	strh	r3, [r7, #30]
		y_RRacket_hold = y_RRacket;
 8001d04:	4b5a      	ldr	r3, [pc, #360]	; (8001e70 <StartRRacket+0x1a4>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	83bb      	strh	r3, [r7, #28]


		//Capture des valeurs des joysticks
		sConfig.Channel = ADC_CHANNEL_8;
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	60fb      	str	r3, [r7, #12]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	4619      	mov	r1, r3
 8001d14:	4854      	ldr	r0, [pc, #336]	; (8001e68 <StartRRacket+0x19c>)
 8001d16:	f002 f83f 	bl	8003d98 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001d1a:	4853      	ldr	r0, [pc, #332]	; (8001e68 <StartRRacket+0x19c>)
 8001d1c:	f001 feea 	bl	8003af4 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001d20:	bf00      	nop
 8001d22:	2164      	movs	r1, #100	; 0x64
 8001d24:	4850      	ldr	r0, [pc, #320]	; (8001e68 <StartRRacket+0x19c>)
 8001d26:	f001 ffa5 	bl	8003c74 <HAL_ADC_PollForConversion>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f8      	bne.n	8001d22 <StartRRacket+0x56>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001d30:	484d      	ldr	r0, [pc, #308]	; (8001e68 <StartRRacket+0x19c>)
 8001d32:	f002 f823 	bl	8003d7c <HAL_ADC_GetValue>
 8001d36:	4603      	mov	r3, r0
 8001d38:	623b      	str	r3, [r7, #32]

		HAL_ADC_Start(&hadc1);
 8001d3a:	484e      	ldr	r0, [pc, #312]	; (8001e74 <StartRRacket+0x1a8>)
 8001d3c:	f001 feda 	bl	8003af4 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001d40:	bf00      	nop
 8001d42:	2164      	movs	r1, #100	; 0x64
 8001d44:	484b      	ldr	r0, [pc, #300]	; (8001e74 <StartRRacket+0x1a8>)
 8001d46:	f001 ff95 	bl	8003c74 <HAL_ADC_PollForConversion>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f8      	bne.n	8001d42 <StartRRacket+0x76>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001d50:	4848      	ldr	r0, [pc, #288]	; (8001e74 <StartRRacket+0x1a8>)
 8001d52:	f002 f813 	bl	8003d7c <HAL_ADC_GetValue>
 8001d56:	4603      	mov	r3, r0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24

		//Actualisation des coordonnées
		x_RRacket -= (joystick_h - 2080)/100;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001d60:	4a45      	ldr	r2, [pc, #276]	; (8001e78 <StartRRacket+0x1ac>)
 8001d62:	fb82 1203 	smull	r1, r2, r2, r3
 8001d66:	1152      	asrs	r2, r2, #5
 8001d68:	17db      	asrs	r3, r3, #31
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <StartRRacket+0x1a0>)
 8001d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	b21a      	sxth	r2, r3
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <StartRRacket+0x1a0>)
 8001d7e:	801a      	strh	r2, [r3, #0]
		y_RRacket -= (joystick_v - 2080)/150;
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001d86:	4a3d      	ldr	r2, [pc, #244]	; (8001e7c <StartRRacket+0x1b0>)
 8001d88:	fb82 1203 	smull	r1, r2, r2, r3
 8001d8c:	1112      	asrs	r2, r2, #4
 8001d8e:	17db      	asrs	r3, r3, #31
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <StartRRacket+0x1a4>)
 8001d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <StartRRacket+0x1a4>)
 8001da4:	801a      	strh	r2, [r3, #0]

		// Cadrage des coordonnées RRacket
		if (x_RRacket <= 479+241) x_RRacket = 479+241;
 8001da6:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <StartRRacket+0x1a0>)
 8001da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dac:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8001db0:	dc03      	bgt.n	8001dba <StartRRacket+0xee>
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <StartRRacket+0x1a0>)
 8001db4:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001db8:	801a      	strh	r2, [r3, #0]

		if (x_RRacket >= 959 - width_rackets) x_RRacket = 959 - width_rackets;
 8001dba:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <StartRRacket+0x1a0>)
 8001dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	dd03      	ble.n	8001dd0 <StartRRacket+0x104>
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <StartRRacket+0x1a0>)
 8001dca:	f240 32b7 	movw	r2, #951	; 0x3b7
 8001dce:	801a      	strh	r2, [r3, #0]

		if (y_RRacket <= 0) y_RRacket = 0;
 8001dd0:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <StartRRacket+0x1a4>)
 8001dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	dc02      	bgt.n	8001de0 <StartRRacket+0x114>
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <StartRRacket+0x1a4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	801a      	strh	r2, [r3, #0]

		if (y_RRacket + height_rackets > 271) y_RRacket = 271 - height_rackets;
 8001de0:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <StartRRacket+0x1a4>)
 8001de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de6:	2be7      	cmp	r3, #231	; 0xe7
 8001de8:	dd02      	ble.n	8001df0 <StartRRacket+0x124>
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <StartRRacket+0x1a4>)
 8001dec:	22e7      	movs	r2, #231	; 0xe7
 8001dee:	801a      	strh	r2, [r3, #0]

		//Tracé de RRacket
		// Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <StartRRacket+0x1b4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f009 f91d 	bl	800b038 <xQueueSemaphoreTake>

		// Effaçage du précedent rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <StartRRacket+0x1b8>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <StartRRacket+0x140>
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e001      	b.n	8001e10 <StartRRacket+0x144>
 8001e0c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 fbad 	bl	8002570 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_RRacket_hold, y_RRacket_hold, width_rackets,
 8001e16:	8bf8      	ldrh	r0, [r7, #30]
 8001e18:	8bb9      	ldrh	r1, [r7, #28]
 8001e1a:	2328      	movs	r3, #40	; 0x28
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	f000 fc1b 	bl	8002658 <BSP_LCD_FillRect>
				height_rackets);

		// Création du nouveau rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <StartRRacket+0x1b8>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <StartRRacket+0x164>
 8001e2a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001e2e:	e001      	b.n	8001e34 <StartRRacket+0x168>
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fb9b 	bl	8002570 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_RRacket, y_RRacket, width_rackets, height_rackets);
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <StartRRacket+0x1a0>)
 8001e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e40:	b298      	uxth	r0, r3
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <StartRRacket+0x1a4>)
 8001e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	2328      	movs	r3, #40	; 0x28
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	f000 fc03 	bl	8002658 <BSP_LCD_FillRect>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <StartRRacket+0x1b4>)
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	f008 ff46 	bl	800acec <xQueueGenericSend>

		osDelay(40);
 8001e60:	2028      	movs	r0, #40	; 0x28
 8001e62:	f008 fca0 	bl	800a7a6 <osDelay>
		x_RRacket_hold = x_RRacket;
 8001e66:	e74a      	b.n	8001cfe <StartRRacket+0x32>
 8001e68:	20008918 	.word	0x20008918
 8001e6c:	20000028 	.word	0x20000028
 8001e70:	2000002a 	.word	0x2000002a
 8001e74:	200088d0 	.word	0x200088d0
 8001e78:	51eb851f 	.word	0x51eb851f
 8001e7c:	1b4e81b5 	.word	0x1b4e81b5
 8001e80:	20008b9c 	.word	0x20008b9c
 8001e84:	2000002c 	.word	0x2000002c

08001e88 <StartBall>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBall */
void StartBall(void const * argument)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBall */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f008 fc88 	bl	800a7a6 <osDelay>
 8001e96:	e7fb      	b.n	8001e90 <StartBall+0x8>

08001e98 <StartBgChanger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBgChanger */
void StartBgChanger(void const * argument)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBgChanger */
//	uint8_t Message;
	uint8_t BP1=1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73bb      	strb	r3, [r7, #14]
	uint8_t state=0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
//	  xQueueReceive(myQueueU2HHandle, &Message, portMAX_DELAY);
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8001ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eac:	4833      	ldr	r0, [pc, #204]	; (8001f7c <StartBgChanger+0xe4>)
 8001eae:	f003 fa8b 	bl	80053c8 <HAL_GPIO_ReadPin>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	73bb      	strb	r3, [r7, #14]
	  switch(state){
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d052      	beq.n	8001f62 <StartBgChanger+0xca>
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	dc59      	bgt.n	8001f74 <StartBgChanger+0xdc>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <StartBgChanger+0x32>
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d006      	beq.n	8001ed6 <StartBgChanger+0x3e>
 8001ec8:	e054      	b.n	8001f74 <StartBgChanger+0xdc>
	  case 0:
		  if(!BP1) state = 1;
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d14e      	bne.n	8001f6e <StartBgChanger+0xd6>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
		  break;
 8001ed4:	e04b      	b.n	8001f6e <StartBgChanger+0xd6>
	  case 1:
		  couleur = !couleur;
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <StartBgChanger+0xe8>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	bf0c      	ite	eq
 8001ede:	2301      	moveq	r3, #1
 8001ee0:	2300      	movne	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <StartBgChanger+0xe8>)
 8001ee8:	701a      	strb	r2, [r3, #0]
		  if(couleur==0){
 8001eea:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <StartBgChanger+0xe8>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d11a      	bne.n	8001f28 <StartBgChanger+0x90>
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001ef2:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <StartBgChanger+0xec>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f04f 31ff 	mov.w	r1, #4294967295
 8001efa:	4618      	mov	r0, r3
 8001efc:	f009 f89c 	bl	800b038 <xQueueSemaphoreTake>
			  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 fb80 	bl	8002608 <BSP_LCD_Clear>
			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f08:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001f0c:	f000 fb30 	bl	8002570 <BSP_LCD_SetTextColor>
			  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f000 fb44 	bl	80025a0 <BSP_LCD_SetBackColor>
			  xSemaphoreGive(myMutex_LCDHandle);
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <StartBgChanger+0xec>)
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	f008 fee3 	bl	800acec <xQueueGenericSend>
 8001f26:	e019      	b.n	8001f5c <StartBgChanger+0xc4>
		  }
		  else{
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <StartBgChanger+0xec>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	4618      	mov	r0, r3
 8001f32:	f009 f881 	bl	800b038 <xQueueSemaphoreTake>
			  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001f36:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001f3a:	f000 fb65 	bl	8002608 <BSP_LCD_Clear>
			  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f42:	f000 fb15 	bl	8002570 <BSP_LCD_SetTextColor>
			  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001f46:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001f4a:	f000 fb29 	bl	80025a0 <BSP_LCD_SetBackColor>
			  xSemaphoreGive(myMutex_LCDHandle);
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <StartBgChanger+0xec>)
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	2300      	movs	r3, #0
 8001f54:	2200      	movs	r2, #0
 8001f56:	2100      	movs	r1, #0
 8001f58:	f008 fec8 	bl	800acec <xQueueGenericSend>
		  }
		  state = 2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	73fb      	strb	r3, [r7, #15]
		  break;
 8001f60:	e008      	b.n	8001f74 <StartBgChanger+0xdc>
	  case 2:
		  if(BP1) state = 0;
 8001f62:	7bbb      	ldrb	r3, [r7, #14]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <StartBgChanger+0xda>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]
		  break;
 8001f6c:	e001      	b.n	8001f72 <StartBgChanger+0xda>
		  break;
 8001f6e:	bf00      	nop
 8001f70:	e000      	b.n	8001f74 <StartBgChanger+0xdc>
		  break;
 8001f72:	bf00      	nop
//		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
//		  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
//	  }
//	  xSemaphoreGive(myMutex_LCDHandle);
//	  FlagBgChanger = 1;
  osDelay(100);
 8001f74:	2064      	movs	r0, #100	; 0x64
 8001f76:	f008 fc16 	bl	800a7a6 <osDelay>
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8001f7a:	e795      	b.n	8001ea8 <StartBgChanger+0x10>
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	2000002c 	.word	0x2000002c
 8001f84:	20008b9c 	.word	0x20008b9c

08001f88 <StartTransmitter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitter */
void StartTransmitter(void const * argument)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitter */
  /* Infinite loop */
  for(;;)
  {
		txbuffer[0]=(x_RRacket & 0xFF00) >> 8;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <StartTransmitter+0x50>)
 8001f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f96:	121b      	asrs	r3, r3, #8
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <StartTransmitter+0x54>)
 8001f9c:	701a      	strb	r2, [r3, #0]
		txbuffer[1]= x_RRacket & 0x00FF;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <StartTransmitter+0x50>)
 8001fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <StartTransmitter+0x54>)
 8001fa8:	705a      	strb	r2, [r3, #1]
		txbuffer[2]=(y_RRacket & 0xFF00) >> 8;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <StartTransmitter+0x58>)
 8001fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb0:	121b      	asrs	r3, r3, #8
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <StartTransmitter+0x54>)
 8001fb6:	709a      	strb	r2, [r3, #2]
		txbuffer[3]=y_RRacket & 0x00FF;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <StartTransmitter+0x58>)
 8001fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <StartTransmitter+0x54>)
 8001fc2:	70da      	strb	r2, [r3, #3]

		HAL_UART_Transmit_IT(&huart1,txbuffer,4);
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4905      	ldr	r1, [pc, #20]	; (8001fdc <StartTransmitter+0x54>)
 8001fc8:	4806      	ldr	r0, [pc, #24]	; (8001fe4 <StartTransmitter+0x5c>)
 8001fca:	f007 fab5 	bl	8009538 <HAL_UART_Transmit_IT>

    osDelay(10);
 8001fce:	200a      	movs	r0, #10
 8001fd0:	f008 fbe9 	bl	800a7a6 <osDelay>
		txbuffer[0]=(x_RRacket & 0xFF00) >> 8;
 8001fd4:	e7dc      	b.n	8001f90 <StartTransmitter+0x8>
 8001fd6:	bf00      	nop
 8001fd8:	20000028 	.word	0x20000028
 8001fdc:	20008a5c 	.word	0x20008a5c
 8001fe0:	2000002a 	.word	0x2000002a
 8001fe4:	20008964 	.word	0x20008964

08001fe8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ffa:	f001 fcf3 	bl	80039e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40001000 	.word	0x40001000

0800200c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002010:	b672      	cpsid	i
}
 8002012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002014:	e7fe      	b.n	8002014 <Error_Handler+0x8>
	...

08002018 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	; 0x30
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a51      	ldr	r2, [pc, #324]	; (8002168 <I2Cx_MspInit+0x150>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d14d      	bne.n	80020c4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002028:	4b50      	ldr	r3, [pc, #320]	; (800216c <I2Cx_MspInit+0x154>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4a4f      	ldr	r2, [pc, #316]	; (800216c <I2Cx_MspInit+0x154>)
 800202e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002032:	6313      	str	r3, [r2, #48]	; 0x30
 8002034:	4b4d      	ldr	r3, [pc, #308]	; (800216c <I2Cx_MspInit+0x154>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002044:	2312      	movs	r3, #18
 8002046:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800204c:	2302      	movs	r3, #2
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002050:	2304      	movs	r3, #4
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	4845      	ldr	r0, [pc, #276]	; (8002170 <I2Cx_MspInit+0x158>)
 800205c:	f002 fefc 	bl	8004e58 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	4619      	mov	r1, r3
 800206c:	4840      	ldr	r0, [pc, #256]	; (8002170 <I2Cx_MspInit+0x158>)
 800206e:	f002 fef3 	bl	8004e58 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002072:	4b3e      	ldr	r3, [pc, #248]	; (800216c <I2Cx_MspInit+0x154>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a3d      	ldr	r2, [pc, #244]	; (800216c <I2Cx_MspInit+0x154>)
 8002078:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <I2Cx_MspInit+0x154>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800208a:	4b38      	ldr	r3, [pc, #224]	; (800216c <I2Cx_MspInit+0x154>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a37      	ldr	r2, [pc, #220]	; (800216c <I2Cx_MspInit+0x154>)
 8002090:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002094:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002096:	4b35      	ldr	r3, [pc, #212]	; (800216c <I2Cx_MspInit+0x154>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a34      	ldr	r2, [pc, #208]	; (800216c <I2Cx_MspInit+0x154>)
 800209c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020a0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	210f      	movs	r1, #15
 80020a6:	2048      	movs	r0, #72	; 0x48
 80020a8:	f002 f972 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80020ac:	2048      	movs	r0, #72	; 0x48
 80020ae:	f002 f98b 	bl	80043c8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	210f      	movs	r1, #15
 80020b6:	2049      	movs	r0, #73	; 0x49
 80020b8:	f002 f96a 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80020bc:	2049      	movs	r0, #73	; 0x49
 80020be:	f002 f983 	bl	80043c8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80020c2:	e04d      	b.n	8002160 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <I2Cx_MspInit+0x154>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	4a28      	ldr	r2, [pc, #160]	; (800216c <I2Cx_MspInit+0x154>)
 80020ca:	f043 0302 	orr.w	r3, r3, #2
 80020ce:	6313      	str	r3, [r2, #48]	; 0x30
 80020d0:	4b26      	ldr	r3, [pc, #152]	; (800216c <I2Cx_MspInit+0x154>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80020dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80020e2:	2312      	movs	r3, #18
 80020e4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80020ea:	2302      	movs	r3, #2
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80020ee:	2304      	movs	r3, #4
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	4619      	mov	r1, r3
 80020f8:	481e      	ldr	r0, [pc, #120]	; (8002174 <I2Cx_MspInit+0x15c>)
 80020fa:	f002 fead 	bl	8004e58 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80020fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002102:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002104:	f107 031c 	add.w	r3, r7, #28
 8002108:	4619      	mov	r1, r3
 800210a:	481a      	ldr	r0, [pc, #104]	; (8002174 <I2Cx_MspInit+0x15c>)
 800210c:	f002 fea4 	bl	8004e58 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <I2Cx_MspInit+0x154>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	4a15      	ldr	r2, [pc, #84]	; (800216c <I2Cx_MspInit+0x154>)
 8002116:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800211a:	6413      	str	r3, [r2, #64]	; 0x40
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <I2Cx_MspInit+0x154>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <I2Cx_MspInit+0x154>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4a0f      	ldr	r2, [pc, #60]	; (800216c <I2Cx_MspInit+0x154>)
 800212e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002132:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <I2Cx_MspInit+0x154>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a0c      	ldr	r2, [pc, #48]	; (800216c <I2Cx_MspInit+0x154>)
 800213a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800213e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	210f      	movs	r1, #15
 8002144:	201f      	movs	r0, #31
 8002146:	f002 f923 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800214a:	201f      	movs	r0, #31
 800214c:	f002 f93c 	bl	80043c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002150:	2200      	movs	r2, #0
 8002152:	210f      	movs	r1, #15
 8002154:	2020      	movs	r0, #32
 8002156:	f002 f91b 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800215a:	2020      	movs	r0, #32
 800215c:	f002 f934 	bl	80043c8 <HAL_NVIC_EnableIRQ>
}
 8002160:	bf00      	nop
 8002162:	3730      	adds	r7, #48	; 0x30
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200002d0 	.word	0x200002d0
 800216c:	40023800 	.word	0x40023800
 8002170:	40021c00 	.word	0x40021c00
 8002174:	40020400 	.word	0x40020400

08002178 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f003 fc41 	bl	8005a08 <HAL_I2C_GetState>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d125      	bne.n	80021d8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <I2Cx_Init+0x68>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d103      	bne.n	800219c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a13      	ldr	r2, [pc, #76]	; (80021e4 <I2Cx_Init+0x6c>)
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	e002      	b.n	80021a2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <I2Cx_Init+0x70>)
 80021a0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <I2Cx_Init+0x74>)
 80021a6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff23 	bl	8002018 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f003 f92a 	bl	800542c <HAL_I2C_Init>
  }
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	200002d0 	.word	0x200002d0
 80021e4:	40005c00 	.word	0x40005c00
 80021e8:	40005400 	.word	0x40005400
 80021ec:	40912732 	.word	0x40912732

080021f0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af04      	add	r7, sp, #16
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	72fb      	strb	r3, [r7, #11]
 8002202:	460b      	mov	r3, r1
 8002204:	813b      	strh	r3, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	b299      	uxth	r1, r3
 8002212:	88f8      	ldrh	r0, [r7, #6]
 8002214:	893a      	ldrh	r2, [r7, #8]
 8002216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221a:	9302      	str	r3, [sp, #8]
 800221c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	4603      	mov	r3, r0
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f003 fad4 	bl	80057d4 <HAL_I2C_Mem_Read>
 800222c:	4603      	mov	r3, r0
 800222e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	4619      	mov	r1, r3
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f832 	bl	80022a4 <I2Cx_Error>
  }
  return status;    
 8002240:	7dfb      	ldrb	r3, [r7, #23]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b08a      	sub	sp, #40	; 0x28
 800224e:	af04      	add	r7, sp, #16
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	4608      	mov	r0, r1
 8002254:	4611      	mov	r1, r2
 8002256:	461a      	mov	r2, r3
 8002258:	4603      	mov	r3, r0
 800225a:	72fb      	strb	r3, [r7, #11]
 800225c:	460b      	mov	r3, r1
 800225e:	813b      	strh	r3, [r7, #8]
 8002260:	4613      	mov	r3, r2
 8002262:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	b299      	uxth	r1, r3
 800226c:	88f8      	ldrh	r0, [r7, #6]
 800226e:	893a      	ldrh	r2, [r7, #8]
 8002270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002274:	9302      	str	r3, [sp, #8]
 8002276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	4603      	mov	r3, r0
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f003 f993 	bl	80055ac <HAL_I2C_Mem_Write>
 8002286:	4603      	mov	r3, r0
 8002288:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800228a:	7dfb      	ldrb	r3, [r7, #23]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002290:	7afb      	ldrb	r3, [r7, #11]
 8002292:	4619      	mov	r1, r3
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f805 	bl	80022a4 <I2Cx_Error>
  }
  return status;
 800229a:	7dfb      	ldrb	r3, [r7, #23]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f003 f94b 	bl	800554c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ff5e 	bl	8002178 <I2Cx_Init>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <TS_IO_Init+0x10>)
 80022ca:	f7ff ff55 	bl	8002178 <I2Cx_Init>
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200002d0 	.word	0x200002d0

080022d8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af02      	add	r7, sp, #8
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	460b      	mov	r3, r1
 80022e4:	71bb      	strb	r3, [r7, #6]
 80022e6:	4613      	mov	r3, r2
 80022e8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	79f9      	ldrb	r1, [r7, #7]
 80022f0:	2301      	movs	r3, #1
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	1d7b      	adds	r3, r7, #5
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2301      	movs	r3, #1
 80022fa:	4803      	ldr	r0, [pc, #12]	; (8002308 <TS_IO_Write+0x30>)
 80022fc:	f7ff ffa5 	bl	800224a <I2Cx_WriteMultiple>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200002d0 	.word	0x200002d0

0800230c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af02      	add	r7, sp, #8
 8002312:	4603      	mov	r3, r0
 8002314:	460a      	mov	r2, r1
 8002316:	71fb      	strb	r3, [r7, #7]
 8002318:	4613      	mov	r3, r2
 800231a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002320:	79bb      	ldrb	r3, [r7, #6]
 8002322:	b29a      	uxth	r2, r3
 8002324:	79f9      	ldrb	r1, [r7, #7]
 8002326:	2301      	movs	r3, #1
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	f107 030f 	add.w	r3, r7, #15
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2301      	movs	r3, #1
 8002332:	4804      	ldr	r0, [pc, #16]	; (8002344 <TS_IO_Read+0x38>)
 8002334:	f7ff ff5c 	bl	80021f0 <I2Cx_ReadMultiple>

  return read_value;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200002d0 	.word	0x200002d0

08002348 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f001 fb67 	bl	8003a24 <HAL_Delay>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002364:	4b31      	ldr	r3, [pc, #196]	; (800242c <BSP_LCD_Init+0xcc>)
 8002366:	2228      	movs	r2, #40	; 0x28
 8002368:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800236a:	4b30      	ldr	r3, [pc, #192]	; (800242c <BSP_LCD_Init+0xcc>)
 800236c:	2209      	movs	r2, #9
 800236e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002370:	4b2e      	ldr	r3, [pc, #184]	; (800242c <BSP_LCD_Init+0xcc>)
 8002372:	2235      	movs	r2, #53	; 0x35
 8002374:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002376:	4b2d      	ldr	r3, [pc, #180]	; (800242c <BSP_LCD_Init+0xcc>)
 8002378:	220b      	movs	r2, #11
 800237a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <BSP_LCD_Init+0xcc>)
 800237e:	f240 121b 	movw	r2, #283	; 0x11b
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002384:	4b29      	ldr	r3, [pc, #164]	; (800242c <BSP_LCD_Init+0xcc>)
 8002386:	f240 2215 	movw	r2, #533	; 0x215
 800238a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <BSP_LCD_Init+0xcc>)
 800238e:	f240 121d 	movw	r2, #285	; 0x11d
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <BSP_LCD_Init+0xcc>)
 8002396:	f240 2235 	movw	r2, #565	; 0x235
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800239c:	2100      	movs	r1, #0
 800239e:	4823      	ldr	r0, [pc, #140]	; (800242c <BSP_LCD_Init+0xcc>)
 80023a0:	f000 facc 	bl	800293c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <BSP_LCD_Init+0xcc>)
 80023a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023aa:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80023ac:	4b1f      	ldr	r3, [pc, #124]	; (800242c <BSP_LCD_Init+0xcc>)
 80023ae:	f44f 7288 	mov.w	r2, #272	; 0x110
 80023b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <BSP_LCD_Init+0xcc>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <BSP_LCD_Init+0xcc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <BSP_LCD_Init+0xcc>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <BSP_LCD_Init+0xcc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <BSP_LCD_Init+0xcc>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <BSP_LCD_Init+0xcc>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <BSP_LCD_Init+0xcc>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <BSP_LCD_Init+0xcc>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <BSP_LCD_Init+0xd0>)
 80023e8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80023ea:	4810      	ldr	r0, [pc, #64]	; (800242c <BSP_LCD_Init+0xcc>)
 80023ec:	f003 ff9e 	bl	800632c <HAL_LTDC_GetState>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80023f6:	2100      	movs	r1, #0
 80023f8:	480c      	ldr	r0, [pc, #48]	; (800242c <BSP_LCD_Init+0xcc>)
 80023fa:	f000 f9c5 	bl	8002788 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80023fe:	480b      	ldr	r0, [pc, #44]	; (800242c <BSP_LCD_Init+0xcc>)
 8002400:	f003 fdc4 	bl	8005f8c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002404:	2201      	movs	r2, #1
 8002406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800240a:	480a      	ldr	r0, [pc, #40]	; (8002434 <BSP_LCD_Init+0xd4>)
 800240c:	f002 fff4 	bl	80053f8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002410:	2201      	movs	r2, #1
 8002412:	2108      	movs	r1, #8
 8002414:	4808      	ldr	r0, [pc, #32]	; (8002438 <BSP_LCD_Init+0xd8>)
 8002416:	f002 ffef 	bl	80053f8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800241a:	f000 faf7 	bl	8002a0c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800241e:	4807      	ldr	r0, [pc, #28]	; (800243c <BSP_LCD_Init+0xdc>)
 8002420:	f000 f8d8 	bl	80025d4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20008bb4 	.word	0x20008bb4
 8002430:	40016800 	.word	0x40016800
 8002434:	40022000 	.word	0x40022000
 8002438:	40022800 	.word	0x40022800
 800243c:	20000030 	.word	0x20000030

08002440 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <BSP_LCD_GetXSize+0x20>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a06      	ldr	r2, [pc, #24]	; (8002464 <BSP_LCD_GetXSize+0x24>)
 800244a:	2134      	movs	r1, #52	; 0x34
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	3360      	adds	r3, #96	; 0x60
 8002454:	681b      	ldr	r3, [r3, #0]
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	2000035c 	.word	0x2000035c
 8002464:	20008bb4 	.word	0x20008bb4

08002468 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <BSP_LCD_GetYSize+0x20>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a06      	ldr	r2, [pc, #24]	; (800248c <BSP_LCD_GetYSize+0x24>)
 8002472:	2134      	movs	r1, #52	; 0x34
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	3364      	adds	r3, #100	; 0x64
 800247c:	681b      	ldr	r3, [r3, #0]
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	2000035c 	.word	0x2000035c
 800248c:	20008bb4 	.word	0x20008bb4

08002490 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002490:	b580      	push	{r7, lr}
 8002492:	b090      	sub	sp, #64	; 0x40
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80024a0:	f7ff ffce 	bl	8002440 <BSP_LCD_GetXSize>
 80024a4:	4603      	mov	r3, r0
 80024a6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80024ac:	f7ff ffdc 	bl	8002468 <BSP_LCD_GetYSize>
 80024b0:	4603      	mov	r3, r0
 80024b2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80024bc:	23ff      	movs	r3, #255	; 0xff
 80024be:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80024d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80024dc:	2307      	movs	r3, #7
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80024e0:	f7ff ffae 	bl	8002440 <BSP_LCD_GetXSize>
 80024e4:	4603      	mov	r3, r0
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80024e8:	f7ff ffbe 	bl	8002468 <BSP_LCD_GetYSize>
 80024ec:	4603      	mov	r3, r0
 80024ee:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80024f0:	88fa      	ldrh	r2, [r7, #6]
 80024f2:	f107 030c 	add.w	r3, r7, #12
 80024f6:	4619      	mov	r1, r3
 80024f8:	4812      	ldr	r0, [pc, #72]	; (8002544 <BSP_LCD_LayerDefaultInit+0xb4>)
 80024fa:	f003 fed9 	bl	80062b0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80024fe:	88fa      	ldrh	r2, [r7, #6]
 8002500:	4911      	ldr	r1, [pc, #68]	; (8002548 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3304      	adds	r3, #4
 800250e:	f04f 32ff 	mov.w	r2, #4294967295
 8002512:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002514:	88fa      	ldrh	r2, [r7, #6]
 8002516:	490c      	ldr	r1, [pc, #48]	; (8002548 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	3308      	adds	r3, #8
 8002524:	4a09      	ldr	r2, [pc, #36]	; (800254c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002526:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002528:	88fa      	ldrh	r2, [r7, #6]
 800252a:	4907      	ldr	r1, [pc, #28]	; (8002548 <BSP_LCD_LayerDefaultInit+0xb8>)
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800253a:	601a      	str	r2, [r3, #0]
}
 800253c:	bf00      	nop
 800253e:	3740      	adds	r7, #64	; 0x40
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20008bb4 	.word	0x20008bb4
 8002548:	20000360 	.word	0x20000360
 800254c:	20000030 	.word	0x20000030

08002550 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <BSP_LCD_SelectLayer+0x1c>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
} 
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	2000035c 	.word	0x2000035c

08002570 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <BSP_LCD_SetTextColor+0x28>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4907      	ldr	r1, [pc, #28]	; (800259c <BSP_LCD_SetTextColor+0x2c>)
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	601a      	str	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	2000035c 	.word	0x2000035c
 800259c:	20000360 	.word	0x20000360

080025a0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <BSP_LCD_SetBackColor+0x2c>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4908      	ldr	r1, [pc, #32]	; (80025d0 <BSP_LCD_SetBackColor+0x30>)
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	3304      	adds	r3, #4
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	601a      	str	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	2000035c 	.word	0x2000035c
 80025d0:	20000360 	.word	0x20000360

080025d4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <BSP_LCD_SetFont+0x2c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4908      	ldr	r1, [pc, #32]	; (8002604 <BSP_LCD_SetFont+0x30>)
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3308      	adds	r3, #8
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	601a      	str	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	2000035c 	.word	0x2000035c
 8002604:	20000360 	.word	0x20000360

08002608 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260a:	b085      	sub	sp, #20
 800260c:	af02      	add	r7, sp, #8
 800260e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <BSP_LCD_Clear+0x48>)
 8002612:	681c      	ldr	r4, [r3, #0]
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <BSP_LCD_Clear+0x48>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <BSP_LCD_Clear+0x4c>)
 800261a:	2134      	movs	r1, #52	; 0x34
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	335c      	adds	r3, #92	; 0x5c
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461e      	mov	r6, r3
 8002628:	f7ff ff0a 	bl	8002440 <BSP_LCD_GetXSize>
 800262c:	4605      	mov	r5, r0
 800262e:	f7ff ff1b 	bl	8002468 <BSP_LCD_GetYSize>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	2300      	movs	r3, #0
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	462a      	mov	r2, r5
 8002640:	4631      	mov	r1, r6
 8002642:	4620      	mov	r0, r4
 8002644:	f000 f996 	bl	8002974 <LL_FillBuffer>
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002650:	2000035c 	.word	0x2000035c
 8002654:	20008bb4 	.word	0x20008bb4

08002658 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af02      	add	r7, sp, #8
 8002660:	4604      	mov	r4, r0
 8002662:	4608      	mov	r0, r1
 8002664:	4611      	mov	r1, r2
 8002666:	461a      	mov	r2, r3
 8002668:	4623      	mov	r3, r4
 800266a:	80fb      	strh	r3, [r7, #6]
 800266c:	4603      	mov	r3, r0
 800266e:	80bb      	strh	r3, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	807b      	strh	r3, [r7, #2]
 8002674:	4613      	mov	r3, r2
 8002676:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800267c:	4b30      	ldr	r3, [pc, #192]	; (8002740 <BSP_LCD_FillRect+0xe8>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4930      	ldr	r1, [pc, #192]	; (8002744 <BSP_LCD_FillRect+0xec>)
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff6e 	bl	8002570 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002694:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <BSP_LCD_FillRect+0xe8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2b      	ldr	r2, [pc, #172]	; (8002748 <BSP_LCD_FillRect+0xf0>)
 800269a:	2134      	movs	r1, #52	; 0x34
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	3348      	adds	r3, #72	; 0x48
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d114      	bne.n	80026d4 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <BSP_LCD_FillRect+0xe8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a26      	ldr	r2, [pc, #152]	; (8002748 <BSP_LCD_FillRect+0xf0>)
 80026b0:	2134      	movs	r1, #52	; 0x34
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	335c      	adds	r3, #92	; 0x5c
 80026ba:	681c      	ldr	r4, [r3, #0]
 80026bc:	f7ff fec0 	bl	8002440 <BSP_LCD_GetXSize>
 80026c0:	4602      	mov	r2, r0
 80026c2:	88bb      	ldrh	r3, [r7, #4]
 80026c4:	fb03 f202 	mul.w	r2, r3, r2
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	4413      	add	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4423      	add	r3, r4
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	e013      	b.n	80026fc <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <BSP_LCD_FillRect+0xe8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1b      	ldr	r2, [pc, #108]	; (8002748 <BSP_LCD_FillRect+0xf0>)
 80026da:	2134      	movs	r1, #52	; 0x34
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	335c      	adds	r3, #92	; 0x5c
 80026e4:	681c      	ldr	r4, [r3, #0]
 80026e6:	f7ff feab 	bl	8002440 <BSP_LCD_GetXSize>
 80026ea:	4602      	mov	r2, r0
 80026ec:	88bb      	ldrh	r3, [r7, #4]
 80026ee:	fb03 f202 	mul.w	r2, r3, r2
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4423      	add	r3, r4
 80026fa:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <BSP_LCD_FillRect+0xe8>)
 80026fe:	681c      	ldr	r4, [r3, #0]
 8002700:	68fd      	ldr	r5, [r7, #12]
 8002702:	887e      	ldrh	r6, [r7, #2]
 8002704:	f8b7 8000 	ldrh.w	r8, [r7]
 8002708:	f7ff fe9a 	bl	8002440 <BSP_LCD_GetXSize>
 800270c:	4602      	mov	r2, r0
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	1ad1      	subs	r1, r2, r3
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <BSP_LCD_FillRect+0xe8>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	480b      	ldr	r0, [pc, #44]	; (8002744 <BSP_LCD_FillRect+0xec>)
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4403      	add	r3, r0
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	9100      	str	r1, [sp, #0]
 8002728:	4643      	mov	r3, r8
 800272a:	4632      	mov	r2, r6
 800272c:	4629      	mov	r1, r5
 800272e:	4620      	mov	r0, r4
 8002730:	f000 f920 	bl	8002974 <LL_FillBuffer>
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800273e:	bf00      	nop
 8002740:	2000035c 	.word	0x2000035c
 8002744:	20000360 	.word	0x20000360
 8002748:	20008bb4 	.word	0x20008bb4

0800274c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <BSP_LCD_DisplayOn+0x30>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <BSP_LCD_DisplayOn+0x30>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002760:	2201      	movs	r2, #1
 8002762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002766:	4806      	ldr	r0, [pc, #24]	; (8002780 <BSP_LCD_DisplayOn+0x34>)
 8002768:	f002 fe46 	bl	80053f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800276c:	2201      	movs	r2, #1
 800276e:	2108      	movs	r1, #8
 8002770:	4804      	ldr	r0, [pc, #16]	; (8002784 <BSP_LCD_DisplayOn+0x38>)
 8002772:	f002 fe41 	bl	80053f8 <HAL_GPIO_WritePin>
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20008bb4 	.word	0x20008bb4
 8002780:	40022000 	.word	0x40022000
 8002784:	40022800 	.word	0x40022800

08002788 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b090      	sub	sp, #64	; 0x40
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002792:	4b64      	ldr	r3, [pc, #400]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a63      	ldr	r2, [pc, #396]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002798:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b61      	ldr	r3, [pc, #388]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80027aa:	4b5e      	ldr	r3, [pc, #376]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a5d      	ldr	r2, [pc, #372]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 80027b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b5b      	ldr	r3, [pc, #364]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027c2:	4b58      	ldr	r3, [pc, #352]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a57      	ldr	r2, [pc, #348]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 80027c8:	f043 0310 	orr.w	r3, r3, #16
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b55      	ldr	r3, [pc, #340]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	623b      	str	r3, [r7, #32]
 80027d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027da:	4b52      	ldr	r3, [pc, #328]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a51      	ldr	r2, [pc, #324]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 80027e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80027f2:	4b4c      	ldr	r3, [pc, #304]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a4b      	ldr	r2, [pc, #300]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b49      	ldr	r3, [pc, #292]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a45      	ldr	r2, [pc, #276]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b43      	ldr	r3, [pc, #268]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a3f      	ldr	r2, [pc, #252]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002828:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800283a:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a39      	ldr	r2, [pc, #228]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b37      	ldr	r3, [pc, #220]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002852:	4b34      	ldr	r3, [pc, #208]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a33      	ldr	r2, [pc, #204]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b31      	ldr	r3, [pc, #196]	; (8002924 <BSP_LCD_MspInit+0x19c>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800286a:	2310      	movs	r3, #16
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002876:	2302      	movs	r3, #2
 8002878:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800287a:	230e      	movs	r3, #14
 800287c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800287e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002882:	4619      	mov	r1, r3
 8002884:	4828      	ldr	r0, [pc, #160]	; (8002928 <BSP_LCD_MspInit+0x1a0>)
 8002886:	f002 fae7 	bl	8004e58 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800288a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002894:	2309      	movs	r3, #9
 8002896:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800289c:	4619      	mov	r1, r3
 800289e:	4823      	ldr	r0, [pc, #140]	; (800292c <BSP_LCD_MspInit+0x1a4>)
 80028a0:	f002 fada 	bl	8004e58 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80028a4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80028ae:	230e      	movs	r3, #14
 80028b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80028b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b6:	4619      	mov	r1, r3
 80028b8:	481d      	ldr	r0, [pc, #116]	; (8002930 <BSP_LCD_MspInit+0x1a8>)
 80028ba:	f002 facd 	bl	8004e58 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80028be:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80028c8:	230e      	movs	r3, #14
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80028cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d0:	4619      	mov	r1, r3
 80028d2:	4818      	ldr	r0, [pc, #96]	; (8002934 <BSP_LCD_MspInit+0x1ac>)
 80028d4:	f002 fac0 	bl	8004e58 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80028d8:	23f7      	movs	r3, #247	; 0xf7
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80028e0:	230e      	movs	r3, #14
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80028e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028e8:	4619      	mov	r1, r3
 80028ea:	4813      	ldr	r0, [pc, #76]	; (8002938 <BSP_LCD_MspInit+0x1b0>)
 80028ec:	f002 fab4 	bl	8004e58 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80028f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80028f6:	2301      	movs	r3, #1
 80028f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80028fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028fe:	4619      	mov	r1, r3
 8002900:	480b      	ldr	r0, [pc, #44]	; (8002930 <BSP_LCD_MspInit+0x1a8>)
 8002902:	f002 faa9 	bl	8004e58 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002906:	2308      	movs	r3, #8
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800290a:	2301      	movs	r3, #1
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800290e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002912:	4619      	mov	r1, r3
 8002914:	4808      	ldr	r0, [pc, #32]	; (8002938 <BSP_LCD_MspInit+0x1b0>)
 8002916:	f002 fa9f 	bl	8004e58 <HAL_GPIO_Init>
}
 800291a:	bf00      	nop
 800291c:	3740      	adds	r7, #64	; 0x40
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40021000 	.word	0x40021000
 800292c:	40021800 	.word	0x40021800
 8002930:	40022000 	.word	0x40022000
 8002934:	40022400 	.word	0x40022400
 8002938:	40022800 	.word	0x40022800

0800293c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <BSP_LCD_ClockConfig+0x34>)
 8002948:	2208      	movs	r2, #8
 800294a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <BSP_LCD_ClockConfig+0x34>)
 800294e:	22c0      	movs	r2, #192	; 0xc0
 8002950:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <BSP_LCD_ClockConfig+0x34>)
 8002954:	2205      	movs	r2, #5
 8002956:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <BSP_LCD_ClockConfig+0x34>)
 800295a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002960:	4803      	ldr	r0, [pc, #12]	; (8002970 <BSP_LCD_ClockConfig+0x34>)
 8002962:	f004 fb97 	bl	8007094 <HAL_RCCEx_PeriphCLKConfig>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000378 	.word	0x20000378

08002974 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002982:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <LL_FillBuffer+0x88>)
 8002984:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002988:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <LL_FillBuffer+0x8c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <LL_FillBuffer+0x90>)
 8002990:	2134      	movs	r1, #52	; 0x34
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3348      	adds	r3, #72	; 0x48
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d103      	bne.n	80029a8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80029a0:	4b16      	ldr	r3, [pc, #88]	; (80029fc <LL_FillBuffer+0x88>)
 80029a2:	2202      	movs	r2, #2
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	e002      	b.n	80029ae <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <LL_FillBuffer+0x88>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80029ae:	4a13      	ldr	r2, [pc, #76]	; (80029fc <LL_FillBuffer+0x88>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <LL_FillBuffer+0x88>)
 80029b6:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <LL_FillBuffer+0x94>)
 80029b8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80029ba:	4810      	ldr	r0, [pc, #64]	; (80029fc <LL_FillBuffer+0x88>)
 80029bc:	f001 ffc0 	bl	8004940 <HAL_DMA2D_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80029c6:	68f9      	ldr	r1, [r7, #12]
 80029c8:	480c      	ldr	r0, [pc, #48]	; (80029fc <LL_FillBuffer+0x88>)
 80029ca:	f002 f917 	bl	8004bfc <HAL_DMA2D_ConfigLayer>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10e      	bne.n	80029f2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69f9      	ldr	r1, [r7, #28]
 80029de:	4807      	ldr	r0, [pc, #28]	; (80029fc <LL_FillBuffer+0x88>)
 80029e0:	f001 fff8 	bl	80049d4 <HAL_DMA2D_Start>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80029ea:	210a      	movs	r1, #10
 80029ec:	4803      	ldr	r0, [pc, #12]	; (80029fc <LL_FillBuffer+0x88>)
 80029ee:	f002 f81c 	bl	8004a2a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	2000031c 	.word	0x2000031c
 8002a00:	2000035c 	.word	0x2000035c
 8002a04:	20008bb4 	.word	0x20008bb4
 8002a08:	4002b000 	.word	0x4002b000

08002a0c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002a10:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a12:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <BSP_SDRAM_Init+0xb0>)
 8002a14:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <BSP_SDRAM_Init+0xb4>)
 8002a18:	2202      	movs	r2, #2
 8002a1a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002a1c:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <BSP_SDRAM_Init+0xb4>)
 8002a1e:	2207      	movs	r2, #7
 8002a20:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002a22:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <BSP_SDRAM_Init+0xb4>)
 8002a24:	2204      	movs	r2, #4
 8002a26:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <BSP_SDRAM_Init+0xb4>)
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <BSP_SDRAM_Init+0xb4>)
 8002a30:	2202      	movs	r2, #2
 8002a32:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002a34:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <BSP_SDRAM_Init+0xb4>)
 8002a36:	2202      	movs	r2, #2
 8002a38:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <BSP_SDRAM_Init+0xb4>)
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a4e:	2204      	movs	r2, #4
 8002a50:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002a52:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a54:	2210      	movs	r2, #16
 8002a56:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a58:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a5a:	2240      	movs	r2, #64	; 0x40
 8002a5c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002a5e:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a64:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a66:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a72:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002a74:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002a82:	2100      	movs	r1, #0
 8002a84:	480c      	ldr	r0, [pc, #48]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a86:	f000 f87f 	bl	8002b88 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002a8a:	490d      	ldr	r1, [pc, #52]	; (8002ac0 <BSP_SDRAM_Init+0xb4>)
 8002a8c:	480a      	ldr	r0, [pc, #40]	; (8002ab8 <BSP_SDRAM_Init+0xac>)
 8002a8e:	f005 fab1 	bl	8007ff4 <HAL_SDRAM_Init>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <BSP_SDRAM_Init+0xb8>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e002      	b.n	8002aa6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <BSP_SDRAM_Init+0xb8>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002aa6:	f240 6003 	movw	r0, #1539	; 0x603
 8002aaa:	f000 f80d 	bl	8002ac8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <BSP_SDRAM_Init+0xb8>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20008c5c 	.word	0x20008c5c
 8002abc:	a0000140 	.word	0xa0000140
 8002ac0:	200003fc 	.word	0x200003fc
 8002ac4:	20000040 	.word	0x20000040

08002ac8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002ad4:	4b2a      	ldr	r3, [pc, #168]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ada:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002adc:	2210      	movs	r2, #16
 8002ade:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002ae0:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002ae6:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af0:	4923      	ldr	r1, [pc, #140]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002af2:	4824      	ldr	r0, [pc, #144]	; (8002b84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002af4:	f005 fab2 	bl	800805c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002af8:	2001      	movs	r0, #1
 8002afa:	f000 ff93 	bl	8003a24 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b00:	2202      	movs	r2, #2
 8002b02:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b06:	2210      	movs	r2, #16
 8002b08:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b1a:	4919      	ldr	r1, [pc, #100]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b1c:	4819      	ldr	r0, [pc, #100]	; (8002b84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b1e:	f005 fa9d 	bl	800805c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b24:	2203      	movs	r2, #3
 8002b26:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b28:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b2a:	2210      	movs	r2, #16
 8002b2c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b30:	2208      	movs	r2, #8
 8002b32:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b3e:	4910      	ldr	r1, [pc, #64]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b40:	4810      	ldr	r0, [pc, #64]	; (8002b84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b42:	f005 fa8b 	bl	800805c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002b46:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002b4a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b4e:	2204      	movs	r2, #4
 8002b50:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b54:	2210      	movs	r2, #16
 8002b56:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b62:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b68:	4905      	ldr	r1, [pc, #20]	; (8002b80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b6a:	4806      	ldr	r0, [pc, #24]	; (8002b84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b6c:	f005 fa76 	bl	800805c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4804      	ldr	r0, [pc, #16]	; (8002b84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b74:	f005 fa9d 	bl	80080b2 <HAL_SDRAM_ProgramRefreshRate>
}
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000418 	.word	0x20000418
 8002b84:	20008c5c 	.word	0x20008c5c

08002b88 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b090      	sub	sp, #64	; 0x40
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b92:	4b70      	ldr	r3, [pc, #448]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	4a6f      	ldr	r2, [pc, #444]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6393      	str	r3, [r2, #56]	; 0x38
 8002b9e:	4b6d      	ldr	r3, [pc, #436]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002baa:	4b6a      	ldr	r3, [pc, #424]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a69      	ldr	r2, [pc, #420]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002bb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b67      	ldr	r3, [pc, #412]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc2:	4b64      	ldr	r3, [pc, #400]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a63      	ldr	r2, [pc, #396]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002bc8:	f043 0304 	orr.w	r3, r3, #4
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	623b      	str	r3, [r7, #32]
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bda:	4b5e      	ldr	r3, [pc, #376]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a5d      	ldr	r2, [pc, #372]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002be0:	f043 0308 	orr.w	r3, r3, #8
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b5b      	ldr	r3, [pc, #364]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bf2:	4b58      	ldr	r3, [pc, #352]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a57      	ldr	r2, [pc, #348]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002bf8:	f043 0310 	orr.w	r3, r3, #16
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b55      	ldr	r3, [pc, #340]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c0a:	4b52      	ldr	r3, [pc, #328]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a51      	ldr	r2, [pc, #324]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002c10:	f043 0320 	orr.w	r3, r3, #32
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b4f      	ldr	r3, [pc, #316]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c22:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4a4b      	ldr	r2, [pc, #300]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2e:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c3a:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a45      	ldr	r2, [pc, #276]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b43      	ldr	r3, [pc, #268]	; (8002d54 <BSP_SDRAM_MspInit+0x1cc>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002c5e:	230c      	movs	r3, #12
 8002c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002c62:	2308      	movs	r3, #8
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002c66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	483a      	ldr	r0, [pc, #232]	; (8002d58 <BSP_SDRAM_MspInit+0x1d0>)
 8002c6e:	f002 f8f3 	bl	8004e58 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002c72:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4837      	ldr	r0, [pc, #220]	; (8002d5c <BSP_SDRAM_MspInit+0x1d4>)
 8002c80:	f002 f8ea 	bl	8004e58 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002c84:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4833      	ldr	r0, [pc, #204]	; (8002d60 <BSP_SDRAM_MspInit+0x1d8>)
 8002c92:	f002 f8e1 	bl	8004e58 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002c96:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4830      	ldr	r0, [pc, #192]	; (8002d64 <BSP_SDRAM_MspInit+0x1dc>)
 8002ca4:	f002 f8d8 	bl	8004e58 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002ca8:	f248 1333 	movw	r3, #33075	; 0x8133
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	482c      	ldr	r0, [pc, #176]	; (8002d68 <BSP_SDRAM_MspInit+0x1e0>)
 8002cb6:	f002 f8cf 	bl	8004e58 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002cba:	2328      	movs	r3, #40	; 0x28
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4829      	ldr	r0, [pc, #164]	; (8002d6c <BSP_SDRAM_MspInit+0x1e4>)
 8002cc6:	f002 f8c7 	bl	8004e58 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002cca:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002cd0:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002cd2:	2280      	movs	r2, #128	; 0x80
 8002cd4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002cd6:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cdc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002ce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002ce8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cec:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002cf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cf4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002cf6:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002cfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d02:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002d16:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002d1e:	4a15      	ldr	r2, [pc, #84]	; (8002d74 <BSP_SDRAM_MspInit+0x1ec>)
 8002d20:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
 8002d28:	4a11      	ldr	r2, [pc, #68]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002d2e:	4810      	ldr	r0, [pc, #64]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002d30:	f001 fcd4 	bl	80046dc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002d34:	480e      	ldr	r0, [pc, #56]	; (8002d70 <BSP_SDRAM_MspInit+0x1e8>)
 8002d36:	f001 fc23 	bl	8004580 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	210f      	movs	r1, #15
 8002d3e:	2038      	movs	r0, #56	; 0x38
 8002d40:	f001 fb26 	bl	8004390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002d44:	2038      	movs	r0, #56	; 0x38
 8002d46:	f001 fb3f 	bl	80043c8 <HAL_NVIC_EnableIRQ>
}
 8002d4a:	bf00      	nop
 8002d4c:	3740      	adds	r7, #64	; 0x40
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020800 	.word	0x40020800
 8002d5c:	40020c00 	.word	0x40020c00
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40021400 	.word	0x40021400
 8002d68:	40021800 	.word	0x40021800
 8002d6c:	40021c00 	.word	0x40021c00
 8002d70:	20000428 	.word	0x20000428
 8002d74:	40026410 	.word	0x40026410

08002d78 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	460a      	mov	r2, r1
 8002d82:	80fb      	strh	r3, [r7, #6]
 8002d84:	4613      	mov	r3, r2
 8002d86:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <BSP_TS_Init+0x68>)
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8002d92:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <BSP_TS_Init+0x6c>)
 8002d94:	88bb      	ldrh	r3, [r7, #4]
 8002d96:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <BSP_TS_Init+0x70>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2070      	movs	r0, #112	; 0x70
 8002d9e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <BSP_TS_Init+0x70>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2070      	movs	r0, #112	; 0x70
 8002da6:	4798      	blx	r3
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b51      	cmp	r3, #81	; 0x51
 8002dac:	d111      	bne.n	8002dd2 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <BSP_TS_Init+0x74>)
 8002db0:	4a0d      	ldr	r2, [pc, #52]	; (8002de8 <BSP_TS_Init+0x70>)
 8002db2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <BSP_TS_Init+0x78>)
 8002db6:	2270      	movs	r2, #112	; 0x70
 8002db8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <BSP_TS_Init+0x7c>)
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <BSP_TS_Init+0x74>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <BSP_TS_Init+0x78>)
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	b292      	uxth	r2, r2
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4798      	blx	r3
 8002dd0:	e001      	b.n	8002dd6 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	2000048c 	.word	0x2000048c
 8002de4:	2000048e 	.word	0x2000048e
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000488 	.word	0x20000488
 8002df0:	20000491 	.word	0x20000491
 8002df4:	20000490 	.word	0x20000490

08002df8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <HAL_MspInit+0x4c>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <HAL_MspInit+0x4c>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_MspInit+0x4c>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_MspInit+0x4c>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <HAL_MspInit+0x4c>)
 8002e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e20:	6453      	str	r3, [r2, #68]	; 0x44
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_MspInit+0x4c>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	210f      	movs	r1, #15
 8002e32:	f06f 0001 	mvn.w	r0, #1
 8002e36:	f001 faab 	bl	8004390 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800

08002e48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08c      	sub	sp, #48	; 0x30
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 031c 	add.w	r3, r7, #28
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <HAL_ADC_MspInit+0xc8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d124      	bne.n	8002eb4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <HAL_ADC_MspInit+0xcc>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <HAL_ADC_MspInit+0xcc>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6453      	str	r3, [r2, #68]	; 0x44
 8002e76:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <HAL_ADC_MspInit+0xcc>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_ADC_MspInit+0xcc>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <HAL_ADC_MspInit+0xcc>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <HAL_ADC_MspInit+0xcc>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea6:	f107 031c 	add.w	r3, r7, #28
 8002eaa:	4619      	mov	r1, r3
 8002eac:	481a      	ldr	r0, [pc, #104]	; (8002f18 <HAL_ADC_MspInit+0xd0>)
 8002eae:	f001 ffd3 	bl	8004e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002eb2:	e029      	b.n	8002f08 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <HAL_ADC_MspInit+0xd4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d124      	bne.n	8002f08 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_ADC_MspInit+0xcc>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <HAL_ADC_MspInit+0xcc>)
 8002ec4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_ADC_MspInit+0xcc>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ed6:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <HAL_ADC_MspInit+0xcc>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <HAL_ADC_MspInit+0xcc>)
 8002edc:	f043 0320 	orr.w	r3, r3, #32
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <HAL_ADC_MspInit+0xcc>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8002eee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002efc:	f107 031c 	add.w	r3, r7, #28
 8002f00:	4619      	mov	r1, r3
 8002f02:	4807      	ldr	r0, [pc, #28]	; (8002f20 <HAL_ADC_MspInit+0xd8>)
 8002f04:	f001 ffa8 	bl	8004e58 <HAL_GPIO_Init>
}
 8002f08:	bf00      	nop
 8002f0a:	3730      	adds	r7, #48	; 0x30
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40012000 	.word	0x40012000
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	40012200 	.word	0x40012200
 8002f20:	40021400 	.word	0x40021400

08002f24 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_DAC_MspInit+0x84>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d12b      	bne.n	8002f9e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002f46:	4b19      	ldr	r3, [pc, #100]	; (8002fac <HAL_DAC_MspInit+0x88>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a18      	ldr	r2, [pc, #96]	; (8002fac <HAL_DAC_MspInit+0x88>)
 8002f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b16      	ldr	r3, [pc, #88]	; (8002fac <HAL_DAC_MspInit+0x88>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5e:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_DAC_MspInit+0x88>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <HAL_DAC_MspInit+0x88>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <HAL_DAC_MspInit+0x88>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f76:	2310      	movs	r3, #16
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f82:	f107 0314 	add.w	r3, r7, #20
 8002f86:	4619      	mov	r1, r3
 8002f88:	4809      	ldr	r0, [pc, #36]	; (8002fb0 <HAL_DAC_MspInit+0x8c>)
 8002f8a:	f001 ff65 	bl	8004e58 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	2036      	movs	r0, #54	; 0x36
 8002f94:	f001 f9fc 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f98:	2036      	movs	r0, #54	; 0x36
 8002f9a:	f001 fa15 	bl	80043c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002f9e:	bf00      	nop
 8002fa0:	3728      	adds	r7, #40	; 0x28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40007400 	.word	0x40007400
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40020000 	.word	0x40020000

08002fb4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_DMA2D_MspInit+0x38>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d10b      	bne.n	8002fde <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_DMA2D_MspInit+0x3c>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <HAL_DMA2D_MspInit+0x3c>)
 8002fcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <HAL_DMA2D_MspInit+0x3c>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	4002b000 	.word	0x4002b000
 8002ff0:	40023800 	.word	0x40023800

08002ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08c      	sub	sp, #48	; 0x30
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a2f      	ldr	r2, [pc, #188]	; (80030d0 <HAL_I2C_MspInit+0xdc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d129      	bne.n	800306a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003016:	4b2f      	ldr	r3, [pc, #188]	; (80030d4 <HAL_I2C_MspInit+0xe0>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	4a2e      	ldr	r2, [pc, #184]	; (80030d4 <HAL_I2C_MspInit+0xe0>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	6313      	str	r3, [r2, #48]	; 0x30
 8003022:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <HAL_I2C_MspInit+0xe0>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800302e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003034:	2312      	movs	r3, #18
 8003036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003038:	2301      	movs	r3, #1
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2300      	movs	r3, #0
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003040:	2304      	movs	r3, #4
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003044:	f107 031c 	add.w	r3, r7, #28
 8003048:	4619      	mov	r1, r3
 800304a:	4823      	ldr	r0, [pc, #140]	; (80030d8 <HAL_I2C_MspInit+0xe4>)
 800304c:	f001 ff04 	bl	8004e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003050:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_I2C_MspInit+0xe0>)
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <HAL_I2C_MspInit+0xe0>)
 8003056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800305a:	6413      	str	r3, [r2, #64]	; 0x40
 800305c:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <HAL_I2C_MspInit+0xe0>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003068:	e02d      	b.n	80030c6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <HAL_I2C_MspInit+0xe8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d128      	bne.n	80030c6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_I2C_MspInit+0xe0>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	4a16      	ldr	r2, [pc, #88]	; (80030d4 <HAL_I2C_MspInit+0xe0>)
 800307a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307e:	6313      	str	r3, [r2, #48]	; 0x30
 8003080:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <HAL_I2C_MspInit+0xe0>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800308c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003092:	2312      	movs	r3, #18
 8003094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003096:	2301      	movs	r3, #1
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309a:	2303      	movs	r3, #3
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800309e:	2304      	movs	r3, #4
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80030a2:	f107 031c 	add.w	r3, r7, #28
 80030a6:	4619      	mov	r1, r3
 80030a8:	480d      	ldr	r0, [pc, #52]	; (80030e0 <HAL_I2C_MspInit+0xec>)
 80030aa:	f001 fed5 	bl	8004e58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_I2C_MspInit+0xe0>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <HAL_I2C_MspInit+0xe0>)
 80030b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030b8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_I2C_MspInit+0xe0>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
}
 80030c6:	bf00      	nop
 80030c8:	3730      	adds	r7, #48	; 0x30
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40005400 	.word	0x40005400
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40020400 	.word	0x40020400
 80030dc:	40005c00 	.word	0x40005c00
 80030e0:	40021c00 	.word	0x40021c00

080030e4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a15      	ldr	r2, [pc, #84]	; (8003148 <HAL_I2C_MspDeInit+0x64>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d110      	bne.n	8003118 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_I2C_MspDeInit+0x68>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a14      	ldr	r2, [pc, #80]	; (800314c <HAL_I2C_MspDeInit+0x68>)
 80030fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003100:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8003102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003106:	4812      	ldr	r0, [pc, #72]	; (8003150 <HAL_I2C_MspDeInit+0x6c>)
 8003108:	f002 f852 	bl	80051b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 800310c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003110:	480f      	ldr	r0, [pc, #60]	; (8003150 <HAL_I2C_MspDeInit+0x6c>)
 8003112:	f002 f84d 	bl	80051b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003116:	e013      	b.n	8003140 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <HAL_I2C_MspDeInit+0x70>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d10e      	bne.n	8003140 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_I2C_MspDeInit+0x68>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_I2C_MspDeInit+0x68>)
 8003128:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800312c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800312e:	2180      	movs	r1, #128	; 0x80
 8003130:	4809      	ldr	r0, [pc, #36]	; (8003158 <HAL_I2C_MspDeInit+0x74>)
 8003132:	f002 f83d 	bl	80051b0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003136:	f44f 7180 	mov.w	r1, #256	; 0x100
 800313a:	4807      	ldr	r0, [pc, #28]	; (8003158 <HAL_I2C_MspDeInit+0x74>)
 800313c:	f002 f838 	bl	80051b0 <HAL_GPIO_DeInit>
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40005400 	.word	0x40005400
 800314c:	40023800 	.word	0x40023800
 8003150:	40020400 	.word	0x40020400
 8003154:	40005c00 	.word	0x40005c00
 8003158:	40021c00 	.word	0x40021c00

0800315c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08e      	sub	sp, #56	; 0x38
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a55      	ldr	r2, [pc, #340]	; (80032d0 <HAL_LTDC_MspInit+0x174>)
 800317a:	4293      	cmp	r3, r2
 800317c:	f040 80a3 	bne.w	80032c6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003180:	4b54      	ldr	r3, [pc, #336]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	4a53      	ldr	r2, [pc, #332]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 8003186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800318a:	6453      	str	r3, [r2, #68]	; 0x44
 800318c:	4b51      	ldr	r3, [pc, #324]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 800318e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003194:	623b      	str	r3, [r7, #32]
 8003196:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003198:	4b4e      	ldr	r3, [pc, #312]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	4a4d      	ldr	r2, [pc, #308]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 800319e:	f043 0310 	orr.w	r3, r3, #16
 80031a2:	6313      	str	r3, [r2, #48]	; 0x30
 80031a4:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80031b0:	4b48      	ldr	r3, [pc, #288]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4a47      	ldr	r2, [pc, #284]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 80031b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ba:	6313      	str	r3, [r2, #48]	; 0x30
 80031bc:	4b45      	ldr	r3, [pc, #276]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80031c8:	4b42      	ldr	r3, [pc, #264]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	4a41      	ldr	r2, [pc, #260]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 80031ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031d2:	6313      	str	r3, [r2, #48]	; 0x30
 80031d4:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031e0:	4b3c      	ldr	r3, [pc, #240]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	4a3b      	ldr	r2, [pc, #236]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 80031e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ea:	6313      	str	r3, [r2, #48]	; 0x30
 80031ec:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031f8:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	4a35      	ldr	r2, [pc, #212]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 80031fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003202:	6313      	str	r3, [r2, #48]	; 0x30
 8003204:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <HAL_LTDC_MspInit+0x178>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003210:	2310      	movs	r3, #16
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	2300      	movs	r3, #0
 800321e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003220:	230e      	movs	r3, #14
 8003222:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003228:	4619      	mov	r1, r3
 800322a:	482b      	ldr	r0, [pc, #172]	; (80032d8 <HAL_LTDC_MspInit+0x17c>)
 800322c:	f001 fe14 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003230:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323e:	2300      	movs	r3, #0
 8003240:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003242:	230e      	movs	r3, #14
 8003244:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324a:	4619      	mov	r1, r3
 800324c:	4823      	ldr	r0, [pc, #140]	; (80032dc <HAL_LTDC_MspInit+0x180>)
 800324e:	f001 fe03 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003252:	23f7      	movs	r3, #247	; 0xf7
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003256:	2302      	movs	r3, #2
 8003258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325e:	2300      	movs	r3, #0
 8003260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003262:	230e      	movs	r3, #14
 8003264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800326a:	4619      	mov	r1, r3
 800326c:	481c      	ldr	r0, [pc, #112]	; (80032e0 <HAL_LTDC_MspInit+0x184>)
 800326e:	f001 fdf3 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003278:	2302      	movs	r3, #2
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	2300      	movs	r3, #0
 8003282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003284:	2309      	movs	r3, #9
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328c:	4619      	mov	r1, r3
 800328e:	4815      	ldr	r0, [pc, #84]	; (80032e4 <HAL_LTDC_MspInit+0x188>)
 8003290:	f001 fde2 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003294:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	2300      	movs	r3, #0
 80032a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032a6:	230e      	movs	r3, #14
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80032aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ae:	4619      	mov	r1, r3
 80032b0:	480d      	ldr	r0, [pc, #52]	; (80032e8 <HAL_LTDC_MspInit+0x18c>)
 80032b2:	f001 fdd1 	bl	8004e58 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2105      	movs	r1, #5
 80032ba:	2058      	movs	r0, #88	; 0x58
 80032bc:	f001 f868 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80032c0:	2058      	movs	r0, #88	; 0x58
 80032c2:	f001 f881 	bl	80043c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80032c6:	bf00      	nop
 80032c8:	3738      	adds	r7, #56	; 0x38
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40016800 	.word	0x40016800
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40022400 	.word	0x40022400
 80032e0:	40022800 	.word	0x40022800
 80032e4:	40021800 	.word	0x40021800
 80032e8:	40022000 	.word	0x40022000

080032ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a07      	ldr	r2, [pc, #28]	; (8003318 <HAL_RTC_MspInit+0x2c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d105      	bne.n	800330a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032fe:	4b07      	ldr	r3, [pc, #28]	; (800331c <HAL_RTC_MspInit+0x30>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a06      	ldr	r2, [pc, #24]	; (800331c <HAL_RTC_MspInit+0x30>)
 8003304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40002800 	.word	0x40002800
 800331c:	40023800 	.word	0x40023800

08003320 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2d      	ldr	r2, [pc, #180]	; (80033f4 <HAL_SPI_MspInit+0xd4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d154      	bne.n	80033ec <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003342:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <HAL_SPI_MspInit+0xd8>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <HAL_SPI_MspInit+0xd8>)
 8003348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800334c:	6413      	str	r3, [r2, #64]	; 0x40
 800334e:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <HAL_SPI_MspInit+0xd8>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800335a:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_SPI_MspInit+0xd8>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <HAL_SPI_MspInit+0xd8>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_SPI_MspInit+0xd8>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003372:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <HAL_SPI_MspInit+0xd8>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a20      	ldr	r2, [pc, #128]	; (80033f8 <HAL_SPI_MspInit+0xd8>)
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_SPI_MspInit+0xd8>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800338a:	2302      	movs	r3, #2
 800338c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800339a:	2305      	movs	r3, #5
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800339e:	f107 0314 	add.w	r3, r7, #20
 80033a2:	4619      	mov	r1, r3
 80033a4:	4815      	ldr	r0, [pc, #84]	; (80033fc <HAL_SPI_MspInit+0xdc>)
 80033a6:	f001 fd57 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033aa:	2301      	movs	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b6:	2303      	movs	r3, #3
 80033b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033ba:	2305      	movs	r3, #5
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033be:	f107 0314 	add.w	r3, r7, #20
 80033c2:	4619      	mov	r1, r3
 80033c4:	480d      	ldr	r0, [pc, #52]	; (80033fc <HAL_SPI_MspInit+0xdc>)
 80033c6:	f001 fd47 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80033ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80033ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033dc:	2305      	movs	r3, #5
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	4619      	mov	r1, r3
 80033e6:	4806      	ldr	r0, [pc, #24]	; (8003400 <HAL_SPI_MspInit+0xe0>)
 80033e8:	f001 fd36 	bl	8004e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80033ec:	bf00      	nop
 80033ee:	3728      	adds	r7, #40	; 0x28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40003800 	.word	0x40003800
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40022000 	.word	0x40022000
 8003400:	40020400 	.word	0x40020400

08003404 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003404:	b480      	push	{r7}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a2e      	ldr	r2, [pc, #184]	; (80034cc <HAL_TIM_Base_MspInit+0xc8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d10c      	bne.n	8003430 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003416:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	4a2d      	ldr	r2, [pc, #180]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6453      	str	r3, [r2, #68]	; 0x44
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800342e:	e046      	b.n	80034be <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003438:	d10c      	bne.n	8003454 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	4a24      	ldr	r2, [pc, #144]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6413      	str	r3, [r2, #64]	; 0x40
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	69bb      	ldr	r3, [r7, #24]
}
 8003452:	e034      	b.n	80034be <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <HAL_TIM_Base_MspInit+0xd0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10c      	bne.n	8003478 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800345e:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 8003464:	f043 0302 	orr.w	r3, r3, #2
 8003468:	6413      	str	r3, [r2, #64]	; 0x40
 800346a:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	697b      	ldr	r3, [r7, #20]
}
 8003476:	e022      	b.n	80034be <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <HAL_TIM_Base_MspInit+0xd4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d10c      	bne.n	800349c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003482:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 8003488:	f043 0308 	orr.w	r3, r3, #8
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]
}
 800349a:	e010      	b.n	80034be <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0e      	ldr	r2, [pc, #56]	; (80034dc <HAL_TIM_Base_MspInit+0xd8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10b      	bne.n	80034be <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <HAL_TIM_Base_MspInit+0xcc>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
}
 80034be:	bf00      	nop
 80034c0:	3724      	adds	r7, #36	; 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000c00 	.word	0x40000c00
 80034dc:	40010400 	.word	0x40010400

080034e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 030c 	add.w	r3, r7, #12
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a11      	ldr	r2, [pc, #68]	; (8003544 <HAL_TIM_MspPostInit+0x64>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d11b      	bne.n	800353a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_TIM_MspPostInit+0x68>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a10      	ldr	r2, [pc, #64]	; (8003548 <HAL_TIM_MspPostInit+0x68>)
 8003508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_TIM_MspPostInit+0x68>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI2     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800351a:	2304      	movs	r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800352a:	2303      	movs	r3, #3
 800352c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800352e:	f107 030c 	add.w	r3, r7, #12
 8003532:	4619      	mov	r1, r3
 8003534:	4805      	ldr	r0, [pc, #20]	; (800354c <HAL_TIM_MspPostInit+0x6c>)
 8003536:	f001 fc8f 	bl	8004e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800353a:	bf00      	nop
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40010400 	.word	0x40010400
 8003548:	40023800 	.word	0x40023800
 800354c:	40022000 	.word	0x40022000

08003550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08e      	sub	sp, #56	; 0x38
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a57      	ldr	r2, [pc, #348]	; (80036cc <HAL_UART_MspInit+0x17c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d128      	bne.n	80035c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003572:	4b57      	ldr	r3, [pc, #348]	; (80036d0 <HAL_UART_MspInit+0x180>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a56      	ldr	r2, [pc, #344]	; (80036d0 <HAL_UART_MspInit+0x180>)
 8003578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
 800357e:	4b54      	ldr	r3, [pc, #336]	; (80036d0 <HAL_UART_MspInit+0x180>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003586:	623b      	str	r3, [r7, #32]
 8003588:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800358a:	4b51      	ldr	r3, [pc, #324]	; (80036d0 <HAL_UART_MspInit+0x180>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	4a50      	ldr	r2, [pc, #320]	; (80036d0 <HAL_UART_MspInit+0x180>)
 8003590:	f043 0320 	orr.w	r3, r3, #32
 8003594:	6313      	str	r3, [r2, #48]	; 0x30
 8003596:	4b4e      	ldr	r3, [pc, #312]	; (80036d0 <HAL_UART_MspInit+0x180>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80035a2:	23c0      	movs	r3, #192	; 0xc0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a6:	2302      	movs	r3, #2
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ae:	2303      	movs	r3, #3
 80035b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80035b2:	2308      	movs	r3, #8
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ba:	4619      	mov	r1, r3
 80035bc:	4845      	ldr	r0, [pc, #276]	; (80036d4 <HAL_UART_MspInit+0x184>)
 80035be:	f001 fc4b 	bl	8004e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035c2:	e07f      	b.n	80036c4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a43      	ldr	r2, [pc, #268]	; (80036d8 <HAL_UART_MspInit+0x188>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d14d      	bne.n	800366a <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80035ce:	4b40      	ldr	r3, [pc, #256]	; (80036d0 <HAL_UART_MspInit+0x180>)
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	4a3f      	ldr	r2, [pc, #252]	; (80036d0 <HAL_UART_MspInit+0x180>)
 80035d4:	f043 0310 	orr.w	r3, r3, #16
 80035d8:	6453      	str	r3, [r2, #68]	; 0x44
 80035da:	4b3d      	ldr	r3, [pc, #244]	; (80036d0 <HAL_UART_MspInit+0x180>)
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e6:	4b3a      	ldr	r3, [pc, #232]	; (80036d0 <HAL_UART_MspInit+0x180>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a39      	ldr	r2, [pc, #228]	; (80036d0 <HAL_UART_MspInit+0x180>)
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <HAL_UART_MspInit+0x180>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fe:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <HAL_UART_MspInit+0x180>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a33      	ldr	r2, [pc, #204]	; (80036d0 <HAL_UART_MspInit+0x180>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <HAL_UART_MspInit+0x180>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003622:	2300      	movs	r3, #0
 8003624:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003626:	2307      	movs	r3, #7
 8003628:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800362a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362e:	4619      	mov	r1, r3
 8003630:	482a      	ldr	r0, [pc, #168]	; (80036dc <HAL_UART_MspInit+0x18c>)
 8003632:	f001 fc11 	bl	8004e58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363c:	2302      	movs	r3, #2
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003644:	2300      	movs	r3, #0
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003648:	2307      	movs	r3, #7
 800364a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800364c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003650:	4619      	mov	r1, r3
 8003652:	4823      	ldr	r0, [pc, #140]	; (80036e0 <HAL_UART_MspInit+0x190>)
 8003654:	f001 fc00 	bl	8004e58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8003658:	2200      	movs	r2, #0
 800365a:	2107      	movs	r1, #7
 800365c:	2025      	movs	r0, #37	; 0x25
 800365e:	f000 fe97 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003662:	2025      	movs	r0, #37	; 0x25
 8003664:	f000 feb0 	bl	80043c8 <HAL_NVIC_EnableIRQ>
}
 8003668:	e02c      	b.n	80036c4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <HAL_UART_MspInit+0x194>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d127      	bne.n	80036c4 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003674:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <HAL_UART_MspInit+0x180>)
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	4a15      	ldr	r2, [pc, #84]	; (80036d0 <HAL_UART_MspInit+0x180>)
 800367a:	f043 0320 	orr.w	r3, r3, #32
 800367e:	6453      	str	r3, [r2, #68]	; 0x44
 8003680:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <HAL_UART_MspInit+0x180>)
 8003682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800368c:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <HAL_UART_MspInit+0x180>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	4a0f      	ldr	r2, [pc, #60]	; (80036d0 <HAL_UART_MspInit+0x180>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	6313      	str	r3, [r2, #48]	; 0x30
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <HAL_UART_MspInit+0x180>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80036a4:	23c0      	movs	r3, #192	; 0xc0
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	2302      	movs	r3, #2
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b0:	2303      	movs	r3, #3
 80036b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80036b4:	2308      	movs	r3, #8
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036bc:	4619      	mov	r1, r3
 80036be:	480a      	ldr	r0, [pc, #40]	; (80036e8 <HAL_UART_MspInit+0x198>)
 80036c0:	f001 fbca 	bl	8004e58 <HAL_GPIO_Init>
}
 80036c4:	bf00      	nop
 80036c6:	3738      	adds	r7, #56	; 0x38
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40007800 	.word	0x40007800
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40021400 	.word	0x40021400
 80036d8:	40011000 	.word	0x40011000
 80036dc:	40020400 	.word	0x40020400
 80036e0:	40020000 	.word	0x40020000
 80036e4:	40011400 	.word	0x40011400
 80036e8:	40020800 	.word	0x40020800

080036ec <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80036f2:	1d3b      	adds	r3, r7, #4
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003700:	4b3a      	ldr	r3, [pc, #232]	; (80037ec <HAL_FMC_MspInit+0x100>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d16d      	bne.n	80037e4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003708:	4b38      	ldr	r3, [pc, #224]	; (80037ec <HAL_FMC_MspInit+0x100>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800370e:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <HAL_FMC_MspInit+0x104>)
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	4a37      	ldr	r2, [pc, #220]	; (80037f0 <HAL_FMC_MspInit+0x104>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6393      	str	r3, [r2, #56]	; 0x38
 800371a:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <HAL_FMC_MspInit+0x104>)
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8003726:	f64f 7383 	movw	r3, #65411	; 0xff83
 800372a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372c:	2302      	movs	r3, #2
 800372e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003734:	2303      	movs	r3, #3
 8003736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003738:	230c      	movs	r3, #12
 800373a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	4619      	mov	r1, r3
 8003740:	482c      	ldr	r0, [pc, #176]	; (80037f4 <HAL_FMC_MspInit+0x108>)
 8003742:	f001 fb89 	bl	8004e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8003746:	f248 1333 	movw	r3, #33075	; 0x8133
 800374a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374c:	2302      	movs	r3, #2
 800374e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003754:	2303      	movs	r3, #3
 8003756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003758:	230c      	movs	r3, #12
 800375a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800375c:	1d3b      	adds	r3, r7, #4
 800375e:	4619      	mov	r1, r3
 8003760:	4825      	ldr	r0, [pc, #148]	; (80037f8 <HAL_FMC_MspInit+0x10c>)
 8003762:	f001 fb79 	bl	8004e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8003766:	f24c 7303 	movw	r3, #50947	; 0xc703
 800376a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003774:	2303      	movs	r3, #3
 8003776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003778:	230c      	movs	r3, #12
 800377a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	4619      	mov	r1, r3
 8003780:	481e      	ldr	r0, [pc, #120]	; (80037fc <HAL_FMC_MspInit+0x110>)
 8003782:	f001 fb69 	bl	8004e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003786:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800378a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378c:	2302      	movs	r3, #2
 800378e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003794:	2303      	movs	r3, #3
 8003796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003798:	230c      	movs	r3, #12
 800379a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800379c:	1d3b      	adds	r3, r7, #4
 800379e:	4619      	mov	r1, r3
 80037a0:	4817      	ldr	r0, [pc, #92]	; (8003800 <HAL_FMC_MspInit+0x114>)
 80037a2:	f001 fb59 	bl	8004e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80037a6:	2328      	movs	r3, #40	; 0x28
 80037a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b2:	2303      	movs	r3, #3
 80037b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037b6:	230c      	movs	r3, #12
 80037b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	4619      	mov	r1, r3
 80037be:	4811      	ldr	r0, [pc, #68]	; (8003804 <HAL_FMC_MspInit+0x118>)
 80037c0:	f001 fb4a 	bl	8004e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037c4:	2308      	movs	r3, #8
 80037c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c8:	2302      	movs	r3, #2
 80037ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d0:	2303      	movs	r3, #3
 80037d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037d4:	230c      	movs	r3, #12
 80037d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	4619      	mov	r1, r3
 80037dc:	480a      	ldr	r0, [pc, #40]	; (8003808 <HAL_FMC_MspInit+0x11c>)
 80037de:	f001 fb3b 	bl	8004e58 <HAL_GPIO_Init>
 80037e2:	e000      	b.n	80037e6 <HAL_FMC_MspInit+0xfa>
    return;
 80037e4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000494 	.word	0x20000494
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40021800 	.word	0x40021800
 80037fc:	40020c00 	.word	0x40020c00
 8003800:	40021400 	.word	0x40021400
 8003804:	40021c00 	.word	0x40021c00
 8003808:	40020800 	.word	0x40020800

0800380c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003814:	f7ff ff6a 	bl	80036ec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003830:	2200      	movs	r2, #0
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	2036      	movs	r0, #54	; 0x36
 8003836:	f000 fdab 	bl	8004390 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800383a:	2036      	movs	r0, #54	; 0x36
 800383c:	f000 fdc4 	bl	80043c8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003840:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <HAL_InitTick+0xa0>)
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <HAL_InitTick+0xa0>)
 8003846:	f043 0310 	orr.w	r3, r3, #16
 800384a:	6413      	str	r3, [r2, #64]	; 0x40
 800384c:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <HAL_InitTick+0xa0>)
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003858:	f107 0210 	add.w	r2, r7, #16
 800385c:	f107 0314 	add.w	r3, r7, #20
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f003 fbe4 	bl	8007030 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003868:	f003 fbba 	bl	8006fe0 <HAL_RCC_GetPCLK1Freq>
 800386c:	4603      	mov	r3, r0
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <HAL_InitTick+0xa4>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	0c9b      	lsrs	r3, r3, #18
 800387c:	3b01      	subs	r3, #1
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <HAL_InitTick+0xa8>)
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <HAL_InitTick+0xac>)
 8003884:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <HAL_InitTick+0xa8>)
 8003888:	f240 32e7 	movw	r2, #999	; 0x3e7
 800388c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800388e:	4a0e      	ldr	r2, [pc, #56]	; (80038c8 <HAL_InitTick+0xa8>)
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <HAL_InitTick+0xa8>)
 8003896:	2200      	movs	r2, #0
 8003898:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_InitTick+0xa8>)
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80038a0:	4809      	ldr	r0, [pc, #36]	; (80038c8 <HAL_InitTick+0xa8>)
 80038a2:	f004 fcb8 	bl	8008216 <HAL_TIM_Base_Init>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80038ac:	4806      	ldr	r0, [pc, #24]	; (80038c8 <HAL_InitTick+0xa8>)
 80038ae:	f004 fcdd 	bl	800826c <HAL_TIM_Base_Start_IT>
 80038b2:	4603      	mov	r3, r0
 80038b4:	e000      	b.n	80038b8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3730      	adds	r7, #48	; 0x30
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	431bde83 	.word	0x431bde83
 80038c8:	20008c90 	.word	0x20008c90
 80038cc:	40001000 	.word	0x40001000

080038d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038d4:	e7fe      	b.n	80038d4 <NMI_Handler+0x4>

080038d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038da:	e7fe      	b.n	80038da <HardFault_Handler+0x4>

080038dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <MemManage_Handler+0x4>

080038e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038e6:	e7fe      	b.n	80038e6 <BusFault_Handler+0x4>

080038e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <UsageFault_Handler+0x4>

080038ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003900:	4802      	ldr	r0, [pc, #8]	; (800390c <USART1_IRQHandler+0x10>)
 8003902:	f005 ff17 	bl	8009734 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20008964 	.word	0x20008964

08003910 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <TIM6_DAC_IRQHandler+0x20>)
 8003916:	791b      	ldrb	r3, [r3, #4]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800391e:	4804      	ldr	r0, [pc, #16]	; (8003930 <TIM6_DAC_IRQHandler+0x20>)
 8003920:	f000 fd82 	bl	8004428 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003924:	4803      	ldr	r0, [pc, #12]	; (8003934 <TIM6_DAC_IRQHandler+0x24>)
 8003926:	f004 fd00 	bl	800832a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	200089e4 	.word	0x200089e4
 8003934:	20008c90 	.word	0x20008c90

08003938 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800393c:	4802      	ldr	r0, [pc, #8]	; (8003948 <LTDC_IRQHandler+0x10>)
 800393e:	f002 fbf5 	bl	800612c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20008828 	.word	0x20008828

0800394c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003950:	4b08      	ldr	r3, [pc, #32]	; (8003974 <SystemInit+0x28>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	4a07      	ldr	r2, [pc, #28]	; (8003974 <SystemInit+0x28>)
 8003958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800395c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <SystemInit+0x28>)
 8003962:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003966:	609a      	str	r2, [r3, #8]
#endif
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800397c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800397e:	e003      	b.n	8003988 <LoopCopyDataInit>

08003980 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003982:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003984:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003986:	3104      	adds	r1, #4

08003988 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003988:	480b      	ldr	r0, [pc, #44]	; (80039b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800398c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800398e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003990:	d3f6      	bcc.n	8003980 <CopyDataInit>
  ldr  r2, =_sbss
 8003992:	4a0b      	ldr	r2, [pc, #44]	; (80039c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003994:	e002      	b.n	800399c <LoopFillZerobss>

08003996 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003996:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003998:	f842 3b04 	str.w	r3, [r2], #4

0800399c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800399e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80039a0:	d3f9      	bcc.n	8003996 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039a2:	f7ff ffd3 	bl	800394c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039a6:	f009 f9f7 	bl	800cd98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039aa:	f7fc ffbd 	bl	8000928 <main>
  bx  lr    
 80039ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039b0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80039b4:	0800ee5c 	.word	0x0800ee5c
  ldr  r0, =_sdata
 80039b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80039bc:	20000054 	.word	0x20000054
  ldr  r2, =_sbss
 80039c0:	20000054 	.word	0x20000054
  ldr  r3, = _ebss
 80039c4:	20008cd4 	.word	0x20008cd4

080039c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039c8:	e7fe      	b.n	80039c8 <ADC_IRQHandler>

080039ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039ce:	2003      	movs	r0, #3
 80039d0:	f000 fcd3 	bl	800437a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039d4:	2000      	movs	r0, #0
 80039d6:	f7ff ff23 	bl	8003820 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80039da:	f7ff fa0d 	bl	8002df8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_IncTick+0x20>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_IncTick+0x24>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4413      	add	r3, r2
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <HAL_IncTick+0x24>)
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	2000004c 	.word	0x2000004c
 8003a08:	20008cd0 	.word	0x20008cd0

08003a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_GetTick+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20008cd0 	.word	0x20008cd0

08003a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7ff ffee 	bl	8003a0c <HAL_GetTick>
 8003a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d005      	beq.n	8003a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <HAL_Delay+0x44>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a4a:	bf00      	nop
 8003a4c:	f7ff ffde 	bl	8003a0c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d8f7      	bhi.n	8003a4c <HAL_Delay+0x28>
  {
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	2000004c 	.word	0x2000004c

08003a6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e031      	b.n	8003ae6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff f9dc 	bl	8002e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d116      	bne.n	8003ad8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <HAL_ADC_Init+0x84>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	f043 0202 	orr.w	r2, r3, #2
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fab6 	bl	800402c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	f043 0201 	orr.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ad6:	e001      	b.n	8003adc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	ffffeefd 	.word	0xffffeefd

08003af4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_ADC_Start+0x1a>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e0a0      	b.n	8003c50 <HAL_ADC_Start+0x15c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d018      	beq.n	8003b56 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003b34:	4b49      	ldr	r3, [pc, #292]	; (8003c5c <HAL_ADC_Start+0x168>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a49      	ldr	r2, [pc, #292]	; (8003c60 <HAL_ADC_Start+0x16c>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	0c9a      	lsrs	r2, r3, #18
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003b48:	e002      	b.n	8003b50 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f9      	bne.n	8003b4a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d174      	bne.n	8003c4e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b68:	4b3e      	ldr	r3, [pc, #248]	; (8003c64 <HAL_ADC_Start+0x170>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d106      	bne.n	8003bae <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	f023 0206 	bic.w	r2, r3, #6
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
 8003bac:	e002      	b.n	8003bb4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003bc4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003bc6:	4b28      	ldr	r3, [pc, #160]	; (8003c68 <HAL_ADC_Start+0x174>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10f      	bne.n	8003bf2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d136      	bne.n	8003c4e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	e02d      	b.n	8003c4e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <HAL_ADC_Start+0x178>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d10e      	bne.n	8003c1a <HAL_ADC_Start+0x126>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d107      	bne.n	8003c1a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c18:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003c1a:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <HAL_ADC_Start+0x174>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d113      	bne.n	8003c4e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a11      	ldr	r2, [pc, #68]	; (8003c70 <HAL_ADC_Start+0x17c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10e      	bne.n	8003c4e <HAL_ADC_Start+0x15a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d107      	bne.n	8003c4e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c4c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	20000044 	.word	0x20000044
 8003c60:	431bde83 	.word	0x431bde83
 8003c64:	fffff8fe 	.word	0xfffff8fe
 8003c68:	40012300 	.word	0x40012300
 8003c6c:	40012000 	.word	0x40012000
 8003c70:	40012200 	.word	0x40012200

08003c74 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c90:	d113      	bne.n	8003cba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca0:	d10b      	bne.n	8003cba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f043 0220 	orr.w	r2, r3, #32
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e05c      	b.n	8003d74 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003cba:	f7ff fea7 	bl	8003a0c <HAL_GetTick>
 8003cbe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003cc0:	e01a      	b.n	8003cf8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc8:	d016      	beq.n	8003cf8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <HAL_ADC_PollForConversion+0x6c>
 8003cd0:	f7ff fe9c 	bl	8003a0c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d20b      	bcs.n	8003cf8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f043 0204 	orr.w	r2, r3, #4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e03d      	b.n	8003d74 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d1dd      	bne.n	8003cc2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f06f 0212 	mvn.w	r2, #18
 8003d0e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d123      	bne.n	8003d72 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11f      	bne.n	8003d72 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d006      	beq.n	8003d4e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d111      	bne.n	8003d72 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d105      	bne.n	8003d72 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f043 0201 	orr.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x1c>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e12a      	b.n	800400a <HAL_ADC_ConfigChannel+0x272>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b09      	cmp	r3, #9
 8003dc2:	d93a      	bls.n	8003e3a <HAL_ADC_ConfigChannel+0xa2>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dcc:	d035      	beq.n	8003e3a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68d9      	ldr	r1, [r3, #12]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4613      	mov	r3, r2
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	4413      	add	r3, r2
 8003de2:	3b1e      	subs	r3, #30
 8003de4:	2207      	movs	r2, #7
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43da      	mvns	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	400a      	ands	r2, r1
 8003df2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a87      	ldr	r2, [pc, #540]	; (8004018 <HAL_ADC_ConfigChannel+0x280>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10a      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68d9      	ldr	r1, [r3, #12]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	061a      	lsls	r2, r3, #24
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e12:	e035      	b.n	8003e80 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68d9      	ldr	r1, [r3, #12]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	4618      	mov	r0, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4403      	add	r3, r0
 8003e2c:	3b1e      	subs	r3, #30
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e38:	e022      	b.n	8003e80 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6919      	ldr	r1, [r3, #16]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	4613      	mov	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	2207      	movs	r2, #7
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43da      	mvns	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6919      	ldr	r1, [r3, #16]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	4618      	mov	r0, r3
 8003e70:	4603      	mov	r3, r0
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4403      	add	r3, r0
 8003e76:	409a      	lsls	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d824      	bhi.n	8003ed2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	3b05      	subs	r3, #5
 8003e9a:	221f      	movs	r2, #31
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43da      	mvns	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3b05      	subs	r3, #5
 8003ec4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	635a      	str	r2, [r3, #52]	; 0x34
 8003ed0:	e04c      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b0c      	cmp	r3, #12
 8003ed8:	d824      	bhi.n	8003f24 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	3b23      	subs	r3, #35	; 0x23
 8003eec:	221f      	movs	r2, #31
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	400a      	ands	r2, r1
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	4618      	mov	r0, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	3b23      	subs	r3, #35	; 0x23
 8003f16:	fa00 f203 	lsl.w	r2, r0, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
 8003f22:	e023      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	3b41      	subs	r3, #65	; 0x41
 8003f36:	221f      	movs	r2, #31
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43da      	mvns	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	400a      	ands	r2, r1
 8003f44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	4618      	mov	r0, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3b41      	subs	r3, #65	; 0x41
 8003f60:	fa00 f203 	lsl.w	r2, r0, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a2a      	ldr	r2, [pc, #168]	; (800401c <HAL_ADC_ConfigChannel+0x284>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d10a      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x1f4>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f7e:	d105      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003f80:	4b27      	ldr	r3, [pc, #156]	; (8004020 <HAL_ADC_ConfigChannel+0x288>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a26      	ldr	r2, [pc, #152]	; (8004020 <HAL_ADC_ConfigChannel+0x288>)
 8003f86:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003f8a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a22      	ldr	r2, [pc, #136]	; (800401c <HAL_ADC_ConfigChannel+0x284>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d109      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x212>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b12      	cmp	r3, #18
 8003f9c:	d105      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003f9e:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_ADC_ConfigChannel+0x288>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4a1f      	ldr	r2, [pc, #124]	; (8004020 <HAL_ADC_ConfigChannel+0x288>)
 8003fa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fa8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1b      	ldr	r2, [pc, #108]	; (800401c <HAL_ADC_ConfigChannel+0x284>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d125      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x268>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a17      	ldr	r2, [pc, #92]	; (8004018 <HAL_ADC_ConfigChannel+0x280>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d003      	beq.n	8003fc6 <HAL_ADC_ConfigChannel+0x22e>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b11      	cmp	r3, #17
 8003fc4:	d11c      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003fc6:	4b16      	ldr	r3, [pc, #88]	; (8004020 <HAL_ADC_ConfigChannel+0x288>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4a15      	ldr	r2, [pc, #84]	; (8004020 <HAL_ADC_ConfigChannel+0x288>)
 8003fcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fd0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a10      	ldr	r2, [pc, #64]	; (8004018 <HAL_ADC_ConfigChannel+0x280>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d111      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <HAL_ADC_ConfigChannel+0x28c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a11      	ldr	r2, [pc, #68]	; (8004028 <HAL_ADC_ConfigChannel+0x290>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	0c9a      	lsrs	r2, r3, #18
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003ff2:	e002      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f9      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	10000012 	.word	0x10000012
 800401c:	40012000 	.word	0x40012000
 8004020:	40012300 	.word	0x40012300
 8004024:	20000044 	.word	0x20000044
 8004028:	431bde83 	.word	0x431bde83

0800402c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004034:	4b78      	ldr	r3, [pc, #480]	; (8004218 <ADC_Init+0x1ec>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a77      	ldr	r2, [pc, #476]	; (8004218 <ADC_Init+0x1ec>)
 800403a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800403e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004040:	4b75      	ldr	r3, [pc, #468]	; (8004218 <ADC_Init+0x1ec>)
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4973      	ldr	r1, [pc, #460]	; (8004218 <ADC_Init+0x1ec>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800405c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	021a      	lsls	r2, r3, #8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004080:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6899      	ldr	r1, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	4a58      	ldr	r2, [pc, #352]	; (800421c <ADC_Init+0x1f0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d022      	beq.n	8004106 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6899      	ldr	r1, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6899      	ldr	r1, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	e00f      	b.n	8004126 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004114:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004124:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0202 	bic.w	r2, r2, #2
 8004134:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6899      	ldr	r1, [r3, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	005a      	lsls	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004162:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004172:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6859      	ldr	r1, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	3b01      	subs	r3, #1
 8004180:	035a      	lsls	r2, r3, #13
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	e007      	b.n	800419c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800419a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80041aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	051a      	lsls	r2, r3, #20
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6899      	ldr	r1, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041de:	025a      	lsls	r2, r3, #9
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6899      	ldr	r1, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	029a      	lsls	r2, r3, #10
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	609a      	str	r2, [r3, #8]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	40012300 	.word	0x40012300
 800421c:	0f000001 	.word	0x0f000001

08004220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <__NVIC_SetPriorityGrouping+0x40>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800423c:	4013      	ands	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <__NVIC_SetPriorityGrouping+0x44>)
 800424a:	4313      	orrs	r3, r2
 800424c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800424e:	4a04      	ldr	r2, [pc, #16]	; (8004260 <__NVIC_SetPriorityGrouping+0x40>)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	60d3      	str	r3, [r2, #12]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000ed00 	.word	0xe000ed00
 8004264:	05fa0000 	.word	0x05fa0000

08004268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800426c:	4b04      	ldr	r3, [pc, #16]	; (8004280 <__NVIC_GetPriorityGrouping+0x18>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f003 0307 	and.w	r3, r3, #7
}
 8004276:	4618      	mov	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	2b00      	cmp	r3, #0
 8004294:	db0b      	blt.n	80042ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	f003 021f 	and.w	r2, r3, #31
 800429c:	4907      	ldr	r1, [pc, #28]	; (80042bc <__NVIC_EnableIRQ+0x38>)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2001      	movs	r0, #1
 80042a6:	fa00 f202 	lsl.w	r2, r0, r2
 80042aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	e000e100 	.word	0xe000e100

080042c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	6039      	str	r1, [r7, #0]
 80042ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db0a      	blt.n	80042ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	490c      	ldr	r1, [pc, #48]	; (800430c <__NVIC_SetPriority+0x4c>)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	440b      	add	r3, r1
 80042e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042e8:	e00a      	b.n	8004300 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4908      	ldr	r1, [pc, #32]	; (8004310 <__NVIC_SetPriority+0x50>)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	3b04      	subs	r3, #4
 80042f8:	0112      	lsls	r2, r2, #4
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	440b      	add	r3, r1
 80042fe:	761a      	strb	r2, [r3, #24]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	e000e100 	.word	0xe000e100
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	; 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f1c3 0307 	rsb	r3, r3, #7
 800432e:	2b04      	cmp	r3, #4
 8004330:	bf28      	it	cs
 8004332:	2304      	movcs	r3, #4
 8004334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	3304      	adds	r3, #4
 800433a:	2b06      	cmp	r3, #6
 800433c:	d902      	bls.n	8004344 <NVIC_EncodePriority+0x30>
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3b03      	subs	r3, #3
 8004342:	e000      	b.n	8004346 <NVIC_EncodePriority+0x32>
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004348:	f04f 32ff 	mov.w	r2, #4294967295
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	401a      	ands	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800435c:	f04f 31ff 	mov.w	r1, #4294967295
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	43d9      	mvns	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800436c:	4313      	orrs	r3, r2
         );
}
 800436e:	4618      	mov	r0, r3
 8004370:	3724      	adds	r7, #36	; 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff4c 	bl	8004220 <__NVIC_SetPriorityGrouping>
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043a2:	f7ff ff61 	bl	8004268 <__NVIC_GetPriorityGrouping>
 80043a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	6978      	ldr	r0, [r7, #20]
 80043ae:	f7ff ffb1 	bl	8004314 <NVIC_EncodePriority>
 80043b2:	4602      	mov	r2, r0
 80043b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff80 	bl	80042c0 <__NVIC_SetPriority>
}
 80043c0:	bf00      	nop
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff ff54 	bl	8004284 <__NVIC_EnableIRQ>
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e014      	b.n	8004420 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	791b      	ldrb	r3, [r3, #4]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d105      	bne.n	800440c <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fe fd8c 	bl	8002f24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800443a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443e:	d118      	bne.n	8004472 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2204      	movs	r2, #4
 8004444:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800445a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800446a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f825 	bl	80044bc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800447c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004480:	d118      	bne.n	80044b4 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f043 0202 	orr.w	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800449c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80044ac:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f85b 	bl	800456a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	795b      	ldrb	r3, [r3, #5]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_DAC_ConfigChannel+0x20>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e036      	b.n	800455e <HAL_DAC_ConfigChannel+0x8e>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2202      	movs	r2, #2
 80044fa:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004504:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4013      	ands	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	22c0      	movs	r2, #192	; 0xc0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43da      	mvns	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	400a      	ands	r2, r1
 800454e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800458c:	f7ff fa3e 	bl	8003a0c <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e099      	b.n	80046d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0201 	bic.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045bc:	e00f      	b.n	80045de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045be:	f7ff fa25 	bl	8003a0c <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	d908      	bls.n	80045de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2203      	movs	r2, #3
 80045d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e078      	b.n	80046d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e8      	bne.n	80045be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <HAL_DMA_Init+0x158>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800460a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	2b04      	cmp	r3, #4
 8004636:	d107      	bne.n	8004648 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	4313      	orrs	r3, r2
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0307 	bic.w	r3, r3, #7
 800465e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b04      	cmp	r3, #4
 8004670:	d117      	bne.n	80046a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00e      	beq.n	80046a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f8df 	bl	8004848 <DMA_CheckFifoParam>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2240      	movs	r2, #64	; 0x40
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800469e:	2301      	movs	r3, #1
 80046a0:	e016      	b.n	80046d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f896 	bl	80047dc <DMA_CalcBaseAndBitshift>
 80046b0:	4603      	mov	r3, r0
 80046b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	223f      	movs	r2, #63	; 0x3f
 80046ba:	409a      	lsls	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	f010803f 	.word	0xf010803f

080046dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e050      	b.n	8004790 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d101      	bne.n	80046fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
 80046fc:	e048      	b.n	8004790 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0201 	bic.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2200      	movs	r2, #0
 800471c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2200      	movs	r2, #0
 8004734:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2221      	movs	r2, #33	; 0x21
 800473c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f84c 	bl	80047dc <DMA_CalcBaseAndBitshift>
 8004744:	4603      	mov	r3, r0
 8004746:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	223f      	movs	r2, #63	; 0x3f
 800474e:	409a      	lsls	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d004      	beq.n	80047b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2280      	movs	r2, #128	; 0x80
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e00c      	b.n	80047d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2205      	movs	r2, #5
 80047ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0201 	bic.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	3b10      	subs	r3, #16
 80047ec:	4a13      	ldr	r2, [pc, #76]	; (800483c <DMA_CalcBaseAndBitshift+0x60>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047f6:	4a12      	ldr	r2, [pc, #72]	; (8004840 <DMA_CalcBaseAndBitshift+0x64>)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d908      	bls.n	800481c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <DMA_CalcBaseAndBitshift+0x68>)
 8004812:	4013      	ands	r3, r2
 8004814:	1d1a      	adds	r2, r3, #4
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	659a      	str	r2, [r3, #88]	; 0x58
 800481a:	e006      	b.n	800482a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <DMA_CalcBaseAndBitshift+0x68>)
 8004824:	4013      	ands	r3, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	aaaaaaab 	.word	0xaaaaaaab
 8004840:	0800ee44 	.word	0x0800ee44
 8004844:	fffffc00 	.word	0xfffffc00

08004848 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d11f      	bne.n	80048a2 <DMA_CheckFifoParam+0x5a>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d856      	bhi.n	8004916 <DMA_CheckFifoParam+0xce>
 8004868:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <DMA_CheckFifoParam+0x28>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004881 	.word	0x08004881
 8004874:	08004893 	.word	0x08004893
 8004878:	08004881 	.word	0x08004881
 800487c:	08004917 	.word	0x08004917
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d046      	beq.n	800491a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004890:	e043      	b.n	800491a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800489a:	d140      	bne.n	800491e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a0:	e03d      	b.n	800491e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048aa:	d121      	bne.n	80048f0 <DMA_CheckFifoParam+0xa8>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d837      	bhi.n	8004922 <DMA_CheckFifoParam+0xda>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <DMA_CheckFifoParam+0x70>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048c9 	.word	0x080048c9
 80048bc:	080048cf 	.word	0x080048cf
 80048c0:	080048c9 	.word	0x080048c9
 80048c4:	080048e1 	.word	0x080048e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
      break;
 80048cc:	e030      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d025      	beq.n	8004926 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048de:	e022      	b.n	8004926 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048e8:	d11f      	bne.n	800492a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048ee:	e01c      	b.n	800492a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d903      	bls.n	80048fe <DMA_CheckFifoParam+0xb6>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d003      	beq.n	8004904 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048fc:	e018      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
      break;
 8004902:	e015      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      break;
 8004914:	e00b      	b.n	800492e <DMA_CheckFifoParam+0xe6>
      break;
 8004916:	bf00      	nop
 8004918:	e00a      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 800491a:	bf00      	nop
 800491c:	e008      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 800491e:	bf00      	nop
 8004920:	e006      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 8004922:	bf00      	nop
 8004924:	e004      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 8004926:	bf00      	nop
 8004928:	e002      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;   
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 800492e:	bf00      	nop
    }
  } 
  
  return status; 
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop

08004940 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e039      	b.n	80049c6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fe fb24 	bl	8002fb4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004990:	f023 0107 	bic.w	r1, r3, #7
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a6:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <HAL_DMA2D_Init+0x90>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68d1      	ldr	r1, [r2, #12]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	430b      	orrs	r3, r1
 80049b4:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	ffffc000 	.word	0xffffc000

080049d4 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_DMA2D_Start+0x1c>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e018      	b.n	8004a22 <HAL_DMA2D_Start+0x4e>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f988 	bl	8004d20 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b086      	sub	sp, #24
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d056      	beq.n	8004af4 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004a46:	f7fe ffe1 	bl	8003a0c <HAL_GetTick>
 8004a4a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004a4c:	e04b      	b.n	8004ae6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d023      	beq.n	8004aa8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6e:	f043 0202 	orr.w	r2, r3, #2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a84:	f043 0201 	orr.w	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2221      	movs	r2, #33	; 0x21
 8004a92:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2204      	movs	r2, #4
 8004a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0a5      	b.n	8004bf4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d01a      	beq.n	8004ae6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004ab0:	f7fe ffac 	bl	8003a0c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <HAL_DMA2D_PollForTransfer+0x9c>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10f      	bne.n	8004ae6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e086      	b.n	8004bf4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0ac      	beq.n	8004a4e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d061      	beq.n	8004bda <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b16:	f7fe ff79 	bl	8003a0c <HAL_GetTick>
 8004b1a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004b1c:	e056      	b.n	8004bcc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02e      	beq.n	8004b8e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	f043 0204 	orr.w	r2, r3, #4
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b54:	f043 0202 	orr.w	r2, r3, #2
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6a:	f043 0201 	orr.w	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2229      	movs	r2, #41	; 0x29
 8004b78:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e032      	b.n	8004bf4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d01a      	beq.n	8004bcc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004b96:	f7fe ff39 	bl	8003a0c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <HAL_DMA2D_PollForTransfer+0x182>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10f      	bne.n	8004bcc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb0:	f043 0220 	orr.w	r2, r3, #32
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2203      	movs	r2, #3
 8004bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e013      	b.n	8004bf4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0a1      	beq.n	8004b1e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2212      	movs	r2, #18
 8004be0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_DMA2D_ConfigLayer+0x20>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e079      	b.n	8004d10 <HAL_DMA2D_ConfigLayer+0x114>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	3318      	adds	r3, #24
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	041b      	lsls	r3, r3, #16
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004c46:	4b35      	ldr	r3, [pc, #212]	; (8004d1c <HAL_DMA2D_ConfigLayer+0x120>)
 8004c48:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b0a      	cmp	r3, #10
 8004c50:	d003      	beq.n	8004c5a <HAL_DMA2D_ConfigLayer+0x5e>
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b09      	cmp	r3, #9
 8004c58:	d107      	bne.n	8004c6a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	e005      	b.n	8004c76 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	061b      	lsls	r3, r3, #24
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d120      	bne.n	8004cbe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	ea02 0103 	and.w	r1, r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b0a      	cmp	r3, #10
 8004ca4:	d003      	beq.n	8004cae <HAL_DMA2D_ConfigLayer+0xb2>
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b09      	cmp	r3, #9
 8004cac:	d127      	bne.n	8004cfe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28
 8004cbc:	e01f      	b.n	8004cfe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	ea02 0103 	and.w	r1, r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b0a      	cmp	r3, #10
 8004ce6:	d003      	beq.n	8004cf0 <HAL_DMA2D_ConfigLayer+0xf4>
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b09      	cmp	r3, #9
 8004cee:	d106      	bne.n	8004cfe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004cfc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	ff03000f 	.word	0xff03000f

08004d20 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b08b      	sub	sp, #44	; 0x2c
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d34:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	041a      	lsls	r2, r3, #16
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d58:	d174      	bne.n	8004e44 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d60:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d68:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d70:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d108      	bne.n	8004d92 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	431a      	orrs	r2, r3
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d90:	e053      	b.n	8004e3a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d106      	bne.n	8004da8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
 8004da6:	e048      	b.n	8004e3a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d111      	bne.n	8004dd4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	0cdb      	lsrs	r3, r3, #19
 8004db4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	0a9b      	lsrs	r3, r3, #10
 8004dba:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	08db      	lsrs	r3, r3, #3
 8004dc0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	02db      	lsls	r3, r3, #11
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	e032      	b.n	8004e3a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d117      	bne.n	8004e0c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	0fdb      	lsrs	r3, r3, #31
 8004de0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	0cdb      	lsrs	r3, r3, #19
 8004de6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	0adb      	lsrs	r3, r3, #11
 8004dec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	08db      	lsrs	r3, r3, #3
 8004df2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	029b      	lsls	r3, r3, #10
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	03db      	lsls	r3, r3, #15
 8004e02:	4313      	orrs	r3, r2
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0a:	e016      	b.n	8004e3a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	0f1b      	lsrs	r3, r3, #28
 8004e10:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	0d1b      	lsrs	r3, r3, #20
 8004e16:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	0b1b      	lsrs	r3, r3, #12
 8004e1c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	011a      	lsls	r2, r3, #4
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	031b      	lsls	r3, r3, #12
 8004e32:	4313      	orrs	r3, r2
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004e42:	e003      	b.n	8004e4c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	60da      	str	r2, [r3, #12]
}
 8004e4c:	bf00      	nop
 8004e4e:	372c      	adds	r7, #44	; 0x2c
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b089      	sub	sp, #36	; 0x24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	e175      	b.n	8005164 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004e78:	2201      	movs	r2, #1
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	f040 8164 	bne.w	800515e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d00b      	beq.n	8004eb6 <HAL_GPIO_Init+0x5e>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d007      	beq.n	8004eb6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004eaa:	2b11      	cmp	r3, #17
 8004eac:	d003      	beq.n	8004eb6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b12      	cmp	r3, #18
 8004eb4:	d130      	bne.n	8004f18 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eec:	2201      	movs	r2, #1
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 0201 	and.w	r2, r3, #1
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	2203      	movs	r2, #3
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d003      	beq.n	8004f58 <HAL_GPIO_Init+0x100>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b12      	cmp	r3, #18
 8004f56:	d123      	bne.n	8004fa0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	08da      	lsrs	r2, r3, #3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3208      	adds	r2, #8
 8004f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	220f      	movs	r2, #15
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	43db      	mvns	r3, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	08da      	lsrs	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3208      	adds	r2, #8
 8004f9a:	69b9      	ldr	r1, [r7, #24]
 8004f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	2203      	movs	r2, #3
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 0203 	and.w	r2, r3, #3
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80be 	beq.w	800515e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe2:	4b66      	ldr	r3, [pc, #408]	; (800517c <HAL_GPIO_Init+0x324>)
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	4a65      	ldr	r2, [pc, #404]	; (800517c <HAL_GPIO_Init+0x324>)
 8004fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fec:	6453      	str	r3, [r2, #68]	; 0x44
 8004fee:	4b63      	ldr	r3, [pc, #396]	; (800517c <HAL_GPIO_Init+0x324>)
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004ffa:	4a61      	ldr	r2, [pc, #388]	; (8005180 <HAL_GPIO_Init+0x328>)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	089b      	lsrs	r3, r3, #2
 8005000:	3302      	adds	r3, #2
 8005002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005006:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	220f      	movs	r2, #15
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43db      	mvns	r3, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a58      	ldr	r2, [pc, #352]	; (8005184 <HAL_GPIO_Init+0x32c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d037      	beq.n	8005096 <HAL_GPIO_Init+0x23e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a57      	ldr	r2, [pc, #348]	; (8005188 <HAL_GPIO_Init+0x330>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d031      	beq.n	8005092 <HAL_GPIO_Init+0x23a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a56      	ldr	r2, [pc, #344]	; (800518c <HAL_GPIO_Init+0x334>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d02b      	beq.n	800508e <HAL_GPIO_Init+0x236>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a55      	ldr	r2, [pc, #340]	; (8005190 <HAL_GPIO_Init+0x338>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d025      	beq.n	800508a <HAL_GPIO_Init+0x232>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a54      	ldr	r2, [pc, #336]	; (8005194 <HAL_GPIO_Init+0x33c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01f      	beq.n	8005086 <HAL_GPIO_Init+0x22e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a53      	ldr	r2, [pc, #332]	; (8005198 <HAL_GPIO_Init+0x340>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d019      	beq.n	8005082 <HAL_GPIO_Init+0x22a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a52      	ldr	r2, [pc, #328]	; (800519c <HAL_GPIO_Init+0x344>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d013      	beq.n	800507e <HAL_GPIO_Init+0x226>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a51      	ldr	r2, [pc, #324]	; (80051a0 <HAL_GPIO_Init+0x348>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00d      	beq.n	800507a <HAL_GPIO_Init+0x222>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a50      	ldr	r2, [pc, #320]	; (80051a4 <HAL_GPIO_Init+0x34c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d007      	beq.n	8005076 <HAL_GPIO_Init+0x21e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a4f      	ldr	r2, [pc, #316]	; (80051a8 <HAL_GPIO_Init+0x350>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d101      	bne.n	8005072 <HAL_GPIO_Init+0x21a>
 800506e:	2309      	movs	r3, #9
 8005070:	e012      	b.n	8005098 <HAL_GPIO_Init+0x240>
 8005072:	230a      	movs	r3, #10
 8005074:	e010      	b.n	8005098 <HAL_GPIO_Init+0x240>
 8005076:	2308      	movs	r3, #8
 8005078:	e00e      	b.n	8005098 <HAL_GPIO_Init+0x240>
 800507a:	2307      	movs	r3, #7
 800507c:	e00c      	b.n	8005098 <HAL_GPIO_Init+0x240>
 800507e:	2306      	movs	r3, #6
 8005080:	e00a      	b.n	8005098 <HAL_GPIO_Init+0x240>
 8005082:	2305      	movs	r3, #5
 8005084:	e008      	b.n	8005098 <HAL_GPIO_Init+0x240>
 8005086:	2304      	movs	r3, #4
 8005088:	e006      	b.n	8005098 <HAL_GPIO_Init+0x240>
 800508a:	2303      	movs	r3, #3
 800508c:	e004      	b.n	8005098 <HAL_GPIO_Init+0x240>
 800508e:	2302      	movs	r3, #2
 8005090:	e002      	b.n	8005098 <HAL_GPIO_Init+0x240>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <HAL_GPIO_Init+0x240>
 8005096:	2300      	movs	r3, #0
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	f002 0203 	and.w	r2, r2, #3
 800509e:	0092      	lsls	r2, r2, #2
 80050a0:	4093      	lsls	r3, r2
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80050a8:	4935      	ldr	r1, [pc, #212]	; (8005180 <HAL_GPIO_Init+0x328>)
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	089b      	lsrs	r3, r3, #2
 80050ae:	3302      	adds	r3, #2
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050b6:	4b3d      	ldr	r3, [pc, #244]	; (80051ac <HAL_GPIO_Init+0x354>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050da:	4a34      	ldr	r2, [pc, #208]	; (80051ac <HAL_GPIO_Init+0x354>)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050e0:	4b32      	ldr	r3, [pc, #200]	; (80051ac <HAL_GPIO_Init+0x354>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	43db      	mvns	r3, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4013      	ands	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005104:	4a29      	ldr	r2, [pc, #164]	; (80051ac <HAL_GPIO_Init+0x354>)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800510a:	4b28      	ldr	r3, [pc, #160]	; (80051ac <HAL_GPIO_Init+0x354>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	43db      	mvns	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800512e:	4a1f      	ldr	r2, [pc, #124]	; (80051ac <HAL_GPIO_Init+0x354>)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005134:	4b1d      	ldr	r3, [pc, #116]	; (80051ac <HAL_GPIO_Init+0x354>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005158:	4a14      	ldr	r2, [pc, #80]	; (80051ac <HAL_GPIO_Init+0x354>)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3301      	adds	r3, #1
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b0f      	cmp	r3, #15
 8005168:	f67f ae86 	bls.w	8004e78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	3724      	adds	r7, #36	; 0x24
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800
 8005180:	40013800 	.word	0x40013800
 8005184:	40020000 	.word	0x40020000
 8005188:	40020400 	.word	0x40020400
 800518c:	40020800 	.word	0x40020800
 8005190:	40020c00 	.word	0x40020c00
 8005194:	40021000 	.word	0x40021000
 8005198:	40021400 	.word	0x40021400
 800519c:	40021800 	.word	0x40021800
 80051a0:	40021c00 	.word	0x40021c00
 80051a4:	40022000 	.word	0x40022000
 80051a8:	40022400 	.word	0x40022400
 80051ac:	40013c00 	.word	0x40013c00

080051b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	e0d9      	b.n	8005380 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80051cc:	2201      	movs	r2, #1
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4013      	ands	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	f040 80c9 	bne.w	800537a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80051e8:	4a6b      	ldr	r2, [pc, #428]	; (8005398 <HAL_GPIO_DeInit+0x1e8>)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	089b      	lsrs	r3, r3, #2
 80051ee:	3302      	adds	r3, #2
 80051f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	220f      	movs	r2, #15
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	4013      	ands	r3, r2
 8005208:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a63      	ldr	r2, [pc, #396]	; (800539c <HAL_GPIO_DeInit+0x1ec>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d037      	beq.n	8005282 <HAL_GPIO_DeInit+0xd2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a62      	ldr	r2, [pc, #392]	; (80053a0 <HAL_GPIO_DeInit+0x1f0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d031      	beq.n	800527e <HAL_GPIO_DeInit+0xce>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a61      	ldr	r2, [pc, #388]	; (80053a4 <HAL_GPIO_DeInit+0x1f4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02b      	beq.n	800527a <HAL_GPIO_DeInit+0xca>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a60      	ldr	r2, [pc, #384]	; (80053a8 <HAL_GPIO_DeInit+0x1f8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d025      	beq.n	8005276 <HAL_GPIO_DeInit+0xc6>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a5f      	ldr	r2, [pc, #380]	; (80053ac <HAL_GPIO_DeInit+0x1fc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01f      	beq.n	8005272 <HAL_GPIO_DeInit+0xc2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a5e      	ldr	r2, [pc, #376]	; (80053b0 <HAL_GPIO_DeInit+0x200>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d019      	beq.n	800526e <HAL_GPIO_DeInit+0xbe>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a5d      	ldr	r2, [pc, #372]	; (80053b4 <HAL_GPIO_DeInit+0x204>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_GPIO_DeInit+0xba>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a5c      	ldr	r2, [pc, #368]	; (80053b8 <HAL_GPIO_DeInit+0x208>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00d      	beq.n	8005266 <HAL_GPIO_DeInit+0xb6>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a5b      	ldr	r2, [pc, #364]	; (80053bc <HAL_GPIO_DeInit+0x20c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d007      	beq.n	8005262 <HAL_GPIO_DeInit+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a5a      	ldr	r2, [pc, #360]	; (80053c0 <HAL_GPIO_DeInit+0x210>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d101      	bne.n	800525e <HAL_GPIO_DeInit+0xae>
 800525a:	2309      	movs	r3, #9
 800525c:	e012      	b.n	8005284 <HAL_GPIO_DeInit+0xd4>
 800525e:	230a      	movs	r3, #10
 8005260:	e010      	b.n	8005284 <HAL_GPIO_DeInit+0xd4>
 8005262:	2308      	movs	r3, #8
 8005264:	e00e      	b.n	8005284 <HAL_GPIO_DeInit+0xd4>
 8005266:	2307      	movs	r3, #7
 8005268:	e00c      	b.n	8005284 <HAL_GPIO_DeInit+0xd4>
 800526a:	2306      	movs	r3, #6
 800526c:	e00a      	b.n	8005284 <HAL_GPIO_DeInit+0xd4>
 800526e:	2305      	movs	r3, #5
 8005270:	e008      	b.n	8005284 <HAL_GPIO_DeInit+0xd4>
 8005272:	2304      	movs	r3, #4
 8005274:	e006      	b.n	8005284 <HAL_GPIO_DeInit+0xd4>
 8005276:	2303      	movs	r3, #3
 8005278:	e004      	b.n	8005284 <HAL_GPIO_DeInit+0xd4>
 800527a:	2302      	movs	r3, #2
 800527c:	e002      	b.n	8005284 <HAL_GPIO_DeInit+0xd4>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <HAL_GPIO_DeInit+0xd4>
 8005282:	2300      	movs	r3, #0
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	f002 0203 	and.w	r2, r2, #3
 800528a:	0092      	lsls	r2, r2, #2
 800528c:	4093      	lsls	r3, r2
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d132      	bne.n	80052fa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005294:	4b4b      	ldr	r3, [pc, #300]	; (80053c4 <HAL_GPIO_DeInit+0x214>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	43db      	mvns	r3, r3
 800529c:	4949      	ldr	r1, [pc, #292]	; (80053c4 <HAL_GPIO_DeInit+0x214>)
 800529e:	4013      	ands	r3, r2
 80052a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80052a2:	4b48      	ldr	r3, [pc, #288]	; (80053c4 <HAL_GPIO_DeInit+0x214>)
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	43db      	mvns	r3, r3
 80052aa:	4946      	ldr	r1, [pc, #280]	; (80053c4 <HAL_GPIO_DeInit+0x214>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80052b0:	4b44      	ldr	r3, [pc, #272]	; (80053c4 <HAL_GPIO_DeInit+0x214>)
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	43db      	mvns	r3, r3
 80052b8:	4942      	ldr	r1, [pc, #264]	; (80053c4 <HAL_GPIO_DeInit+0x214>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80052be:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <HAL_GPIO_DeInit+0x214>)
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	493f      	ldr	r1, [pc, #252]	; (80053c4 <HAL_GPIO_DeInit+0x214>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	220f      	movs	r2, #15
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80052dc:	4a2e      	ldr	r2, [pc, #184]	; (8005398 <HAL_GPIO_DeInit+0x1e8>)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	089b      	lsrs	r3, r3, #2
 80052e2:	3302      	adds	r3, #2
 80052e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	43da      	mvns	r2, r3
 80052ec:	482a      	ldr	r0, [pc, #168]	; (8005398 <HAL_GPIO_DeInit+0x1e8>)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	089b      	lsrs	r3, r3, #2
 80052f2:	400a      	ands	r2, r1
 80052f4:	3302      	adds	r3, #2
 80052f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	2103      	movs	r1, #3
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	401a      	ands	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	08da      	lsrs	r2, r3, #3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3208      	adds	r2, #8
 8005318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	220f      	movs	r2, #15
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	43db      	mvns	r3, r3
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	08d2      	lsrs	r2, r2, #3
 8005330:	4019      	ands	r1, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3208      	adds	r2, #8
 8005336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	2103      	movs	r1, #3
 8005344:	fa01 f303 	lsl.w	r3, r1, r3
 8005348:	43db      	mvns	r3, r3
 800534a:	401a      	ands	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	2101      	movs	r1, #1
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	401a      	ands	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	2103      	movs	r1, #3
 800536e:	fa01 f303 	lsl.w	r3, r1, r3
 8005372:	43db      	mvns	r3, r3
 8005374:	401a      	ands	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	3301      	adds	r3, #1
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b0f      	cmp	r3, #15
 8005384:	f67f af22 	bls.w	80051cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40013800 	.word	0x40013800
 800539c:	40020000 	.word	0x40020000
 80053a0:	40020400 	.word	0x40020400
 80053a4:	40020800 	.word	0x40020800
 80053a8:	40020c00 	.word	0x40020c00
 80053ac:	40021000 	.word	0x40021000
 80053b0:	40021400 	.word	0x40021400
 80053b4:	40021800 	.word	0x40021800
 80053b8:	40021c00 	.word	0x40021c00
 80053bc:	40022000 	.word	0x40022000
 80053c0:	40022400 	.word	0x40022400
 80053c4:	40013c00 	.word	0x40013c00

080053c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	887b      	ldrh	r3, [r7, #2]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053e0:	2301      	movs	r3, #1
 80053e2:	73fb      	strb	r3, [r7, #15]
 80053e4:	e001      	b.n	80053ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	807b      	strh	r3, [r7, #2]
 8005404:	4613      	mov	r3, r2
 8005406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005408:	787b      	ldrb	r3, [r7, #1]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800540e:	887a      	ldrh	r2, [r7, #2]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005414:	e003      	b.n	800541e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005416:	887b      	ldrh	r3, [r7, #2]
 8005418:	041a      	lsls	r2, r3, #16
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	619a      	str	r2, [r3, #24]
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e07f      	b.n	800553e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fd fdce 	bl	8002ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2224      	movs	r2, #36	; 0x24
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0201 	bic.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800547c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800548c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d107      	bne.n	80054a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	e006      	b.n	80054b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80054b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d104      	bne.n	80054c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6859      	ldr	r1, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <HAL_I2C_Init+0x11c>)
 80054d2:	430b      	orrs	r3, r1
 80054d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	ea42 0103 	orr.w	r1, r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	021a      	lsls	r2, r3, #8
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69d9      	ldr	r1, [r3, #28]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1a      	ldr	r2, [r3, #32]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	02008000 	.word	0x02008000

0800554c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e021      	b.n	80055a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2224      	movs	r2, #36	; 0x24
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0201 	bic.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fd fdb4 	bl	80030e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	4608      	mov	r0, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	817b      	strh	r3, [r7, #10]
 80055be:	460b      	mov	r3, r1
 80055c0:	813b      	strh	r3, [r7, #8]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	f040 80f9 	bne.w	80057c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_I2C_Mem_Write+0x34>
 80055da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d105      	bne.n	80055ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0ed      	b.n	80057c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_I2C_Mem_Write+0x4e>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e0e6      	b.n	80057c8 <HAL_I2C_Mem_Write+0x21c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005602:	f7fe fa03 	bl	8003a0c <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	2319      	movs	r3, #25
 800560e:	2201      	movs	r2, #1
 8005610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fad1 	bl	8005bbc <I2C_WaitOnFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0d1      	b.n	80057c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2221      	movs	r2, #33	; 0x21
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2240      	movs	r2, #64	; 0x40
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800564c:	88f8      	ldrh	r0, [r7, #6]
 800564e:	893a      	ldrh	r2, [r7, #8]
 8005650:	8979      	ldrh	r1, [r7, #10]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	4603      	mov	r3, r0
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f9e1 	bl	8005a24 <I2C_RequestMemoryWrite>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0a9      	b.n	80057c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	2bff      	cmp	r3, #255	; 0xff
 800567c:	d90e      	bls.n	800569c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	22ff      	movs	r2, #255	; 0xff
 8005682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005688:	b2da      	uxtb	r2, r3
 800568a:	8979      	ldrh	r1, [r7, #10]
 800568c:	2300      	movs	r3, #0
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 fbb3 	bl	8005e00 <I2C_TransferConfig>
 800569a:	e00f      	b.n	80056bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	8979      	ldrh	r1, [r7, #10]
 80056ae:	2300      	movs	r3, #0
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fba2 	bl	8005e00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fabb 	bl	8005c3c <I2C_WaitOnTXISFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e07b      	b.n	80057c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d034      	beq.n	8005774 <HAL_I2C_Mem_Write+0x1c8>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d130      	bne.n	8005774 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	2200      	movs	r2, #0
 800571a:	2180      	movs	r1, #128	; 0x80
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fa4d 	bl	8005bbc <I2C_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e04d      	b.n	80057c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	2bff      	cmp	r3, #255	; 0xff
 8005734:	d90e      	bls.n	8005754 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	22ff      	movs	r2, #255	; 0xff
 800573a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005740:	b2da      	uxtb	r2, r3
 8005742:	8979      	ldrh	r1, [r7, #10]
 8005744:	2300      	movs	r3, #0
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 fb57 	bl	8005e00 <I2C_TransferConfig>
 8005752:	e00f      	b.n	8005774 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005762:	b2da      	uxtb	r2, r3
 8005764:	8979      	ldrh	r1, [r7, #10]
 8005766:	2300      	movs	r3, #0
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 fb46 	bl	8005e00 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d19e      	bne.n	80056bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fa9a 	bl	8005cbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e01a      	b.n	80057c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2220      	movs	r2, #32
 8005798:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6859      	ldr	r1, [r3, #4]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <HAL_I2C_Mem_Write+0x224>)
 80057a6:	400b      	ands	r3, r1
 80057a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e000      	b.n	80057c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
  }
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	fe00e800 	.word	0xfe00e800

080057d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	4608      	mov	r0, r1
 80057de:	4611      	mov	r1, r2
 80057e0:	461a      	mov	r2, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	817b      	strh	r3, [r7, #10]
 80057e6:	460b      	mov	r3, r1
 80057e8:	813b      	strh	r3, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	f040 80fd 	bne.w	80059f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <HAL_I2C_Mem_Read+0x34>
 8005802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005804:	2b00      	cmp	r3, #0
 8005806:	d105      	bne.n	8005814 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0f1      	b.n	80059f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_I2C_Mem_Read+0x4e>
 800581e:	2302      	movs	r3, #2
 8005820:	e0ea      	b.n	80059f8 <HAL_I2C_Mem_Read+0x224>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800582a:	f7fe f8ef 	bl	8003a0c <HAL_GetTick>
 800582e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2319      	movs	r3, #25
 8005836:	2201      	movs	r2, #1
 8005838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f9bd 	bl	8005bbc <I2C_WaitOnFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0d5      	b.n	80059f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2222      	movs	r2, #34	; 0x22
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2240      	movs	r2, #64	; 0x40
 8005858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800586c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005874:	88f8      	ldrh	r0, [r7, #6]
 8005876:	893a      	ldrh	r2, [r7, #8]
 8005878:	8979      	ldrh	r1, [r7, #10]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	4603      	mov	r3, r0
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f921 	bl	8005acc <I2C_RequestMemoryRead>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0ad      	b.n	80059f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2bff      	cmp	r3, #255	; 0xff
 80058a4:	d90e      	bls.n	80058c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	22ff      	movs	r2, #255	; 0xff
 80058aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	8979      	ldrh	r1, [r7, #10]
 80058b4:	4b52      	ldr	r3, [pc, #328]	; (8005a00 <HAL_I2C_Mem_Read+0x22c>)
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 fa9f 	bl	8005e00 <I2C_TransferConfig>
 80058c2:	e00f      	b.n	80058e4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	8979      	ldrh	r1, [r7, #10]
 80058d6:	4b4a      	ldr	r3, [pc, #296]	; (8005a00 <HAL_I2C_Mem_Read+0x22c>)
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fa8e 	bl	8005e00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	2200      	movs	r2, #0
 80058ec:	2104      	movs	r1, #4
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f964 	bl	8005bbc <I2C_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e07c      	b.n	80059f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591a:	3b01      	subs	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d034      	beq.n	80059a4 <HAL_I2C_Mem_Read+0x1d0>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593e:	2b00      	cmp	r3, #0
 8005940:	d130      	bne.n	80059a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	2200      	movs	r2, #0
 800594a:	2180      	movs	r1, #128	; 0x80
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f935 	bl	8005bbc <I2C_WaitOnFlagUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e04d      	b.n	80059f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2bff      	cmp	r3, #255	; 0xff
 8005964:	d90e      	bls.n	8005984 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	22ff      	movs	r2, #255	; 0xff
 800596a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005970:	b2da      	uxtb	r2, r3
 8005972:	8979      	ldrh	r1, [r7, #10]
 8005974:	2300      	movs	r3, #0
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 fa3f 	bl	8005e00 <I2C_TransferConfig>
 8005982:	e00f      	b.n	80059a4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005992:	b2da      	uxtb	r2, r3
 8005994:	8979      	ldrh	r1, [r7, #10]
 8005996:	2300      	movs	r3, #0
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fa2e 	bl	8005e00 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d19a      	bne.n	80058e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f982 	bl	8005cbc <I2C_WaitOnSTOPFlagUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e01a      	b.n	80059f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2220      	movs	r2, #32
 80059c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6859      	ldr	r1, [r3, #4]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <HAL_I2C_Mem_Read+0x230>)
 80059d6:	400b      	ands	r3, r1
 80059d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e000      	b.n	80059f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
  }
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	80002400 	.word	0x80002400
 8005a04:	fe00e800 	.word	0xfe00e800

08005a08 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a16:	b2db      	uxtb	r3, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	4608      	mov	r0, r1
 8005a2e:	4611      	mov	r1, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	4603      	mov	r3, r0
 8005a34:	817b      	strh	r3, [r7, #10]
 8005a36:	460b      	mov	r3, r1
 8005a38:	813b      	strh	r3, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	8979      	ldrh	r1, [r7, #10]
 8005a44:	4b20      	ldr	r3, [pc, #128]	; (8005ac8 <I2C_RequestMemoryWrite+0xa4>)
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f9d7 	bl	8005e00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	69b9      	ldr	r1, [r7, #24]
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 f8f0 	bl	8005c3c <I2C_WaitOnTXISFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e02c      	b.n	8005ac0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d105      	bne.n	8005a78 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a6c:	893b      	ldrh	r3, [r7, #8]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	629a      	str	r2, [r3, #40]	; 0x28
 8005a76:	e015      	b.n	8005aa4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a78:	893b      	ldrh	r3, [r7, #8]
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a86:	69fa      	ldr	r2, [r7, #28]
 8005a88:	69b9      	ldr	r1, [r7, #24]
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 f8d6 	bl	8005c3c <I2C_WaitOnTXISFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e012      	b.n	8005ac0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a9a:	893b      	ldrh	r3, [r7, #8]
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2180      	movs	r1, #128	; 0x80
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f884 	bl	8005bbc <I2C_WaitOnFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	80002000 	.word	0x80002000

08005acc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4603      	mov	r3, r0
 8005adc:	817b      	strh	r3, [r7, #10]
 8005ade:	460b      	mov	r3, r1
 8005ae0:	813b      	strh	r3, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	8979      	ldrh	r1, [r7, #10]
 8005aec:	4b20      	ldr	r3, [pc, #128]	; (8005b70 <I2C_RequestMemoryRead+0xa4>)
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	2300      	movs	r3, #0
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f984 	bl	8005e00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	69b9      	ldr	r1, [r7, #24]
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 f89d 	bl	8005c3c <I2C_WaitOnTXISFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e02c      	b.n	8005b66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d105      	bne.n	8005b1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b12:	893b      	ldrh	r3, [r7, #8]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b1c:	e015      	b.n	8005b4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b1e:	893b      	ldrh	r3, [r7, #8]
 8005b20:	0a1b      	lsrs	r3, r3, #8
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	69b9      	ldr	r1, [r7, #24]
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f883 	bl	8005c3c <I2C_WaitOnTXISFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e012      	b.n	8005b66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b40:	893b      	ldrh	r3, [r7, #8]
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2200      	movs	r2, #0
 8005b52:	2140      	movs	r1, #64	; 0x40
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f831 	bl	8005bbc <I2C_WaitOnFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	80002000 	.word	0x80002000

08005b74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d103      	bne.n	8005b92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d007      	beq.n	8005bb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	619a      	str	r2, [r3, #24]
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bcc:	e022      	b.n	8005c14 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d01e      	beq.n	8005c14 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd6:	f7fd ff19 	bl	8003a0c <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d302      	bcc.n	8005bec <I2C_WaitOnFlagUntilTimeout+0x30>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d113      	bne.n	8005c14 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf0:	f043 0220 	orr.w	r2, r3, #32
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e00f      	b.n	8005c34 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	bf0c      	ite	eq
 8005c24:	2301      	moveq	r3, #1
 8005c26:	2300      	movne	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d0cd      	beq.n	8005bce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c48:	e02c      	b.n	8005ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f870 	bl	8005d34 <I2C_IsAcknowledgeFailed>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e02a      	b.n	8005cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c64:	d01e      	beq.n	8005ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c66:	f7fd fed1 	bl	8003a0c <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d302      	bcc.n	8005c7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d113      	bne.n	8005ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c80:	f043 0220 	orr.w	r2, r3, #32
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e007      	b.n	8005cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d1cb      	bne.n	8005c4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cc8:	e028      	b.n	8005d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 f830 	bl	8005d34 <I2C_IsAcknowledgeFailed>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e026      	b.n	8005d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cde:	f7fd fe95 	bl	8003a0c <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d302      	bcc.n	8005cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d113      	bne.n	8005d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e007      	b.n	8005d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d1cf      	bne.n	8005cca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b10      	cmp	r3, #16
 8005d4c:	d151      	bne.n	8005df2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d4e:	e022      	b.n	8005d96 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d01e      	beq.n	8005d96 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d58:	f7fd fe58 	bl	8003a0c <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d302      	bcc.n	8005d6e <I2C_IsAcknowledgeFailed+0x3a>
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d113      	bne.n	8005d96 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d72:	f043 0220 	orr.w	r2, r3, #32
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e02e      	b.n	8005df4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d1d5      	bne.n	8005d50 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2210      	movs	r2, #16
 8005daa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2220      	movs	r2, #32
 8005db2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f7ff fedd 	bl	8005b74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6859      	ldr	r1, [r3, #4]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <I2C_IsAcknowledgeFailed+0xc8>)
 8005dc6:	400b      	ands	r3, r1
 8005dc8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dce:	f043 0204 	orr.w	r2, r3, #4
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	fe00e800 	.word	0xfe00e800

08005e00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	607b      	str	r3, [r7, #4]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	817b      	strh	r3, [r7, #10]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	0d5b      	lsrs	r3, r3, #21
 8005e1c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005e20:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <I2C_TransferConfig+0x58>)
 8005e22:	430b      	orrs	r3, r1
 8005e24:	43db      	mvns	r3, r3
 8005e26:	ea02 0103 	and.w	r1, r2, r3
 8005e2a:	897b      	ldrh	r3, [r7, #10]
 8005e2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005e30:	7a7b      	ldrb	r3, [r7, #9]
 8005e32:	041b      	lsls	r3, r3, #16
 8005e34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005e4a:	bf00      	nop
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	03ff63ff 	.word	0x03ff63ff

08005e5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d138      	bne.n	8005ee4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e032      	b.n	8005ee6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2224      	movs	r2, #36	; 0x24
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005eae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6819      	ldr	r1, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d139      	bne.n	8005f7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e033      	b.n	8005f7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2224      	movs	r2, #36	; 0x24
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0201 	bic.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e000      	b.n	8005f7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f7c:	2302      	movs	r3, #2
  }
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e0bf      	b.n	800611e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fd f8d2 	bl	800315c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005fce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6999      	ldr	r1, [r3, #24]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fe4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6899      	ldr	r1, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	4b4a      	ldr	r3, [pc, #296]	; (8006128 <HAL_LTDC_Init+0x19c>)
 8006000:	400b      	ands	r3, r1
 8006002:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	041b      	lsls	r3, r3, #16
 800600a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6899      	ldr	r1, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68d9      	ldr	r1, [r3, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4b3e      	ldr	r3, [pc, #248]	; (8006128 <HAL_LTDC_Init+0x19c>)
 800602e:	400b      	ands	r3, r1
 8006030:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	041b      	lsls	r3, r3, #16
 8006038:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68d9      	ldr	r1, [r3, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1a      	ldr	r2, [r3, #32]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6919      	ldr	r1, [r3, #16]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b33      	ldr	r3, [pc, #204]	; (8006128 <HAL_LTDC_Init+0x19c>)
 800605c:	400b      	ands	r3, r1
 800605e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6919      	ldr	r1, [r3, #16]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6959      	ldr	r1, [r3, #20]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b27      	ldr	r3, [pc, #156]	; (8006128 <HAL_LTDC_Init+0x19c>)
 800608a:	400b      	ands	r3, r1
 800608c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	041b      	lsls	r3, r3, #16
 8006094:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6959      	ldr	r1, [r3, #20]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80060bc:	041b      	lsls	r3, r3, #16
 80060be:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80060ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0206 	orr.w	r2, r2, #6
 80060fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	f000f800 	.word	0xf000f800

0800612c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006142:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b00      	cmp	r3, #0
 800614c:	d023      	beq.n	8006196 <HAL_LTDC_IRQHandler+0x6a>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01e      	beq.n	8006196 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0204 	bic.w	r2, r2, #4
 8006166:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2204      	movs	r2, #4
 800616e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006176:	f043 0201 	orr.w	r2, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2204      	movs	r2, #4
 8006184:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f86f 	bl	8006274 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d023      	beq.n	80061e8 <HAL_LTDC_IRQHandler+0xbc>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d01e      	beq.n	80061e8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0202 	bic.w	r2, r2, #2
 80061b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2202      	movs	r2, #2
 80061c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061c8:	f043 0202 	orr.w	r2, r3, #2
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2204      	movs	r2, #4
 80061d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f846 	bl	8006274 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01b      	beq.n	800622a <HAL_LTDC_IRQHandler+0xfe>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d016      	beq.n	800622a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0201 	bic.w	r2, r2, #1
 800620a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2201      	movs	r2, #1
 8006212:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f82f 	bl	8006288 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01b      	beq.n	800626c <HAL_LTDC_IRQHandler+0x140>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d016      	beq.n	800626c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0208 	bic.w	r2, r2, #8
 800624c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2208      	movs	r2, #8
 8006254:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f818 	bl	800629c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062b0:	b5b0      	push	{r4, r5, r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_LTDC_ConfigLayer+0x1a>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e02c      	b.n	8006324 <HAL_LTDC_ConfigLayer+0x74>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2202      	movs	r2, #2
 80062d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2134      	movs	r1, #52	; 0x34
 80062e0:	fb01 f303 	mul.w	r3, r1, r3
 80062e4:	4413      	add	r3, r2
 80062e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4614      	mov	r4, r2
 80062ee:	461d      	mov	r5, r3
 80062f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f81f 	bl	8006348 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2201      	movs	r2, #1
 8006310:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bdb0      	pop	{r4, r5, r7, pc}

0800632c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800633a:	b2db      	uxtb	r3, r3
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006348:	b480      	push	{r7}
 800634a:	b089      	sub	sp, #36	; 0x24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006364:	4413      	add	r3, r2
 8006366:	041b      	lsls	r3, r3, #16
 8006368:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	01db      	lsls	r3, r3, #7
 8006374:	4413      	add	r3, r2
 8006376:	3384      	adds	r3, #132	; 0x84
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	4611      	mov	r1, r2
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	01d2      	lsls	r2, r2, #7
 8006384:	440a      	add	r2, r1
 8006386:	3284      	adds	r2, #132	; 0x84
 8006388:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800638c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	0c1b      	lsrs	r3, r3, #16
 800639a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800639e:	4413      	add	r3, r2
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4619      	mov	r1, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	01db      	lsls	r3, r3, #7
 80063ac:	440b      	add	r3, r1
 80063ae:	3384      	adds	r3, #132	; 0x84
 80063b0:	4619      	mov	r1, r3
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063c6:	4413      	add	r3, r2
 80063c8:	041b      	lsls	r3, r3, #16
 80063ca:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	01db      	lsls	r3, r3, #7
 80063d6:	4413      	add	r3, r2
 80063d8:	3384      	adds	r3, #132	; 0x84
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	4611      	mov	r1, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	01d2      	lsls	r2, r2, #7
 80063e6:	440a      	add	r2, r1
 80063e8:	3284      	adds	r2, #132	; 0x84
 80063ea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80063ee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063fe:	4413      	add	r3, r2
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4619      	mov	r1, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	01db      	lsls	r3, r3, #7
 800640c:	440b      	add	r3, r1
 800640e:	3384      	adds	r3, #132	; 0x84
 8006410:	4619      	mov	r1, r3
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	4313      	orrs	r3, r2
 8006416:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	01db      	lsls	r3, r3, #7
 8006422:	4413      	add	r3, r2
 8006424:	3384      	adds	r3, #132	; 0x84
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	4611      	mov	r1, r2
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	01d2      	lsls	r2, r2, #7
 8006432:	440a      	add	r2, r1
 8006434:	3284      	adds	r2, #132	; 0x84
 8006436:	f023 0307 	bic.w	r3, r3, #7
 800643a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	01db      	lsls	r3, r3, #7
 8006446:	4413      	add	r3, r2
 8006448:	3384      	adds	r3, #132	; 0x84
 800644a:	461a      	mov	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006462:	041b      	lsls	r3, r3, #16
 8006464:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	061b      	lsls	r3, r3, #24
 800646c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	01db      	lsls	r3, r3, #7
 8006478:	4413      	add	r3, r2
 800647a:	3384      	adds	r3, #132	; 0x84
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	01db      	lsls	r3, r3, #7
 8006488:	4413      	add	r3, r2
 800648a:	3384      	adds	r3, #132	; 0x84
 800648c:	461a      	mov	r2, r3
 800648e:	2300      	movs	r3, #0
 8006490:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006498:	461a      	mov	r2, r3
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	431a      	orrs	r2, r3
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	431a      	orrs	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4619      	mov	r1, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	01db      	lsls	r3, r3, #7
 80064ac:	440b      	add	r3, r1
 80064ae:	3384      	adds	r3, #132	; 0x84
 80064b0:	4619      	mov	r1, r3
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	01db      	lsls	r3, r3, #7
 80064c2:	4413      	add	r3, r2
 80064c4:	3384      	adds	r3, #132	; 0x84
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	4611      	mov	r1, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	01d2      	lsls	r2, r2, #7
 80064d2:	440a      	add	r2, r1
 80064d4:	3284      	adds	r2, #132	; 0x84
 80064d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064da:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	01db      	lsls	r3, r3, #7
 80064e6:	4413      	add	r3, r2
 80064e8:	3384      	adds	r3, #132	; 0x84
 80064ea:	461a      	mov	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	01db      	lsls	r3, r3, #7
 80064fc:	4413      	add	r3, r2
 80064fe:	3384      	adds	r3, #132	; 0x84
 8006500:	69da      	ldr	r2, [r3, #28]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4619      	mov	r1, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	01db      	lsls	r3, r3, #7
 800650c:	440b      	add	r3, r1
 800650e:	3384      	adds	r3, #132	; 0x84
 8006510:	4619      	mov	r1, r3
 8006512:	4b58      	ldr	r3, [pc, #352]	; (8006674 <LTDC_SetConfig+0x32c>)
 8006514:	4013      	ands	r3, r2
 8006516:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	68f9      	ldr	r1, [r7, #12]
 8006522:	6809      	ldr	r1, [r1, #0]
 8006524:	4608      	mov	r0, r1
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	01c9      	lsls	r1, r1, #7
 800652a:	4401      	add	r1, r0
 800652c:	3184      	adds	r1, #132	; 0x84
 800652e:	4313      	orrs	r3, r2
 8006530:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	01db      	lsls	r3, r3, #7
 800653c:	4413      	add	r3, r2
 800653e:	3384      	adds	r3, #132	; 0x84
 8006540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	01db      	lsls	r3, r3, #7
 800654c:	4413      	add	r3, r2
 800654e:	3384      	adds	r3, #132	; 0x84
 8006550:	461a      	mov	r2, r3
 8006552:	2300      	movs	r3, #0
 8006554:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	01db      	lsls	r3, r3, #7
 8006560:	4413      	add	r3, r2
 8006562:	3384      	adds	r3, #132	; 0x84
 8006564:	461a      	mov	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006574:	2304      	movs	r3, #4
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	e01b      	b.n	80065b2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d102      	bne.n	8006588 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006582:	2303      	movs	r3, #3
 8006584:	61fb      	str	r3, [r7, #28]
 8006586:	e014      	b.n	80065b2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	2b04      	cmp	r3, #4
 800658e:	d00b      	beq.n	80065a8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006594:	2b02      	cmp	r3, #2
 8006596:	d007      	beq.n	80065a8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800659c:	2b03      	cmp	r3, #3
 800659e:	d003      	beq.n	80065a8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80065a4:	2b07      	cmp	r3, #7
 80065a6:	d102      	bne.n	80065ae <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80065a8:	2302      	movs	r3, #2
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	e001      	b.n	80065b2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80065ae:	2301      	movs	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	01db      	lsls	r3, r3, #7
 80065bc:	4413      	add	r3, r2
 80065be:	3384      	adds	r3, #132	; 0x84
 80065c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	6812      	ldr	r2, [r2, #0]
 80065c6:	4611      	mov	r1, r2
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	01d2      	lsls	r2, r2, #7
 80065cc:	440a      	add	r2, r1
 80065ce:	3284      	adds	r2, #132	; 0x84
 80065d0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80065d4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
 80065e0:	041a      	lsls	r2, r3, #16
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	6859      	ldr	r1, [r3, #4]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	1acb      	subs	r3, r1, r3
 80065ec:	69f9      	ldr	r1, [r7, #28]
 80065ee:	fb01 f303 	mul.w	r3, r1, r3
 80065f2:	3303      	adds	r3, #3
 80065f4:	68f9      	ldr	r1, [r7, #12]
 80065f6:	6809      	ldr	r1, [r1, #0]
 80065f8:	4608      	mov	r0, r1
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	01c9      	lsls	r1, r1, #7
 80065fe:	4401      	add	r1, r0
 8006600:	3184      	adds	r1, #132	; 0x84
 8006602:	4313      	orrs	r3, r2
 8006604:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	01db      	lsls	r3, r3, #7
 8006610:	4413      	add	r3, r2
 8006612:	3384      	adds	r3, #132	; 0x84
 8006614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4619      	mov	r1, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	01db      	lsls	r3, r3, #7
 8006620:	440b      	add	r3, r1
 8006622:	3384      	adds	r3, #132	; 0x84
 8006624:	4619      	mov	r1, r3
 8006626:	4b14      	ldr	r3, [pc, #80]	; (8006678 <LTDC_SetConfig+0x330>)
 8006628:	4013      	ands	r3, r2
 800662a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	01db      	lsls	r3, r3, #7
 8006636:	4413      	add	r3, r2
 8006638:	3384      	adds	r3, #132	; 0x84
 800663a:	461a      	mov	r2, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	01db      	lsls	r3, r3, #7
 800664c:	4413      	add	r3, r2
 800664e:	3384      	adds	r3, #132	; 0x84
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	6812      	ldr	r2, [r2, #0]
 8006656:	4611      	mov	r1, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	01d2      	lsls	r2, r2, #7
 800665c:	440a      	add	r2, r1
 800665e:	3284      	adds	r2, #132	; 0x84
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	6013      	str	r3, [r2, #0]
}
 8006666:	bf00      	nop
 8006668:	3724      	adds	r7, #36	; 0x24
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	fffff8f8 	.word	0xfffff8f8
 8006678:	fffff800 	.word	0xfffff800

0800667c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006680:	4b05      	ldr	r3, [pc, #20]	; (8006698 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a04      	ldr	r2, [pc, #16]	; (8006698 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800668a:	6013      	str	r3, [r2, #0]
}
 800668c:	bf00      	nop
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40007000 	.word	0x40007000

0800669c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80066a6:	4b23      	ldr	r3, [pc, #140]	; (8006734 <HAL_PWREx_EnableOverDrive+0x98>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	4a22      	ldr	r2, [pc, #136]	; (8006734 <HAL_PWREx_EnableOverDrive+0x98>)
 80066ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b0:	6413      	str	r3, [r2, #64]	; 0x40
 80066b2:	4b20      	ldr	r3, [pc, #128]	; (8006734 <HAL_PWREx_EnableOverDrive+0x98>)
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80066be:	4b1e      	ldr	r3, [pc, #120]	; (8006738 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1d      	ldr	r2, [pc, #116]	; (8006738 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066ca:	f7fd f99f 	bl	8003a0c <HAL_GetTick>
 80066ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80066d0:	e009      	b.n	80066e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80066d2:	f7fd f99b 	bl	8003a0c <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066e0:	d901      	bls.n	80066e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e022      	b.n	800672c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80066e6:	4b14      	ldr	r3, [pc, #80]	; (8006738 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f2:	d1ee      	bne.n	80066d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80066f4:	4b10      	ldr	r3, [pc, #64]	; (8006738 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a0f      	ldr	r2, [pc, #60]	; (8006738 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006700:	f7fd f984 	bl	8003a0c <HAL_GetTick>
 8006704:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006706:	e009      	b.n	800671c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006708:	f7fd f980 	bl	8003a0c <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006716:	d901      	bls.n	800671c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e007      	b.n	800672c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800671c:	4b06      	ldr	r3, [pc, #24]	; (8006738 <HAL_PWREx_EnableOverDrive+0x9c>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006728:	d1ee      	bne.n	8006708 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40023800 	.word	0x40023800
 8006738:	40007000 	.word	0x40007000

0800673c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006744:	2300      	movs	r3, #0
 8006746:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e291      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 8087 	beq.w	800686e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006760:	4b96      	ldr	r3, [pc, #600]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 030c 	and.w	r3, r3, #12
 8006768:	2b04      	cmp	r3, #4
 800676a:	d00c      	beq.n	8006786 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800676c:	4b93      	ldr	r3, [pc, #588]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 030c 	and.w	r3, r3, #12
 8006774:	2b08      	cmp	r3, #8
 8006776:	d112      	bne.n	800679e <HAL_RCC_OscConfig+0x62>
 8006778:	4b90      	ldr	r3, [pc, #576]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006784:	d10b      	bne.n	800679e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006786:	4b8d      	ldr	r3, [pc, #564]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d06c      	beq.n	800686c <HAL_RCC_OscConfig+0x130>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d168      	bne.n	800686c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e26b      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a6:	d106      	bne.n	80067b6 <HAL_RCC_OscConfig+0x7a>
 80067a8:	4b84      	ldr	r3, [pc, #528]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a83      	ldr	r2, [pc, #524]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80067ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	e02e      	b.n	8006814 <HAL_RCC_OscConfig+0xd8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10c      	bne.n	80067d8 <HAL_RCC_OscConfig+0x9c>
 80067be:	4b7f      	ldr	r3, [pc, #508]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a7e      	ldr	r2, [pc, #504]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80067c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	4b7c      	ldr	r3, [pc, #496]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a7b      	ldr	r2, [pc, #492]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80067d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	e01d      	b.n	8006814 <HAL_RCC_OscConfig+0xd8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067e0:	d10c      	bne.n	80067fc <HAL_RCC_OscConfig+0xc0>
 80067e2:	4b76      	ldr	r3, [pc, #472]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a75      	ldr	r2, [pc, #468]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80067e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	4b73      	ldr	r3, [pc, #460]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a72      	ldr	r2, [pc, #456]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80067f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	e00b      	b.n	8006814 <HAL_RCC_OscConfig+0xd8>
 80067fc:	4b6f      	ldr	r3, [pc, #444]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a6e      	ldr	r2, [pc, #440]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	4b6c      	ldr	r3, [pc, #432]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a6b      	ldr	r2, [pc, #428]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 800680e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d013      	beq.n	8006844 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681c:	f7fd f8f6 	bl	8003a0c <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006824:	f7fd f8f2 	bl	8003a0c <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b64      	cmp	r3, #100	; 0x64
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e21f      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006836:	4b61      	ldr	r3, [pc, #388]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0f0      	beq.n	8006824 <HAL_RCC_OscConfig+0xe8>
 8006842:	e014      	b.n	800686e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fd f8e2 	bl	8003a0c <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800684c:	f7fd f8de 	bl	8003a0c <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b64      	cmp	r3, #100	; 0x64
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e20b      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800685e:	4b57      	ldr	r3, [pc, #348]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1f0      	bne.n	800684c <HAL_RCC_OscConfig+0x110>
 800686a:	e000      	b.n	800686e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800686c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d069      	beq.n	800694e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800687a:	4b50      	ldr	r3, [pc, #320]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f003 030c 	and.w	r3, r3, #12
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00b      	beq.n	800689e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006886:	4b4d      	ldr	r3, [pc, #308]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f003 030c 	and.w	r3, r3, #12
 800688e:	2b08      	cmp	r3, #8
 8006890:	d11c      	bne.n	80068cc <HAL_RCC_OscConfig+0x190>
 8006892:	4b4a      	ldr	r3, [pc, #296]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d116      	bne.n	80068cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800689e:	4b47      	ldr	r3, [pc, #284]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <HAL_RCC_OscConfig+0x17a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d001      	beq.n	80068b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e1df      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068b6:	4b41      	ldr	r3, [pc, #260]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	493d      	ldr	r1, [pc, #244]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ca:	e040      	b.n	800694e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d023      	beq.n	800691c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068d4:	4b39      	ldr	r3, [pc, #228]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a38      	ldr	r2, [pc, #224]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e0:	f7fd f894 	bl	8003a0c <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068e8:	f7fd f890 	bl	8003a0c <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e1bd      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068fa:	4b30      	ldr	r3, [pc, #192]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0f0      	beq.n	80068e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006906:	4b2d      	ldr	r3, [pc, #180]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4929      	ldr	r1, [pc, #164]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006916:	4313      	orrs	r3, r2
 8006918:	600b      	str	r3, [r1, #0]
 800691a:	e018      	b.n	800694e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800691c:	4b27      	ldr	r3, [pc, #156]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a26      	ldr	r2, [pc, #152]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006928:	f7fd f870 	bl	8003a0c <HAL_GetTick>
 800692c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800692e:	e008      	b.n	8006942 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006930:	f7fd f86c 	bl	8003a0c <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b02      	cmp	r3, #2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e199      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006942:	4b1e      	ldr	r3, [pc, #120]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f0      	bne.n	8006930 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d038      	beq.n	80069cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d019      	beq.n	8006996 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006962:	4b16      	ldr	r3, [pc, #88]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006966:	4a15      	ldr	r2, [pc, #84]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006968:	f043 0301 	orr.w	r3, r3, #1
 800696c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696e:	f7fd f84d 	bl	8003a0c <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006976:	f7fd f849 	bl	8003a0c <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e176      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006988:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 800698a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <HAL_RCC_OscConfig+0x23a>
 8006994:	e01a      	b.n	80069cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006996:	4b09      	ldr	r3, [pc, #36]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 8006998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699a:	4a08      	ldr	r2, [pc, #32]	; (80069bc <HAL_RCC_OscConfig+0x280>)
 800699c:	f023 0301 	bic.w	r3, r3, #1
 80069a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a2:	f7fd f833 	bl	8003a0c <HAL_GetTick>
 80069a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069a8:	e00a      	b.n	80069c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069aa:	f7fd f82f 	bl	8003a0c <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d903      	bls.n	80069c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e15c      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
 80069bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069c0:	4b91      	ldr	r3, [pc, #580]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 80069c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1ee      	bne.n	80069aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 80a4 	beq.w	8006b22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069da:	4b8b      	ldr	r3, [pc, #556]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10d      	bne.n	8006a02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80069e6:	4b88      	ldr	r3, [pc, #544]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	4a87      	ldr	r2, [pc, #540]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 80069ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f0:	6413      	str	r3, [r2, #64]	; 0x40
 80069f2:	4b85      	ldr	r3, [pc, #532]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069fe:	2301      	movs	r3, #1
 8006a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a02:	4b82      	ldr	r3, [pc, #520]	; (8006c0c <HAL_RCC_OscConfig+0x4d0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d118      	bne.n	8006a40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006a0e:	4b7f      	ldr	r3, [pc, #508]	; (8006c0c <HAL_RCC_OscConfig+0x4d0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a7e      	ldr	r2, [pc, #504]	; (8006c0c <HAL_RCC_OscConfig+0x4d0>)
 8006a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a1a:	f7fc fff7 	bl	8003a0c <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a20:	e008      	b.n	8006a34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a22:	f7fc fff3 	bl	8003a0c <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b64      	cmp	r3, #100	; 0x64
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e120      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a34:	4b75      	ldr	r3, [pc, #468]	; (8006c0c <HAL_RCC_OscConfig+0x4d0>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0f0      	beq.n	8006a22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d106      	bne.n	8006a56 <HAL_RCC_OscConfig+0x31a>
 8006a48:	4b6f      	ldr	r3, [pc, #444]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4c:	4a6e      	ldr	r2, [pc, #440]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006a4e:	f043 0301 	orr.w	r3, r3, #1
 8006a52:	6713      	str	r3, [r2, #112]	; 0x70
 8006a54:	e02d      	b.n	8006ab2 <HAL_RCC_OscConfig+0x376>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10c      	bne.n	8006a78 <HAL_RCC_OscConfig+0x33c>
 8006a5e:	4b6a      	ldr	r3, [pc, #424]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a62:	4a69      	ldr	r2, [pc, #420]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	6713      	str	r3, [r2, #112]	; 0x70
 8006a6a:	4b67      	ldr	r3, [pc, #412]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	4a66      	ldr	r2, [pc, #408]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006a70:	f023 0304 	bic.w	r3, r3, #4
 8006a74:	6713      	str	r3, [r2, #112]	; 0x70
 8006a76:	e01c      	b.n	8006ab2 <HAL_RCC_OscConfig+0x376>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	2b05      	cmp	r3, #5
 8006a7e:	d10c      	bne.n	8006a9a <HAL_RCC_OscConfig+0x35e>
 8006a80:	4b61      	ldr	r3, [pc, #388]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a84:	4a60      	ldr	r2, [pc, #384]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006a86:	f043 0304 	orr.w	r3, r3, #4
 8006a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a8c:	4b5e      	ldr	r3, [pc, #376]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a90:	4a5d      	ldr	r2, [pc, #372]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	6713      	str	r3, [r2, #112]	; 0x70
 8006a98:	e00b      	b.n	8006ab2 <HAL_RCC_OscConfig+0x376>
 8006a9a:	4b5b      	ldr	r3, [pc, #364]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9e:	4a5a      	ldr	r2, [pc, #360]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8006aa6:	4b58      	ldr	r3, [pc, #352]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aaa:	4a57      	ldr	r2, [pc, #348]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006aac:	f023 0304 	bic.w	r3, r3, #4
 8006ab0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d015      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aba:	f7fc ffa7 	bl	8003a0c <HAL_GetTick>
 8006abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ac0:	e00a      	b.n	8006ad8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ac2:	f7fc ffa3 	bl	8003a0c <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e0ce      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ad8:	4b4b      	ldr	r3, [pc, #300]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0ee      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x386>
 8006ae4:	e014      	b.n	8006b10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae6:	f7fc ff91 	bl	8003a0c <HAL_GetTick>
 8006aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aec:	e00a      	b.n	8006b04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aee:	f7fc ff8d 	bl	8003a0c <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e0b8      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b04:	4b40      	ldr	r3, [pc, #256]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1ee      	bne.n	8006aee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d105      	bne.n	8006b22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b16:	4b3c      	ldr	r3, [pc, #240]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	4a3b      	ldr	r2, [pc, #236]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 80a4 	beq.w	8006c74 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b2c:	4b36      	ldr	r3, [pc, #216]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 030c 	and.w	r3, r3, #12
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d06b      	beq.n	8006c10 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d149      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b40:	4b31      	ldr	r3, [pc, #196]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a30      	ldr	r2, [pc, #192]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4c:	f7fc ff5e 	bl	8003a0c <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b54:	f7fc ff5a 	bl	8003a0c <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e087      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b66:	4b28      	ldr	r3, [pc, #160]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f0      	bne.n	8006b54 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	69da      	ldr	r2, [r3, #28]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	019b      	lsls	r3, r3, #6
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	085b      	lsrs	r3, r3, #1
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	041b      	lsls	r3, r3, #16
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	061b      	lsls	r3, r3, #24
 8006b96:	4313      	orrs	r3, r2
 8006b98:	4a1b      	ldr	r2, [pc, #108]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006b9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b9e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ba0:	4b19      	ldr	r3, [pc, #100]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a18      	ldr	r2, [pc, #96]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bac:	f7fc ff2e 	bl	8003a0c <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb4:	f7fc ff2a 	bl	8003a0c <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e057      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc6:	4b10      	ldr	r3, [pc, #64]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0f0      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x478>
 8006bd2:	e04f      	b.n	8006c74 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a0b      	ldr	r2, [pc, #44]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be0:	f7fc ff14 	bl	8003a0c <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be8:	f7fc ff10 	bl	8003a0c <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e03d      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bfa:	4b03      	ldr	r3, [pc, #12]	; (8006c08 <HAL_RCC_OscConfig+0x4cc>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f0      	bne.n	8006be8 <HAL_RCC_OscConfig+0x4ac>
 8006c06:	e035      	b.n	8006c74 <HAL_RCC_OscConfig+0x538>
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006c10:	4b1b      	ldr	r3, [pc, #108]	; (8006c80 <HAL_RCC_OscConfig+0x544>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d028      	beq.n	8006c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d121      	bne.n	8006c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d11a      	bne.n	8006c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c40:	4013      	ands	r3, r2
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d111      	bne.n	8006c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	085b      	lsrs	r3, r3, #1
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40023800 	.word	0x40023800

08006c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e0d0      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c9c:	4b6a      	ldr	r3, [pc, #424]	; (8006e48 <HAL_RCC_ClockConfig+0x1c4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d910      	bls.n	8006ccc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006caa:	4b67      	ldr	r3, [pc, #412]	; (8006e48 <HAL_RCC_ClockConfig+0x1c4>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f023 020f 	bic.w	r2, r3, #15
 8006cb2:	4965      	ldr	r1, [pc, #404]	; (8006e48 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cba:	4b63      	ldr	r3, [pc, #396]	; (8006e48 <HAL_RCC_ClockConfig+0x1c4>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d001      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0b8      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d020      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ce4:	4b59      	ldr	r3, [pc, #356]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	4a58      	ldr	r2, [pc, #352]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d005      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cfc:	4b53      	ldr	r3, [pc, #332]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	4a52      	ldr	r2, [pc, #328]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d08:	4b50      	ldr	r3, [pc, #320]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	494d      	ldr	r1, [pc, #308]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d040      	beq.n	8006da8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d107      	bne.n	8006d3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d2e:	4b47      	ldr	r3, [pc, #284]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d115      	bne.n	8006d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e07f      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d107      	bne.n	8006d56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d46:	4b41      	ldr	r3, [pc, #260]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d109      	bne.n	8006d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e073      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d56:	4b3d      	ldr	r3, [pc, #244]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e06b      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d66:	4b39      	ldr	r3, [pc, #228]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f023 0203 	bic.w	r2, r3, #3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	4936      	ldr	r1, [pc, #216]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d78:	f7fc fe48 	bl	8003a0c <HAL_GetTick>
 8006d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d7e:	e00a      	b.n	8006d96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d80:	f7fc fe44 	bl	8003a0c <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e053      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d96:	4b2d      	ldr	r3, [pc, #180]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 020c 	and.w	r2, r3, #12
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d1eb      	bne.n	8006d80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006da8:	4b27      	ldr	r3, [pc, #156]	; (8006e48 <HAL_RCC_ClockConfig+0x1c4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d210      	bcs.n	8006dd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db6:	4b24      	ldr	r3, [pc, #144]	; (8006e48 <HAL_RCC_ClockConfig+0x1c4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f023 020f 	bic.w	r2, r3, #15
 8006dbe:	4922      	ldr	r1, [pc, #136]	; (8006e48 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc6:	4b20      	ldr	r3, [pc, #128]	; (8006e48 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e032      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d008      	beq.n	8006df6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006de4:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	4916      	ldr	r1, [pc, #88]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d009      	beq.n	8006e16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e02:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	490e      	ldr	r1, [pc, #56]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e16:	f000 f821 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <HAL_RCC_ClockConfig+0x1c8>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	091b      	lsrs	r3, r3, #4
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	490a      	ldr	r1, [pc, #40]	; (8006e50 <HAL_RCC_ClockConfig+0x1cc>)
 8006e28:	5ccb      	ldrb	r3, [r1, r3]
 8006e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2e:	4a09      	ldr	r2, [pc, #36]	; (8006e54 <HAL_RCC_ClockConfig+0x1d0>)
 8006e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <HAL_RCC_ClockConfig+0x1d4>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fc fcf2 	bl	8003820 <HAL_InitTick>

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40023c00 	.word	0x40023c00
 8006e4c:	40023800 	.word	0x40023800
 8006e50:	0800ee2c 	.word	0x0800ee2c
 8006e54:	20000044 	.word	0x20000044
 8006e58:	20000048 	.word	0x20000048

08006e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e5c:	b5b0      	push	{r4, r5, r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006e62:	2100      	movs	r1, #0
 8006e64:	6079      	str	r1, [r7, #4]
 8006e66:	2100      	movs	r1, #0
 8006e68:	60f9      	str	r1, [r7, #12]
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006e6e:	2100      	movs	r1, #0
 8006e70:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e72:	4952      	ldr	r1, [pc, #328]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8006e74:	6889      	ldr	r1, [r1, #8]
 8006e76:	f001 010c 	and.w	r1, r1, #12
 8006e7a:	2908      	cmp	r1, #8
 8006e7c:	d00d      	beq.n	8006e9a <HAL_RCC_GetSysClockFreq+0x3e>
 8006e7e:	2908      	cmp	r1, #8
 8006e80:	f200 8094 	bhi.w	8006fac <HAL_RCC_GetSysClockFreq+0x150>
 8006e84:	2900      	cmp	r1, #0
 8006e86:	d002      	beq.n	8006e8e <HAL_RCC_GetSysClockFreq+0x32>
 8006e88:	2904      	cmp	r1, #4
 8006e8a:	d003      	beq.n	8006e94 <HAL_RCC_GetSysClockFreq+0x38>
 8006e8c:	e08e      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e8e:	4b4c      	ldr	r3, [pc, #304]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x164>)
 8006e90:	60bb      	str	r3, [r7, #8]
      break;
 8006e92:	e08e      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e94:	4b4b      	ldr	r3, [pc, #300]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8006e96:	60bb      	str	r3, [r7, #8]
      break;
 8006e98:	e08b      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e9a:	4948      	ldr	r1, [pc, #288]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8006e9c:	6849      	ldr	r1, [r1, #4]
 8006e9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006ea2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006ea4:	4945      	ldr	r1, [pc, #276]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8006ea6:	6849      	ldr	r1, [r1, #4]
 8006ea8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d024      	beq.n	8006efa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eb0:	4942      	ldr	r1, [pc, #264]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8006eb2:	6849      	ldr	r1, [r1, #4]
 8006eb4:	0989      	lsrs	r1, r1, #6
 8006eb6:	4608      	mov	r0, r1
 8006eb8:	f04f 0100 	mov.w	r1, #0
 8006ebc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006ec0:	f04f 0500 	mov.w	r5, #0
 8006ec4:	ea00 0204 	and.w	r2, r0, r4
 8006ec8:	ea01 0305 	and.w	r3, r1, r5
 8006ecc:	493d      	ldr	r1, [pc, #244]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8006ece:	fb01 f003 	mul.w	r0, r1, r3
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	fb01 f102 	mul.w	r1, r1, r2
 8006ed8:	1844      	adds	r4, r0, r1
 8006eda:	493a      	ldr	r1, [pc, #232]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8006edc:	fba2 0101 	umull	r0, r1, r2, r1
 8006ee0:	1863      	adds	r3, r4, r1
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	f7f9 f990 	bl	8000210 <__aeabi_uldivmod>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	e04a      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006efa:	4b30      	ldr	r3, [pc, #192]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	099b      	lsrs	r3, r3, #6
 8006f00:	461a      	mov	r2, r3
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f0a:	f04f 0100 	mov.w	r1, #0
 8006f0e:	ea02 0400 	and.w	r4, r2, r0
 8006f12:	ea03 0501 	and.w	r5, r3, r1
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	014b      	lsls	r3, r1, #5
 8006f24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f28:	0142      	lsls	r2, r0, #5
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	1b00      	subs	r0, r0, r4
 8006f30:	eb61 0105 	sbc.w	r1, r1, r5
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	018b      	lsls	r3, r1, #6
 8006f3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f42:	0182      	lsls	r2, r0, #6
 8006f44:	1a12      	subs	r2, r2, r0
 8006f46:	eb63 0301 	sbc.w	r3, r3, r1
 8006f4a:	f04f 0000 	mov.w	r0, #0
 8006f4e:	f04f 0100 	mov.w	r1, #0
 8006f52:	00d9      	lsls	r1, r3, #3
 8006f54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f58:	00d0      	lsls	r0, r2, #3
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	1912      	adds	r2, r2, r4
 8006f60:	eb45 0303 	adc.w	r3, r5, r3
 8006f64:	f04f 0000 	mov.w	r0, #0
 8006f68:	f04f 0100 	mov.w	r1, #0
 8006f6c:	0299      	lsls	r1, r3, #10
 8006f6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006f72:	0290      	lsls	r0, r2, #10
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	f7f9 f944 	bl	8000210 <__aeabi_uldivmod>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006f90:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	0c1b      	lsrs	r3, r3, #16
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa8:	60bb      	str	r3, [r7, #8]
      break;
 8006faa:	e002      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fac:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x164>)
 8006fae:	60bb      	str	r3, [r7, #8]
      break;
 8006fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bdb0      	pop	{r4, r5, r7, pc}
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	00f42400 	.word	0x00f42400
 8006fc4:	017d7840 	.word	0x017d7840

08006fc8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fcc:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8006fce:	681b      	ldr	r3, [r3, #0]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	20000044 	.word	0x20000044

08006fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fe4:	f7ff fff0 	bl	8006fc8 <HAL_RCC_GetHCLKFreq>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	0a9b      	lsrs	r3, r3, #10
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	4903      	ldr	r1, [pc, #12]	; (8007004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ff6:	5ccb      	ldrb	r3, [r1, r3]
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	40023800 	.word	0x40023800
 8007004:	0800ee3c 	.word	0x0800ee3c

08007008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800700c:	f7ff ffdc 	bl	8006fc8 <HAL_RCC_GetHCLKFreq>
 8007010:	4602      	mov	r2, r0
 8007012:	4b05      	ldr	r3, [pc, #20]	; (8007028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	0b5b      	lsrs	r3, r3, #13
 8007018:	f003 0307 	and.w	r3, r3, #7
 800701c:	4903      	ldr	r1, [pc, #12]	; (800702c <HAL_RCC_GetPCLK2Freq+0x24>)
 800701e:	5ccb      	ldrb	r3, [r1, r3]
 8007020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007024:	4618      	mov	r0, r3
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40023800 	.word	0x40023800
 800702c:	0800ee3c 	.word	0x0800ee3c

08007030 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	220f      	movs	r2, #15
 800703e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007040:	4b12      	ldr	r3, [pc, #72]	; (800708c <HAL_RCC_GetClockConfig+0x5c>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 0203 	and.w	r2, r3, #3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800704c:	4b0f      	ldr	r3, [pc, #60]	; (800708c <HAL_RCC_GetClockConfig+0x5c>)
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <HAL_RCC_GetClockConfig+0x5c>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007064:	4b09      	ldr	r3, [pc, #36]	; (800708c <HAL_RCC_GetClockConfig+0x5c>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	08db      	lsrs	r3, r3, #3
 800706a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007072:	4b07      	ldr	r3, [pc, #28]	; (8007090 <HAL_RCC_GetClockConfig+0x60>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 020f 	and.w	r2, r3, #15
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	601a      	str	r2, [r3, #0]
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40023800 	.word	0x40023800
 8007090:	40023c00 	.word	0x40023c00

08007094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80070a0:	2300      	movs	r3, #0
 80070a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80070a4:	2300      	movs	r3, #0
 80070a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d012      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80070bc:	4b69      	ldr	r3, [pc, #420]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	4a68      	ldr	r2, [pc, #416]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80070c6:	6093      	str	r3, [r2, #8]
 80070c8:	4b66      	ldr	r3, [pc, #408]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d0:	4964      	ldr	r1, [pc, #400]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80070de:	2301      	movs	r3, #1
 80070e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d017      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070ee:	4b5d      	ldr	r3, [pc, #372]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fc:	4959      	ldr	r1, [pc, #356]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800710c:	d101      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800710e:	2301      	movs	r3, #1
 8007110:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800711a:	2301      	movs	r3, #1
 800711c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d017      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800712a:	4b4e      	ldr	r3, [pc, #312]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800712c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007130:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	494a      	ldr	r1, [pc, #296]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007148:	d101      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800714a:	2301      	movs	r3, #1
 800714c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007156:	2301      	movs	r3, #1
 8007158:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007166:	2301      	movs	r3, #1
 8007168:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 808b 	beq.w	800728e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007178:	4b3a      	ldr	r3, [pc, #232]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	4a39      	ldr	r2, [pc, #228]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800717e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007182:	6413      	str	r3, [r2, #64]	; 0x40
 8007184:	4b37      	ldr	r3, [pc, #220]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800718c:	60bb      	str	r3, [r7, #8]
 800718e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007190:	4b35      	ldr	r3, [pc, #212]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a34      	ldr	r2, [pc, #208]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800719a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800719c:	f7fc fc36 	bl	8003a0c <HAL_GetTick>
 80071a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80071a2:	e008      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071a4:	f7fc fc32 	bl	8003a0c <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b64      	cmp	r3, #100	; 0x64
 80071b0:	d901      	bls.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e355      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80071b6:	4b2c      	ldr	r3, [pc, #176]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0f0      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071c2:	4b28      	ldr	r3, [pc, #160]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d035      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d02e      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071e0:	4b20      	ldr	r3, [pc, #128]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071ea:	4b1e      	ldr	r3, [pc, #120]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	4a1d      	ldr	r2, [pc, #116]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071f6:	4b1b      	ldr	r3, [pc, #108]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fa:	4a1a      	ldr	r2, [pc, #104]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007200:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007202:	4a18      	ldr	r2, [pc, #96]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007208:	4b16      	ldr	r3, [pc, #88]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800720a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b01      	cmp	r3, #1
 8007212:	d114      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007214:	f7fc fbfa 	bl	8003a0c <HAL_GetTick>
 8007218:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800721a:	e00a      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800721c:	f7fc fbf6 	bl	8003a0c <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	f241 3288 	movw	r2, #5000	; 0x1388
 800722a:	4293      	cmp	r3, r2
 800722c:	d901      	bls.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e317      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007232:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0ee      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800724a:	d111      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800724c:	4b05      	ldr	r3, [pc, #20]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007258:	4b04      	ldr	r3, [pc, #16]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800725a:	400b      	ands	r3, r1
 800725c:	4901      	ldr	r1, [pc, #4]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800725e:	4313      	orrs	r3, r2
 8007260:	608b      	str	r3, [r1, #8]
 8007262:	e00b      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007264:	40023800 	.word	0x40023800
 8007268:	40007000 	.word	0x40007000
 800726c:	0ffffcff 	.word	0x0ffffcff
 8007270:	4bb0      	ldr	r3, [pc, #704]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	4aaf      	ldr	r2, [pc, #700]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007276:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800727a:	6093      	str	r3, [r2, #8]
 800727c:	4bad      	ldr	r3, [pc, #692]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800727e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007288:	49aa      	ldr	r1, [pc, #680]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800728a:	4313      	orrs	r3, r2
 800728c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0310 	and.w	r3, r3, #16
 8007296:	2b00      	cmp	r3, #0
 8007298:	d010      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800729a:	4ba6      	ldr	r3, [pc, #664]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800729c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072a0:	4aa4      	ldr	r2, [pc, #656]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80072aa:	4ba2      	ldr	r3, [pc, #648]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	499f      	ldr	r1, [pc, #636]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00a      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072c8:	4b9a      	ldr	r3, [pc, #616]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072d6:	4997      	ldr	r1, [pc, #604]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072ea:	4b92      	ldr	r3, [pc, #584]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072f8:	498e      	ldr	r1, [pc, #568]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800730c:	4b89      	ldr	r3, [pc, #548]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800730e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007312:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800731a:	4986      	ldr	r1, [pc, #536]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800731c:	4313      	orrs	r3, r2
 800731e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800732e:	4b81      	ldr	r3, [pc, #516]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007334:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733c:	497d      	ldr	r1, [pc, #500]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00a      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007350:	4b78      	ldr	r3, [pc, #480]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007356:	f023 0203 	bic.w	r2, r3, #3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735e:	4975      	ldr	r1, [pc, #468]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007360:	4313      	orrs	r3, r2
 8007362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00a      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007372:	4b70      	ldr	r3, [pc, #448]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007378:	f023 020c 	bic.w	r2, r3, #12
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007380:	496c      	ldr	r1, [pc, #432]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007382:	4313      	orrs	r3, r2
 8007384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00a      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007394:	4b67      	ldr	r3, [pc, #412]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a2:	4964      	ldr	r1, [pc, #400]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073b6:	4b5f      	ldr	r3, [pc, #380]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c4:	495b      	ldr	r1, [pc, #364]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00a      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073d8:	4b56      	ldr	r3, [pc, #344]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e6:	4953      	ldr	r1, [pc, #332]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80073fa:	4b4e      	ldr	r3, [pc, #312]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007400:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007408:	494a      	ldr	r1, [pc, #296]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800740a:	4313      	orrs	r3, r2
 800740c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00a      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800741c:	4b45      	ldr	r3, [pc, #276]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800741e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007422:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800742a:	4942      	ldr	r1, [pc, #264]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800742c:	4313      	orrs	r3, r2
 800742e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800743e:	4b3d      	ldr	r3, [pc, #244]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007444:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800744c:	4939      	ldr	r1, [pc, #228]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800744e:	4313      	orrs	r3, r2
 8007450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007460:	4b34      	ldr	r3, [pc, #208]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007466:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800746e:	4931      	ldr	r1, [pc, #196]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007470:	4313      	orrs	r3, r2
 8007472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d011      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007482:	4b2c      	ldr	r3, [pc, #176]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007488:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007490:	4928      	ldr	r1, [pc, #160]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800749c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074a0:	d101      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80074a2:	2301      	movs	r3, #1
 80074a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80074b2:	2301      	movs	r3, #1
 80074b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074c2:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074d0:	4918      	ldr	r1, [pc, #96]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80074e4:	4b13      	ldr	r3, [pc, #76]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f4:	490f      	ldr	r1, [pc, #60]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d005      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800750a:	f040 80d8 	bne.w	80076be <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a08      	ldr	r2, [pc, #32]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007514:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751a:	f7fc fa77 	bl	8003a0c <HAL_GetTick>
 800751e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007520:	e00a      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007522:	f7fc fa73 	bl	8003a0c <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b64      	cmp	r3, #100	; 0x64
 800752e:	d903      	bls.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e196      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007534:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007538:	4b6c      	ldr	r3, [pc, #432]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1ee      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b00      	cmp	r3, #0
 800754e:	d021      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007554:	2b00      	cmp	r3, #0
 8007556:	d11d      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007558:	4b64      	ldr	r3, [pc, #400]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800755a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800755e:	0c1b      	lsrs	r3, r3, #16
 8007560:	f003 0303 	and.w	r3, r3, #3
 8007564:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007566:	4b61      	ldr	r3, [pc, #388]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800756c:	0e1b      	lsrs	r3, r3, #24
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	019a      	lsls	r2, r3, #6
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	041b      	lsls	r3, r3, #16
 800757e:	431a      	orrs	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	061b      	lsls	r3, r3, #24
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	071b      	lsls	r3, r3, #28
 800758c:	4957      	ldr	r1, [pc, #348]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800758e:	4313      	orrs	r3, r2
 8007590:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d004      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x516>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075a8:	d00a      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d02e      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075be:	d129      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80075c0:	4b4a      	ldr	r3, [pc, #296]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c6:	0c1b      	lsrs	r3, r3, #16
 80075c8:	f003 0303 	and.w	r3, r3, #3
 80075cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80075ce:	4b47      	ldr	r3, [pc, #284]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075d4:	0f1b      	lsrs	r3, r3, #28
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	019a      	lsls	r2, r3, #6
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	041b      	lsls	r3, r3, #16
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	061b      	lsls	r3, r3, #24
 80075ee:	431a      	orrs	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	071b      	lsls	r3, r3, #28
 80075f4:	493d      	ldr	r1, [pc, #244]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80075fc:	4b3b      	ldr	r3, [pc, #236]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007602:	f023 021f 	bic.w	r2, r3, #31
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	3b01      	subs	r3, #1
 800760c:	4937      	ldr	r1, [pc, #220]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800760e:	4313      	orrs	r3, r2
 8007610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d01d      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007620:	4b32      	ldr	r3, [pc, #200]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007626:	0e1b      	lsrs	r3, r3, #24
 8007628:	f003 030f 	and.w	r3, r3, #15
 800762c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800762e:	4b2f      	ldr	r3, [pc, #188]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007634:	0f1b      	lsrs	r3, r3, #28
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	019a      	lsls	r2, r3, #6
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	041b      	lsls	r3, r3, #16
 8007648:	431a      	orrs	r2, r3
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	061b      	lsls	r3, r3, #24
 800764e:	431a      	orrs	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	071b      	lsls	r3, r3, #28
 8007654:	4925      	ldr	r1, [pc, #148]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007656:	4313      	orrs	r3, r2
 8007658:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d011      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	019a      	lsls	r2, r3, #6
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	041b      	lsls	r3, r3, #16
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	061b      	lsls	r3, r3, #24
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	071b      	lsls	r3, r3, #28
 8007684:	4919      	ldr	r1, [pc, #100]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007686:	4313      	orrs	r3, r2
 8007688:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800768c:	4b17      	ldr	r3, [pc, #92]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a16      	ldr	r2, [pc, #88]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007698:	f7fc f9b8 	bl	8003a0c <HAL_GetTick>
 800769c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800769e:	e008      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80076a0:	f7fc f9b4 	bl	8003a0c <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b64      	cmp	r3, #100	; 0x64
 80076ac:	d901      	bls.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e0d7      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076b2:	4b0e      	ldr	r3, [pc, #56]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0f0      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	f040 80cd 	bne.w	8007860 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80076c6:	4b09      	ldr	r3, [pc, #36]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a08      	ldr	r2, [pc, #32]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80076cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076d2:	f7fc f99b 	bl	8003a0c <HAL_GetTick>
 80076d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80076d8:	e00a      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80076da:	f7fc f997 	bl	8003a0c <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b64      	cmp	r3, #100	; 0x64
 80076e6:	d903      	bls.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e0ba      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80076ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80076f0:	4b5e      	ldr	r3, [pc, #376]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076fc:	d0ed      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800771a:	2b00      	cmp	r3, #0
 800771c:	d02e      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	d12a      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007726:	4b51      	ldr	r3, [pc, #324]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800772c:	0c1b      	lsrs	r3, r3, #16
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007734:	4b4d      	ldr	r3, [pc, #308]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773a:	0f1b      	lsrs	r3, r3, #28
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	019a      	lsls	r2, r3, #6
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	061b      	lsls	r3, r3, #24
 8007754:	431a      	orrs	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	071b      	lsls	r3, r3, #28
 800775a:	4944      	ldr	r1, [pc, #272]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800775c:	4313      	orrs	r3, r2
 800775e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007762:	4b42      	ldr	r3, [pc, #264]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007768:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	3b01      	subs	r3, #1
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	493d      	ldr	r1, [pc, #244]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007776:	4313      	orrs	r3, r2
 8007778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d022      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800778c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007790:	d11d      	bne.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007792:	4b36      	ldr	r3, [pc, #216]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007798:	0e1b      	lsrs	r3, r3, #24
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077a0:	4b32      	ldr	r3, [pc, #200]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a6:	0f1b      	lsrs	r3, r3, #28
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	019a      	lsls	r2, r3, #6
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	041b      	lsls	r3, r3, #16
 80077ba:	431a      	orrs	r2, r3
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	061b      	lsls	r3, r3, #24
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	071b      	lsls	r3, r3, #28
 80077c6:	4929      	ldr	r1, [pc, #164]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0308 	and.w	r3, r3, #8
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d028      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80077da:	4b24      	ldr	r3, [pc, #144]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e0:	0e1b      	lsrs	r3, r3, #24
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077e8:	4b20      	ldr	r3, [pc, #128]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	f003 0303 	and.w	r3, r3, #3
 80077f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	019a      	lsls	r2, r3, #6
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	041b      	lsls	r3, r3, #16
 8007800:	431a      	orrs	r2, r3
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	061b      	lsls	r3, r3, #24
 8007806:	431a      	orrs	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	071b      	lsls	r3, r3, #28
 800780e:	4917      	ldr	r1, [pc, #92]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007810:	4313      	orrs	r3, r2
 8007812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007816:	4b15      	ldr	r3, [pc, #84]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800781c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	4911      	ldr	r1, [pc, #68]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007826:	4313      	orrs	r3, r2
 8007828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800782c:	4b0f      	ldr	r3, [pc, #60]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a0e      	ldr	r2, [pc, #56]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007838:	f7fc f8e8 	bl	8003a0c <HAL_GetTick>
 800783c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800783e:	e008      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007840:	f7fc f8e4 	bl	8003a0c <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b64      	cmp	r3, #100	; 0x64
 800784c:	d901      	bls.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e007      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007852:	4b06      	ldr	r3, [pc, #24]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800785a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800785e:	d1ef      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	40023800 	.word	0x40023800

08007870 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e06b      	b.n	800795a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	7f5b      	ldrb	r3, [r3, #29]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d105      	bne.n	8007898 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fb fd2a 	bl	80032ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	22ca      	movs	r2, #202	; 0xca
 80078a4:	625a      	str	r2, [r3, #36]	; 0x24
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2253      	movs	r2, #83	; 0x53
 80078ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fb00 	bl	8007eb4 <RTC_EnterInitMode>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d008      	beq.n	80078cc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	22ff      	movs	r2, #255	; 0xff
 80078c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2204      	movs	r2, #4
 80078c6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e046      	b.n	800795a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6899      	ldr	r1, [r3, #8]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	4b23      	ldr	r3, [pc, #140]	; (8007964 <HAL_RTC_Init+0xf4>)
 80078d8:	400b      	ands	r3, r1
 80078da:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6899      	ldr	r1, [r3, #8]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	431a      	orrs	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	68d2      	ldr	r2, [r2, #12]
 8007902:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6919      	ldr	r1, [r3, #16]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	041a      	lsls	r2, r3, #16
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007926:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0208 	bic.w	r2, r2, #8
 8007936:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	22ff      	movs	r2, #255	; 0xff
 8007950:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007958:	2300      	movs	r3, #0
  }
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	ff8fffbf 	.word	0xff8fffbf

08007968 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007968:	b590      	push	{r4, r7, lr}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	7f1b      	ldrb	r3, [r3, #28]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_RTC_SetTime+0x1c>
 8007980:	2302      	movs	r3, #2
 8007982:	e0a8      	b.n	8007ad6 <HAL_RTC_SetTime+0x16e>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2201      	movs	r2, #1
 8007988:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2202      	movs	r2, #2
 800798e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d126      	bne.n	80079e4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 faac 	bl	8007f0c <RTC_ByteToBcd2>
 80079b4:	4603      	mov	r3, r0
 80079b6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 faa5 	bl	8007f0c <RTC_ByteToBcd2>
 80079c2:	4603      	mov	r3, r0
 80079c4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80079c6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	789b      	ldrb	r3, [r3, #2]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 fa9d 	bl	8007f0c <RTC_ByteToBcd2>
 80079d2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80079d4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	7b1b      	ldrb	r3, [r3, #12]
 80079dc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80079de:	4313      	orrs	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	e018      	b.n	8007a16 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d102      	bne.n	80079f8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2200      	movs	r2, #0
 80079f6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007a04:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007a0a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	7b1b      	ldrb	r3, [r3, #12]
 8007a10:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	22ca      	movs	r2, #202	; 0xca
 8007a1c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2253      	movs	r2, #83	; 0x53
 8007a24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 fa44 	bl	8007eb4 <RTC_EnterInitMode>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00b      	beq.n	8007a4a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	22ff      	movs	r2, #255	; 0xff
 8007a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e045      	b.n	8007ad6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	6979      	ldr	r1, [r7, #20]
 8007a50:	4b23      	ldr	r3, [pc, #140]	; (8007ae0 <HAL_RTC_SetTime+0x178>)
 8007a52:	400b      	ands	r3, r1
 8007a54:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a64:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6899      	ldr	r1, [r3, #8]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	691a      	ldr	r2, [r3, #16]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	431a      	orrs	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a8c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 0320 	and.w	r3, r3, #32
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d111      	bne.n	8007ac0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f9e1 	bl	8007e64 <HAL_RTC_WaitForSynchro>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	22ff      	movs	r2, #255	; 0xff
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2204      	movs	r2, #4
 8007ab4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e00a      	b.n	8007ad6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	22ff      	movs	r2, #255	; 0xff
 8007ac6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2201      	movs	r2, #1
 8007acc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
  }
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd90      	pop	{r4, r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	007f7f7f 	.word	0x007f7f7f

08007ae4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ae4:	b590      	push	{r4, r7, lr}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	7f1b      	ldrb	r3, [r3, #28]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_RTC_SetDate+0x1c>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e092      	b.n	8007c26 <HAL_RTC_SetDate+0x142>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10e      	bne.n	8007b30 <HAL_RTC_SetDate+0x4c>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	785b      	ldrb	r3, [r3, #1]
 8007b16:	f003 0310 	and.w	r3, r3, #16
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d008      	beq.n	8007b30 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	f023 0310 	bic.w	r3, r3, #16
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	330a      	adds	r3, #10
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d11c      	bne.n	8007b70 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	78db      	ldrb	r3, [r3, #3]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 f9e6 	bl	8007f0c <RTC_ByteToBcd2>
 8007b40:	4603      	mov	r3, r0
 8007b42:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	785b      	ldrb	r3, [r3, #1]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 f9df 	bl	8007f0c <RTC_ByteToBcd2>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007b52:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	789b      	ldrb	r3, [r3, #2]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 f9d7 	bl	8007f0c <RTC_ByteToBcd2>
 8007b5e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007b60:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	e00e      	b.n	8007b8e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	78db      	ldrb	r3, [r3, #3]
 8007b74:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	785b      	ldrb	r3, [r3, #1]
 8007b7a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007b7c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007b82:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	22ca      	movs	r2, #202	; 0xca
 8007b94:	625a      	str	r2, [r3, #36]	; 0x24
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2253      	movs	r2, #83	; 0x53
 8007b9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 f988 	bl	8007eb4 <RTC_EnterInitMode>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00b      	beq.n	8007bc2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	22ff      	movs	r2, #255	; 0xff
 8007bb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e031      	b.n	8007c26 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	6979      	ldr	r1, [r7, #20]
 8007bc8:	4b19      	ldr	r3, [pc, #100]	; (8007c30 <HAL_RTC_SetDate+0x14c>)
 8007bca:	400b      	ands	r3, r1
 8007bcc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bdc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d111      	bne.n	8007c10 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f939 	bl	8007e64 <HAL_RTC_WaitForSynchro>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	22ff      	movs	r2, #255	; 0xff
 8007bfe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2204      	movs	r2, #4
 8007c04:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e00a      	b.n	8007c26 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	22ff      	movs	r2, #255	; 0xff
 8007c16:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007c24:	2300      	movs	r3, #0
  }
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	371c      	adds	r7, #28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd90      	pop	{r4, r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	00ffff3f 	.word	0x00ffff3f

08007c34 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007c34:	b590      	push	{r4, r7, lr}
 8007c36:	b089      	sub	sp, #36	; 0x24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	61fb      	str	r3, [r7, #28]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	7f1b      	ldrb	r3, [r3, #28]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_RTC_SetAlarm+0x24>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e101      	b.n	8007e5c <HAL_RTC_SetAlarm+0x228>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2202      	movs	r2, #2
 8007c62:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d137      	bne.n	8007cda <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d102      	bne.n	8007c7e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 f942 	bl	8007f0c <RTC_ByteToBcd2>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	785b      	ldrb	r3, [r3, #1]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 f93b 	bl	8007f0c <RTC_ByteToBcd2>
 8007c96:	4603      	mov	r3, r0
 8007c98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007c9a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	789b      	ldrb	r3, [r3, #2]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 f933 	bl	8007f0c <RTC_ByteToBcd2>
 8007ca6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007ca8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	7b1b      	ldrb	r3, [r3, #12]
 8007cb0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007cb2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 f925 	bl	8007f0c <RTC_ByteToBcd2>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007cc6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007cce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	61fb      	str	r3, [r7, #28]
 8007cd8:	e023      	b.n	8007d22 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d102      	bne.n	8007cee <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2200      	movs	r2, #0
 8007cec:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	785b      	ldrb	r3, [r3, #1]
 8007cf8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007cfa:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007d00:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	7b1b      	ldrb	r3, [r3, #12]
 8007d06:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007d08:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d10:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007d12:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007d18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	22ca      	movs	r2, #202	; 0xca
 8007d34:	625a      	str	r2, [r3, #36]	; 0x24
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2253      	movs	r2, #83	; 0x53
 8007d3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d46:	d13f      	bne.n	8007dc8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d56:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d66:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d68:	f7fb fe50 	bl	8003a0c <HAL_GetTick>
 8007d6c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007d6e:	e013      	b.n	8007d98 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d70:	f7fb fe4c 	bl	8003a0c <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d7e:	d90b      	bls.n	8007d98 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	22ff      	movs	r2, #255	; 0xff
 8007d86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e061      	b.n	8007e5c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0e4      	beq.n	8007d70 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69fa      	ldr	r2, [r7, #28]
 8007dac:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dc4:	609a      	str	r2, [r3, #8]
 8007dc6:	e03e      	b.n	8007e46 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689a      	ldr	r2, [r3, #8]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007dd6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007de6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007de8:	f7fb fe10 	bl	8003a0c <HAL_GetTick>
 8007dec:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007dee:	e013      	b.n	8007e18 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007df0:	f7fb fe0c 	bl	8003a0c <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dfe:	d90b      	bls.n	8007e18 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	22ff      	movs	r2, #255	; 0xff
 8007e06:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e021      	b.n	8007e5c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0e4      	beq.n	8007df0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69fa      	ldr	r2, [r7, #28]
 8007e2c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e44:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	22ff      	movs	r2, #255	; 0xff
 8007e4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2201      	movs	r2, #1
 8007e52:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3724      	adds	r7, #36	; 0x24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd90      	pop	{r4, r7, pc}

08007e64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e7e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e80:	f7fb fdc4 	bl	8003a0c <HAL_GetTick>
 8007e84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e86:	e009      	b.n	8007e9c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e88:	f7fb fdc0 	bl	8003a0c <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e96:	d901      	bls.n	8007e9c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e007      	b.n	8007eac <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0ee      	beq.n	8007e88 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d119      	bne.n	8007f02 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ed8:	f7fb fd98 	bl	8003a0c <HAL_GetTick>
 8007edc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ede:	e009      	b.n	8007ef4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ee0:	f7fb fd94 	bl	8003a0c <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eee:	d901      	bls.n	8007ef4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e007      	b.n	8007f04 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0ee      	beq.n	8007ee0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007f1a:	e005      	b.n	8007f28 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	3b0a      	subs	r3, #10
 8007f26:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	2b09      	cmp	r3, #9
 8007f2c:	d8f6      	bhi.n	8007f1c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	011b      	lsls	r3, r3, #4
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	b2db      	uxtb	r3, r3
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	7f1b      	ldrb	r3, [r3, #28]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e03e      	b.n	8007fe2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2201      	movs	r2, #1
 8007f68:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	4b1e      	ldr	r3, [pc, #120]	; (8007ff0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	22ca      	movs	r2, #202	; 0xca
 8007f8a:	625a      	str	r2, [r3, #36]	; 0x24
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2253      	movs	r2, #83	; 0x53
 8007f92:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 0206 	bic.w	r2, r2, #6
 8007fa2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fca:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	22ff      	movs	r2, #255	; 0xff
 8007fd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	fffff7f7 	.word	0xfffff7f7

08007ff4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e025      	b.n	8008054 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7fb fbf5 	bl	800380c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3304      	adds	r3, #4
 8008032:	4619      	mov	r1, r3
 8008034:	4610      	mov	r0, r2
 8008036:	f002 fa25 	bl	800a484 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	461a      	mov	r2, r3
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	f002 fa8f 	bl	800a568 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b02      	cmp	r3, #2
 8008072:	d101      	bne.n	8008078 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008074:	2302      	movs	r3, #2
 8008076:	e018      	b.n	80080aa <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	68b9      	ldr	r1, [r7, #8]
 8008088:	4618      	mov	r0, r3
 800808a:	f002 faed 	bl	800a668 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b02      	cmp	r3, #2
 8008094:	d104      	bne.n	80080a0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2205      	movs	r2, #5
 800809a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800809e:	e003      	b.n	80080a8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d101      	bne.n	80080cc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80080c8:	2302      	movs	r3, #2
 80080ca:	e00e      	b.n	80080ea <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	4618      	mov	r0, r3
 80080dc:	f002 fae5 	bl	800a6aa <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e084      	b.n	800820e <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d106      	bne.n	8008124 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fb f8fe 	bl	8003320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2202      	movs	r2, #2
 8008128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800813a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008144:	d902      	bls.n	800814c <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	e002      	b.n	8008152 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800814c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008150:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800815a:	d007      	beq.n	800816c <HAL_SPI_Init+0x7a>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008164:	d002      	beq.n	800816c <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10b      	bne.n	800818c <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800817c:	d903      	bls.n	8008186 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2202      	movs	r2, #2
 8008182:	631a      	str	r2, [r3, #48]	; 0x30
 8008184:	e002      	b.n	800818c <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	431a      	orrs	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081aa:	431a      	orrs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	431a      	orrs	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	ea42 0103 	orr.w	r1, r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	f003 0204 	and.w	r2, r3, #4
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	431a      	orrs	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	ea42 0103 	orr.w	r1, r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69da      	ldr	r2, [r3, #28]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b082      	sub	sp, #8
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e01d      	b.n	8008264 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d106      	bne.n	8008242 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7fb f8e1 	bl	8003404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2202      	movs	r2, #2
 8008246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	3304      	adds	r3, #4
 8008252:	4619      	mov	r1, r3
 8008254:	4610      	mov	r0, r2
 8008256:	f000 fbcf 	bl	80089f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0201 	orr.w	r2, r2, #1
 8008282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689a      	ldr	r2, [r3, #8]
 800828a:	4b0c      	ldr	r3, [pc, #48]	; (80082bc <HAL_TIM_Base_Start_IT+0x50>)
 800828c:	4013      	ands	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b06      	cmp	r3, #6
 8008294:	d00b      	beq.n	80082ae <HAL_TIM_Base_Start_IT+0x42>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800829c:	d007      	beq.n	80082ae <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f042 0201 	orr.w	r2, r2, #1
 80082ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	00010007 	.word	0x00010007

080082c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e01d      	b.n	800830e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d106      	bne.n	80082ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f815 	bl	8008316 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3304      	adds	r3, #4
 80082fc:	4619      	mov	r1, r3
 80082fe:	4610      	mov	r0, r2
 8008300:	f000 fb7a 	bl	80089f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b02      	cmp	r3, #2
 800833e:	d122      	bne.n	8008386 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b02      	cmp	r3, #2
 800834c:	d11b      	bne.n	8008386 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f06f 0202 	mvn.w	r2, #2
 8008356:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	f003 0303 	and.w	r3, r3, #3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fb25 	bl	80089bc <HAL_TIM_IC_CaptureCallback>
 8008372:	e005      	b.n	8008380 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fb17 	bl	80089a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fb28 	bl	80089d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b04      	cmp	r3, #4
 8008392:	d122      	bne.n	80083da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d11b      	bne.n	80083da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f06f 0204 	mvn.w	r2, #4
 80083aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fafb 	bl	80089bc <HAL_TIM_IC_CaptureCallback>
 80083c6:	e005      	b.n	80083d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 faed 	bl	80089a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fafe 	bl	80089d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	f003 0308 	and.w	r3, r3, #8
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d122      	bne.n	800842e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b08      	cmp	r3, #8
 80083f4:	d11b      	bne.n	800842e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f06f 0208 	mvn.w	r2, #8
 80083fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2204      	movs	r2, #4
 8008404:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	f003 0303 	and.w	r3, r3, #3
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fad1 	bl	80089bc <HAL_TIM_IC_CaptureCallback>
 800841a:	e005      	b.n	8008428 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fac3 	bl	80089a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fad4 	bl	80089d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	2b10      	cmp	r3, #16
 800843a:	d122      	bne.n	8008482 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f003 0310 	and.w	r3, r3, #16
 8008446:	2b10      	cmp	r3, #16
 8008448:	d11b      	bne.n	8008482 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f06f 0210 	mvn.w	r2, #16
 8008452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2208      	movs	r2, #8
 8008458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 faa7 	bl	80089bc <HAL_TIM_IC_CaptureCallback>
 800846e:	e005      	b.n	800847c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fa99 	bl	80089a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 faaa 	bl	80089d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b01      	cmp	r3, #1
 800848e:	d10e      	bne.n	80084ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b01      	cmp	r3, #1
 800849c:	d107      	bne.n	80084ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f06f 0201 	mvn.w	r2, #1
 80084a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7f9 fd9d 	bl	8001fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b8:	2b80      	cmp	r3, #128	; 0x80
 80084ba:	d10e      	bne.n	80084da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c6:	2b80      	cmp	r3, #128	; 0x80
 80084c8:	d107      	bne.n	80084da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 ffcd 	bl	8009474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e8:	d10e      	bne.n	8008508 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f4:	2b80      	cmp	r3, #128	; 0x80
 80084f6:	d107      	bne.n	8008508 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 ffc0 	bl	8009488 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008512:	2b40      	cmp	r3, #64	; 0x40
 8008514:	d10e      	bne.n	8008534 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008520:	2b40      	cmp	r3, #64	; 0x40
 8008522:	d107      	bne.n	8008534 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800852c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fa58 	bl	80089e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b20      	cmp	r3, #32
 8008540:	d10e      	bne.n	8008560 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f003 0320 	and.w	r3, r3, #32
 800854c:	2b20      	cmp	r3, #32
 800854e:	d107      	bne.n	8008560 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f06f 0220 	mvn.w	r2, #32
 8008558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 ff80 	bl	8009460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008560:	bf00      	nop
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800857e:	2302      	movs	r3, #2
 8008580:	e105      	b.n	800878e <HAL_TIM_PWM_ConfigChannel+0x226>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2202      	movs	r2, #2
 800858e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b14      	cmp	r3, #20
 8008596:	f200 80f0 	bhi.w	800877a <HAL_TIM_PWM_ConfigChannel+0x212>
 800859a:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800859c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a0:	080085f5 	.word	0x080085f5
 80085a4:	0800877b 	.word	0x0800877b
 80085a8:	0800877b 	.word	0x0800877b
 80085ac:	0800877b 	.word	0x0800877b
 80085b0:	08008635 	.word	0x08008635
 80085b4:	0800877b 	.word	0x0800877b
 80085b8:	0800877b 	.word	0x0800877b
 80085bc:	0800877b 	.word	0x0800877b
 80085c0:	08008677 	.word	0x08008677
 80085c4:	0800877b 	.word	0x0800877b
 80085c8:	0800877b 	.word	0x0800877b
 80085cc:	0800877b 	.word	0x0800877b
 80085d0:	080086b7 	.word	0x080086b7
 80085d4:	0800877b 	.word	0x0800877b
 80085d8:	0800877b 	.word	0x0800877b
 80085dc:	0800877b 	.word	0x0800877b
 80085e0:	080086f9 	.word	0x080086f9
 80085e4:	0800877b 	.word	0x0800877b
 80085e8:	0800877b 	.word	0x0800877b
 80085ec:	0800877b 	.word	0x0800877b
 80085f0:	08008739 	.word	0x08008739
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68b9      	ldr	r1, [r7, #8]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fa9c 	bl	8008b38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	699a      	ldr	r2, [r3, #24]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0208 	orr.w	r2, r2, #8
 800860e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699a      	ldr	r2, [r3, #24]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 0204 	bic.w	r2, r2, #4
 800861e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6999      	ldr	r1, [r3, #24]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	691a      	ldr	r2, [r3, #16]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	619a      	str	r2, [r3, #24]
      break;
 8008632:	e0a3      	b.n	800877c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68b9      	ldr	r1, [r7, #8]
 800863a:	4618      	mov	r0, r3
 800863c:	f000 faee 	bl	8008c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	699a      	ldr	r2, [r3, #24]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800864e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	699a      	ldr	r2, [r3, #24]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800865e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6999      	ldr	r1, [r3, #24]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	021a      	lsls	r2, r3, #8
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	619a      	str	r2, [r3, #24]
      break;
 8008674:	e082      	b.n	800877c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fb45 	bl	8008d0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69da      	ldr	r2, [r3, #28]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f042 0208 	orr.w	r2, r2, #8
 8008690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69da      	ldr	r2, [r3, #28]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0204 	bic.w	r2, r2, #4
 80086a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69d9      	ldr	r1, [r3, #28]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	691a      	ldr	r2, [r3, #16]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	61da      	str	r2, [r3, #28]
      break;
 80086b4:	e062      	b.n	800877c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68b9      	ldr	r1, [r7, #8]
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fb9b 	bl	8008df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	69da      	ldr	r2, [r3, #28]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69da      	ldr	r2, [r3, #28]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	69d9      	ldr	r1, [r3, #28]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	021a      	lsls	r2, r3, #8
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	61da      	str	r2, [r3, #28]
      break;
 80086f6:	e041      	b.n	800877c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68b9      	ldr	r1, [r7, #8]
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 fbd2 	bl	8008ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f042 0208 	orr.w	r2, r2, #8
 8008712:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0204 	bic.w	r2, r2, #4
 8008722:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	691a      	ldr	r2, [r3, #16]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008736:	e021      	b.n	800877c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68b9      	ldr	r1, [r7, #8]
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fc04 	bl	8008f4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008752:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008762:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	021a      	lsls	r2, r3, #8
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	430a      	orrs	r2, r1
 8008776:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008778:	e000      	b.n	800877c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800877a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop

08008798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d101      	bne.n	80087b0 <HAL_TIM_ConfigClockSource+0x18>
 80087ac:	2302      	movs	r3, #2
 80087ae:	e0b3      	b.n	8008918 <HAL_TIM_ConfigClockSource+0x180>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2202      	movs	r2, #2
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4b55      	ldr	r3, [pc, #340]	; (8008920 <HAL_TIM_ConfigClockSource+0x188>)
 80087cc:	4013      	ands	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087e8:	d03e      	beq.n	8008868 <HAL_TIM_ConfigClockSource+0xd0>
 80087ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087ee:	f200 8087 	bhi.w	8008900 <HAL_TIM_ConfigClockSource+0x168>
 80087f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f6:	f000 8085 	beq.w	8008904 <HAL_TIM_ConfigClockSource+0x16c>
 80087fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fe:	d87f      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x168>
 8008800:	2b70      	cmp	r3, #112	; 0x70
 8008802:	d01a      	beq.n	800883a <HAL_TIM_ConfigClockSource+0xa2>
 8008804:	2b70      	cmp	r3, #112	; 0x70
 8008806:	d87b      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x168>
 8008808:	2b60      	cmp	r3, #96	; 0x60
 800880a:	d050      	beq.n	80088ae <HAL_TIM_ConfigClockSource+0x116>
 800880c:	2b60      	cmp	r3, #96	; 0x60
 800880e:	d877      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x168>
 8008810:	2b50      	cmp	r3, #80	; 0x50
 8008812:	d03c      	beq.n	800888e <HAL_TIM_ConfigClockSource+0xf6>
 8008814:	2b50      	cmp	r3, #80	; 0x50
 8008816:	d873      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x168>
 8008818:	2b40      	cmp	r3, #64	; 0x40
 800881a:	d058      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0x136>
 800881c:	2b40      	cmp	r3, #64	; 0x40
 800881e:	d86f      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x168>
 8008820:	2b30      	cmp	r3, #48	; 0x30
 8008822:	d064      	beq.n	80088ee <HAL_TIM_ConfigClockSource+0x156>
 8008824:	2b30      	cmp	r3, #48	; 0x30
 8008826:	d86b      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x168>
 8008828:	2b20      	cmp	r3, #32
 800882a:	d060      	beq.n	80088ee <HAL_TIM_ConfigClockSource+0x156>
 800882c:	2b20      	cmp	r3, #32
 800882e:	d867      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x168>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d05c      	beq.n	80088ee <HAL_TIM_ConfigClockSource+0x156>
 8008834:	2b10      	cmp	r3, #16
 8008836:	d05a      	beq.n	80088ee <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008838:	e062      	b.n	8008900 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6818      	ldr	r0, [r3, #0]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6899      	ldr	r1, [r3, #8]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f000 fcdd 	bl	8009208 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800885c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	609a      	str	r2, [r3, #8]
      break;
 8008866:	e04e      	b.n	8008906 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6818      	ldr	r0, [r3, #0]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	6899      	ldr	r1, [r3, #8]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	f000 fcc6 	bl	8009208 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800888a:	609a      	str	r2, [r3, #8]
      break;
 800888c:	e03b      	b.n	8008906 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	6859      	ldr	r1, [r3, #4]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	461a      	mov	r2, r3
 800889c:	f000 fc3a 	bl	8009114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2150      	movs	r1, #80	; 0x50
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 fc93 	bl	80091d2 <TIM_ITRx_SetConfig>
      break;
 80088ac:	e02b      	b.n	8008906 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	6859      	ldr	r1, [r3, #4]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	461a      	mov	r2, r3
 80088bc:	f000 fc59 	bl	8009172 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2160      	movs	r1, #96	; 0x60
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 fc83 	bl	80091d2 <TIM_ITRx_SetConfig>
      break;
 80088cc:	e01b      	b.n	8008906 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	6859      	ldr	r1, [r3, #4]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	461a      	mov	r2, r3
 80088dc:	f000 fc1a 	bl	8009114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2140      	movs	r1, #64	; 0x40
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 fc73 	bl	80091d2 <TIM_ITRx_SetConfig>
      break;
 80088ec:	e00b      	b.n	8008906 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4619      	mov	r1, r3
 80088f8:	4610      	mov	r0, r2
 80088fa:	f000 fc6a 	bl	80091d2 <TIM_ITRx_SetConfig>
      break;
 80088fe:	e002      	b.n	8008906 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008900:	bf00      	nop
 8008902:	e000      	b.n	8008906 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008904:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	fffeff88 	.word	0xfffeff88

08008924 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008934:	2b01      	cmp	r3, #1
 8008936:	d101      	bne.n	800893c <HAL_TIM_SlaveConfigSynchro+0x18>
 8008938:	2302      	movs	r3, #2
 800893a:	e031      	b.n	80089a0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fb50 	bl	8008ff4 <TIM_SlaveTimer_SetConfig>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d009      	beq.n	800896e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e018      	b.n	80089a0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68da      	ldr	r2, [r3, #12]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800897c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800898c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a40      	ldr	r2, [pc, #256]	; (8008b0c <TIM_Base_SetConfig+0x114>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d013      	beq.n	8008a38 <TIM_Base_SetConfig+0x40>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a16:	d00f      	beq.n	8008a38 <TIM_Base_SetConfig+0x40>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a3d      	ldr	r2, [pc, #244]	; (8008b10 <TIM_Base_SetConfig+0x118>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d00b      	beq.n	8008a38 <TIM_Base_SetConfig+0x40>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a3c      	ldr	r2, [pc, #240]	; (8008b14 <TIM_Base_SetConfig+0x11c>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d007      	beq.n	8008a38 <TIM_Base_SetConfig+0x40>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a3b      	ldr	r2, [pc, #236]	; (8008b18 <TIM_Base_SetConfig+0x120>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d003      	beq.n	8008a38 <TIM_Base_SetConfig+0x40>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a3a      	ldr	r2, [pc, #232]	; (8008b1c <TIM_Base_SetConfig+0x124>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d108      	bne.n	8008a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a2f      	ldr	r2, [pc, #188]	; (8008b0c <TIM_Base_SetConfig+0x114>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d02b      	beq.n	8008aaa <TIM_Base_SetConfig+0xb2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a58:	d027      	beq.n	8008aaa <TIM_Base_SetConfig+0xb2>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a2c      	ldr	r2, [pc, #176]	; (8008b10 <TIM_Base_SetConfig+0x118>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d023      	beq.n	8008aaa <TIM_Base_SetConfig+0xb2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a2b      	ldr	r2, [pc, #172]	; (8008b14 <TIM_Base_SetConfig+0x11c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d01f      	beq.n	8008aaa <TIM_Base_SetConfig+0xb2>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a2a      	ldr	r2, [pc, #168]	; (8008b18 <TIM_Base_SetConfig+0x120>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d01b      	beq.n	8008aaa <TIM_Base_SetConfig+0xb2>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a29      	ldr	r2, [pc, #164]	; (8008b1c <TIM_Base_SetConfig+0x124>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d017      	beq.n	8008aaa <TIM_Base_SetConfig+0xb2>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a28      	ldr	r2, [pc, #160]	; (8008b20 <TIM_Base_SetConfig+0x128>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d013      	beq.n	8008aaa <TIM_Base_SetConfig+0xb2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a27      	ldr	r2, [pc, #156]	; (8008b24 <TIM_Base_SetConfig+0x12c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d00f      	beq.n	8008aaa <TIM_Base_SetConfig+0xb2>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a26      	ldr	r2, [pc, #152]	; (8008b28 <TIM_Base_SetConfig+0x130>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d00b      	beq.n	8008aaa <TIM_Base_SetConfig+0xb2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a25      	ldr	r2, [pc, #148]	; (8008b2c <TIM_Base_SetConfig+0x134>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d007      	beq.n	8008aaa <TIM_Base_SetConfig+0xb2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a24      	ldr	r2, [pc, #144]	; (8008b30 <TIM_Base_SetConfig+0x138>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d003      	beq.n	8008aaa <TIM_Base_SetConfig+0xb2>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a23      	ldr	r2, [pc, #140]	; (8008b34 <TIM_Base_SetConfig+0x13c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d108      	bne.n	8008abc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a0a      	ldr	r2, [pc, #40]	; (8008b0c <TIM_Base_SetConfig+0x114>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d003      	beq.n	8008af0 <TIM_Base_SetConfig+0xf8>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a0c      	ldr	r2, [pc, #48]	; (8008b1c <TIM_Base_SetConfig+0x124>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d103      	bne.n	8008af8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	691a      	ldr	r2, [r3, #16]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	615a      	str	r2, [r3, #20]
}
 8008afe:	bf00      	nop
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	40010000 	.word	0x40010000
 8008b10:	40000400 	.word	0x40000400
 8008b14:	40000800 	.word	0x40000800
 8008b18:	40000c00 	.word	0x40000c00
 8008b1c:	40010400 	.word	0x40010400
 8008b20:	40014000 	.word	0x40014000
 8008b24:	40014400 	.word	0x40014400
 8008b28:	40014800 	.word	0x40014800
 8008b2c:	40001800 	.word	0x40001800
 8008b30:	40001c00 	.word	0x40001c00
 8008b34:	40002000 	.word	0x40002000

08008b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	f023 0201 	bic.w	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	4b2b      	ldr	r3, [pc, #172]	; (8008c10 <TIM_OC1_SetConfig+0xd8>)
 8008b64:	4013      	ands	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0303 	bic.w	r3, r3, #3
 8008b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f023 0302 	bic.w	r3, r3, #2
 8008b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a21      	ldr	r2, [pc, #132]	; (8008c14 <TIM_OC1_SetConfig+0xdc>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d003      	beq.n	8008b9c <TIM_OC1_SetConfig+0x64>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a20      	ldr	r2, [pc, #128]	; (8008c18 <TIM_OC1_SetConfig+0xe0>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d10c      	bne.n	8008bb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	f023 0308 	bic.w	r3, r3, #8
 8008ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f023 0304 	bic.w	r3, r3, #4
 8008bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a16      	ldr	r2, [pc, #88]	; (8008c14 <TIM_OC1_SetConfig+0xdc>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d003      	beq.n	8008bc6 <TIM_OC1_SetConfig+0x8e>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a15      	ldr	r2, [pc, #84]	; (8008c18 <TIM_OC1_SetConfig+0xe0>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d111      	bne.n	8008bea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	621a      	str	r2, [r3, #32]
}
 8008c04:	bf00      	nop
 8008c06:	371c      	adds	r7, #28
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	fffeff8f 	.word	0xfffeff8f
 8008c14:	40010000 	.word	0x40010000
 8008c18:	40010400 	.word	0x40010400

08008c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	f023 0210 	bic.w	r2, r3, #16
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4b2e      	ldr	r3, [pc, #184]	; (8008d00 <TIM_OC2_SetConfig+0xe4>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	021b      	lsls	r3, r3, #8
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f023 0320 	bic.w	r3, r3, #32
 8008c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	011b      	lsls	r3, r3, #4
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a23      	ldr	r2, [pc, #140]	; (8008d04 <TIM_OC2_SetConfig+0xe8>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d003      	beq.n	8008c84 <TIM_OC2_SetConfig+0x68>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a22      	ldr	r2, [pc, #136]	; (8008d08 <TIM_OC2_SetConfig+0xec>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d10d      	bne.n	8008ca0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a18      	ldr	r2, [pc, #96]	; (8008d04 <TIM_OC2_SetConfig+0xe8>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <TIM_OC2_SetConfig+0x94>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a17      	ldr	r2, [pc, #92]	; (8008d08 <TIM_OC2_SetConfig+0xec>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d113      	bne.n	8008cd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	621a      	str	r2, [r3, #32]
}
 8008cf2:	bf00      	nop
 8008cf4:	371c      	adds	r7, #28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	feff8fff 	.word	0xfeff8fff
 8008d04:	40010000 	.word	0x40010000
 8008d08:	40010400 	.word	0x40010400

08008d0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	4b2d      	ldr	r3, [pc, #180]	; (8008dec <TIM_OC3_SetConfig+0xe0>)
 8008d38:	4013      	ands	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f023 0303 	bic.w	r3, r3, #3
 8008d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a22      	ldr	r2, [pc, #136]	; (8008df0 <TIM_OC3_SetConfig+0xe4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d003      	beq.n	8008d72 <TIM_OC3_SetConfig+0x66>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a21      	ldr	r2, [pc, #132]	; (8008df4 <TIM_OC3_SetConfig+0xe8>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d10d      	bne.n	8008d8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	021b      	lsls	r3, r3, #8
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a17      	ldr	r2, [pc, #92]	; (8008df0 <TIM_OC3_SetConfig+0xe4>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d003      	beq.n	8008d9e <TIM_OC3_SetConfig+0x92>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a16      	ldr	r2, [pc, #88]	; (8008df4 <TIM_OC3_SetConfig+0xe8>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d113      	bne.n	8008dc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	011b      	lsls	r3, r3, #4
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	011b      	lsls	r3, r3, #4
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	621a      	str	r2, [r3, #32]
}
 8008de0:	bf00      	nop
 8008de2:	371c      	adds	r7, #28
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	fffeff8f 	.word	0xfffeff8f
 8008df0:	40010000 	.word	0x40010000
 8008df4:	40010400 	.word	0x40010400

08008df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	4b1e      	ldr	r3, [pc, #120]	; (8008e9c <TIM_OC4_SetConfig+0xa4>)
 8008e24:	4013      	ands	r3, r2
 8008e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	031b      	lsls	r3, r3, #12
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a13      	ldr	r2, [pc, #76]	; (8008ea0 <TIM_OC4_SetConfig+0xa8>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d003      	beq.n	8008e60 <TIM_OC4_SetConfig+0x68>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a12      	ldr	r2, [pc, #72]	; (8008ea4 <TIM_OC4_SetConfig+0xac>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d109      	bne.n	8008e74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	019b      	lsls	r3, r3, #6
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	621a      	str	r2, [r3, #32]
}
 8008e8e:	bf00      	nop
 8008e90:	371c      	adds	r7, #28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	feff8fff 	.word	0xfeff8fff
 8008ea0:	40010000 	.word	0x40010000
 8008ea4:	40010400 	.word	0x40010400

08008ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4b1b      	ldr	r3, [pc, #108]	; (8008f40 <TIM_OC5_SetConfig+0x98>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ee8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a12      	ldr	r2, [pc, #72]	; (8008f44 <TIM_OC5_SetConfig+0x9c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d003      	beq.n	8008f06 <TIM_OC5_SetConfig+0x5e>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a11      	ldr	r2, [pc, #68]	; (8008f48 <TIM_OC5_SetConfig+0xa0>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d109      	bne.n	8008f1a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	021b      	lsls	r3, r3, #8
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	621a      	str	r2, [r3, #32]
}
 8008f34:	bf00      	nop
 8008f36:	371c      	adds	r7, #28
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	fffeff8f 	.word	0xfffeff8f
 8008f44:	40010000 	.word	0x40010000
 8008f48:	40010400 	.word	0x40010400

08008f4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	4b1c      	ldr	r3, [pc, #112]	; (8008fe8 <TIM_OC6_SetConfig+0x9c>)
 8008f78:	4013      	ands	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	051b      	lsls	r3, r3, #20
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a13      	ldr	r2, [pc, #76]	; (8008fec <TIM_OC6_SetConfig+0xa0>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d003      	beq.n	8008fac <TIM_OC6_SetConfig+0x60>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a12      	ldr	r2, [pc, #72]	; (8008ff0 <TIM_OC6_SetConfig+0xa4>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d109      	bne.n	8008fc0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	029b      	lsls	r3, r3, #10
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	621a      	str	r2, [r3, #32]
}
 8008fda:	bf00      	nop
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	feff8fff 	.word	0xfeff8fff
 8008fec:	40010000 	.word	0x40010000
 8008ff0:	40010400 	.word	0x40010400

08008ff4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800900c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	4313      	orrs	r3, r2
 8009016:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4b3d      	ldr	r3, [pc, #244]	; (8009110 <TIM_SlaveTimer_SetConfig+0x11c>)
 800901c:	4013      	ands	r3, r2
 800901e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	4313      	orrs	r3, r2
 8009028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2b70      	cmp	r3, #112	; 0x70
 8009038:	d01a      	beq.n	8009070 <TIM_SlaveTimer_SetConfig+0x7c>
 800903a:	2b70      	cmp	r3, #112	; 0x70
 800903c:	d860      	bhi.n	8009100 <TIM_SlaveTimer_SetConfig+0x10c>
 800903e:	2b60      	cmp	r3, #96	; 0x60
 8009040:	d054      	beq.n	80090ec <TIM_SlaveTimer_SetConfig+0xf8>
 8009042:	2b60      	cmp	r3, #96	; 0x60
 8009044:	d85c      	bhi.n	8009100 <TIM_SlaveTimer_SetConfig+0x10c>
 8009046:	2b50      	cmp	r3, #80	; 0x50
 8009048:	d046      	beq.n	80090d8 <TIM_SlaveTimer_SetConfig+0xe4>
 800904a:	2b50      	cmp	r3, #80	; 0x50
 800904c:	d858      	bhi.n	8009100 <TIM_SlaveTimer_SetConfig+0x10c>
 800904e:	2b40      	cmp	r3, #64	; 0x40
 8009050:	d019      	beq.n	8009086 <TIM_SlaveTimer_SetConfig+0x92>
 8009052:	2b40      	cmp	r3, #64	; 0x40
 8009054:	d854      	bhi.n	8009100 <TIM_SlaveTimer_SetConfig+0x10c>
 8009056:	2b30      	cmp	r3, #48	; 0x30
 8009058:	d054      	beq.n	8009104 <TIM_SlaveTimer_SetConfig+0x110>
 800905a:	2b30      	cmp	r3, #48	; 0x30
 800905c:	d850      	bhi.n	8009100 <TIM_SlaveTimer_SetConfig+0x10c>
 800905e:	2b20      	cmp	r3, #32
 8009060:	d050      	beq.n	8009104 <TIM_SlaveTimer_SetConfig+0x110>
 8009062:	2b20      	cmp	r3, #32
 8009064:	d84c      	bhi.n	8009100 <TIM_SlaveTimer_SetConfig+0x10c>
 8009066:	2b00      	cmp	r3, #0
 8009068:	d04c      	beq.n	8009104 <TIM_SlaveTimer_SetConfig+0x110>
 800906a:	2b10      	cmp	r3, #16
 800906c:	d04a      	beq.n	8009104 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800906e:	e047      	b.n	8009100 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6818      	ldr	r0, [r3, #0]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	68d9      	ldr	r1, [r3, #12]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	f000 f8c2 	bl	8009208 <TIM_ETR_SetConfig>
      break;
 8009084:	e03f      	b.n	8009106 <TIM_SlaveTimer_SetConfig+0x112>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b05      	cmp	r3, #5
 800908c:	d101      	bne.n	8009092 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e03a      	b.n	8009108 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6a1a      	ldr	r2, [r3, #32]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f022 0201 	bic.w	r2, r2, #1
 80090a8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090b8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	011b      	lsls	r3, r3, #4
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	621a      	str	r2, [r3, #32]
      break;
 80090d6:	e016      	b.n	8009106 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	6899      	ldr	r1, [r3, #8]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	461a      	mov	r2, r3
 80090e6:	f000 f815 	bl	8009114 <TIM_TI1_ConfigInputStage>
      break;
 80090ea:	e00c      	b.n	8009106 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	6899      	ldr	r1, [r3, #8]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	461a      	mov	r2, r3
 80090fa:	f000 f83a 	bl	8009172 <TIM_TI2_ConfigInputStage>
      break;
 80090fe:	e002      	b.n	8009106 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8009100:	bf00      	nop
 8009102:	e000      	b.n	8009106 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8009104:	bf00      	nop
  }
  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	fffefff8 	.word	0xfffefff8

08009114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	f023 0201 	bic.w	r2, r3, #1
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800913e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	011b      	lsls	r3, r3, #4
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	4313      	orrs	r3, r2
 8009148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f023 030a 	bic.w	r3, r3, #10
 8009150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4313      	orrs	r3, r2
 8009158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	621a      	str	r2, [r3, #32]
}
 8009166:	bf00      	nop
 8009168:	371c      	adds	r7, #28
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009172:	b480      	push	{r7}
 8009174:	b087      	sub	sp, #28
 8009176:	af00      	add	r7, sp, #0
 8009178:	60f8      	str	r0, [r7, #12]
 800917a:	60b9      	str	r1, [r7, #8]
 800917c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f023 0210 	bic.w	r2, r3, #16
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800919c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	031b      	lsls	r3, r3, #12
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	011b      	lsls	r3, r3, #4
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	621a      	str	r2, [r3, #32]
}
 80091c6:	bf00      	nop
 80091c8:	371c      	adds	r7, #28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b085      	sub	sp, #20
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	f043 0307 	orr.w	r3, r3, #7
 80091f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	609a      	str	r2, [r3, #8]
}
 80091fc:	bf00      	nop
 80091fe:	3714      	adds	r7, #20
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009208:	b480      	push	{r7}
 800920a:	b087      	sub	sp, #28
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	021a      	lsls	r2, r3, #8
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	431a      	orrs	r2, r3
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4313      	orrs	r3, r2
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	4313      	orrs	r3, r2
 8009234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	609a      	str	r2, [r3, #8]
}
 800923c:	bf00      	nop
 800923e:	371c      	adds	r7, #28
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009258:	2b01      	cmp	r3, #1
 800925a:	d101      	bne.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800925c:	2302      	movs	r3, #2
 800925e:	e06d      	b.n	800933c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a30      	ldr	r2, [pc, #192]	; (8009348 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d004      	beq.n	8009294 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a2f      	ldr	r2, [pc, #188]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d108      	bne.n	80092a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800929a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a20      	ldr	r2, [pc, #128]	; (8009348 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d022      	beq.n	8009310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d2:	d01d      	beq.n	8009310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a1d      	ldr	r2, [pc, #116]	; (8009350 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d018      	beq.n	8009310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a1c      	ldr	r2, [pc, #112]	; (8009354 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d013      	beq.n	8009310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a1a      	ldr	r2, [pc, #104]	; (8009358 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d00e      	beq.n	8009310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a15      	ldr	r2, [pc, #84]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d009      	beq.n	8009310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a16      	ldr	r2, [pc, #88]	; (800935c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d004      	beq.n	8009310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a15      	ldr	r2, [pc, #84]	; (8009360 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d10c      	bne.n	800932a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009316:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	4313      	orrs	r3, r2
 8009320:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	40010000 	.word	0x40010000
 800934c:	40010400 	.word	0x40010400
 8009350:	40000400 	.word	0x40000400
 8009354:	40000800 	.word	0x40000800
 8009358:	40000c00 	.word	0x40000c00
 800935c:	40014000 	.word	0x40014000
 8009360:	40001800 	.word	0x40001800

08009364 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009378:	2b01      	cmp	r3, #1
 800937a:	d101      	bne.n	8009380 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800937c:	2302      	movs	r3, #2
 800937e:	e065      	b.n	800944c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	4313      	orrs	r3, r2
 8009394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4313      	orrs	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	4313      	orrs	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e6:	4313      	orrs	r3, r2
 80093e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	041b      	lsls	r3, r3, #16
 80093f6:	4313      	orrs	r3, r2
 80093f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a16      	ldr	r2, [pc, #88]	; (8009458 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d004      	beq.n	800940e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a14      	ldr	r2, [pc, #80]	; (800945c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d115      	bne.n	800943a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009418:	051b      	lsls	r3, r3, #20
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	4313      	orrs	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	4313      	orrs	r3, r2
 8009438:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	40010000 	.word	0x40010000
 800945c:	40010400 	.word	0x40010400

08009460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e040      	b.n	8009530 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d106      	bne.n	80094c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7fa f846 	bl	8003550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2224      	movs	r2, #36	; 0x24
 80094c8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 0201 	bic.w	r2, r2, #1
 80094d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fa6e 	bl	80099bc <UART_SetConfig>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d101      	bne.n	80094ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e022      	b.n	8009530 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fd0e 	bl	8009f14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689a      	ldr	r2, [r3, #8]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009516:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f042 0201 	orr.w	r2, r2, #1
 8009526:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fd95 	bl	800a058 <UART_CheckIdleState>
 800952e:	4603      	mov	r3, r0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	4613      	mov	r3, r2
 8009544:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800954a:	2b20      	cmp	r3, #32
 800954c:	d144      	bne.n	80095d8 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <HAL_UART_Transmit_IT+0x22>
 8009554:	88fb      	ldrh	r3, [r7, #6]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e03d      	b.n	80095da <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009564:	2b01      	cmp	r3, #1
 8009566:	d101      	bne.n	800956c <HAL_UART_Transmit_IT+0x34>
 8009568:	2302      	movs	r3, #2
 800956a:	e036      	b.n	80095da <HAL_UART_Transmit_IT+0xa2>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	88fa      	ldrh	r2, [r7, #6]
 800957e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	88fa      	ldrh	r2, [r7, #6]
 8009586:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2221      	movs	r2, #33	; 0x21
 800959a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095a4:	d107      	bne.n	80095b6 <HAL_UART_Transmit_IT+0x7e>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d103      	bne.n	80095b6 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	4a0d      	ldr	r2, [pc, #52]	; (80095e8 <HAL_UART_Transmit_IT+0xb0>)
 80095b2:	665a      	str	r2, [r3, #100]	; 0x64
 80095b4:	e002      	b.n	80095bc <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	4a0c      	ldr	r2, [pc, #48]	; (80095ec <HAL_UART_Transmit_IT+0xb4>)
 80095ba:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80095d2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	e000      	b.n	80095da <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80095d8:	2302      	movs	r3, #2
  }
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	0800a28b 	.word	0x0800a28b
 80095ec:	0800a219 	.word	0x0800a219

080095f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	4613      	mov	r3, r2
 80095fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009602:	2b20      	cmp	r3, #32
 8009604:	f040 808a 	bne.w	800971c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <HAL_UART_Receive_IT+0x24>
 800960e:	88fb      	ldrh	r3, [r7, #6]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e082      	b.n	800971e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800961e:	2b01      	cmp	r3, #1
 8009620:	d101      	bne.n	8009626 <HAL_UART_Receive_IT+0x36>
 8009622:	2302      	movs	r3, #2
 8009624:	e07b      	b.n	800971e <HAL_UART_Receive_IT+0x12e>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	88fa      	ldrh	r2, [r7, #6]
 8009638:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	88fa      	ldrh	r2, [r7, #6]
 8009640:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009652:	d10e      	bne.n	8009672 <HAL_UART_Receive_IT+0x82>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d105      	bne.n	8009668 <HAL_UART_Receive_IT+0x78>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009662:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009666:	e02d      	b.n	80096c4 <HAL_UART_Receive_IT+0xd4>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	22ff      	movs	r2, #255	; 0xff
 800966c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009670:	e028      	b.n	80096c4 <HAL_UART_Receive_IT+0xd4>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10d      	bne.n	8009696 <HAL_UART_Receive_IT+0xa6>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d104      	bne.n	800968c <HAL_UART_Receive_IT+0x9c>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	22ff      	movs	r2, #255	; 0xff
 8009686:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800968a:	e01b      	b.n	80096c4 <HAL_UART_Receive_IT+0xd4>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	227f      	movs	r2, #127	; 0x7f
 8009690:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009694:	e016      	b.n	80096c4 <HAL_UART_Receive_IT+0xd4>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800969e:	d10d      	bne.n	80096bc <HAL_UART_Receive_IT+0xcc>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d104      	bne.n	80096b2 <HAL_UART_Receive_IT+0xc2>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	227f      	movs	r2, #127	; 0x7f
 80096ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096b0:	e008      	b.n	80096c4 <HAL_UART_Receive_IT+0xd4>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	223f      	movs	r2, #63	; 0x3f
 80096b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096ba:	e003      	b.n	80096c4 <HAL_UART_Receive_IT+0xd4>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2222      	movs	r2, #34	; 0x22
 80096ce:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f042 0201 	orr.w	r2, r2, #1
 80096de:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e8:	d107      	bne.n	80096fa <HAL_UART_Receive_IT+0x10a>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d103      	bne.n	80096fa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	4a0d      	ldr	r2, [pc, #52]	; (800972c <HAL_UART_Receive_IT+0x13c>)
 80096f6:	661a      	str	r2, [r3, #96]	; 0x60
 80096f8:	e002      	b.n	8009700 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	4a0c      	ldr	r2, [pc, #48]	; (8009730 <HAL_UART_Receive_IT+0x140>)
 80096fe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009716:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	e000      	b.n	800971e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800971c:	2302      	movs	r3, #2
  }
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	0800a3df 	.word	0x0800a3df
 8009730:	0800a339 	.word	0x0800a339

08009734 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b088      	sub	sp, #32
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009754:	69fa      	ldr	r2, [r7, #28]
 8009756:	f640 030f 	movw	r3, #2063	; 0x80f
 800975a:	4013      	ands	r3, r2
 800975c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d113      	bne.n	800978c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00e      	beq.n	800978c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	f003 0320 	and.w	r3, r3, #32
 8009774:	2b00      	cmp	r3, #0
 8009776:	d009      	beq.n	800978c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 80ff 	beq.w	8009980 <HAL_UART_IRQHandler+0x24c>
      {
        huart->RxISR(huart);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	4798      	blx	r3
      }
      return;
 800978a:	e0f9      	b.n	8009980 <HAL_UART_IRQHandler+0x24c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 80d5 	beq.w	800993e <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d105      	bne.n	80097aa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 80ca 	beq.w	800993e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00e      	beq.n	80097d2 <HAL_UART_IRQHandler+0x9e>
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d009      	beq.n	80097d2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2201      	movs	r2, #1
 80097c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ca:	f043 0201 	orr.w	r2, r3, #1
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00e      	beq.n	80097fa <HAL_UART_IRQHandler+0xc6>
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d009      	beq.n	80097fa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2202      	movs	r2, #2
 80097ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097f2:	f043 0204 	orr.w	r2, r3, #4
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00e      	beq.n	8009822 <HAL_UART_IRQHandler+0xee>
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d009      	beq.n	8009822 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2204      	movs	r2, #4
 8009814:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800981a:	f043 0202 	orr.w	r2, r3, #2
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	f003 0308 	and.w	r3, r3, #8
 8009828:	2b00      	cmp	r3, #0
 800982a:	d013      	beq.n	8009854 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	f003 0320 	and.w	r3, r3, #32
 8009832:	2b00      	cmp	r3, #0
 8009834:	d104      	bne.n	8009840 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800983c:	2b00      	cmp	r3, #0
 800983e:	d009      	beq.n	8009854 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2208      	movs	r2, #8
 8009846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800984c:	f043 0208 	orr.w	r2, r3, #8
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00f      	beq.n	800987e <HAL_UART_IRQHandler+0x14a>
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00a      	beq.n	800987e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009870:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009876:	f043 0220 	orr.w	r2, r3, #32
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009882:	2b00      	cmp	r3, #0
 8009884:	d07e      	beq.n	8009984 <HAL_UART_IRQHandler+0x250>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	f003 0320 	and.w	r3, r3, #32
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00c      	beq.n	80098aa <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	f003 0320 	and.w	r3, r3, #32
 8009896:	2b00      	cmp	r3, #0
 8009898:	d007      	beq.n	80098aa <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ae:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ba:	2b40      	cmp	r3, #64	; 0x40
 80098bc:	d004      	beq.n	80098c8 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d031      	beq.n	800992c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fc6f 	bl	800a1ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d8:	2b40      	cmp	r3, #64	; 0x40
 80098da:	d123      	bne.n	8009924 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689a      	ldr	r2, [r3, #8]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098ea:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d013      	beq.n	800991c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f8:	4a25      	ldr	r2, [pc, #148]	; (8009990 <HAL_UART_IRQHandler+0x25c>)
 80098fa:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009900:	4618      	mov	r0, r3
 8009902:	f7fa ff49 	bl	8004798 <HAL_DMA_Abort_IT>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d016      	beq.n	800993a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009916:	4610      	mov	r0, r2
 8009918:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800991a:	e00e      	b.n	800993a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f843 	bl	80099a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009922:	e00a      	b.n	800993a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f83f 	bl	80099a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800992a:	e006      	b.n	800993a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f83b 	bl	80099a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8009938:	e024      	b.n	8009984 <HAL_UART_IRQHandler+0x250>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800993a:	bf00      	nop
    return;
 800993c:	e022      	b.n	8009984 <HAL_UART_IRQHandler+0x250>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00d      	beq.n	8009964 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994e:	2b00      	cmp	r3, #0
 8009950:	d008      	beq.n	8009964 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009956:	2b00      	cmp	r3, #0
 8009958:	d016      	beq.n	8009988 <HAL_UART_IRQHandler+0x254>
    {
      huart->TxISR(huart);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	4798      	blx	r3
    }
    return;
 8009962:	e011      	b.n	8009988 <HAL_UART_IRQHandler+0x254>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00d      	beq.n	800998a <HAL_UART_IRQHandler+0x256>
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009974:	2b00      	cmp	r3, #0
 8009976:	d008      	beq.n	800998a <HAL_UART_IRQHandler+0x256>
  {
    UART_EndTransmit_IT(huart);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fcc4 	bl	800a306 <UART_EndTransmit_IT>
    return;
 800997e:	e004      	b.n	800998a <HAL_UART_IRQHandler+0x256>
      return;
 8009980:	bf00      	nop
 8009982:	e002      	b.n	800998a <HAL_UART_IRQHandler+0x256>
    return;
 8009984:	bf00      	nop
 8009986:	e000      	b.n	800998a <HAL_UART_IRQHandler+0x256>
    return;
 8009988:	bf00      	nop
  }

}
 800998a:	3720      	adds	r7, #32
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	0800a1ed 	.word	0x0800a1ed

08009994 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b088      	sub	sp, #32
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80099c4:	2300      	movs	r3, #0
 80099c6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689a      	ldr	r2, [r3, #8]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	431a      	orrs	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	4ba7      	ldr	r3, [pc, #668]	; (8009c88 <UART_SetConfig+0x2cc>)
 80099ec:	4013      	ands	r3, r2
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	6812      	ldr	r2, [r2, #0]
 80099f2:	6939      	ldr	r1, [r7, #16]
 80099f4:	430b      	orrs	r3, r1
 80099f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68da      	ldr	r2, [r3, #12]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	430a      	orrs	r2, r1
 8009a30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a95      	ldr	r2, [pc, #596]	; (8009c8c <UART_SetConfig+0x2d0>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d120      	bne.n	8009a7e <UART_SetConfig+0xc2>
 8009a3c:	4b94      	ldr	r3, [pc, #592]	; (8009c90 <UART_SetConfig+0x2d4>)
 8009a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d816      	bhi.n	8009a78 <UART_SetConfig+0xbc>
 8009a4a:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <UART_SetConfig+0x94>)
 8009a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a50:	08009a61 	.word	0x08009a61
 8009a54:	08009a6d 	.word	0x08009a6d
 8009a58:	08009a67 	.word	0x08009a67
 8009a5c:	08009a73 	.word	0x08009a73
 8009a60:	2301      	movs	r3, #1
 8009a62:	77fb      	strb	r3, [r7, #31]
 8009a64:	e14f      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009a66:	2302      	movs	r3, #2
 8009a68:	77fb      	strb	r3, [r7, #31]
 8009a6a:	e14c      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009a6c:	2304      	movs	r3, #4
 8009a6e:	77fb      	strb	r3, [r7, #31]
 8009a70:	e149      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009a72:	2308      	movs	r3, #8
 8009a74:	77fb      	strb	r3, [r7, #31]
 8009a76:	e146      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009a78:	2310      	movs	r3, #16
 8009a7a:	77fb      	strb	r3, [r7, #31]
 8009a7c:	e143      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a84      	ldr	r2, [pc, #528]	; (8009c94 <UART_SetConfig+0x2d8>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d132      	bne.n	8009aee <UART_SetConfig+0x132>
 8009a88:	4b81      	ldr	r3, [pc, #516]	; (8009c90 <UART_SetConfig+0x2d4>)
 8009a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a8e:	f003 030c 	and.w	r3, r3, #12
 8009a92:	2b0c      	cmp	r3, #12
 8009a94:	d828      	bhi.n	8009ae8 <UART_SetConfig+0x12c>
 8009a96:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <UART_SetConfig+0xe0>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009ad1 	.word	0x08009ad1
 8009aa0:	08009ae9 	.word	0x08009ae9
 8009aa4:	08009ae9 	.word	0x08009ae9
 8009aa8:	08009ae9 	.word	0x08009ae9
 8009aac:	08009add 	.word	0x08009add
 8009ab0:	08009ae9 	.word	0x08009ae9
 8009ab4:	08009ae9 	.word	0x08009ae9
 8009ab8:	08009ae9 	.word	0x08009ae9
 8009abc:	08009ad7 	.word	0x08009ad7
 8009ac0:	08009ae9 	.word	0x08009ae9
 8009ac4:	08009ae9 	.word	0x08009ae9
 8009ac8:	08009ae9 	.word	0x08009ae9
 8009acc:	08009ae3 	.word	0x08009ae3
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	77fb      	strb	r3, [r7, #31]
 8009ad4:	e117      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	77fb      	strb	r3, [r7, #31]
 8009ada:	e114      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009adc:	2304      	movs	r3, #4
 8009ade:	77fb      	strb	r3, [r7, #31]
 8009ae0:	e111      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009ae2:	2308      	movs	r3, #8
 8009ae4:	77fb      	strb	r3, [r7, #31]
 8009ae6:	e10e      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009ae8:	2310      	movs	r3, #16
 8009aea:	77fb      	strb	r3, [r7, #31]
 8009aec:	e10b      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a69      	ldr	r2, [pc, #420]	; (8009c98 <UART_SetConfig+0x2dc>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d120      	bne.n	8009b3a <UART_SetConfig+0x17e>
 8009af8:	4b65      	ldr	r3, [pc, #404]	; (8009c90 <UART_SetConfig+0x2d4>)
 8009afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009afe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b02:	2b30      	cmp	r3, #48	; 0x30
 8009b04:	d013      	beq.n	8009b2e <UART_SetConfig+0x172>
 8009b06:	2b30      	cmp	r3, #48	; 0x30
 8009b08:	d814      	bhi.n	8009b34 <UART_SetConfig+0x178>
 8009b0a:	2b20      	cmp	r3, #32
 8009b0c:	d009      	beq.n	8009b22 <UART_SetConfig+0x166>
 8009b0e:	2b20      	cmp	r3, #32
 8009b10:	d810      	bhi.n	8009b34 <UART_SetConfig+0x178>
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d002      	beq.n	8009b1c <UART_SetConfig+0x160>
 8009b16:	2b10      	cmp	r3, #16
 8009b18:	d006      	beq.n	8009b28 <UART_SetConfig+0x16c>
 8009b1a:	e00b      	b.n	8009b34 <UART_SetConfig+0x178>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	77fb      	strb	r3, [r7, #31]
 8009b20:	e0f1      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009b22:	2302      	movs	r3, #2
 8009b24:	77fb      	strb	r3, [r7, #31]
 8009b26:	e0ee      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009b28:	2304      	movs	r3, #4
 8009b2a:	77fb      	strb	r3, [r7, #31]
 8009b2c:	e0eb      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009b2e:	2308      	movs	r3, #8
 8009b30:	77fb      	strb	r3, [r7, #31]
 8009b32:	e0e8      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009b34:	2310      	movs	r3, #16
 8009b36:	77fb      	strb	r3, [r7, #31]
 8009b38:	e0e5      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a57      	ldr	r2, [pc, #348]	; (8009c9c <UART_SetConfig+0x2e0>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d120      	bne.n	8009b86 <UART_SetConfig+0x1ca>
 8009b44:	4b52      	ldr	r3, [pc, #328]	; (8009c90 <UART_SetConfig+0x2d4>)
 8009b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8009b50:	d013      	beq.n	8009b7a <UART_SetConfig+0x1be>
 8009b52:	2bc0      	cmp	r3, #192	; 0xc0
 8009b54:	d814      	bhi.n	8009b80 <UART_SetConfig+0x1c4>
 8009b56:	2b80      	cmp	r3, #128	; 0x80
 8009b58:	d009      	beq.n	8009b6e <UART_SetConfig+0x1b2>
 8009b5a:	2b80      	cmp	r3, #128	; 0x80
 8009b5c:	d810      	bhi.n	8009b80 <UART_SetConfig+0x1c4>
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d002      	beq.n	8009b68 <UART_SetConfig+0x1ac>
 8009b62:	2b40      	cmp	r3, #64	; 0x40
 8009b64:	d006      	beq.n	8009b74 <UART_SetConfig+0x1b8>
 8009b66:	e00b      	b.n	8009b80 <UART_SetConfig+0x1c4>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	77fb      	strb	r3, [r7, #31]
 8009b6c:	e0cb      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009b6e:	2302      	movs	r3, #2
 8009b70:	77fb      	strb	r3, [r7, #31]
 8009b72:	e0c8      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009b74:	2304      	movs	r3, #4
 8009b76:	77fb      	strb	r3, [r7, #31]
 8009b78:	e0c5      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009b7a:	2308      	movs	r3, #8
 8009b7c:	77fb      	strb	r3, [r7, #31]
 8009b7e:	e0c2      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009b80:	2310      	movs	r3, #16
 8009b82:	77fb      	strb	r3, [r7, #31]
 8009b84:	e0bf      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a45      	ldr	r2, [pc, #276]	; (8009ca0 <UART_SetConfig+0x2e4>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d125      	bne.n	8009bdc <UART_SetConfig+0x220>
 8009b90:	4b3f      	ldr	r3, [pc, #252]	; (8009c90 <UART_SetConfig+0x2d4>)
 8009b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b9e:	d017      	beq.n	8009bd0 <UART_SetConfig+0x214>
 8009ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ba4:	d817      	bhi.n	8009bd6 <UART_SetConfig+0x21a>
 8009ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009baa:	d00b      	beq.n	8009bc4 <UART_SetConfig+0x208>
 8009bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bb0:	d811      	bhi.n	8009bd6 <UART_SetConfig+0x21a>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <UART_SetConfig+0x202>
 8009bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bba:	d006      	beq.n	8009bca <UART_SetConfig+0x20e>
 8009bbc:	e00b      	b.n	8009bd6 <UART_SetConfig+0x21a>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	77fb      	strb	r3, [r7, #31]
 8009bc2:	e0a0      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	77fb      	strb	r3, [r7, #31]
 8009bc8:	e09d      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009bca:	2304      	movs	r3, #4
 8009bcc:	77fb      	strb	r3, [r7, #31]
 8009bce:	e09a      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009bd0:	2308      	movs	r3, #8
 8009bd2:	77fb      	strb	r3, [r7, #31]
 8009bd4:	e097      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009bd6:	2310      	movs	r3, #16
 8009bd8:	77fb      	strb	r3, [r7, #31]
 8009bda:	e094      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a30      	ldr	r2, [pc, #192]	; (8009ca4 <UART_SetConfig+0x2e8>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d125      	bne.n	8009c32 <UART_SetConfig+0x276>
 8009be6:	4b2a      	ldr	r3, [pc, #168]	; (8009c90 <UART_SetConfig+0x2d4>)
 8009be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009bf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bf4:	d017      	beq.n	8009c26 <UART_SetConfig+0x26a>
 8009bf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bfa:	d817      	bhi.n	8009c2c <UART_SetConfig+0x270>
 8009bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c00:	d00b      	beq.n	8009c1a <UART_SetConfig+0x25e>
 8009c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c06:	d811      	bhi.n	8009c2c <UART_SetConfig+0x270>
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d003      	beq.n	8009c14 <UART_SetConfig+0x258>
 8009c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c10:	d006      	beq.n	8009c20 <UART_SetConfig+0x264>
 8009c12:	e00b      	b.n	8009c2c <UART_SetConfig+0x270>
 8009c14:	2301      	movs	r3, #1
 8009c16:	77fb      	strb	r3, [r7, #31]
 8009c18:	e075      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	77fb      	strb	r3, [r7, #31]
 8009c1e:	e072      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009c20:	2304      	movs	r3, #4
 8009c22:	77fb      	strb	r3, [r7, #31]
 8009c24:	e06f      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009c26:	2308      	movs	r3, #8
 8009c28:	77fb      	strb	r3, [r7, #31]
 8009c2a:	e06c      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009c2c:	2310      	movs	r3, #16
 8009c2e:	77fb      	strb	r3, [r7, #31]
 8009c30:	e069      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a1c      	ldr	r2, [pc, #112]	; (8009ca8 <UART_SetConfig+0x2ec>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d137      	bne.n	8009cac <UART_SetConfig+0x2f0>
 8009c3c:	4b14      	ldr	r3, [pc, #80]	; (8009c90 <UART_SetConfig+0x2d4>)
 8009c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009c46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c4a:	d017      	beq.n	8009c7c <UART_SetConfig+0x2c0>
 8009c4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c50:	d817      	bhi.n	8009c82 <UART_SetConfig+0x2c6>
 8009c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c56:	d00b      	beq.n	8009c70 <UART_SetConfig+0x2b4>
 8009c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c5c:	d811      	bhi.n	8009c82 <UART_SetConfig+0x2c6>
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <UART_SetConfig+0x2ae>
 8009c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c66:	d006      	beq.n	8009c76 <UART_SetConfig+0x2ba>
 8009c68:	e00b      	b.n	8009c82 <UART_SetConfig+0x2c6>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	77fb      	strb	r3, [r7, #31]
 8009c6e:	e04a      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009c70:	2302      	movs	r3, #2
 8009c72:	77fb      	strb	r3, [r7, #31]
 8009c74:	e047      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009c76:	2304      	movs	r3, #4
 8009c78:	77fb      	strb	r3, [r7, #31]
 8009c7a:	e044      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	77fb      	strb	r3, [r7, #31]
 8009c80:	e041      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009c82:	2310      	movs	r3, #16
 8009c84:	77fb      	strb	r3, [r7, #31]
 8009c86:	e03e      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009c88:	efff69f3 	.word	0xefff69f3
 8009c8c:	40011000 	.word	0x40011000
 8009c90:	40023800 	.word	0x40023800
 8009c94:	40004400 	.word	0x40004400
 8009c98:	40004800 	.word	0x40004800
 8009c9c:	40004c00 	.word	0x40004c00
 8009ca0:	40005000 	.word	0x40005000
 8009ca4:	40011400 	.word	0x40011400
 8009ca8:	40007800 	.word	0x40007800
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a94      	ldr	r2, [pc, #592]	; (8009f04 <UART_SetConfig+0x548>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d125      	bne.n	8009d02 <UART_SetConfig+0x346>
 8009cb6:	4b94      	ldr	r3, [pc, #592]	; (8009f08 <UART_SetConfig+0x54c>)
 8009cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009cc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009cc4:	d017      	beq.n	8009cf6 <UART_SetConfig+0x33a>
 8009cc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009cca:	d817      	bhi.n	8009cfc <UART_SetConfig+0x340>
 8009ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cd0:	d00b      	beq.n	8009cea <UART_SetConfig+0x32e>
 8009cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cd6:	d811      	bhi.n	8009cfc <UART_SetConfig+0x340>
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <UART_SetConfig+0x328>
 8009cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ce0:	d006      	beq.n	8009cf0 <UART_SetConfig+0x334>
 8009ce2:	e00b      	b.n	8009cfc <UART_SetConfig+0x340>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	77fb      	strb	r3, [r7, #31]
 8009ce8:	e00d      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009cea:	2302      	movs	r3, #2
 8009cec:	77fb      	strb	r3, [r7, #31]
 8009cee:	e00a      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009cf0:	2304      	movs	r3, #4
 8009cf2:	77fb      	strb	r3, [r7, #31]
 8009cf4:	e007      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009cf6:	2308      	movs	r3, #8
 8009cf8:	77fb      	strb	r3, [r7, #31]
 8009cfa:	e004      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009cfc:	2310      	movs	r3, #16
 8009cfe:	77fb      	strb	r3, [r7, #31]
 8009d00:	e001      	b.n	8009d06 <UART_SetConfig+0x34a>
 8009d02:	2310      	movs	r3, #16
 8009d04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d0e:	d17f      	bne.n	8009e10 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8009d10:	7ffb      	ldrb	r3, [r7, #31]
 8009d12:	2b08      	cmp	r3, #8
 8009d14:	d85c      	bhi.n	8009dd0 <UART_SetConfig+0x414>
 8009d16:	a201      	add	r2, pc, #4	; (adr r2, 8009d1c <UART_SetConfig+0x360>)
 8009d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1c:	08009d41 	.word	0x08009d41
 8009d20:	08009d61 	.word	0x08009d61
 8009d24:	08009d81 	.word	0x08009d81
 8009d28:	08009dd1 	.word	0x08009dd1
 8009d2c:	08009d99 	.word	0x08009d99
 8009d30:	08009dd1 	.word	0x08009dd1
 8009d34:	08009dd1 	.word	0x08009dd1
 8009d38:	08009dd1 	.word	0x08009dd1
 8009d3c:	08009db9 	.word	0x08009db9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d40:	f7fd f94e 	bl	8006fe0 <HAL_RCC_GetPCLK1Freq>
 8009d44:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	005a      	lsls	r2, r3, #1
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	085b      	lsrs	r3, r3, #1
 8009d50:	441a      	add	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	61bb      	str	r3, [r7, #24]
        break;
 8009d5e:	e03a      	b.n	8009dd6 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d60:	f7fd f952 	bl	8007008 <HAL_RCC_GetPCLK2Freq>
 8009d64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	005a      	lsls	r2, r3, #1
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	085b      	lsrs	r3, r3, #1
 8009d70:	441a      	add	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	61bb      	str	r3, [r7, #24]
        break;
 8009d7e:	e02a      	b.n	8009dd6 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	085a      	lsrs	r2, r3, #1
 8009d86:	4b61      	ldr	r3, [pc, #388]	; (8009f0c <UART_SetConfig+0x550>)
 8009d88:	4413      	add	r3, r2
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	6852      	ldr	r2, [r2, #4]
 8009d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	61bb      	str	r3, [r7, #24]
        break;
 8009d96:	e01e      	b.n	8009dd6 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d98:	f7fd f860 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8009d9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	005a      	lsls	r2, r3, #1
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	085b      	lsrs	r3, r3, #1
 8009da8:	441a      	add	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	61bb      	str	r3, [r7, #24]
        break;
 8009db6:	e00e      	b.n	8009dd6 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	085b      	lsrs	r3, r3, #1
 8009dbe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	61bb      	str	r3, [r7, #24]
        break;
 8009dce:	e002      	b.n	8009dd6 <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	75fb      	strb	r3, [r7, #23]
        break;
 8009dd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	2b0f      	cmp	r3, #15
 8009dda:	d916      	bls.n	8009e0a <UART_SetConfig+0x44e>
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009de2:	d212      	bcs.n	8009e0a <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f023 030f 	bic.w	r3, r3, #15
 8009dec:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	085b      	lsrs	r3, r3, #1
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	f003 0307 	and.w	r3, r3, #7
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	897b      	ldrh	r3, [r7, #10]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	897a      	ldrh	r2, [r7, #10]
 8009e06:	60da      	str	r2, [r3, #12]
 8009e08:	e070      	b.n	8009eec <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	75fb      	strb	r3, [r7, #23]
 8009e0e:	e06d      	b.n	8009eec <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 8009e10:	7ffb      	ldrb	r3, [r7, #31]
 8009e12:	2b08      	cmp	r3, #8
 8009e14:	d859      	bhi.n	8009eca <UART_SetConfig+0x50e>
 8009e16:	a201      	add	r2, pc, #4	; (adr r2, 8009e1c <UART_SetConfig+0x460>)
 8009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1c:	08009e41 	.word	0x08009e41
 8009e20:	08009e5f 	.word	0x08009e5f
 8009e24:	08009e7d 	.word	0x08009e7d
 8009e28:	08009ecb 	.word	0x08009ecb
 8009e2c:	08009e95 	.word	0x08009e95
 8009e30:	08009ecb 	.word	0x08009ecb
 8009e34:	08009ecb 	.word	0x08009ecb
 8009e38:	08009ecb 	.word	0x08009ecb
 8009e3c:	08009eb3 	.word	0x08009eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e40:	f7fd f8ce 	bl	8006fe0 <HAL_RCC_GetPCLK1Freq>
 8009e44:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	085a      	lsrs	r2, r3, #1
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	441a      	add	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	61bb      	str	r3, [r7, #24]
        break;
 8009e5c:	e038      	b.n	8009ed0 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e5e:	f7fd f8d3 	bl	8007008 <HAL_RCC_GetPCLK2Freq>
 8009e62:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	085a      	lsrs	r2, r3, #1
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	441a      	add	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	61bb      	str	r3, [r7, #24]
        break;
 8009e7a:	e029      	b.n	8009ed0 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	085a      	lsrs	r2, r3, #1
 8009e82:	4b23      	ldr	r3, [pc, #140]	; (8009f10 <UART_SetConfig+0x554>)
 8009e84:	4413      	add	r3, r2
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	6852      	ldr	r2, [r2, #4]
 8009e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	61bb      	str	r3, [r7, #24]
        break;
 8009e92:	e01d      	b.n	8009ed0 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e94:	f7fc ffe2 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8009e98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	085a      	lsrs	r2, r3, #1
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	441a      	add	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	61bb      	str	r3, [r7, #24]
        break;
 8009eb0:	e00e      	b.n	8009ed0 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	085b      	lsrs	r3, r3, #1
 8009eb8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	61bb      	str	r3, [r7, #24]
        break;
 8009ec8:	e002      	b.n	8009ed0 <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	75fb      	strb	r3, [r7, #23]
        break;
 8009ece:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	2b0f      	cmp	r3, #15
 8009ed4:	d908      	bls.n	8009ee8 <UART_SetConfig+0x52c>
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009edc:	d204      	bcs.n	8009ee8 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	60da      	str	r2, [r3, #12]
 8009ee6:	e001      	b.n	8009eec <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3720      	adds	r7, #32
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	40007c00 	.word	0x40007c00
 8009f08:	40023800 	.word	0x40023800
 8009f0c:	01e84800 	.word	0x01e84800
 8009f10:	00f42400 	.word	0x00f42400

08009f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00a      	beq.n	8009f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f42:	f003 0302 	and.w	r3, r3, #2
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00a      	beq.n	8009f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f64:	f003 0304 	and.w	r3, r3, #4
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00a      	beq.n	8009f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f86:	f003 0308 	and.w	r3, r3, #8
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00a      	beq.n	8009fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa8:	f003 0310 	and.w	r3, r3, #16
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00a      	beq.n	8009fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	430a      	orrs	r2, r1
 8009fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	f003 0320 	and.w	r3, r3, #32
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d01a      	beq.n	800a02a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	430a      	orrs	r2, r1
 800a008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a012:	d10a      	bne.n	800a02a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00a      	beq.n	800a04c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	430a      	orrs	r2, r1
 800a04a:	605a      	str	r2, [r3, #4]
  }
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a066:	f7f9 fcd1 	bl	8003a0c <HAL_GetTick>
 800a06a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 0308 	and.w	r3, r3, #8
 800a076:	2b08      	cmp	r3, #8
 800a078:	d10e      	bne.n	800a098 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a07a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f814 	bl	800a0b6 <UART_WaitOnFlagUntilTimeout>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e00a      	b.n	800a0ae <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2220      	movs	r2, #32
 800a09c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	60f8      	str	r0, [r7, #12]
 800a0be:	60b9      	str	r1, [r7, #8]
 800a0c0:	603b      	str	r3, [r7, #0]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0c6:	e05d      	b.n	800a184 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ce:	d059      	beq.n	800a184 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0d0:	f7f9 fc9c 	bl	8003a0c <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d302      	bcc.n	800a0e6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d11b      	bne.n	800a11e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a0f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	689a      	ldr	r2, [r3, #8]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f022 0201 	bic.w	r2, r2, #1
 800a104:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2220      	movs	r2, #32
 800a10a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2220      	movs	r2, #32
 800a110:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e042      	b.n	800a1a4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d02b      	beq.n	800a184 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a13a:	d123      	bne.n	800a184 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a144:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a154:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	689a      	ldr	r2, [r3, #8]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f022 0201 	bic.w	r2, r2, #1
 800a164:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2220      	movs	r2, #32
 800a16a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2220      	movs	r2, #32
 800a170:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2220      	movs	r2, #32
 800a176:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a180:	2303      	movs	r3, #3
 800a182:	e00f      	b.n	800a1a4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	69da      	ldr	r2, [r3, #28]
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	4013      	ands	r3, r2
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	429a      	cmp	r2, r3
 800a192:	bf0c      	ite	eq
 800a194:	2301      	moveq	r3, #1
 800a196:	2300      	movne	r3, #0
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	461a      	mov	r2, r3
 800a19c:	79fb      	ldrb	r3, [r7, #7]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d092      	beq.n	800a0c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a1c2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f022 0201 	bic.w	r2, r2, #1
 800a1d2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2220      	movs	r2, #32
 800a1d8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	661a      	str	r2, [r3, #96]	; 0x60
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7ff fbcc 	bl	80099a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a210:	bf00      	nop
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a224:	2b21      	cmp	r3, #33	; 0x21
 800a226:	d12a      	bne.n	800a27e <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a22e:	b29b      	uxth	r3, r3
 800a230:	2b00      	cmp	r3, #0
 800a232:	d110      	bne.n	800a256 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a242:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a252:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a254:	e013      	b.n	800a27e <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a25a:	781a      	ldrb	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a266:	1c5a      	adds	r2, r3, #1
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a272:	b29b      	uxth	r3, r3
 800a274:	3b01      	subs	r3, #1
 800a276:	b29a      	uxth	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a27e:	bf00      	nop
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b085      	sub	sp, #20
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a296:	2b21      	cmp	r3, #33	; 0x21
 800a298:	d12f      	bne.n	800a2fa <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d110      	bne.n	800a2c8 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2b4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2c4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a2c6:	e018      	b.n	800a2fa <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2dc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2e2:	1c9a      	adds	r2, r3, #2
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a2fa:	bf00      	nop
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b082      	sub	sp, #8
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a31c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2220      	movs	r2, #32
 800a322:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7ff fb32 	bl	8009994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a330:	bf00      	nop
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a346:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a34c:	2b22      	cmp	r3, #34	; 0x22
 800a34e:	d13a      	bne.n	800a3c6 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a358:	89bb      	ldrh	r3, [r7, #12]
 800a35a:	b2d9      	uxtb	r1, r3
 800a35c:	89fb      	ldrh	r3, [r7, #14]
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a364:	400a      	ands	r2, r1
 800a366:	b2d2      	uxtb	r2, r2
 800a368:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	3b01      	subs	r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d121      	bne.n	800a3d6 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a3a0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689a      	ldr	r2, [r3, #8]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 0201 	bic.w	r2, r2, #1
 800a3b0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2220      	movs	r2, #32
 800a3b6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7f7 fc2a 	bl	8001c18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3c4:	e007      	b.n	800a3d6 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	699a      	ldr	r2, [r3, #24]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f042 0208 	orr.w	r2, r2, #8
 800a3d4:	619a      	str	r2, [r3, #24]
}
 800a3d6:	bf00      	nop
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3ec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3f2:	2b22      	cmp	r3, #34	; 0x22
 800a3f4:	d13a      	bne.n	800a46c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a402:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a404:	89ba      	ldrh	r2, [r7, #12]
 800a406:	89fb      	ldrh	r3, [r7, #14]
 800a408:	4013      	ands	r3, r2
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a414:	1c9a      	adds	r2, r3, #2
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a420:	b29b      	uxth	r3, r3
 800a422:	3b01      	subs	r3, #1
 800a424:	b29a      	uxth	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a432:	b29b      	uxth	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d121      	bne.n	800a47c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a446:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689a      	ldr	r2, [r3, #8]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f022 0201 	bic.w	r2, r2, #1
 800a456:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2220      	movs	r2, #32
 800a45c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7f7 fbd7 	bl	8001c18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a46a:	e007      	b.n	800a47c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	699a      	ldr	r2, [r3, #24]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0208 	orr.w	r2, r2, #8
 800a47a:	619a      	str	r2, [r3, #24]
}
 800a47c:	bf00      	nop
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d027      	beq.n	800a4ee <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	4b2f      	ldr	r3, [pc, #188]	; (800a564 <FMC_SDRAM_Init+0xe0>)
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a4b4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a4ba:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a4c0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a4c6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a4cc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a4d2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a4d8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a4de:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	601a      	str	r2, [r3, #0]
 800a4ec:	e032      	b.n	800a554 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4fa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a504:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a50a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	4313      	orrs	r3, r2
 800a510:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	4b12      	ldr	r3, [pc, #72]	; (800a564 <FMC_SDRAM_Init+0xe0>)
 800a51c:	4013      	ands	r3, r2
 800a51e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a528:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a52e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a534:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a53a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a540:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	4313      	orrs	r3, r2
 800a546:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	ffff8000 	.word	0xffff8000

0800a568 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d02e      	beq.n	800a5e0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a58e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	3b01      	subs	r3, #1
 800a59c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a59e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a5a8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a5b2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a5bc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a5c6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	609a      	str	r2, [r3, #8]
 800a5de:	e039      	b.n	800a654 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	4b1e      	ldr	r3, [pc, #120]	; (800a664 <FMC_SDRAM_Timing_Init+0xfc>)
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a5fe:	4313      	orrs	r3, r2
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	4313      	orrs	r3, r2
 800a604:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a612:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	3b01      	subs	r3, #1
 800a620:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a622:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	3b01      	subs	r3, #1
 800a62a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a62c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	3b01      	subs	r3, #1
 800a634:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a636:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a640:	4313      	orrs	r3, r2
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	4313      	orrs	r3, r2
 800a646:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	371c      	adds	r7, #28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	ff0f0fff 	.word	0xff0f0fff

0800a668 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a668:	b480      	push	{r7}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a680:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	3b01      	subs	r3, #1
 800a688:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a68a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a692:	4313      	orrs	r3, r2
 800a694:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	371c      	adds	r7, #28
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	695a      	ldr	r2, [r3, #20]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	005b      	lsls	r3, r3, #1
 800a6bc:	431a      	orrs	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a6de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6e2:	2b84      	cmp	r3, #132	; 0x84
 800a6e4:	d005      	beq.n	800a6f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a6e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	3303      	adds	r3, #3
 800a6f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a704:	f001 f8aa 	bl	800b85c <vTaskStartScheduler>
  
  return osOK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a70e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a710:	b089      	sub	sp, #36	; 0x24
 800a712:	af04      	add	r7, sp, #16
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d020      	beq.n	800a762 <osThreadCreate+0x54>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d01c      	beq.n	800a762 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685c      	ldr	r4, [r3, #4]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681d      	ldr	r5, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	691e      	ldr	r6, [r3, #16]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff ffc8 	bl	800a6d0 <makeFreeRtosPriority>
 800a740:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a74a:	9202      	str	r2, [sp, #8]
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	9100      	str	r1, [sp, #0]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	4632      	mov	r2, r6
 800a754:	4629      	mov	r1, r5
 800a756:	4620      	mov	r0, r4
 800a758:	f000 fea4 	bl	800b4a4 <xTaskCreateStatic>
 800a75c:	4603      	mov	r3, r0
 800a75e:	60fb      	str	r3, [r7, #12]
 800a760:	e01c      	b.n	800a79c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685c      	ldr	r4, [r3, #4]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a76e:	b29e      	uxth	r6, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a776:	4618      	mov	r0, r3
 800a778:	f7ff ffaa 	bl	800a6d0 <makeFreeRtosPriority>
 800a77c:	4602      	mov	r2, r0
 800a77e:	f107 030c 	add.w	r3, r7, #12
 800a782:	9301      	str	r3, [sp, #4]
 800a784:	9200      	str	r2, [sp, #0]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	4632      	mov	r2, r6
 800a78a:	4629      	mov	r1, r5
 800a78c:	4620      	mov	r0, r4
 800a78e:	f000 feec 	bl	800b56a <xTaskCreate>
 800a792:	4603      	mov	r3, r0
 800a794:	2b01      	cmp	r3, #1
 800a796:	d001      	beq.n	800a79c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a798:	2300      	movs	r3, #0
 800a79a:	e000      	b.n	800a79e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a79c:	68fb      	ldr	r3, [r7, #12]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <osDelay+0x16>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	e000      	b.n	800a7be <osDelay+0x18>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f001 f816 	bl	800b7f0 <vTaskDelay>
  
  return osOK;
 800a7c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b082      	sub	sp, #8
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	2001      	movs	r0, #1
 800a7e6:	f000 fa66 	bl	800acb6 <xQueueCreateMutexStatic>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	e003      	b.n	800a7f6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	f000 fa49 	bl	800ac86 <xQueueCreateMutex>
 800a7f4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a7fe:	b590      	push	{r4, r7, lr}
 800a800:	b085      	sub	sp, #20
 800a802:	af02      	add	r7, sp, #8
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d011      	beq.n	800a834 <osMessageCreate+0x36>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00d      	beq.n	800a834 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6818      	ldr	r0, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6859      	ldr	r1, [r3, #4]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	2400      	movs	r4, #0
 800a82a:	9400      	str	r4, [sp, #0]
 800a82c:	f000 f92e 	bl	800aa8c <xQueueGenericCreateStatic>
 800a830:	4603      	mov	r3, r0
 800a832:	e008      	b.n	800a846 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6818      	ldr	r0, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	4619      	mov	r1, r3
 800a840:	f000 f9a6 	bl	800ab90 <xQueueGenericCreate>
 800a844:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a846:	4618      	mov	r0, r3
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd90      	pop	{r4, r7, pc}

0800a84e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a84e:	b480      	push	{r7}
 800a850:	b083      	sub	sp, #12
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f103 0208 	add.w	r2, r3, #8
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f04f 32ff 	mov.w	r2, #4294967295
 800a866:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f103 0208 	add.w	r2, r3, #8
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f103 0208 	add.w	r2, r3, #8
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a882:	bf00      	nop
 800a884:	370c      	adds	r7, #12
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a88e:	b480      	push	{r7}
 800a890:	b083      	sub	sp, #12
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	689a      	ldr	r2, [r3, #8]
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	601a      	str	r2, [r3, #0]
}
 800a8e4:	bf00      	nop
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a906:	d103      	bne.n	800a910 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	60fb      	str	r3, [r7, #12]
 800a90e:	e00c      	b.n	800a92a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	3308      	adds	r3, #8
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	e002      	b.n	800a91e <vListInsert+0x2e>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	60fb      	str	r3, [r7, #12]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	429a      	cmp	r2, r3
 800a928:	d2f6      	bcs.n	800a918 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	601a      	str	r2, [r3, #0]
}
 800a956:	bf00      	nop
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a962:	b480      	push	{r7}
 800a964:	b085      	sub	sp, #20
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	6892      	ldr	r2, [r2, #8]
 800a978:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	6852      	ldr	r2, [r2, #4]
 800a982:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d103      	bne.n	800a996 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	689a      	ldr	r2, [r3, #8]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	1e5a      	subs	r2, r3, #1
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
	...

0800a9b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10c      	bne.n	800a9e6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d0:	b672      	cpsid	i
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	b662      	cpsie	i
 800a9e0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a9e2:	bf00      	nop
 800a9e4:	e7fe      	b.n	800a9e4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a9e6:	f001 fec1 	bl	800c76c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9f2:	68f9      	ldr	r1, [r7, #12]
 800a9f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a9f6:	fb01 f303 	mul.w	r3, r1, r3
 800a9fa:	441a      	add	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa16:	3b01      	subs	r3, #1
 800aa18:	68f9      	ldr	r1, [r7, #12]
 800aa1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa1c:	fb01 f303 	mul.w	r3, r1, r3
 800aa20:	441a      	add	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	22ff      	movs	r2, #255	; 0xff
 800aa2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	22ff      	movs	r2, #255	; 0xff
 800aa32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d114      	bne.n	800aa66 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d01a      	beq.n	800aa7a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3310      	adds	r3, #16
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f001 f979 	bl	800bd40 <xTaskRemoveFromEventList>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d012      	beq.n	800aa7a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa54:	4b0c      	ldr	r3, [pc, #48]	; (800aa88 <xQueueGenericReset+0xd0>)
 800aa56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	e009      	b.n	800aa7a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3310      	adds	r3, #16
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7ff feef 	bl	800a84e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3324      	adds	r3, #36	; 0x24
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7ff feea 	bl	800a84e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa7a:	f001 feab 	bl	800c7d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa7e:	2301      	movs	r3, #1
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	e000ed04 	.word	0xe000ed04

0800aa8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b08e      	sub	sp, #56	; 0x38
 800aa90:	af02      	add	r7, sp, #8
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
 800aa98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10c      	bne.n	800aaba <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	b672      	cpsid	i
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	b662      	cpsie	i
 800aab4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aab6:	bf00      	nop
 800aab8:	e7fe      	b.n	800aab8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10c      	bne.n	800aada <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800aac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac4:	b672      	cpsid	i
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	b662      	cpsie	i
 800aad4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aad6:	bf00      	nop
 800aad8:	e7fe      	b.n	800aad8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <xQueueGenericCreateStatic+0x5a>
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <xQueueGenericCreateStatic+0x5e>
 800aae6:	2301      	movs	r3, #1
 800aae8:	e000      	b.n	800aaec <xQueueGenericCreateStatic+0x60>
 800aaea:	2300      	movs	r3, #0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10c      	bne.n	800ab0a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	b672      	cpsid	i
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	b662      	cpsie	i
 800ab04:	623b      	str	r3, [r7, #32]
}
 800ab06:	bf00      	nop
 800ab08:	e7fe      	b.n	800ab08 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d102      	bne.n	800ab16 <xQueueGenericCreateStatic+0x8a>
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d101      	bne.n	800ab1a <xQueueGenericCreateStatic+0x8e>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e000      	b.n	800ab1c <xQueueGenericCreateStatic+0x90>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10c      	bne.n	800ab3a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	b672      	cpsid	i
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	b662      	cpsie	i
 800ab34:	61fb      	str	r3, [r7, #28]
}
 800ab36:	bf00      	nop
 800ab38:	e7fe      	b.n	800ab38 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ab3a:	2348      	movs	r3, #72	; 0x48
 800ab3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	2b48      	cmp	r3, #72	; 0x48
 800ab42:	d00c      	beq.n	800ab5e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	b672      	cpsid	i
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	b662      	cpsie	i
 800ab58:	61bb      	str	r3, [r7, #24]
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ab5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00d      	beq.n	800ab86 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ab6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ab76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	68b9      	ldr	r1, [r7, #8]
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f000 f847 	bl	800ac14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3730      	adds	r7, #48	; 0x30
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08a      	sub	sp, #40	; 0x28
 800ab94:	af02      	add	r7, sp, #8
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10c      	bne.n	800abbe <xQueueGenericCreate+0x2e>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba8:	b672      	cpsid	i
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	b662      	cpsie	i
 800abb8:	613b      	str	r3, [r7, #16]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d102      	bne.n	800abca <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	61fb      	str	r3, [r7, #28]
 800abc8:	e004      	b.n	800abd4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	fb02 f303 	mul.w	r3, r2, r3
 800abd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	3348      	adds	r3, #72	; 0x48
 800abd8:	4618      	mov	r0, r3
 800abda:	f001 fef3 	bl	800c9c4 <pvPortMalloc>
 800abde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d011      	beq.n	800ac0a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	3348      	adds	r3, #72	; 0x48
 800abee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abf8:	79fa      	ldrb	r2, [r7, #7]
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	4613      	mov	r3, r2
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	68b9      	ldr	r1, [r7, #8]
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 f805 	bl	800ac14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac0a:	69bb      	ldr	r3, [r7, #24]
	}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3720      	adds	r7, #32
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d103      	bne.n	800ac30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	69ba      	ldr	r2, [r7, #24]
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	e002      	b.n	800ac36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac42:	2101      	movs	r1, #1
 800ac44:	69b8      	ldr	r0, [r7, #24]
 800ac46:	f7ff feb7 	bl	800a9b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac4a:	bf00      	nop
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00e      	beq.n	800ac7e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ac72:	2300      	movs	r3, #0
 800ac74:	2200      	movs	r2, #0
 800ac76:	2100      	movs	r1, #0
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f837 	bl	800acec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b086      	sub	sp, #24
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ac90:	2301      	movs	r3, #1
 800ac92:	617b      	str	r3, [r7, #20]
 800ac94:	2300      	movs	r3, #0
 800ac96:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ac98:	79fb      	ldrb	r3, [r7, #7]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	6939      	ldr	r1, [r7, #16]
 800ac9e:	6978      	ldr	r0, [r7, #20]
 800aca0:	f7ff ff76 	bl	800ab90 <xQueueGenericCreate>
 800aca4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff ffd3 	bl	800ac52 <prvInitialiseMutex>

		return xNewQueue;
 800acac:	68fb      	ldr	r3, [r7, #12]
	}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b088      	sub	sp, #32
 800acba:	af02      	add	r7, sp, #8
 800acbc:	4603      	mov	r3, r0
 800acbe:	6039      	str	r1, [r7, #0]
 800acc0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800acc2:	2301      	movs	r3, #1
 800acc4:	617b      	str	r3, [r7, #20]
 800acc6:	2300      	movs	r3, #0
 800acc8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800acca:	79fb      	ldrb	r3, [r7, #7]
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	2200      	movs	r2, #0
 800acd2:	6939      	ldr	r1, [r7, #16]
 800acd4:	6978      	ldr	r0, [r7, #20]
 800acd6:	f7ff fed9 	bl	800aa8c <xQueueGenericCreateStatic>
 800acda:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f7ff ffb8 	bl	800ac52 <prvInitialiseMutex>

		return xNewQueue;
 800ace2:	68fb      	ldr	r3, [r7, #12]
	}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08e      	sub	sp, #56	; 0x38
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800acfa:	2300      	movs	r3, #0
 800acfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10c      	bne.n	800ad22 <xQueueGenericSend+0x36>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	b672      	cpsid	i
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	b662      	cpsie	i
 800ad1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad1e:	bf00      	nop
 800ad20:	e7fe      	b.n	800ad20 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d103      	bne.n	800ad30 <xQueueGenericSend+0x44>
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <xQueueGenericSend+0x48>
 800ad30:	2301      	movs	r3, #1
 800ad32:	e000      	b.n	800ad36 <xQueueGenericSend+0x4a>
 800ad34:	2300      	movs	r3, #0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10c      	bne.n	800ad54 <xQueueGenericSend+0x68>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	b672      	cpsid	i
 800ad40:	f383 8811 	msr	BASEPRI, r3
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	b662      	cpsie	i
 800ad4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d103      	bne.n	800ad62 <xQueueGenericSend+0x76>
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d101      	bne.n	800ad66 <xQueueGenericSend+0x7a>
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <xQueueGenericSend+0x7c>
 800ad66:	2300      	movs	r3, #0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10c      	bne.n	800ad86 <xQueueGenericSend+0x9a>
	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad70:	b672      	cpsid	i
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	b662      	cpsie	i
 800ad80:	623b      	str	r3, [r7, #32]
}
 800ad82:	bf00      	nop
 800ad84:	e7fe      	b.n	800ad84 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad86:	f001 f9a1 	bl	800c0cc <xTaskGetSchedulerState>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d102      	bne.n	800ad96 <xQueueGenericSend+0xaa>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d101      	bne.n	800ad9a <xQueueGenericSend+0xae>
 800ad96:	2301      	movs	r3, #1
 800ad98:	e000      	b.n	800ad9c <xQueueGenericSend+0xb0>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10c      	bne.n	800adba <xQueueGenericSend+0xce>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	b672      	cpsid	i
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	b662      	cpsie	i
 800adb4:	61fb      	str	r3, [r7, #28]
}
 800adb6:	bf00      	nop
 800adb8:	e7fe      	b.n	800adb8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adba:	f001 fcd7 	bl	800c76c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d302      	bcc.n	800add0 <xQueueGenericSend+0xe4>
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d129      	bne.n	800ae24 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	68b9      	ldr	r1, [r7, #8]
 800add4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800add6:	f000 fa7b 	bl	800b2d0 <prvCopyDataToQueue>
 800adda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d010      	beq.n	800ae06 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade6:	3324      	adds	r3, #36	; 0x24
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 ffa9 	bl	800bd40 <xTaskRemoveFromEventList>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d013      	beq.n	800ae1c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800adf4:	4b3f      	ldr	r3, [pc, #252]	; (800aef4 <xQueueGenericSend+0x208>)
 800adf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adfa:	601a      	str	r2, [r3, #0]
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	f3bf 8f6f 	isb	sy
 800ae04:	e00a      	b.n	800ae1c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d007      	beq.n	800ae1c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae0c:	4b39      	ldr	r3, [pc, #228]	; (800aef4 <xQueueGenericSend+0x208>)
 800ae0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae12:	601a      	str	r2, [r3, #0]
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae1c:	f001 fcda 	bl	800c7d4 <vPortExitCritical>
				return pdPASS;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e063      	b.n	800aeec <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d103      	bne.n	800ae32 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae2a:	f001 fcd3 	bl	800c7d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	e05c      	b.n	800aeec <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d106      	bne.n	800ae46 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae38:	f107 0314 	add.w	r3, r7, #20
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 ffe3 	bl	800be08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae42:	2301      	movs	r3, #1
 800ae44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae46:	f001 fcc5 	bl	800c7d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae4a:	f000 fd6b 	bl	800b924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae4e:	f001 fc8d 	bl	800c76c <vPortEnterCritical>
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae58:	b25b      	sxtb	r3, r3
 800ae5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5e:	d103      	bne.n	800ae68 <xQueueGenericSend+0x17c>
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae6e:	b25b      	sxtb	r3, r3
 800ae70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae74:	d103      	bne.n	800ae7e <xQueueGenericSend+0x192>
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae7e:	f001 fca9 	bl	800c7d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae82:	1d3a      	adds	r2, r7, #4
 800ae84:	f107 0314 	add.w	r3, r7, #20
 800ae88:	4611      	mov	r1, r2
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 ffd2 	bl	800be34 <xTaskCheckForTimeOut>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d124      	bne.n	800aee0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae98:	f000 faec 	bl	800b474 <prvIsQueueFull>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d018      	beq.n	800aed4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	3310      	adds	r3, #16
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	4611      	mov	r1, r2
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f000 ff22 	bl	800bcf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aeb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeb2:	f000 fa77 	bl	800b3a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aeb6:	f000 fd43 	bl	800b940 <xTaskResumeAll>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f47f af7c 	bne.w	800adba <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800aec2:	4b0c      	ldr	r3, [pc, #48]	; (800aef4 <xQueueGenericSend+0x208>)
 800aec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	e772      	b.n	800adba <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed6:	f000 fa65 	bl	800b3a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aeda:	f000 fd31 	bl	800b940 <xTaskResumeAll>
 800aede:	e76c      	b.n	800adba <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aee2:	f000 fa5f 	bl	800b3a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aee6:	f000 fd2b 	bl	800b940 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aeea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3738      	adds	r7, #56	; 0x38
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08e      	sub	sp, #56	; 0x38
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10c      	bne.n	800af2a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	b672      	cpsid	i
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	b662      	cpsie	i
 800af24:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af26:	bf00      	nop
 800af28:	e7fe      	b.n	800af28 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d103      	bne.n	800af38 <xQueueGenericSendFromISR+0x40>
 800af30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af34:	2b00      	cmp	r3, #0
 800af36:	d101      	bne.n	800af3c <xQueueGenericSendFromISR+0x44>
 800af38:	2301      	movs	r3, #1
 800af3a:	e000      	b.n	800af3e <xQueueGenericSendFromISR+0x46>
 800af3c:	2300      	movs	r3, #0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10c      	bne.n	800af5c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af46:	b672      	cpsid	i
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	b662      	cpsie	i
 800af56:	623b      	str	r3, [r7, #32]
}
 800af58:	bf00      	nop
 800af5a:	e7fe      	b.n	800af5a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d103      	bne.n	800af6a <xQueueGenericSendFromISR+0x72>
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af66:	2b01      	cmp	r3, #1
 800af68:	d101      	bne.n	800af6e <xQueueGenericSendFromISR+0x76>
 800af6a:	2301      	movs	r3, #1
 800af6c:	e000      	b.n	800af70 <xQueueGenericSendFromISR+0x78>
 800af6e:	2300      	movs	r3, #0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10c      	bne.n	800af8e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	b672      	cpsid	i
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	b662      	cpsie	i
 800af88:	61fb      	str	r3, [r7, #28]
}
 800af8a:	bf00      	nop
 800af8c:	e7fe      	b.n	800af8c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af8e:	f001 fcd5 	bl	800c93c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af92:	f3ef 8211 	mrs	r2, BASEPRI
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	b672      	cpsid	i
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	b662      	cpsie	i
 800afaa:	61ba      	str	r2, [r7, #24]
 800afac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afba:	429a      	cmp	r2, r3
 800afbc:	d302      	bcc.n	800afc4 <xQueueGenericSendFromISR+0xcc>
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d12c      	bne.n	800b01e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	68b9      	ldr	r1, [r7, #8]
 800afd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afd4:	f000 f97c 	bl	800b2d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afd8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800afdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe0:	d112      	bne.n	800b008 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d016      	beq.n	800b018 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afec:	3324      	adds	r3, #36	; 0x24
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 fea6 	bl	800bd40 <xTaskRemoveFromEventList>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00e      	beq.n	800b018 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00b      	beq.n	800b018 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	601a      	str	r2, [r3, #0]
 800b006:	e007      	b.n	800b018 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b008:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b00c:	3301      	adds	r3, #1
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	b25a      	sxtb	r2, r3
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b018:	2301      	movs	r3, #1
 800b01a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b01c:	e001      	b.n	800b022 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b01e:	2300      	movs	r3, #0
 800b020:	637b      	str	r3, [r7, #52]	; 0x34
 800b022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b024:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b02c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b030:	4618      	mov	r0, r3
 800b032:	3738      	adds	r7, #56	; 0x38
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08e      	sub	sp, #56	; 0x38
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b042:	2300      	movs	r3, #0
 800b044:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b04a:	2300      	movs	r3, #0
 800b04c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10c      	bne.n	800b06e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800b054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b058:	b672      	cpsid	i
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	b662      	cpsie	i
 800b068:	623b      	str	r3, [r7, #32]
}
 800b06a:	bf00      	nop
 800b06c:	e7fe      	b.n	800b06c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00c      	beq.n	800b090 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800b076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07a:	b672      	cpsid	i
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	b662      	cpsie	i
 800b08a:	61fb      	str	r3, [r7, #28]
}
 800b08c:	bf00      	nop
 800b08e:	e7fe      	b.n	800b08e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b090:	f001 f81c 	bl	800c0cc <xTaskGetSchedulerState>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d102      	bne.n	800b0a0 <xQueueSemaphoreTake+0x68>
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <xQueueSemaphoreTake+0x6c>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e000      	b.n	800b0a6 <xQueueSemaphoreTake+0x6e>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10c      	bne.n	800b0c4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	b672      	cpsid	i
 800b0b0:	f383 8811 	msr	BASEPRI, r3
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	b662      	cpsie	i
 800b0be:	61bb      	str	r3, [r7, #24]
}
 800b0c0:	bf00      	nop
 800b0c2:	e7fe      	b.n	800b0c2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0c4:	f001 fb52 	bl	800c76c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d024      	beq.n	800b11e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	1e5a      	subs	r2, r3, #1
 800b0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d104      	bne.n	800b0ee <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b0e4:	f001 f9b8 	bl	800c458 <pvTaskIncrementMutexHeldCount>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00f      	beq.n	800b116 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f8:	3310      	adds	r3, #16
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fe20 	bl	800bd40 <xTaskRemoveFromEventList>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d007      	beq.n	800b116 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b106:	4b55      	ldr	r3, [pc, #340]	; (800b25c <xQueueSemaphoreTake+0x224>)
 800b108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b116:	f001 fb5d 	bl	800c7d4 <vPortExitCritical>
				return pdPASS;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e099      	b.n	800b252 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d113      	bne.n	800b14c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00c      	beq.n	800b144 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12e:	b672      	cpsid	i
 800b130:	f383 8811 	msr	BASEPRI, r3
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	b662      	cpsie	i
 800b13e:	617b      	str	r3, [r7, #20]
}
 800b140:	bf00      	nop
 800b142:	e7fe      	b.n	800b142 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b144:	f001 fb46 	bl	800c7d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b148:	2300      	movs	r3, #0
 800b14a:	e082      	b.n	800b252 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d106      	bne.n	800b160 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b152:	f107 030c 	add.w	r3, r7, #12
 800b156:	4618      	mov	r0, r3
 800b158:	f000 fe56 	bl	800be08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b15c:	2301      	movs	r3, #1
 800b15e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b160:	f001 fb38 	bl	800c7d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b164:	f000 fbde 	bl	800b924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b168:	f001 fb00 	bl	800c76c <vPortEnterCritical>
 800b16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b172:	b25b      	sxtb	r3, r3
 800b174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b178:	d103      	bne.n	800b182 <xQueueSemaphoreTake+0x14a>
 800b17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b188:	b25b      	sxtb	r3, r3
 800b18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18e:	d103      	bne.n	800b198 <xQueueSemaphoreTake+0x160>
 800b190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b198:	f001 fb1c 	bl	800c7d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b19c:	463a      	mov	r2, r7
 800b19e:	f107 030c 	add.w	r3, r7, #12
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 fe45 	bl	800be34 <xTaskCheckForTimeOut>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d132      	bne.n	800b216 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1b2:	f000 f949 	bl	800b448 <prvIsQueueEmpty>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d026      	beq.n	800b20a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d109      	bne.n	800b1d8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800b1c4:	f001 fad2 	bl	800c76c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 ff9b 	bl	800c108 <xTaskPriorityInherit>
 800b1d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b1d4:	f001 fafe 	bl	800c7d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1da:	3324      	adds	r3, #36	; 0x24
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	4611      	mov	r1, r2
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 fd87 	bl	800bcf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1e8:	f000 f8dc 	bl	800b3a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1ec:	f000 fba8 	bl	800b940 <xTaskResumeAll>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f47f af66 	bne.w	800b0c4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800b1f8:	4b18      	ldr	r3, [pc, #96]	; (800b25c <xQueueSemaphoreTake+0x224>)
 800b1fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1fe:	601a      	str	r2, [r3, #0]
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	e75c      	b.n	800b0c4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b20a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b20c:	f000 f8ca 	bl	800b3a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b210:	f000 fb96 	bl	800b940 <xTaskResumeAll>
 800b214:	e756      	b.n	800b0c4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b218:	f000 f8c4 	bl	800b3a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b21c:	f000 fb90 	bl	800b940 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b222:	f000 f911 	bl	800b448 <prvIsQueueEmpty>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f43f af4b 	beq.w	800b0c4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b230:	2b00      	cmp	r3, #0
 800b232:	d00d      	beq.n	800b250 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800b234:	f001 fa9a 	bl	800c76c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b23a:	f000 f831 	bl	800b2a0 <prvGetDisinheritPriorityAfterTimeout>
 800b23e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b246:	4618      	mov	r0, r3
 800b248:	f001 f868 	bl	800c31c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b24c:	f001 fac2 	bl	800c7d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b250:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b252:	4618      	mov	r0, r3
 800b254:	3738      	adds	r7, #56	; 0x38
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	e000ed04 	.word	0xe000ed04

0800b260 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10c      	bne.n	800b288 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b272:	b672      	cpsid	i
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	b662      	cpsie	i
 800b282:	60bb      	str	r3, [r7, #8]
}
 800b284:	bf00      	nop
 800b286:	e7fe      	b.n	800b286 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800b288:	f001 fa70 	bl	800c76c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b290:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b292:	f001 fa9f 	bl	800c7d4 <vPortExitCritical>

	return uxReturn;
 800b296:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d006      	beq.n	800b2be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f1c3 0307 	rsb	r3, r3, #7
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	e001      	b.n	800b2c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
	}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10d      	bne.n	800b30a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d14d      	bne.n	800b392 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 ff84 	bl	800c208 <xTaskPriorityDisinherit>
 800b300:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	609a      	str	r2, [r3, #8]
 800b308:	e043      	b.n	800b392 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d119      	bne.n	800b344 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6858      	ldr	r0, [r3, #4]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b318:	461a      	mov	r2, r3
 800b31a:	68b9      	ldr	r1, [r7, #8]
 800b31c:	f001 fd60 	bl	800cde0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	685a      	ldr	r2, [r3, #4]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b328:	441a      	add	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	685a      	ldr	r2, [r3, #4]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	429a      	cmp	r2, r3
 800b338:	d32b      	bcc.n	800b392 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	605a      	str	r2, [r3, #4]
 800b342:	e026      	b.n	800b392 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	68d8      	ldr	r0, [r3, #12]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34c:	461a      	mov	r2, r3
 800b34e:	68b9      	ldr	r1, [r7, #8]
 800b350:	f001 fd46 	bl	800cde0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	68da      	ldr	r2, [r3, #12]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35c:	425b      	negs	r3, r3
 800b35e:	441a      	add	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	68da      	ldr	r2, [r3, #12]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d207      	bcs.n	800b380 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	689a      	ldr	r2, [r3, #8]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b378:	425b      	negs	r3, r3
 800b37a:	441a      	add	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b02      	cmp	r3, #2
 800b384:	d105      	bne.n	800b392 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	3b01      	subs	r3, #1
 800b390:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	1c5a      	adds	r2, r3, #1
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b39a:	697b      	ldr	r3, [r7, #20]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3718      	adds	r7, #24
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b3ac:	f001 f9de 	bl	800c76c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3b8:	e011      	b.n	800b3de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d012      	beq.n	800b3e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3324      	adds	r3, #36	; 0x24
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 fcba 	bl	800bd40 <xTaskRemoveFromEventList>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b3d2:	f000 fd95 	bl	800bf00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	dce9      	bgt.n	800b3ba <prvUnlockQueue+0x16>
 800b3e6:	e000      	b.n	800b3ea <prvUnlockQueue+0x46>
					break;
 800b3e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	22ff      	movs	r2, #255	; 0xff
 800b3ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b3f2:	f001 f9ef 	bl	800c7d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3f6:	f001 f9b9 	bl	800c76c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b400:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b402:	e011      	b.n	800b428 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d012      	beq.n	800b432 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3310      	adds	r3, #16
 800b410:	4618      	mov	r0, r3
 800b412:	f000 fc95 	bl	800bd40 <xTaskRemoveFromEventList>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b41c:	f000 fd70 	bl	800bf00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b420:	7bbb      	ldrb	r3, [r7, #14]
 800b422:	3b01      	subs	r3, #1
 800b424:	b2db      	uxtb	r3, r3
 800b426:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	dce9      	bgt.n	800b404 <prvUnlockQueue+0x60>
 800b430:	e000      	b.n	800b434 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b432:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	22ff      	movs	r2, #255	; 0xff
 800b438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b43c:	f001 f9ca 	bl	800c7d4 <vPortExitCritical>
}
 800b440:	bf00      	nop
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b450:	f001 f98c 	bl	800c76c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d102      	bne.n	800b462 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b45c:	2301      	movs	r3, #1
 800b45e:	60fb      	str	r3, [r7, #12]
 800b460:	e001      	b.n	800b466 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b462:	2300      	movs	r3, #0
 800b464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b466:	f001 f9b5 	bl	800c7d4 <vPortExitCritical>

	return xReturn;
 800b46a:	68fb      	ldr	r3, [r7, #12]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b47c:	f001 f976 	bl	800c76c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b488:	429a      	cmp	r2, r3
 800b48a:	d102      	bne.n	800b492 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b48c:	2301      	movs	r3, #1
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	e001      	b.n	800b496 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b492:	2300      	movs	r3, #0
 800b494:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b496:	f001 f99d 	bl	800c7d4 <vPortExitCritical>

	return xReturn;
 800b49a:	68fb      	ldr	r3, [r7, #12]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b08e      	sub	sp, #56	; 0x38
 800b4a8:	af04      	add	r7, sp, #16
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
 800b4b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10c      	bne.n	800b4d2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	b672      	cpsid	i
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	b662      	cpsie	i
 800b4cc:	623b      	str	r3, [r7, #32]
}
 800b4ce:	bf00      	nop
 800b4d0:	e7fe      	b.n	800b4d0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10c      	bne.n	800b4f2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	b672      	cpsid	i
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	b662      	cpsie	i
 800b4ec:	61fb      	str	r3, [r7, #28]
}
 800b4ee:	bf00      	nop
 800b4f0:	e7fe      	b.n	800b4f0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b4f2:	2358      	movs	r3, #88	; 0x58
 800b4f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	2b58      	cmp	r3, #88	; 0x58
 800b4fa:	d00c      	beq.n	800b516 <xTaskCreateStatic+0x72>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b500:	b672      	cpsid	i
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	b662      	cpsie	i
 800b510:	61bb      	str	r3, [r7, #24]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b516:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d01e      	beq.n	800b55c <xTaskCreateStatic+0xb8>
 800b51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b520:	2b00      	cmp	r3, #0
 800b522:	d01b      	beq.n	800b55c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b52c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b530:	2202      	movs	r2, #2
 800b532:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b536:	2300      	movs	r3, #0
 800b538:	9303      	str	r3, [sp, #12]
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	9302      	str	r3, [sp, #8]
 800b53e:	f107 0314 	add.w	r3, r7, #20
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	68b9      	ldr	r1, [r7, #8]
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f000 f850 	bl	800b5f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b556:	f000 f8e1 	bl	800b71c <prvAddNewTaskToReadyList>
 800b55a:	e001      	b.n	800b560 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b55c:	2300      	movs	r3, #0
 800b55e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b560:	697b      	ldr	r3, [r7, #20]
	}
 800b562:	4618      	mov	r0, r3
 800b564:	3728      	adds	r7, #40	; 0x28
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b08c      	sub	sp, #48	; 0x30
 800b56e:	af04      	add	r7, sp, #16
 800b570:	60f8      	str	r0, [r7, #12]
 800b572:	60b9      	str	r1, [r7, #8]
 800b574:	603b      	str	r3, [r7, #0]
 800b576:	4613      	mov	r3, r2
 800b578:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b57a:	88fb      	ldrh	r3, [r7, #6]
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4618      	mov	r0, r3
 800b580:	f001 fa20 	bl	800c9c4 <pvPortMalloc>
 800b584:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00e      	beq.n	800b5aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b58c:	2058      	movs	r0, #88	; 0x58
 800b58e:	f001 fa19 	bl	800c9c4 <pvPortMalloc>
 800b592:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d003      	beq.n	800b5a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	697a      	ldr	r2, [r7, #20]
 800b59e:	631a      	str	r2, [r3, #48]	; 0x30
 800b5a0:	e005      	b.n	800b5ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5a2:	6978      	ldr	r0, [r7, #20]
 800b5a4:	f001 fade 	bl	800cb64 <vPortFree>
 800b5a8:	e001      	b.n	800b5ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d017      	beq.n	800b5e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5bc:	88fa      	ldrh	r2, [r7, #6]
 800b5be:	2300      	movs	r3, #0
 800b5c0:	9303      	str	r3, [sp, #12]
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	9302      	str	r3, [sp, #8]
 800b5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c8:	9301      	str	r3, [sp, #4]
 800b5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	68b9      	ldr	r1, [r7, #8]
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f000 f80e 	bl	800b5f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5d8:	69f8      	ldr	r0, [r7, #28]
 800b5da:	f000 f89f 	bl	800b71c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	61bb      	str	r3, [r7, #24]
 800b5e2:	e002      	b.n	800b5ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b5ea:	69bb      	ldr	r3, [r7, #24]
	}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3720      	adds	r7, #32
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b088      	sub	sp, #32
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	461a      	mov	r2, r3
 800b60c:	21a5      	movs	r1, #165	; 0xa5
 800b60e:	f001 fbf5 	bl	800cdfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b616:	6879      	ldr	r1, [r7, #4]
 800b618:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b61c:	440b      	add	r3, r1
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	f023 0307 	bic.w	r3, r3, #7
 800b62a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	f003 0307 	and.w	r3, r3, #7
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00c      	beq.n	800b650 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63a:	b672      	cpsid	i
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	b662      	cpsie	i
 800b64a:	617b      	str	r3, [r7, #20]
}
 800b64c:	bf00      	nop
 800b64e:	e7fe      	b.n	800b64e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d01f      	beq.n	800b696 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b656:	2300      	movs	r3, #0
 800b658:	61fb      	str	r3, [r7, #28]
 800b65a:	e012      	b.n	800b682 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	4413      	add	r3, r2
 800b662:	7819      	ldrb	r1, [r3, #0]
 800b664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	4413      	add	r3, r2
 800b66a:	3334      	adds	r3, #52	; 0x34
 800b66c:	460a      	mov	r2, r1
 800b66e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b670:	68ba      	ldr	r2, [r7, #8]
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	4413      	add	r3, r2
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d006      	beq.n	800b68a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	3301      	adds	r3, #1
 800b680:	61fb      	str	r3, [r7, #28]
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	2b0f      	cmp	r3, #15
 800b686:	d9e9      	bls.n	800b65c <prvInitialiseNewTask+0x68>
 800b688:	e000      	b.n	800b68c <prvInitialiseNewTask+0x98>
			{
				break;
 800b68a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b694:	e003      	b.n	800b69e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a0:	2b06      	cmp	r3, #6
 800b6a2:	d901      	bls.n	800b6a8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6a4:	2306      	movs	r3, #6
 800b6a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6b2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6bc:	3304      	adds	r3, #4
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff f8e5 	bl	800a88e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c6:	3318      	adds	r3, #24
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7ff f8e0 	bl	800a88e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	f1c3 0207 	rsb	r2, r3, #7
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6f8:	683a      	ldr	r2, [r7, #0]
 800b6fa:	68f9      	ldr	r1, [r7, #12]
 800b6fc:	69b8      	ldr	r0, [r7, #24]
 800b6fe:	f000 ff25 	bl	800c54c <pxPortInitialiseStack>
 800b702:	4602      	mov	r2, r0
 800b704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b706:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d002      	beq.n	800b714 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b712:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b714:	bf00      	nop
 800b716:	3720      	adds	r7, #32
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b724:	f001 f822 	bl	800c76c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b728:	4b2a      	ldr	r3, [pc, #168]	; (800b7d4 <prvAddNewTaskToReadyList+0xb8>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3301      	adds	r3, #1
 800b72e:	4a29      	ldr	r2, [pc, #164]	; (800b7d4 <prvAddNewTaskToReadyList+0xb8>)
 800b730:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b732:	4b29      	ldr	r3, [pc, #164]	; (800b7d8 <prvAddNewTaskToReadyList+0xbc>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b73a:	4a27      	ldr	r2, [pc, #156]	; (800b7d8 <prvAddNewTaskToReadyList+0xbc>)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b740:	4b24      	ldr	r3, [pc, #144]	; (800b7d4 <prvAddNewTaskToReadyList+0xb8>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d110      	bne.n	800b76a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b748:	f000 fc00 	bl	800bf4c <prvInitialiseTaskLists>
 800b74c:	e00d      	b.n	800b76a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b74e:	4b23      	ldr	r3, [pc, #140]	; (800b7dc <prvAddNewTaskToReadyList+0xc0>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d109      	bne.n	800b76a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b756:	4b20      	ldr	r3, [pc, #128]	; (800b7d8 <prvAddNewTaskToReadyList+0xbc>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b760:	429a      	cmp	r2, r3
 800b762:	d802      	bhi.n	800b76a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b764:	4a1c      	ldr	r2, [pc, #112]	; (800b7d8 <prvAddNewTaskToReadyList+0xbc>)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b76a:	4b1d      	ldr	r3, [pc, #116]	; (800b7e0 <prvAddNewTaskToReadyList+0xc4>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3301      	adds	r3, #1
 800b770:	4a1b      	ldr	r2, [pc, #108]	; (800b7e0 <prvAddNewTaskToReadyList+0xc4>)
 800b772:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	2201      	movs	r2, #1
 800b77a:	409a      	lsls	r2, r3
 800b77c:	4b19      	ldr	r3, [pc, #100]	; (800b7e4 <prvAddNewTaskToReadyList+0xc8>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4313      	orrs	r3, r2
 800b782:	4a18      	ldr	r2, [pc, #96]	; (800b7e4 <prvAddNewTaskToReadyList+0xc8>)
 800b784:	6013      	str	r3, [r2, #0]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78a:	4613      	mov	r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4413      	add	r3, r2
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	4a15      	ldr	r2, [pc, #84]	; (800b7e8 <prvAddNewTaskToReadyList+0xcc>)
 800b794:	441a      	add	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3304      	adds	r3, #4
 800b79a:	4619      	mov	r1, r3
 800b79c:	4610      	mov	r0, r2
 800b79e:	f7ff f883 	bl	800a8a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7a2:	f001 f817 	bl	800c7d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7a6:	4b0d      	ldr	r3, [pc, #52]	; (800b7dc <prvAddNewTaskToReadyList+0xc0>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00e      	beq.n	800b7cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7ae:	4b0a      	ldr	r3, [pc, #40]	; (800b7d8 <prvAddNewTaskToReadyList+0xbc>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d207      	bcs.n	800b7cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7bc:	4b0b      	ldr	r3, [pc, #44]	; (800b7ec <prvAddNewTaskToReadyList+0xd0>)
 800b7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7cc:	bf00      	nop
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	20000598 	.word	0x20000598
 800b7d8:	20000498 	.word	0x20000498
 800b7dc:	200005a4 	.word	0x200005a4
 800b7e0:	200005b4 	.word	0x200005b4
 800b7e4:	200005a0 	.word	0x200005a0
 800b7e8:	2000049c 	.word	0x2000049c
 800b7ec:	e000ed04 	.word	0xe000ed04

0800b7f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d019      	beq.n	800b836 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b802:	4b14      	ldr	r3, [pc, #80]	; (800b854 <vTaskDelay+0x64>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00c      	beq.n	800b824 <vTaskDelay+0x34>
	__asm volatile
 800b80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80e:	b672      	cpsid	i
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	b662      	cpsie	i
 800b81e:	60bb      	str	r3, [r7, #8]
}
 800b820:	bf00      	nop
 800b822:	e7fe      	b.n	800b822 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b824:	f000 f87e 	bl	800b924 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b828:	2100      	movs	r1, #0
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fe28 	bl	800c480 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b830:	f000 f886 	bl	800b940 <xTaskResumeAll>
 800b834:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d107      	bne.n	800b84c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b83c:	4b06      	ldr	r3, [pc, #24]	; (800b858 <vTaskDelay+0x68>)
 800b83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b842:	601a      	str	r2, [r3, #0]
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b84c:	bf00      	nop
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	200005c0 	.word	0x200005c0
 800b858:	e000ed04 	.word	0xe000ed04

0800b85c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08a      	sub	sp, #40	; 0x28
 800b860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b862:	2300      	movs	r3, #0
 800b864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b866:	2300      	movs	r3, #0
 800b868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b86a:	463a      	mov	r2, r7
 800b86c:	1d39      	adds	r1, r7, #4
 800b86e:	f107 0308 	add.w	r3, r7, #8
 800b872:	4618      	mov	r0, r3
 800b874:	f7f4 fe62 	bl	800053c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	9202      	str	r2, [sp, #8]
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	2300      	movs	r3, #0
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	2300      	movs	r3, #0
 800b888:	460a      	mov	r2, r1
 800b88a:	4920      	ldr	r1, [pc, #128]	; (800b90c <vTaskStartScheduler+0xb0>)
 800b88c:	4820      	ldr	r0, [pc, #128]	; (800b910 <vTaskStartScheduler+0xb4>)
 800b88e:	f7ff fe09 	bl	800b4a4 <xTaskCreateStatic>
 800b892:	4603      	mov	r3, r0
 800b894:	4a1f      	ldr	r2, [pc, #124]	; (800b914 <vTaskStartScheduler+0xb8>)
 800b896:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b898:	4b1e      	ldr	r3, [pc, #120]	; (800b914 <vTaskStartScheduler+0xb8>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	617b      	str	r3, [r7, #20]
 800b8a4:	e001      	b.n	800b8aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d118      	bne.n	800b8e2 <vTaskStartScheduler+0x86>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b4:	b672      	cpsid	i
 800b8b6:	f383 8811 	msr	BASEPRI, r3
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	b662      	cpsie	i
 800b8c4:	613b      	str	r3, [r7, #16]
}
 800b8c6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8c8:	4b13      	ldr	r3, [pc, #76]	; (800b918 <vTaskStartScheduler+0xbc>)
 800b8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8d0:	4b12      	ldr	r3, [pc, #72]	; (800b91c <vTaskStartScheduler+0xc0>)
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8d6:	4b12      	ldr	r3, [pc, #72]	; (800b920 <vTaskStartScheduler+0xc4>)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8dc:	f000 fec8 	bl	800c670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8e0:	e010      	b.n	800b904 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e8:	d10c      	bne.n	800b904 <vTaskStartScheduler+0xa8>
	__asm volatile
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	b672      	cpsid	i
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	b662      	cpsie	i
 800b8fe:	60fb      	str	r3, [r7, #12]
}
 800b900:	bf00      	nop
 800b902:	e7fe      	b.n	800b902 <vTaskStartScheduler+0xa6>
}
 800b904:	bf00      	nop
 800b906:	3718      	adds	r7, #24
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	0800cef8 	.word	0x0800cef8
 800b910:	0800bf19 	.word	0x0800bf19
 800b914:	200005bc 	.word	0x200005bc
 800b918:	200005b8 	.word	0x200005b8
 800b91c:	200005a4 	.word	0x200005a4
 800b920:	2000059c 	.word	0x2000059c

0800b924 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b924:	b480      	push	{r7}
 800b926:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b928:	4b04      	ldr	r3, [pc, #16]	; (800b93c <vTaskSuspendAll+0x18>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3301      	adds	r3, #1
 800b92e:	4a03      	ldr	r2, [pc, #12]	; (800b93c <vTaskSuspendAll+0x18>)
 800b930:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b932:	bf00      	nop
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	200005c0 	.word	0x200005c0

0800b940 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b946:	2300      	movs	r3, #0
 800b948:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b94a:	2300      	movs	r3, #0
 800b94c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b94e:	4b42      	ldr	r3, [pc, #264]	; (800ba58 <xTaskResumeAll+0x118>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10c      	bne.n	800b970 <xTaskResumeAll+0x30>
	__asm volatile
 800b956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95a:	b672      	cpsid	i
 800b95c:	f383 8811 	msr	BASEPRI, r3
 800b960:	f3bf 8f6f 	isb	sy
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	b662      	cpsie	i
 800b96a:	603b      	str	r3, [r7, #0]
}
 800b96c:	bf00      	nop
 800b96e:	e7fe      	b.n	800b96e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b970:	f000 fefc 	bl	800c76c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b974:	4b38      	ldr	r3, [pc, #224]	; (800ba58 <xTaskResumeAll+0x118>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	3b01      	subs	r3, #1
 800b97a:	4a37      	ldr	r2, [pc, #220]	; (800ba58 <xTaskResumeAll+0x118>)
 800b97c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b97e:	4b36      	ldr	r3, [pc, #216]	; (800ba58 <xTaskResumeAll+0x118>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d161      	bne.n	800ba4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b986:	4b35      	ldr	r3, [pc, #212]	; (800ba5c <xTaskResumeAll+0x11c>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d05d      	beq.n	800ba4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b98e:	e02e      	b.n	800b9ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b990:	4b33      	ldr	r3, [pc, #204]	; (800ba60 <xTaskResumeAll+0x120>)
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3318      	adds	r3, #24
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fe ffe0 	bl	800a962 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7fe ffdb 	bl	800a962 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	409a      	lsls	r2, r3
 800b9b4:	4b2b      	ldr	r3, [pc, #172]	; (800ba64 <xTaskResumeAll+0x124>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	4a2a      	ldr	r2, [pc, #168]	; (800ba64 <xTaskResumeAll+0x124>)
 800b9bc:	6013      	str	r3, [r2, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4a27      	ldr	r2, [pc, #156]	; (800ba68 <xTaskResumeAll+0x128>)
 800b9cc:	441a      	add	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	f7fe ff67 	bl	800a8a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9de:	4b23      	ldr	r3, [pc, #140]	; (800ba6c <xTaskResumeAll+0x12c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d302      	bcc.n	800b9ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b9e8:	4b21      	ldr	r3, [pc, #132]	; (800ba70 <xTaskResumeAll+0x130>)
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9ee:	4b1c      	ldr	r3, [pc, #112]	; (800ba60 <xTaskResumeAll+0x120>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1cc      	bne.n	800b990 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b9fc:	f000 fb46 	bl	800c08c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ba00:	4b1c      	ldr	r3, [pc, #112]	; (800ba74 <xTaskResumeAll+0x134>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d010      	beq.n	800ba2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba0c:	f000 f836 	bl	800ba7c <xTaskIncrementTick>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ba16:	4b16      	ldr	r3, [pc, #88]	; (800ba70 <xTaskResumeAll+0x130>)
 800ba18:	2201      	movs	r2, #1
 800ba1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1f1      	bne.n	800ba0c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800ba28:	4b12      	ldr	r3, [pc, #72]	; (800ba74 <xTaskResumeAll+0x134>)
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba2e:	4b10      	ldr	r3, [pc, #64]	; (800ba70 <xTaskResumeAll+0x130>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d009      	beq.n	800ba4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba36:	2301      	movs	r3, #1
 800ba38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba3a:	4b0f      	ldr	r3, [pc, #60]	; (800ba78 <xTaskResumeAll+0x138>)
 800ba3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba40:	601a      	str	r2, [r3, #0]
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba4a:	f000 fec3 	bl	800c7d4 <vPortExitCritical>

	return xAlreadyYielded;
 800ba4e:	68bb      	ldr	r3, [r7, #8]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	200005c0 	.word	0x200005c0
 800ba5c:	20000598 	.word	0x20000598
 800ba60:	20000558 	.word	0x20000558
 800ba64:	200005a0 	.word	0x200005a0
 800ba68:	2000049c 	.word	0x2000049c
 800ba6c:	20000498 	.word	0x20000498
 800ba70:	200005ac 	.word	0x200005ac
 800ba74:	200005a8 	.word	0x200005a8
 800ba78:	e000ed04 	.word	0xe000ed04

0800ba7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba82:	2300      	movs	r3, #0
 800ba84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba86:	4b4f      	ldr	r3, [pc, #316]	; (800bbc4 <xTaskIncrementTick+0x148>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f040 808a 	bne.w	800bba4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba90:	4b4d      	ldr	r3, [pc, #308]	; (800bbc8 <xTaskIncrementTick+0x14c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba98:	4a4b      	ldr	r2, [pc, #300]	; (800bbc8 <xTaskIncrementTick+0x14c>)
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d122      	bne.n	800baea <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800baa4:	4b49      	ldr	r3, [pc, #292]	; (800bbcc <xTaskIncrementTick+0x150>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00c      	beq.n	800bac8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	b672      	cpsid	i
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	b662      	cpsie	i
 800bac2:	603b      	str	r3, [r7, #0]
}
 800bac4:	bf00      	nop
 800bac6:	e7fe      	b.n	800bac6 <xTaskIncrementTick+0x4a>
 800bac8:	4b40      	ldr	r3, [pc, #256]	; (800bbcc <xTaskIncrementTick+0x150>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	60fb      	str	r3, [r7, #12]
 800bace:	4b40      	ldr	r3, [pc, #256]	; (800bbd0 <xTaskIncrementTick+0x154>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a3e      	ldr	r2, [pc, #248]	; (800bbcc <xTaskIncrementTick+0x150>)
 800bad4:	6013      	str	r3, [r2, #0]
 800bad6:	4a3e      	ldr	r2, [pc, #248]	; (800bbd0 <xTaskIncrementTick+0x154>)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	4b3d      	ldr	r3, [pc, #244]	; (800bbd4 <xTaskIncrementTick+0x158>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	3301      	adds	r3, #1
 800bae2:	4a3c      	ldr	r2, [pc, #240]	; (800bbd4 <xTaskIncrementTick+0x158>)
 800bae4:	6013      	str	r3, [r2, #0]
 800bae6:	f000 fad1 	bl	800c08c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800baea:	4b3b      	ldr	r3, [pc, #236]	; (800bbd8 <xTaskIncrementTick+0x15c>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	693a      	ldr	r2, [r7, #16]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d348      	bcc.n	800bb86 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baf4:	4b35      	ldr	r3, [pc, #212]	; (800bbcc <xTaskIncrementTick+0x150>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d104      	bne.n	800bb08 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bafe:	4b36      	ldr	r3, [pc, #216]	; (800bbd8 <xTaskIncrementTick+0x15c>)
 800bb00:	f04f 32ff 	mov.w	r2, #4294967295
 800bb04:	601a      	str	r2, [r3, #0]
					break;
 800bb06:	e03e      	b.n	800bb86 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb08:	4b30      	ldr	r3, [pc, #192]	; (800bbcc <xTaskIncrementTick+0x150>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d203      	bcs.n	800bb28 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb20:	4a2d      	ldr	r2, [pc, #180]	; (800bbd8 <xTaskIncrementTick+0x15c>)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb26:	e02e      	b.n	800bb86 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fe ff18 	bl	800a962 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d004      	beq.n	800bb44 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	3318      	adds	r3, #24
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fe ff0f 	bl	800a962 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	2201      	movs	r2, #1
 800bb4a:	409a      	lsls	r2, r3
 800bb4c:	4b23      	ldr	r3, [pc, #140]	; (800bbdc <xTaskIncrementTick+0x160>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	4a22      	ldr	r2, [pc, #136]	; (800bbdc <xTaskIncrementTick+0x160>)
 800bb54:	6013      	str	r3, [r2, #0]
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	4413      	add	r3, r2
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	4a1f      	ldr	r2, [pc, #124]	; (800bbe0 <xTaskIncrementTick+0x164>)
 800bb64:	441a      	add	r2, r3
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	3304      	adds	r3, #4
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	f7fe fe9b 	bl	800a8a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb76:	4b1b      	ldr	r3, [pc, #108]	; (800bbe4 <xTaskIncrementTick+0x168>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d3b9      	bcc.n	800baf4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800bb80:	2301      	movs	r3, #1
 800bb82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb84:	e7b6      	b.n	800baf4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb86:	4b17      	ldr	r3, [pc, #92]	; (800bbe4 <xTaskIncrementTick+0x168>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8c:	4914      	ldr	r1, [pc, #80]	; (800bbe0 <xTaskIncrementTick+0x164>)
 800bb8e:	4613      	mov	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4413      	add	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	440b      	add	r3, r1
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d907      	bls.n	800bbae <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	617b      	str	r3, [r7, #20]
 800bba2:	e004      	b.n	800bbae <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bba4:	4b10      	ldr	r3, [pc, #64]	; (800bbe8 <xTaskIncrementTick+0x16c>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	4a0f      	ldr	r2, [pc, #60]	; (800bbe8 <xTaskIncrementTick+0x16c>)
 800bbac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bbae:	4b0f      	ldr	r3, [pc, #60]	; (800bbec <xTaskIncrementTick+0x170>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d001      	beq.n	800bbba <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bbba:	697b      	ldr	r3, [r7, #20]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3718      	adds	r7, #24
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	200005c0 	.word	0x200005c0
 800bbc8:	2000059c 	.word	0x2000059c
 800bbcc:	20000550 	.word	0x20000550
 800bbd0:	20000554 	.word	0x20000554
 800bbd4:	200005b0 	.word	0x200005b0
 800bbd8:	200005b8 	.word	0x200005b8
 800bbdc:	200005a0 	.word	0x200005a0
 800bbe0:	2000049c 	.word	0x2000049c
 800bbe4:	20000498 	.word	0x20000498
 800bbe8:	200005a8 	.word	0x200005a8
 800bbec:	200005ac 	.word	0x200005ac

0800bbf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bbf6:	4b3a      	ldr	r3, [pc, #232]	; (800bce0 <vTaskSwitchContext+0xf0>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d003      	beq.n	800bc06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bbfe:	4b39      	ldr	r3, [pc, #228]	; (800bce4 <vTaskSwitchContext+0xf4>)
 800bc00:	2201      	movs	r2, #1
 800bc02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc04:	e068      	b.n	800bcd8 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800bc06:	4b37      	ldr	r3, [pc, #220]	; (800bce4 <vTaskSwitchContext+0xf4>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bc0c:	4b36      	ldr	r3, [pc, #216]	; (800bce8 <vTaskSwitchContext+0xf8>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc12:	61fb      	str	r3, [r7, #28]
 800bc14:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800bc18:	61bb      	str	r3, [r7, #24]
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	69ba      	ldr	r2, [r7, #24]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d111      	bne.n	800bc48 <vTaskSwitchContext+0x58>
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	3304      	adds	r3, #4
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	69ba      	ldr	r2, [r7, #24]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d10b      	bne.n	800bc48 <vTaskSwitchContext+0x58>
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	3308      	adds	r3, #8
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	69ba      	ldr	r2, [r7, #24]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d105      	bne.n	800bc48 <vTaskSwitchContext+0x58>
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	330c      	adds	r3, #12
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	69ba      	ldr	r2, [r7, #24]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d008      	beq.n	800bc5a <vTaskSwitchContext+0x6a>
 800bc48:	4b27      	ldr	r3, [pc, #156]	; (800bce8 <vTaskSwitchContext+0xf8>)
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	4b26      	ldr	r3, [pc, #152]	; (800bce8 <vTaskSwitchContext+0xf8>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	3334      	adds	r3, #52	; 0x34
 800bc52:	4619      	mov	r1, r3
 800bc54:	4610      	mov	r0, r2
 800bc56:	f7f4 fc5e 	bl	8000516 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc5a:	4b24      	ldr	r3, [pc, #144]	; (800bcec <vTaskSwitchContext+0xfc>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	fab3 f383 	clz	r3, r3
 800bc66:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bc68:	7afb      	ldrb	r3, [r7, #11]
 800bc6a:	f1c3 031f 	rsb	r3, r3, #31
 800bc6e:	617b      	str	r3, [r7, #20]
 800bc70:	491f      	ldr	r1, [pc, #124]	; (800bcf0 <vTaskSwitchContext+0x100>)
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	4613      	mov	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	440b      	add	r3, r1
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10c      	bne.n	800bc9e <vTaskSwitchContext+0xae>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	b672      	cpsid	i
 800bc8a:	f383 8811 	msr	BASEPRI, r3
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	b662      	cpsie	i
 800bc98:	607b      	str	r3, [r7, #4]
}
 800bc9a:	bf00      	nop
 800bc9c:	e7fe      	b.n	800bc9c <vTaskSwitchContext+0xac>
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	4613      	mov	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4413      	add	r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	4a11      	ldr	r2, [pc, #68]	; (800bcf0 <vTaskSwitchContext+0x100>)
 800bcaa:	4413      	add	r3, r2
 800bcac:	613b      	str	r3, [r7, #16]
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	685a      	ldr	r2, [r3, #4]
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	605a      	str	r2, [r3, #4]
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	3308      	adds	r3, #8
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d104      	bne.n	800bcce <vTaskSwitchContext+0xde>
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	605a      	str	r2, [r3, #4]
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	4a04      	ldr	r2, [pc, #16]	; (800bce8 <vTaskSwitchContext+0xf8>)
 800bcd6:	6013      	str	r3, [r2, #0]
}
 800bcd8:	bf00      	nop
 800bcda:	3720      	adds	r7, #32
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	200005c0 	.word	0x200005c0
 800bce4:	200005ac 	.word	0x200005ac
 800bce8:	20000498 	.word	0x20000498
 800bcec:	200005a0 	.word	0x200005a0
 800bcf0:	2000049c 	.word	0x2000049c

0800bcf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10c      	bne.n	800bd1e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd08:	b672      	cpsid	i
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	b662      	cpsie	i
 800bd18:	60fb      	str	r3, [r7, #12]
}
 800bd1a:	bf00      	nop
 800bd1c:	e7fe      	b.n	800bd1c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd1e:	4b07      	ldr	r3, [pc, #28]	; (800bd3c <vTaskPlaceOnEventList+0x48>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3318      	adds	r3, #24
 800bd24:	4619      	mov	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7fe fde2 	bl	800a8f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	6838      	ldr	r0, [r7, #0]
 800bd30:	f000 fba6 	bl	800c480 <prvAddCurrentTaskToDelayedList>
}
 800bd34:	bf00      	nop
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	20000498 	.word	0x20000498

0800bd40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d10c      	bne.n	800bd70 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800bd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5a:	b672      	cpsid	i
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	b662      	cpsie	i
 800bd6a:	60fb      	str	r3, [r7, #12]
}
 800bd6c:	bf00      	nop
 800bd6e:	e7fe      	b.n	800bd6e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	3318      	adds	r3, #24
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fe fdf4 	bl	800a962 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd7a:	4b1d      	ldr	r3, [pc, #116]	; (800bdf0 <xTaskRemoveFromEventList+0xb0>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d11c      	bne.n	800bdbc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	3304      	adds	r3, #4
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fe fdeb 	bl	800a962 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd90:	2201      	movs	r2, #1
 800bd92:	409a      	lsls	r2, r3
 800bd94:	4b17      	ldr	r3, [pc, #92]	; (800bdf4 <xTaskRemoveFromEventList+0xb4>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	4a16      	ldr	r2, [pc, #88]	; (800bdf4 <xTaskRemoveFromEventList+0xb4>)
 800bd9c:	6013      	str	r3, [r2, #0]
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda2:	4613      	mov	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4413      	add	r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4a13      	ldr	r2, [pc, #76]	; (800bdf8 <xTaskRemoveFromEventList+0xb8>)
 800bdac:	441a      	add	r2, r3
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	3304      	adds	r3, #4
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	f7fe fd77 	bl	800a8a8 <vListInsertEnd>
 800bdba:	e005      	b.n	800bdc8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	3318      	adds	r3, #24
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	480e      	ldr	r0, [pc, #56]	; (800bdfc <xTaskRemoveFromEventList+0xbc>)
 800bdc4:	f7fe fd70 	bl	800a8a8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdcc:	4b0c      	ldr	r3, [pc, #48]	; (800be00 <xTaskRemoveFromEventList+0xc0>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d905      	bls.n	800bde2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bdda:	4b0a      	ldr	r3, [pc, #40]	; (800be04 <xTaskRemoveFromEventList+0xc4>)
 800bddc:	2201      	movs	r2, #1
 800bdde:	601a      	str	r2, [r3, #0]
 800bde0:	e001      	b.n	800bde6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bde2:	2300      	movs	r3, #0
 800bde4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bde6:	697b      	ldr	r3, [r7, #20]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	200005c0 	.word	0x200005c0
 800bdf4:	200005a0 	.word	0x200005a0
 800bdf8:	2000049c 	.word	0x2000049c
 800bdfc:	20000558 	.word	0x20000558
 800be00:	20000498 	.word	0x20000498
 800be04:	200005ac 	.word	0x200005ac

0800be08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be10:	4b06      	ldr	r3, [pc, #24]	; (800be2c <vTaskInternalSetTimeOutState+0x24>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be18:	4b05      	ldr	r3, [pc, #20]	; (800be30 <vTaskInternalSetTimeOutState+0x28>)
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	605a      	str	r2, [r3, #4]
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	200005b0 	.word	0x200005b0
 800be30:	2000059c 	.word	0x2000059c

0800be34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b088      	sub	sp, #32
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10c      	bne.n	800be5e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800be44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be48:	b672      	cpsid	i
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	b662      	cpsie	i
 800be58:	613b      	str	r3, [r7, #16]
}
 800be5a:	bf00      	nop
 800be5c:	e7fe      	b.n	800be5c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10c      	bne.n	800be7e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	b672      	cpsid	i
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	b662      	cpsie	i
 800be78:	60fb      	str	r3, [r7, #12]
}
 800be7a:	bf00      	nop
 800be7c:	e7fe      	b.n	800be7c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800be7e:	f000 fc75 	bl	800c76c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be82:	4b1d      	ldr	r3, [pc, #116]	; (800bef8 <xTaskCheckForTimeOut+0xc4>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	69ba      	ldr	r2, [r7, #24]
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9a:	d102      	bne.n	800bea2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be9c:	2300      	movs	r3, #0
 800be9e:	61fb      	str	r3, [r7, #28]
 800bea0:	e023      	b.n	800beea <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	4b15      	ldr	r3, [pc, #84]	; (800befc <xTaskCheckForTimeOut+0xc8>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d007      	beq.n	800bebe <xTaskCheckForTimeOut+0x8a>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	69ba      	ldr	r2, [r7, #24]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d302      	bcc.n	800bebe <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800beb8:	2301      	movs	r3, #1
 800beba:	61fb      	str	r3, [r7, #28]
 800bebc:	e015      	b.n	800beea <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	697a      	ldr	r2, [r7, #20]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d20b      	bcs.n	800bee0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	1ad2      	subs	r2, r2, r3
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff ff97 	bl	800be08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800beda:	2300      	movs	r3, #0
 800bedc:	61fb      	str	r3, [r7, #28]
 800bede:	e004      	b.n	800beea <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2200      	movs	r2, #0
 800bee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bee6:	2301      	movs	r3, #1
 800bee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800beea:	f000 fc73 	bl	800c7d4 <vPortExitCritical>

	return xReturn;
 800beee:	69fb      	ldr	r3, [r7, #28]
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3720      	adds	r7, #32
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	2000059c 	.word	0x2000059c
 800befc:	200005b0 	.word	0x200005b0

0800bf00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf00:	b480      	push	{r7}
 800bf02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf04:	4b03      	ldr	r3, [pc, #12]	; (800bf14 <vTaskMissedYield+0x14>)
 800bf06:	2201      	movs	r2, #1
 800bf08:	601a      	str	r2, [r3, #0]
}
 800bf0a:	bf00      	nop
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr
 800bf14:	200005ac 	.word	0x200005ac

0800bf18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf20:	f000 f854 	bl	800bfcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf24:	4b07      	ldr	r3, [pc, #28]	; (800bf44 <prvIdleTask+0x2c>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d907      	bls.n	800bf3c <prvIdleTask+0x24>
			{
				taskYIELD();
 800bf2c:	4b06      	ldr	r3, [pc, #24]	; (800bf48 <prvIdleTask+0x30>)
 800bf2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf32:	601a      	str	r2, [r3, #0]
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800bf3c:	f7f4 fae4 	bl	8000508 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800bf40:	e7ee      	b.n	800bf20 <prvIdleTask+0x8>
 800bf42:	bf00      	nop
 800bf44:	2000049c 	.word	0x2000049c
 800bf48:	e000ed04 	.word	0xe000ed04

0800bf4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf52:	2300      	movs	r3, #0
 800bf54:	607b      	str	r3, [r7, #4]
 800bf56:	e00c      	b.n	800bf72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4a12      	ldr	r2, [pc, #72]	; (800bfac <prvInitialiseTaskLists+0x60>)
 800bf64:	4413      	add	r3, r2
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fe fc71 	bl	800a84e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	607b      	str	r3, [r7, #4]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b06      	cmp	r3, #6
 800bf76:	d9ef      	bls.n	800bf58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf78:	480d      	ldr	r0, [pc, #52]	; (800bfb0 <prvInitialiseTaskLists+0x64>)
 800bf7a:	f7fe fc68 	bl	800a84e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf7e:	480d      	ldr	r0, [pc, #52]	; (800bfb4 <prvInitialiseTaskLists+0x68>)
 800bf80:	f7fe fc65 	bl	800a84e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf84:	480c      	ldr	r0, [pc, #48]	; (800bfb8 <prvInitialiseTaskLists+0x6c>)
 800bf86:	f7fe fc62 	bl	800a84e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf8a:	480c      	ldr	r0, [pc, #48]	; (800bfbc <prvInitialiseTaskLists+0x70>)
 800bf8c:	f7fe fc5f 	bl	800a84e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf90:	480b      	ldr	r0, [pc, #44]	; (800bfc0 <prvInitialiseTaskLists+0x74>)
 800bf92:	f7fe fc5c 	bl	800a84e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf96:	4b0b      	ldr	r3, [pc, #44]	; (800bfc4 <prvInitialiseTaskLists+0x78>)
 800bf98:	4a05      	ldr	r2, [pc, #20]	; (800bfb0 <prvInitialiseTaskLists+0x64>)
 800bf9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf9c:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <prvInitialiseTaskLists+0x7c>)
 800bf9e:	4a05      	ldr	r2, [pc, #20]	; (800bfb4 <prvInitialiseTaskLists+0x68>)
 800bfa0:	601a      	str	r2, [r3, #0]
}
 800bfa2:	bf00      	nop
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	2000049c 	.word	0x2000049c
 800bfb0:	20000528 	.word	0x20000528
 800bfb4:	2000053c 	.word	0x2000053c
 800bfb8:	20000558 	.word	0x20000558
 800bfbc:	2000056c 	.word	0x2000056c
 800bfc0:	20000584 	.word	0x20000584
 800bfc4:	20000550 	.word	0x20000550
 800bfc8:	20000554 	.word	0x20000554

0800bfcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfd2:	e019      	b.n	800c008 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bfd4:	f000 fbca 	bl	800c76c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfd8:	4b10      	ldr	r3, [pc, #64]	; (800c01c <prvCheckTasksWaitingTermination+0x50>)
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3304      	adds	r3, #4
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7fe fcbc 	bl	800a962 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfea:	4b0d      	ldr	r3, [pc, #52]	; (800c020 <prvCheckTasksWaitingTermination+0x54>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	3b01      	subs	r3, #1
 800bff0:	4a0b      	ldr	r2, [pc, #44]	; (800c020 <prvCheckTasksWaitingTermination+0x54>)
 800bff2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bff4:	4b0b      	ldr	r3, [pc, #44]	; (800c024 <prvCheckTasksWaitingTermination+0x58>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	4a0a      	ldr	r2, [pc, #40]	; (800c024 <prvCheckTasksWaitingTermination+0x58>)
 800bffc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bffe:	f000 fbe9 	bl	800c7d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 f810 	bl	800c028 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c008:	4b06      	ldr	r3, [pc, #24]	; (800c024 <prvCheckTasksWaitingTermination+0x58>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1e1      	bne.n	800bfd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c010:	bf00      	nop
 800c012:	bf00      	nop
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	2000056c 	.word	0x2000056c
 800c020:	20000598 	.word	0x20000598
 800c024:	20000580 	.word	0x20000580

0800c028 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800c036:	2b00      	cmp	r3, #0
 800c038:	d108      	bne.n	800c04c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 fd90 	bl	800cb64 <vPortFree>
				vPortFree( pxTCB );
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 fd8d 	bl	800cb64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c04a:	e01a      	b.n	800c082 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800c052:	2b01      	cmp	r3, #1
 800c054:	d103      	bne.n	800c05e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fd84 	bl	800cb64 <vPortFree>
	}
 800c05c:	e011      	b.n	800c082 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800c064:	2b02      	cmp	r3, #2
 800c066:	d00c      	beq.n	800c082 <prvDeleteTCB+0x5a>
	__asm volatile
 800c068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06c:	b672      	cpsid	i
 800c06e:	f383 8811 	msr	BASEPRI, r3
 800c072:	f3bf 8f6f 	isb	sy
 800c076:	f3bf 8f4f 	dsb	sy
 800c07a:	b662      	cpsie	i
 800c07c:	60fb      	str	r3, [r7, #12]
}
 800c07e:	bf00      	nop
 800c080:	e7fe      	b.n	800c080 <prvDeleteTCB+0x58>
	}
 800c082:	bf00      	nop
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
	...

0800c08c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c092:	4b0c      	ldr	r3, [pc, #48]	; (800c0c4 <prvResetNextTaskUnblockTime+0x38>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d104      	bne.n	800c0a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c09c:	4b0a      	ldr	r3, [pc, #40]	; (800c0c8 <prvResetNextTaskUnblockTime+0x3c>)
 800c09e:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0a4:	e008      	b.n	800c0b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0a6:	4b07      	ldr	r3, [pc, #28]	; (800c0c4 <prvResetNextTaskUnblockTime+0x38>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	4a04      	ldr	r2, [pc, #16]	; (800c0c8 <prvResetNextTaskUnblockTime+0x3c>)
 800c0b6:	6013      	str	r3, [r2, #0]
}
 800c0b8:	bf00      	nop
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	20000550 	.word	0x20000550
 800c0c8:	200005b8 	.word	0x200005b8

0800c0cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c0d2:	4b0b      	ldr	r3, [pc, #44]	; (800c100 <xTaskGetSchedulerState+0x34>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d102      	bne.n	800c0e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	607b      	str	r3, [r7, #4]
 800c0de:	e008      	b.n	800c0f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0e0:	4b08      	ldr	r3, [pc, #32]	; (800c104 <xTaskGetSchedulerState+0x38>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d102      	bne.n	800c0ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	607b      	str	r3, [r7, #4]
 800c0ec:	e001      	b.n	800c0f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0f2:	687b      	ldr	r3, [r7, #4]
	}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr
 800c100:	200005a4 	.word	0x200005a4
 800c104:	200005c0 	.word	0x200005c0

0800c108 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c114:	2300      	movs	r3, #0
 800c116:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d069      	beq.n	800c1f2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c122:	4b36      	ldr	r3, [pc, #216]	; (800c1fc <xTaskPriorityInherit+0xf4>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c128:	429a      	cmp	r2, r3
 800c12a:	d259      	bcs.n	800c1e0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	699b      	ldr	r3, [r3, #24]
 800c130:	2b00      	cmp	r3, #0
 800c132:	db06      	blt.n	800c142 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c134:	4b31      	ldr	r3, [pc, #196]	; (800c1fc <xTaskPriorityInherit+0xf4>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13a:	f1c3 0207 	rsb	r2, r3, #7
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	6959      	ldr	r1, [r3, #20]
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14a:	4613      	mov	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4a2b      	ldr	r2, [pc, #172]	; (800c200 <xTaskPriorityInherit+0xf8>)
 800c154:	4413      	add	r3, r2
 800c156:	4299      	cmp	r1, r3
 800c158:	d13a      	bne.n	800c1d0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	3304      	adds	r3, #4
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fe fbff 	bl	800a962 <uxListRemove>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d115      	bne.n	800c196 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c16e:	4924      	ldr	r1, [pc, #144]	; (800c200 <xTaskPriorityInherit+0xf8>)
 800c170:	4613      	mov	r3, r2
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4413      	add	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	440b      	add	r3, r1
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10a      	bne.n	800c196 <xTaskPriorityInherit+0x8e>
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c184:	2201      	movs	r2, #1
 800c186:	fa02 f303 	lsl.w	r3, r2, r3
 800c18a:	43da      	mvns	r2, r3
 800c18c:	4b1d      	ldr	r3, [pc, #116]	; (800c204 <xTaskPriorityInherit+0xfc>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4013      	ands	r3, r2
 800c192:	4a1c      	ldr	r2, [pc, #112]	; (800c204 <xTaskPriorityInherit+0xfc>)
 800c194:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c196:	4b19      	ldr	r3, [pc, #100]	; (800c1fc <xTaskPriorityInherit+0xf4>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	409a      	lsls	r2, r3
 800c1a8:	4b16      	ldr	r3, [pc, #88]	; (800c204 <xTaskPriorityInherit+0xfc>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	4a15      	ldr	r2, [pc, #84]	; (800c204 <xTaskPriorityInherit+0xfc>)
 800c1b0:	6013      	str	r3, [r2, #0]
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4a10      	ldr	r2, [pc, #64]	; (800c200 <xTaskPriorityInherit+0xf8>)
 800c1c0:	441a      	add	r2, r3
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4610      	mov	r0, r2
 800c1ca:	f7fe fb6d 	bl	800a8a8 <vListInsertEnd>
 800c1ce:	e004      	b.n	800c1da <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1d0:	4b0a      	ldr	r3, [pc, #40]	; (800c1fc <xTaskPriorityInherit+0xf4>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	60fb      	str	r3, [r7, #12]
 800c1de:	e008      	b.n	800c1f2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1e4:	4b05      	ldr	r3, [pc, #20]	; (800c1fc <xTaskPriorityInherit+0xf4>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d201      	bcs.n	800c1f2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
	}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	20000498 	.word	0x20000498
 800c200:	2000049c 	.word	0x2000049c
 800c204:	200005a0 	.word	0x200005a0

0800c208 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c214:	2300      	movs	r3, #0
 800c216:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d072      	beq.n	800c304 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c21e:	4b3c      	ldr	r3, [pc, #240]	; (800c310 <xTaskPriorityDisinherit+0x108>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	693a      	ldr	r2, [r7, #16]
 800c224:	429a      	cmp	r2, r3
 800c226:	d00c      	beq.n	800c242 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	b672      	cpsid	i
 800c22e:	f383 8811 	msr	BASEPRI, r3
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	b662      	cpsie	i
 800c23c:	60fb      	str	r3, [r7, #12]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10c      	bne.n	800c264 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24e:	b672      	cpsid	i
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	b662      	cpsie	i
 800c25e:	60bb      	str	r3, [r7, #8]
}
 800c260:	bf00      	nop
 800c262:	e7fe      	b.n	800c262 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c268:	1e5a      	subs	r2, r3, #1
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c276:	429a      	cmp	r2, r3
 800c278:	d044      	beq.n	800c304 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d140      	bne.n	800c304 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	3304      	adds	r3, #4
 800c286:	4618      	mov	r0, r3
 800c288:	f7fe fb6b 	bl	800a962 <uxListRemove>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d115      	bne.n	800c2be <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c296:	491f      	ldr	r1, [pc, #124]	; (800c314 <xTaskPriorityDisinherit+0x10c>)
 800c298:	4613      	mov	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4413      	add	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	440b      	add	r3, r1
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10a      	bne.n	800c2be <xTaskPriorityDisinherit+0xb6>
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c2b2:	43da      	mvns	r2, r3
 800c2b4:	4b18      	ldr	r3, [pc, #96]	; (800c318 <xTaskPriorityDisinherit+0x110>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	4a17      	ldr	r2, [pc, #92]	; (800c318 <xTaskPriorityDisinherit+0x110>)
 800c2bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ca:	f1c3 0207 	rsb	r2, r3, #7
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	409a      	lsls	r2, r3
 800c2da:	4b0f      	ldr	r3, [pc, #60]	; (800c318 <xTaskPriorityDisinherit+0x110>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	4a0d      	ldr	r2, [pc, #52]	; (800c318 <xTaskPriorityDisinherit+0x110>)
 800c2e2:	6013      	str	r3, [r2, #0]
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e8:	4613      	mov	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	4413      	add	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4a08      	ldr	r2, [pc, #32]	; (800c314 <xTaskPriorityDisinherit+0x10c>)
 800c2f2:	441a      	add	r2, r3
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4610      	mov	r0, r2
 800c2fc:	f7fe fad4 	bl	800a8a8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c300:	2301      	movs	r3, #1
 800c302:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c304:	697b      	ldr	r3, [r7, #20]
	}
 800c306:	4618      	mov	r0, r3
 800c308:	3718      	adds	r7, #24
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	20000498 	.word	0x20000498
 800c314:	2000049c 	.word	0x2000049c
 800c318:	200005a0 	.word	0x200005a0

0800c31c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b088      	sub	sp, #32
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c32a:	2301      	movs	r3, #1
 800c32c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 8087 	beq.w	800c444 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10c      	bne.n	800c358 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c342:	b672      	cpsid	i
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	b662      	cpsie	i
 800c352:	60fb      	str	r3, [r7, #12]
}
 800c354:	bf00      	nop
 800c356:	e7fe      	b.n	800c356 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c35c:	683a      	ldr	r2, [r7, #0]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d902      	bls.n	800c368 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	61fb      	str	r3, [r7, #28]
 800c366:	e002      	b.n	800c36e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c36c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c372:	69fa      	ldr	r2, [r7, #28]
 800c374:	429a      	cmp	r2, r3
 800c376:	d065      	beq.n	800c444 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c37c:	697a      	ldr	r2, [r7, #20]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d160      	bne.n	800c444 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c382:	4b32      	ldr	r3, [pc, #200]	; (800c44c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	69ba      	ldr	r2, [r7, #24]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d10c      	bne.n	800c3a6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800c38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c390:	b672      	cpsid	i
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	b662      	cpsie	i
 800c3a0:	60bb      	str	r3, [r7, #8]
}
 800c3a2:	bf00      	nop
 800c3a4:	e7fe      	b.n	800c3a4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3aa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	69fa      	ldr	r2, [r7, #28]
 800c3b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	db04      	blt.n	800c3c4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	f1c3 0207 	rsb	r2, r3, #7
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	6959      	ldr	r1, [r3, #20]
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4a1f      	ldr	r2, [pc, #124]	; (800c450 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c3d4:	4413      	add	r3, r2
 800c3d6:	4299      	cmp	r1, r3
 800c3d8:	d134      	bne.n	800c444 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	3304      	adds	r3, #4
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fe fabf 	bl	800a962 <uxListRemove>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d115      	bne.n	800c416 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ee:	4918      	ldr	r1, [pc, #96]	; (800c450 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	4413      	add	r3, r2
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	440b      	add	r3, r1
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d10a      	bne.n	800c416 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	2201      	movs	r2, #1
 800c406:	fa02 f303 	lsl.w	r3, r2, r3
 800c40a:	43da      	mvns	r2, r3
 800c40c:	4b11      	ldr	r3, [pc, #68]	; (800c454 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4013      	ands	r3, r2
 800c412:	4a10      	ldr	r2, [pc, #64]	; (800c454 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c414:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41a:	2201      	movs	r2, #1
 800c41c:	409a      	lsls	r2, r3
 800c41e:	4b0d      	ldr	r3, [pc, #52]	; (800c454 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4313      	orrs	r3, r2
 800c424:	4a0b      	ldr	r2, [pc, #44]	; (800c454 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c426:	6013      	str	r3, [r2, #0]
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42c:	4613      	mov	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4413      	add	r3, r2
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	4a06      	ldr	r2, [pc, #24]	; (800c450 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c436:	441a      	add	r2, r3
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	3304      	adds	r3, #4
 800c43c:	4619      	mov	r1, r3
 800c43e:	4610      	mov	r0, r2
 800c440:	f7fe fa32 	bl	800a8a8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c444:	bf00      	nop
 800c446:	3720      	adds	r7, #32
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	20000498 	.word	0x20000498
 800c450:	2000049c 	.word	0x2000049c
 800c454:	200005a0 	.word	0x200005a0

0800c458 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c458:	b480      	push	{r7}
 800c45a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c45c:	4b07      	ldr	r3, [pc, #28]	; (800c47c <pvTaskIncrementMutexHeldCount+0x24>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d004      	beq.n	800c46e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c464:	4b05      	ldr	r3, [pc, #20]	; (800c47c <pvTaskIncrementMutexHeldCount+0x24>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c46a:	3201      	adds	r2, #1
 800c46c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c46e:	4b03      	ldr	r3, [pc, #12]	; (800c47c <pvTaskIncrementMutexHeldCount+0x24>)
 800c470:	681b      	ldr	r3, [r3, #0]
	}
 800c472:	4618      	mov	r0, r3
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	20000498 	.word	0x20000498

0800c480 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c48a:	4b29      	ldr	r3, [pc, #164]	; (800c530 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c490:	4b28      	ldr	r3, [pc, #160]	; (800c534 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	3304      	adds	r3, #4
 800c496:	4618      	mov	r0, r3
 800c498:	f7fe fa63 	bl	800a962 <uxListRemove>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10b      	bne.n	800c4ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c4a2:	4b24      	ldr	r3, [pc, #144]	; (800c534 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ae:	43da      	mvns	r2, r3
 800c4b0:	4b21      	ldr	r3, [pc, #132]	; (800c538 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	4a20      	ldr	r2, [pc, #128]	; (800c538 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c4b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c0:	d10a      	bne.n	800c4d8 <prvAddCurrentTaskToDelayedList+0x58>
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d007      	beq.n	800c4d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4c8:	4b1a      	ldr	r3, [pc, #104]	; (800c534 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	481a      	ldr	r0, [pc, #104]	; (800c53c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c4d2:	f7fe f9e9 	bl	800a8a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c4d6:	e026      	b.n	800c526 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c4d8:	68fa      	ldr	r2, [r7, #12]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	4413      	add	r3, r2
 800c4de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c4e0:	4b14      	ldr	r3, [pc, #80]	; (800c534 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d209      	bcs.n	800c504 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4f0:	4b13      	ldr	r3, [pc, #76]	; (800c540 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	4b0f      	ldr	r3, [pc, #60]	; (800c534 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	3304      	adds	r3, #4
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	f7fe f9f7 	bl	800a8f0 <vListInsert>
}
 800c502:	e010      	b.n	800c526 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c504:	4b0f      	ldr	r3, [pc, #60]	; (800c544 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	4b0a      	ldr	r3, [pc, #40]	; (800c534 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	3304      	adds	r3, #4
 800c50e:	4619      	mov	r1, r3
 800c510:	4610      	mov	r0, r2
 800c512:	f7fe f9ed 	bl	800a8f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c516:	4b0c      	ldr	r3, [pc, #48]	; (800c548 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	68ba      	ldr	r2, [r7, #8]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d202      	bcs.n	800c526 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c520:	4a09      	ldr	r2, [pc, #36]	; (800c548 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	6013      	str	r3, [r2, #0]
}
 800c526:	bf00      	nop
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	2000059c 	.word	0x2000059c
 800c534:	20000498 	.word	0x20000498
 800c538:	200005a0 	.word	0x200005a0
 800c53c:	20000584 	.word	0x20000584
 800c540:	20000554 	.word	0x20000554
 800c544:	20000550 	.word	0x20000550
 800c548:	200005b8 	.word	0x200005b8

0800c54c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	3b04      	subs	r3, #4
 800c55c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3b04      	subs	r3, #4
 800c56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	f023 0201 	bic.w	r2, r3, #1
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	3b04      	subs	r3, #4
 800c57a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c57c:	4a0c      	ldr	r2, [pc, #48]	; (800c5b0 <pxPortInitialiseStack+0x64>)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	3b14      	subs	r3, #20
 800c586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	3b04      	subs	r3, #4
 800c592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f06f 0202 	mvn.w	r2, #2
 800c59a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	3b20      	subs	r3, #32
 800c5a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	0800c5b5 	.word	0x0800c5b5

0800c5b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c5be:	4b14      	ldr	r3, [pc, #80]	; (800c610 <prvTaskExitError+0x5c>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5c6:	d00c      	beq.n	800c5e2 <prvTaskExitError+0x2e>
	__asm volatile
 800c5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5cc:	b672      	cpsid	i
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	b662      	cpsie	i
 800c5dc:	60fb      	str	r3, [r7, #12]
}
 800c5de:	bf00      	nop
 800c5e0:	e7fe      	b.n	800c5e0 <prvTaskExitError+0x2c>
	__asm volatile
 800c5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e6:	b672      	cpsid	i
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	b662      	cpsie	i
 800c5f6:	60bb      	str	r3, [r7, #8]
}
 800c5f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c5fa:	bf00      	nop
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d0fc      	beq.n	800c5fc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c602:	bf00      	nop
 800c604:	bf00      	nop
 800c606:	3714      	adds	r7, #20
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr
 800c610:	20000050 	.word	0x20000050
	...

0800c620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c620:	4b07      	ldr	r3, [pc, #28]	; (800c640 <pxCurrentTCBConst2>)
 800c622:	6819      	ldr	r1, [r3, #0]
 800c624:	6808      	ldr	r0, [r1, #0]
 800c626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62a:	f380 8809 	msr	PSP, r0
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f04f 0000 	mov.w	r0, #0
 800c636:	f380 8811 	msr	BASEPRI, r0
 800c63a:	4770      	bx	lr
 800c63c:	f3af 8000 	nop.w

0800c640 <pxCurrentTCBConst2>:
 800c640:	20000498 	.word	0x20000498
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop

0800c648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c648:	4808      	ldr	r0, [pc, #32]	; (800c66c <prvPortStartFirstTask+0x24>)
 800c64a:	6800      	ldr	r0, [r0, #0]
 800c64c:	6800      	ldr	r0, [r0, #0]
 800c64e:	f380 8808 	msr	MSP, r0
 800c652:	f04f 0000 	mov.w	r0, #0
 800c656:	f380 8814 	msr	CONTROL, r0
 800c65a:	b662      	cpsie	i
 800c65c:	b661      	cpsie	f
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	df00      	svc	0
 800c668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c66a:	bf00      	nop
 800c66c:	e000ed08 	.word	0xe000ed08

0800c670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c676:	4b37      	ldr	r3, [pc, #220]	; (800c754 <xPortStartScheduler+0xe4>)
 800c678:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	22ff      	movs	r2, #255	; 0xff
 800c686:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c690:	78fb      	ldrb	r3, [r7, #3]
 800c692:	b2db      	uxtb	r3, r3
 800c694:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c698:	b2da      	uxtb	r2, r3
 800c69a:	4b2f      	ldr	r3, [pc, #188]	; (800c758 <xPortStartScheduler+0xe8>)
 800c69c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c69e:	4b2f      	ldr	r3, [pc, #188]	; (800c75c <xPortStartScheduler+0xec>)
 800c6a0:	2207      	movs	r2, #7
 800c6a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6a4:	e009      	b.n	800c6ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c6a6:	4b2d      	ldr	r3, [pc, #180]	; (800c75c <xPortStartScheduler+0xec>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	3b01      	subs	r3, #1
 800c6ac:	4a2b      	ldr	r2, [pc, #172]	; (800c75c <xPortStartScheduler+0xec>)
 800c6ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c6b0:	78fb      	ldrb	r3, [r7, #3]
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	005b      	lsls	r3, r3, #1
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6ba:	78fb      	ldrb	r3, [r7, #3]
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6c2:	2b80      	cmp	r3, #128	; 0x80
 800c6c4:	d0ef      	beq.n	800c6a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c6c6:	4b25      	ldr	r3, [pc, #148]	; (800c75c <xPortStartScheduler+0xec>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f1c3 0307 	rsb	r3, r3, #7
 800c6ce:	2b04      	cmp	r3, #4
 800c6d0:	d00c      	beq.n	800c6ec <xPortStartScheduler+0x7c>
	__asm volatile
 800c6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d6:	b672      	cpsid	i
 800c6d8:	f383 8811 	msr	BASEPRI, r3
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	b662      	cpsie	i
 800c6e6:	60bb      	str	r3, [r7, #8]
}
 800c6e8:	bf00      	nop
 800c6ea:	e7fe      	b.n	800c6ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c6ec:	4b1b      	ldr	r3, [pc, #108]	; (800c75c <xPortStartScheduler+0xec>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	021b      	lsls	r3, r3, #8
 800c6f2:	4a1a      	ldr	r2, [pc, #104]	; (800c75c <xPortStartScheduler+0xec>)
 800c6f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c6f6:	4b19      	ldr	r3, [pc, #100]	; (800c75c <xPortStartScheduler+0xec>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c6fe:	4a17      	ldr	r2, [pc, #92]	; (800c75c <xPortStartScheduler+0xec>)
 800c700:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	b2da      	uxtb	r2, r3
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c70a:	4b15      	ldr	r3, [pc, #84]	; (800c760 <xPortStartScheduler+0xf0>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a14      	ldr	r2, [pc, #80]	; (800c760 <xPortStartScheduler+0xf0>)
 800c710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c714:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c716:	4b12      	ldr	r3, [pc, #72]	; (800c760 <xPortStartScheduler+0xf0>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a11      	ldr	r2, [pc, #68]	; (800c760 <xPortStartScheduler+0xf0>)
 800c71c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c720:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c722:	f000 f8dd 	bl	800c8e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c726:	4b0f      	ldr	r3, [pc, #60]	; (800c764 <xPortStartScheduler+0xf4>)
 800c728:	2200      	movs	r2, #0
 800c72a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c72c:	f000 f8fc 	bl	800c928 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c730:	4b0d      	ldr	r3, [pc, #52]	; (800c768 <xPortStartScheduler+0xf8>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a0c      	ldr	r2, [pc, #48]	; (800c768 <xPortStartScheduler+0xf8>)
 800c736:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c73a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c73c:	f7ff ff84 	bl	800c648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c740:	f7ff fa56 	bl	800bbf0 <vTaskSwitchContext>
	prvTaskExitError();
 800c744:	f7ff ff36 	bl	800c5b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	e000e400 	.word	0xe000e400
 800c758:	200005c4 	.word	0x200005c4
 800c75c:	200005c8 	.word	0x200005c8
 800c760:	e000ed20 	.word	0xe000ed20
 800c764:	20000050 	.word	0x20000050
 800c768:	e000ef34 	.word	0xe000ef34

0800c76c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
	__asm volatile
 800c772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c776:	b672      	cpsid	i
 800c778:	f383 8811 	msr	BASEPRI, r3
 800c77c:	f3bf 8f6f 	isb	sy
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	b662      	cpsie	i
 800c786:	607b      	str	r3, [r7, #4]
}
 800c788:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c78a:	4b10      	ldr	r3, [pc, #64]	; (800c7cc <vPortEnterCritical+0x60>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3301      	adds	r3, #1
 800c790:	4a0e      	ldr	r2, [pc, #56]	; (800c7cc <vPortEnterCritical+0x60>)
 800c792:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c794:	4b0d      	ldr	r3, [pc, #52]	; (800c7cc <vPortEnterCritical+0x60>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d111      	bne.n	800c7c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c79c:	4b0c      	ldr	r3, [pc, #48]	; (800c7d0 <vPortEnterCritical+0x64>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00c      	beq.n	800c7c0 <vPortEnterCritical+0x54>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	b672      	cpsid	i
 800c7ac:	f383 8811 	msr	BASEPRI, r3
 800c7b0:	f3bf 8f6f 	isb	sy
 800c7b4:	f3bf 8f4f 	dsb	sy
 800c7b8:	b662      	cpsie	i
 800c7ba:	603b      	str	r3, [r7, #0]
}
 800c7bc:	bf00      	nop
 800c7be:	e7fe      	b.n	800c7be <vPortEnterCritical+0x52>
	}
}
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr
 800c7cc:	20000050 	.word	0x20000050
 800c7d0:	e000ed04 	.word	0xe000ed04

0800c7d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c7da:	4b13      	ldr	r3, [pc, #76]	; (800c828 <vPortExitCritical+0x54>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10c      	bne.n	800c7fc <vPortExitCritical+0x28>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e6:	b672      	cpsid	i
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	b662      	cpsie	i
 800c7f6:	607b      	str	r3, [r7, #4]
}
 800c7f8:	bf00      	nop
 800c7fa:	e7fe      	b.n	800c7fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c7fc:	4b0a      	ldr	r3, [pc, #40]	; (800c828 <vPortExitCritical+0x54>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	3b01      	subs	r3, #1
 800c802:	4a09      	ldr	r2, [pc, #36]	; (800c828 <vPortExitCritical+0x54>)
 800c804:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c806:	4b08      	ldr	r3, [pc, #32]	; (800c828 <vPortExitCritical+0x54>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d105      	bne.n	800c81a <vPortExitCritical+0x46>
 800c80e:	2300      	movs	r3, #0
 800c810:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	f383 8811 	msr	BASEPRI, r3
}
 800c818:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c81a:	bf00      	nop
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	20000050 	.word	0x20000050
 800c82c:	00000000 	.word	0x00000000

0800c830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c830:	f3ef 8009 	mrs	r0, PSP
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	4b15      	ldr	r3, [pc, #84]	; (800c890 <pxCurrentTCBConst>)
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	f01e 0f10 	tst.w	lr, #16
 800c840:	bf08      	it	eq
 800c842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84a:	6010      	str	r0, [r2, #0]
 800c84c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c850:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c854:	b672      	cpsid	i
 800c856:	f380 8811 	msr	BASEPRI, r0
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	b662      	cpsie	i
 800c864:	f7ff f9c4 	bl	800bbf0 <vTaskSwitchContext>
 800c868:	f04f 0000 	mov.w	r0, #0
 800c86c:	f380 8811 	msr	BASEPRI, r0
 800c870:	bc09      	pop	{r0, r3}
 800c872:	6819      	ldr	r1, [r3, #0]
 800c874:	6808      	ldr	r0, [r1, #0]
 800c876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87a:	f01e 0f10 	tst.w	lr, #16
 800c87e:	bf08      	it	eq
 800c880:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c884:	f380 8809 	msr	PSP, r0
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop

0800c890 <pxCurrentTCBConst>:
 800c890:	20000498 	.word	0x20000498
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c894:	bf00      	nop
 800c896:	bf00      	nop

0800c898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a2:	b672      	cpsid	i
 800c8a4:	f383 8811 	msr	BASEPRI, r3
 800c8a8:	f3bf 8f6f 	isb	sy
 800c8ac:	f3bf 8f4f 	dsb	sy
 800c8b0:	b662      	cpsie	i
 800c8b2:	607b      	str	r3, [r7, #4]
}
 800c8b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c8b6:	f7ff f8e1 	bl	800ba7c <xTaskIncrementTick>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d003      	beq.n	800c8c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c8c0:	4b06      	ldr	r3, [pc, #24]	; (800c8dc <SysTick_Handler+0x44>)
 800c8c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8c6:	601a      	str	r2, [r3, #0]
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	f383 8811 	msr	BASEPRI, r3
}
 800c8d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c8d4:	bf00      	nop
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	e000ed04 	.word	0xe000ed04

0800c8e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8e4:	4b0b      	ldr	r3, [pc, #44]	; (800c914 <vPortSetupTimerInterrupt+0x34>)
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8ea:	4b0b      	ldr	r3, [pc, #44]	; (800c918 <vPortSetupTimerInterrupt+0x38>)
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8f0:	4b0a      	ldr	r3, [pc, #40]	; (800c91c <vPortSetupTimerInterrupt+0x3c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a0a      	ldr	r2, [pc, #40]	; (800c920 <vPortSetupTimerInterrupt+0x40>)
 800c8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8fa:	099b      	lsrs	r3, r3, #6
 800c8fc:	4a09      	ldr	r2, [pc, #36]	; (800c924 <vPortSetupTimerInterrupt+0x44>)
 800c8fe:	3b01      	subs	r3, #1
 800c900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c902:	4b04      	ldr	r3, [pc, #16]	; (800c914 <vPortSetupTimerInterrupt+0x34>)
 800c904:	2207      	movs	r2, #7
 800c906:	601a      	str	r2, [r3, #0]
}
 800c908:	bf00      	nop
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	e000e010 	.word	0xe000e010
 800c918:	e000e018 	.word	0xe000e018
 800c91c:	20000044 	.word	0x20000044
 800c920:	10624dd3 	.word	0x10624dd3
 800c924:	e000e014 	.word	0xe000e014

0800c928 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c928:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c938 <vPortEnableVFP+0x10>
 800c92c:	6801      	ldr	r1, [r0, #0]
 800c92e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c932:	6001      	str	r1, [r0, #0]
 800c934:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c936:	bf00      	nop
 800c938:	e000ed88 	.word	0xe000ed88

0800c93c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c942:	f3ef 8305 	mrs	r3, IPSR
 800c946:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2b0f      	cmp	r3, #15
 800c94c:	d916      	bls.n	800c97c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c94e:	4a19      	ldr	r2, [pc, #100]	; (800c9b4 <vPortValidateInterruptPriority+0x78>)
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	4413      	add	r3, r2
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c958:	4b17      	ldr	r3, [pc, #92]	; (800c9b8 <vPortValidateInterruptPriority+0x7c>)
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	7afa      	ldrb	r2, [r7, #11]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d20c      	bcs.n	800c97c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c966:	b672      	cpsid	i
 800c968:	f383 8811 	msr	BASEPRI, r3
 800c96c:	f3bf 8f6f 	isb	sy
 800c970:	f3bf 8f4f 	dsb	sy
 800c974:	b662      	cpsie	i
 800c976:	607b      	str	r3, [r7, #4]
}
 800c978:	bf00      	nop
 800c97a:	e7fe      	b.n	800c97a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c97c:	4b0f      	ldr	r3, [pc, #60]	; (800c9bc <vPortValidateInterruptPriority+0x80>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c984:	4b0e      	ldr	r3, [pc, #56]	; (800c9c0 <vPortValidateInterruptPriority+0x84>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d90c      	bls.n	800c9a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c990:	b672      	cpsid	i
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	b662      	cpsie	i
 800c9a0:	603b      	str	r3, [r7, #0]
}
 800c9a2:	bf00      	nop
 800c9a4:	e7fe      	b.n	800c9a4 <vPortValidateInterruptPriority+0x68>
	}
 800c9a6:	bf00      	nop
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	e000e3f0 	.word	0xe000e3f0
 800c9b8:	200005c4 	.word	0x200005c4
 800c9bc:	e000ed0c 	.word	0xe000ed0c
 800c9c0:	200005c8 	.word	0x200005c8

0800c9c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b08a      	sub	sp, #40	; 0x28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c9d0:	f7fe ffa8 	bl	800b924 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c9d4:	4b5e      	ldr	r3, [pc, #376]	; (800cb50 <pvPortMalloc+0x18c>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c9dc:	f000 f920 	bl	800cc20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c9e0:	4b5c      	ldr	r3, [pc, #368]	; (800cb54 <pvPortMalloc+0x190>)
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f040 8092 	bne.w	800cb12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d01f      	beq.n	800ca34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c9f4:	2208      	movs	r2, #8
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f003 0307 	and.w	r3, r3, #7
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d016      	beq.n	800ca34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f023 0307 	bic.w	r3, r3, #7
 800ca0c:	3308      	adds	r3, #8
 800ca0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f003 0307 	and.w	r3, r3, #7
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00c      	beq.n	800ca34 <pvPortMalloc+0x70>
	__asm volatile
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	b672      	cpsid	i
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	b662      	cpsie	i
 800ca2e:	617b      	str	r3, [r7, #20]
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d06b      	beq.n	800cb12 <pvPortMalloc+0x14e>
 800ca3a:	4b47      	ldr	r3, [pc, #284]	; (800cb58 <pvPortMalloc+0x194>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d866      	bhi.n	800cb12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca44:	4b45      	ldr	r3, [pc, #276]	; (800cb5c <pvPortMalloc+0x198>)
 800ca46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca48:	4b44      	ldr	r3, [pc, #272]	; (800cb5c <pvPortMalloc+0x198>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca4e:	e004      	b.n	800ca5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d903      	bls.n	800ca6c <pvPortMalloc+0xa8>
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1f1      	bne.n	800ca50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca6c:	4b38      	ldr	r3, [pc, #224]	; (800cb50 <pvPortMalloc+0x18c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d04d      	beq.n	800cb12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2208      	movs	r2, #8
 800ca7c:	4413      	add	r3, r2
 800ca7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	6a3b      	ldr	r3, [r7, #32]
 800ca86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	1ad2      	subs	r2, r2, r3
 800ca90:	2308      	movs	r3, #8
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d921      	bls.n	800cadc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	f003 0307 	and.w	r3, r3, #7
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00c      	beq.n	800cac4 <pvPortMalloc+0x100>
	__asm volatile
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	b672      	cpsid	i
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	b662      	cpsie	i
 800cabe:	613b      	str	r3, [r7, #16]
}
 800cac0:	bf00      	nop
 800cac2:	e7fe      	b.n	800cac2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	1ad2      	subs	r2, r2, r3
 800cacc:	69bb      	ldr	r3, [r7, #24]
 800cace:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cad6:	69b8      	ldr	r0, [r7, #24]
 800cad8:	f000 f904 	bl	800cce4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cadc:	4b1e      	ldr	r3, [pc, #120]	; (800cb58 <pvPortMalloc+0x194>)
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	4a1c      	ldr	r2, [pc, #112]	; (800cb58 <pvPortMalloc+0x194>)
 800cae8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800caea:	4b1b      	ldr	r3, [pc, #108]	; (800cb58 <pvPortMalloc+0x194>)
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	4b1c      	ldr	r3, [pc, #112]	; (800cb60 <pvPortMalloc+0x19c>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d203      	bcs.n	800cafe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800caf6:	4b18      	ldr	r3, [pc, #96]	; (800cb58 <pvPortMalloc+0x194>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a19      	ldr	r2, [pc, #100]	; (800cb60 <pvPortMalloc+0x19c>)
 800cafc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb00:	685a      	ldr	r2, [r3, #4]
 800cb02:	4b14      	ldr	r3, [pc, #80]	; (800cb54 <pvPortMalloc+0x190>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	431a      	orrs	r2, r3
 800cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0e:	2200      	movs	r2, #0
 800cb10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb12:	f7fe ff15 	bl	800b940 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d101      	bne.n	800cb20 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800cb1c:	f7f3 fd06 	bl	800052c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	f003 0307 	and.w	r3, r3, #7
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00c      	beq.n	800cb44 <pvPortMalloc+0x180>
	__asm volatile
 800cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2e:	b672      	cpsid	i
 800cb30:	f383 8811 	msr	BASEPRI, r3
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	b662      	cpsie	i
 800cb3e:	60fb      	str	r3, [r7, #12]
}
 800cb40:	bf00      	nop
 800cb42:	e7fe      	b.n	800cb42 <pvPortMalloc+0x17e>
	return pvReturn;
 800cb44:	69fb      	ldr	r3, [r7, #28]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3728      	adds	r7, #40	; 0x28
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	200085d4 	.word	0x200085d4
 800cb54:	200085e0 	.word	0x200085e0
 800cb58:	200085d8 	.word	0x200085d8
 800cb5c:	200085cc 	.word	0x200085cc
 800cb60:	200085dc 	.word	0x200085dc

0800cb64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d04c      	beq.n	800cc10 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb76:	2308      	movs	r3, #8
 800cb78:	425b      	negs	r3, r3
 800cb7a:	697a      	ldr	r2, [r7, #20]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	685a      	ldr	r2, [r3, #4]
 800cb88:	4b23      	ldr	r3, [pc, #140]	; (800cc18 <vPortFree+0xb4>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4013      	ands	r3, r2
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d10c      	bne.n	800cbac <vPortFree+0x48>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	b672      	cpsid	i
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	b662      	cpsie	i
 800cba6:	60fb      	str	r3, [r7, #12]
}
 800cba8:	bf00      	nop
 800cbaa:	e7fe      	b.n	800cbaa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00c      	beq.n	800cbce <vPortFree+0x6a>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	b672      	cpsid	i
 800cbba:	f383 8811 	msr	BASEPRI, r3
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f3bf 8f4f 	dsb	sy
 800cbc6:	b662      	cpsie	i
 800cbc8:	60bb      	str	r3, [r7, #8]
}
 800cbca:	bf00      	nop
 800cbcc:	e7fe      	b.n	800cbcc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	685a      	ldr	r2, [r3, #4]
 800cbd2:	4b11      	ldr	r3, [pc, #68]	; (800cc18 <vPortFree+0xb4>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4013      	ands	r3, r2
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d019      	beq.n	800cc10 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d115      	bne.n	800cc10 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	685a      	ldr	r2, [r3, #4]
 800cbe8:	4b0b      	ldr	r3, [pc, #44]	; (800cc18 <vPortFree+0xb4>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	43db      	mvns	r3, r3
 800cbee:	401a      	ands	r2, r3
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cbf4:	f7fe fe96 	bl	800b924 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	4b07      	ldr	r3, [pc, #28]	; (800cc1c <vPortFree+0xb8>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4413      	add	r3, r2
 800cc02:	4a06      	ldr	r2, [pc, #24]	; (800cc1c <vPortFree+0xb8>)
 800cc04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc06:	6938      	ldr	r0, [r7, #16]
 800cc08:	f000 f86c 	bl	800cce4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cc0c:	f7fe fe98 	bl	800b940 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc10:	bf00      	nop
 800cc12:	3718      	adds	r7, #24
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	200085e0 	.word	0x200085e0
 800cc1c:	200085d8 	.word	0x200085d8

0800cc20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc2c:	4b27      	ldr	r3, [pc, #156]	; (800cccc <prvHeapInit+0xac>)
 800cc2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f003 0307 	and.w	r3, r3, #7
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00c      	beq.n	800cc54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3307      	adds	r3, #7
 800cc3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f023 0307 	bic.w	r3, r3, #7
 800cc46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc48:	68ba      	ldr	r2, [r7, #8]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	1ad3      	subs	r3, r2, r3
 800cc4e:	4a1f      	ldr	r2, [pc, #124]	; (800cccc <prvHeapInit+0xac>)
 800cc50:	4413      	add	r3, r2
 800cc52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc58:	4a1d      	ldr	r2, [pc, #116]	; (800ccd0 <prvHeapInit+0xb0>)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc5e:	4b1c      	ldr	r3, [pc, #112]	; (800ccd0 <prvHeapInit+0xb0>)
 800cc60:	2200      	movs	r2, #0
 800cc62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	4413      	add	r3, r2
 800cc6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc6c:	2208      	movs	r2, #8
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	1a9b      	subs	r3, r3, r2
 800cc72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f023 0307 	bic.w	r3, r3, #7
 800cc7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	4a15      	ldr	r2, [pc, #84]	; (800ccd4 <prvHeapInit+0xb4>)
 800cc80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc82:	4b14      	ldr	r3, [pc, #80]	; (800ccd4 <prvHeapInit+0xb4>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2200      	movs	r2, #0
 800cc88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc8a:	4b12      	ldr	r3, [pc, #72]	; (800ccd4 <prvHeapInit+0xb4>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	1ad2      	subs	r2, r2, r3
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cca0:	4b0c      	ldr	r3, [pc, #48]	; (800ccd4 <prvHeapInit+0xb4>)
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	4a0a      	ldr	r2, [pc, #40]	; (800ccd8 <prvHeapInit+0xb8>)
 800ccae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	4a09      	ldr	r2, [pc, #36]	; (800ccdc <prvHeapInit+0xbc>)
 800ccb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ccb8:	4b09      	ldr	r3, [pc, #36]	; (800cce0 <prvHeapInit+0xc0>)
 800ccba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ccbe:	601a      	str	r2, [r3, #0]
}
 800ccc0:	bf00      	nop
 800ccc2:	3714      	adds	r7, #20
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr
 800cccc:	200005cc 	.word	0x200005cc
 800ccd0:	200085cc 	.word	0x200085cc
 800ccd4:	200085d4 	.word	0x200085d4
 800ccd8:	200085dc 	.word	0x200085dc
 800ccdc:	200085d8 	.word	0x200085d8
 800cce0:	200085e0 	.word	0x200085e0

0800cce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ccec:	4b28      	ldr	r3, [pc, #160]	; (800cd90 <prvInsertBlockIntoFreeList+0xac>)
 800ccee:	60fb      	str	r3, [r7, #12]
 800ccf0:	e002      	b.n	800ccf8 <prvInsertBlockIntoFreeList+0x14>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	60fb      	str	r3, [r7, #12]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d8f7      	bhi.n	800ccf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	68ba      	ldr	r2, [r7, #8]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d108      	bne.n	800cd26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	441a      	add	r2, r3
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	68ba      	ldr	r2, [r7, #8]
 800cd30:	441a      	add	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d118      	bne.n	800cd6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	4b15      	ldr	r3, [pc, #84]	; (800cd94 <prvInsertBlockIntoFreeList+0xb0>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d00d      	beq.n	800cd62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	685a      	ldr	r2, [r3, #4]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	441a      	add	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	601a      	str	r2, [r3, #0]
 800cd60:	e008      	b.n	800cd74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd62:	4b0c      	ldr	r3, [pc, #48]	; (800cd94 <prvInsertBlockIntoFreeList+0xb0>)
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	601a      	str	r2, [r3, #0]
 800cd6a:	e003      	b.n	800cd74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d002      	beq.n	800cd82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd82:	bf00      	nop
 800cd84:	3714      	adds	r7, #20
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	200085cc 	.word	0x200085cc
 800cd94:	200085d4 	.word	0x200085d4

0800cd98 <__libc_init_array>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	4d0d      	ldr	r5, [pc, #52]	; (800cdd0 <__libc_init_array+0x38>)
 800cd9c:	4c0d      	ldr	r4, [pc, #52]	; (800cdd4 <__libc_init_array+0x3c>)
 800cd9e:	1b64      	subs	r4, r4, r5
 800cda0:	10a4      	asrs	r4, r4, #2
 800cda2:	2600      	movs	r6, #0
 800cda4:	42a6      	cmp	r6, r4
 800cda6:	d109      	bne.n	800cdbc <__libc_init_array+0x24>
 800cda8:	4d0b      	ldr	r5, [pc, #44]	; (800cdd8 <__libc_init_array+0x40>)
 800cdaa:	4c0c      	ldr	r4, [pc, #48]	; (800cddc <__libc_init_array+0x44>)
 800cdac:	f000 f82e 	bl	800ce0c <_init>
 800cdb0:	1b64      	subs	r4, r4, r5
 800cdb2:	10a4      	asrs	r4, r4, #2
 800cdb4:	2600      	movs	r6, #0
 800cdb6:	42a6      	cmp	r6, r4
 800cdb8:	d105      	bne.n	800cdc6 <__libc_init_array+0x2e>
 800cdba:	bd70      	pop	{r4, r5, r6, pc}
 800cdbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdc0:	4798      	blx	r3
 800cdc2:	3601      	adds	r6, #1
 800cdc4:	e7ee      	b.n	800cda4 <__libc_init_array+0xc>
 800cdc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdca:	4798      	blx	r3
 800cdcc:	3601      	adds	r6, #1
 800cdce:	e7f2      	b.n	800cdb6 <__libc_init_array+0x1e>
 800cdd0:	0800ee54 	.word	0x0800ee54
 800cdd4:	0800ee54 	.word	0x0800ee54
 800cdd8:	0800ee54 	.word	0x0800ee54
 800cddc:	0800ee58 	.word	0x0800ee58

0800cde0 <memcpy>:
 800cde0:	440a      	add	r2, r1
 800cde2:	4291      	cmp	r1, r2
 800cde4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cde8:	d100      	bne.n	800cdec <memcpy+0xc>
 800cdea:	4770      	bx	lr
 800cdec:	b510      	push	{r4, lr}
 800cdee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdf6:	4291      	cmp	r1, r2
 800cdf8:	d1f9      	bne.n	800cdee <memcpy+0xe>
 800cdfa:	bd10      	pop	{r4, pc}

0800cdfc <memset>:
 800cdfc:	4402      	add	r2, r0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d100      	bne.n	800ce06 <memset+0xa>
 800ce04:	4770      	bx	lr
 800ce06:	f803 1b01 	strb.w	r1, [r3], #1
 800ce0a:	e7f9      	b.n	800ce00 <memset+0x4>

0800ce0c <_init>:
 800ce0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0e:	bf00      	nop
 800ce10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce12:	bc08      	pop	{r3}
 800ce14:	469e      	mov	lr, r3
 800ce16:	4770      	bx	lr

0800ce18 <_fini>:
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1a:	bf00      	nop
 800ce1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce1e:	bc08      	pop	{r3}
 800ce20:	469e      	mov	lr, r3
 800ce22:	4770      	bx	lr

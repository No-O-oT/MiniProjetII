
prog_Mini-projSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dab8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002008  0800dc88  0800dc88  0001dc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc90  0800fc90  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc90  0800fc90  0001fc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc98  0800fc98  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc98  0800fc98  0001fc98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc9c  0800fc9c  0001fc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800fca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c7c  20000058  0800fcf8  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008cd4  0800fcf8  00028cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bf09  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000053b2  00000000  00000000  0004bf91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025d0  00000000  00000000  00051348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002348  00000000  00000000  00053918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002deda  00000000  00000000  00055c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f00e  00000000  00000000  00083b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114798  00000000  00000000  000a2b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b72e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a02c  00000000  00000000  001b735c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000058 	.word	0x20000058
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dc70 	.word	0x0800dc70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000005c 	.word	0x2000005c
 800020c:	0800dc70 	.word	0x0800dc70

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
	...

08000544 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <vApplicationGetIdleTaskMemory+0x2c>)
 8000554:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <vApplicationGetIdleTaskMemory+0x30>)
 800055a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000074 	.word	0x20000074
 8000574:	200000cc 	.word	0x200000cc

08000578 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000582:	20c8      	movs	r0, #200	; 0xc8
 8000584:	f001 ffa4 	bl	80024d0 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000588:	f000 f9b4 	bl	80008f4 <ft5336_I2C_InitializeIfRequired>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	4603      	mov	r3, r0
 80005b2:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005bc:	2300      	movs	r3, #0
 80005be:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 f998 	bl	80008f4 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	e010      	b.n	80005ec <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	21a8      	movs	r1, #168	; 0xa8
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 ff5f 	bl	8002494 <TS_IO_Read>
 80005d6:	4603      	mov	r3, r0
 80005d8:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80005da:	7b7b      	ldrb	r3, [r7, #13]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b51      	cmp	r3, #81	; 0x51
 80005e0:	d101      	bne.n	80005e6 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	3301      	adds	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d802      	bhi.n	80005f8 <ft5336_ReadID+0x4e>
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0e8      	beq.n	80005ca <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005f8:	7b7b      	ldrb	r3, [r7, #13]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	b29b      	uxth	r3, r3
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f97e 	bl	8000914 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f932 	bl	8000884 <ft5336_TS_DisableIT>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2102      	movs	r1, #2
 800063c:	4618      	mov	r0, r3
 800063e:	f001 ff29 	bl	8002494 <TS_IO_Read>
 8000642:	4603      	mov	r3, r0
 8000644:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 030f 	and.w	r3, r3, #15
 800064e:	b2db      	uxtb	r3, r3
 8000650:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b05      	cmp	r3, #5
 8000658:	d901      	bls.n	800065e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <ft5336_TS_DetectTouch+0x50>)
 8000664:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <ft5336_TS_DetectTouch+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	b2db      	uxtb	r3, r3
}
 8000670:	4618      	mov	r0, r3
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200002cc 	.word	0x200002cc

0800067c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800069e:	4b6d      	ldr	r3, [pc, #436]	; (8000854 <ft5336_TS_GetXY+0x1d8>)
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	4b6c      	ldr	r3, [pc, #432]	; (8000854 <ft5336_TS_GetXY+0x1d8>)
 80006a4:	785b      	ldrb	r3, [r3, #1]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	f080 80cf 	bcs.w	800084a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006ac:	4b69      	ldr	r3, [pc, #420]	; (8000854 <ft5336_TS_GetXY+0x1d8>)
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	2b09      	cmp	r3, #9
 80006b2:	d871      	bhi.n	8000798 <ft5336_TS_GetXY+0x11c>
 80006b4:	a201      	add	r2, pc, #4	; (adr r2, 80006bc <ft5336_TS_GetXY+0x40>)
 80006b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ba:	bf00      	nop
 80006bc:	080006e5 	.word	0x080006e5
 80006c0:	080006f7 	.word	0x080006f7
 80006c4:	08000709 	.word	0x08000709
 80006c8:	0800071b 	.word	0x0800071b
 80006cc:	0800072d 	.word	0x0800072d
 80006d0:	0800073f 	.word	0x0800073f
 80006d4:	08000751 	.word	0x08000751
 80006d8:	08000763 	.word	0x08000763
 80006dc:	08000775 	.word	0x08000775
 80006e0:	08000787 	.word	0x08000787
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006e4:	2304      	movs	r3, #4
 80006e6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006e8:	2303      	movs	r3, #3
 80006ea:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006ec:	2306      	movs	r3, #6
 80006ee:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006f0:	2305      	movs	r3, #5
 80006f2:	753b      	strb	r3, [r7, #20]
      break;
 80006f4:	e051      	b.n	800079a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006f6:	230a      	movs	r3, #10
 80006f8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006fa:	2309      	movs	r3, #9
 80006fc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006fe:	230c      	movs	r3, #12
 8000700:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000702:	230b      	movs	r3, #11
 8000704:	753b      	strb	r3, [r7, #20]
      break;
 8000706:	e048      	b.n	800079a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000708:	2310      	movs	r3, #16
 800070a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800070c:	230f      	movs	r3, #15
 800070e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000710:	2312      	movs	r3, #18
 8000712:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000714:	2311      	movs	r3, #17
 8000716:	753b      	strb	r3, [r7, #20]
      break;
 8000718:	e03f      	b.n	800079a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800071a:	2316      	movs	r3, #22
 800071c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800071e:	2315      	movs	r3, #21
 8000720:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000722:	2318      	movs	r3, #24
 8000724:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000726:	2317      	movs	r3, #23
 8000728:	753b      	strb	r3, [r7, #20]
      break;
 800072a:	e036      	b.n	800079a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800072c:	231c      	movs	r3, #28
 800072e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000730:	231b      	movs	r3, #27
 8000732:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000734:	231e      	movs	r3, #30
 8000736:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000738:	231d      	movs	r3, #29
 800073a:	753b      	strb	r3, [r7, #20]
      break;
 800073c:	e02d      	b.n	800079a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800073e:	2322      	movs	r3, #34	; 0x22
 8000740:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000742:	2321      	movs	r3, #33	; 0x21
 8000744:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000746:	2324      	movs	r3, #36	; 0x24
 8000748:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800074a:	2323      	movs	r3, #35	; 0x23
 800074c:	753b      	strb	r3, [r7, #20]
      break;
 800074e:	e024      	b.n	800079a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000750:	2328      	movs	r3, #40	; 0x28
 8000752:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000754:	2327      	movs	r3, #39	; 0x27
 8000756:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000758:	232a      	movs	r3, #42	; 0x2a
 800075a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 800075c:	2329      	movs	r3, #41	; 0x29
 800075e:	753b      	strb	r3, [r7, #20]
      break;
 8000760:	e01b      	b.n	800079a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000762:	232e      	movs	r3, #46	; 0x2e
 8000764:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000766:	232d      	movs	r3, #45	; 0x2d
 8000768:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800076a:	2330      	movs	r3, #48	; 0x30
 800076c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800076e:	232f      	movs	r3, #47	; 0x2f
 8000770:	753b      	strb	r3, [r7, #20]
      break;
 8000772:	e012      	b.n	800079a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000774:	2334      	movs	r3, #52	; 0x34
 8000776:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000778:	2333      	movs	r3, #51	; 0x33
 800077a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800077c:	2336      	movs	r3, #54	; 0x36
 800077e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000780:	2335      	movs	r3, #53	; 0x35
 8000782:	753b      	strb	r3, [r7, #20]
      break;
 8000784:	e009      	b.n	800079a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000786:	233a      	movs	r3, #58	; 0x3a
 8000788:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800078a:	2339      	movs	r3, #57	; 0x39
 800078c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800078e:	233c      	movs	r3, #60	; 0x3c
 8000790:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000792:	233b      	movs	r3, #59	; 0x3b
 8000794:	753b      	strb	r3, [r7, #20]
      break;
 8000796:	e000      	b.n	800079a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000798:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800079a:	89fb      	ldrh	r3, [r7, #14]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	7dfa      	ldrb	r2, [r7, #23]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fe76 	bl	8002494 <TS_IO_Read>
 80007a8:	4603      	mov	r3, r0
 80007aa:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007ac:	7cfb      	ldrb	r3, [r7, #19]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b29      	ldr	r3, [pc, #164]	; (8000858 <ft5336_TS_GetXY+0x1dc>)
 80007b4:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007b6:	89fb      	ldrh	r3, [r7, #14]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	7dba      	ldrb	r2, [r7, #22]
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fe68 	bl	8002494 <TS_IO_Read>
 80007c4:	4603      	mov	r3, r0
 80007c6:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007c8:	7cfb      	ldrb	r3, [r7, #19]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b20      	ldr	r3, [pc, #128]	; (8000858 <ft5336_TS_GetXY+0x1dc>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	b21b      	sxth	r3, r3
 80007da:	4313      	orrs	r3, r2
 80007dc:	b21b      	sxth	r3, r3
 80007de:	b29a      	uxth	r2, r3
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <ft5336_TS_GetXY+0x1dc>)
 80007e2:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <ft5336_TS_GetXY+0x1dc>)
 80007e6:	881a      	ldrh	r2, [r3, #0]
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007ec:	89fb      	ldrh	r3, [r7, #14]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	7d7a      	ldrb	r2, [r7, #21]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fe4d 	bl	8002494 <TS_IO_Read>
 80007fa:	4603      	mov	r3, r0
 80007fc:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007fe:	7cfb      	ldrb	r3, [r7, #19]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <ft5336_TS_GetXY+0x1dc>)
 8000806:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000808:	89fb      	ldrh	r3, [r7, #14]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	7d3a      	ldrb	r2, [r7, #20]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fe3f 	bl	8002494 <TS_IO_Read>
 8000816:	4603      	mov	r3, r0
 8000818:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800081a:	7cfb      	ldrb	r3, [r7, #19]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000824:	b21a      	sxth	r2, r3
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <ft5336_TS_GetXY+0x1dc>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21b      	sxth	r3, r3
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <ft5336_TS_GetXY+0x1dc>)
 8000834:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <ft5336_TS_GetXY+0x1dc>)
 8000838:	881a      	ldrh	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <ft5336_TS_GetXY+0x1d8>)
 8000840:	789b      	ldrb	r3, [r3, #2]
 8000842:	3301      	adds	r3, #1
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b03      	ldr	r3, [pc, #12]	; (8000854 <ft5336_TS_GetXY+0x1d8>)
 8000848:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200002cc 	.word	0x200002cc
 8000858:	200002d0 	.word	0x200002d0

0800085c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800086a:	2301      	movs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	7bfa      	ldrb	r2, [r7, #15]
 8000874:	21a4      	movs	r1, #164	; 0xa4
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fdf2 	bl	8002460 <TS_IO_Write>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000892:	2300      	movs	r3, #0
 8000894:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	7bfa      	ldrb	r2, [r7, #15]
 800089c:	21a4      	movs	r1, #164	; 0xa4
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fdde 	bl	8002460 <TS_IO_Write>
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	200002cc 	.word	0x200002cc

080008f4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80008f8:	f7ff fff0 	bl	80008dc <ft5336_Get_I2C_InitializedStatus>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d104      	bne.n	800090c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000902:	f001 fda3 	bl	800244c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000906:	4b02      	ldr	r3, [pc, #8]	; (8000910 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
  }
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200002cc 	.word	0x200002cc

08000914 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b5b0      	push	{r4, r5, r7, lr}
 8000932:	b0a2      	sub	sp, #136	; 0x88
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f003 ffac 	bl	8004892 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f8e7 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 ff59 	bl	80017f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000942:	f000 fa93 	bl	8000e6c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000946:	f000 fad1 	bl	8000eec <MX_I2C3_Init>
  MX_LTDC_Init();
 800094a:	f000 fb0f 	bl	8000f6c <MX_LTDC_Init>
  MX_RTC_Init();
 800094e:	f000 fb8f 	bl	8001070 <MX_RTC_Init>
  MX_SPI2_Init();
 8000952:	f000 fc33 	bl	80011bc <MX_SPI2_Init>
  MX_TIM1_Init();
 8000956:	f000 fc6f 	bl	8001238 <MX_TIM1_Init>
  MX_TIM2_Init();
 800095a:	f000 fcc1 	bl	80012e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800095e:	f000 fd0d 	bl	800137c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000962:	f000 fd71 	bl	8001448 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000966:	f000 fdbd 	bl	80014e4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800096a:	f000 fe95 	bl	8001698 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800096e:	f000 fec3 	bl	80016f8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000972:	f000 f97b 	bl	8000c6c <MX_ADC1_Init>
  MX_DAC_Init();
 8000976:	f000 fa1d 	bl	8000db4 <MX_DAC_Init>
  MX_UART7_Init();
 800097a:	f000 fe5d 	bl	8001638 <MX_UART7_Init>
  MX_FMC_Init();
 800097e:	f000 feeb 	bl	8001758 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000982:	f000 fa41 	bl	8000e08 <MX_DMA2D_Init>
  MX_ADC3_Init();
 8000986:	f000 f9c3 	bl	8000d10 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 800098a:	f001 fdad 	bl	80024e8 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800098e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000992:	2000      	movs	r0, #0
 8000994:	f001 fe40 	bl	8002618 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000998:	f001 fe16 	bl	80025c8 <BSP_LCD_GetXSize>
 800099c:	4604      	mov	r4, r0
 800099e:	f001 fe27 	bl	80025f0 <BSP_LCD_GetYSize>
 80009a2:	4603      	mov	r3, r0
 80009a4:	fb03 f304 	mul.w	r3, r3, r4
	BSP_LCD_LayerDefaultInit(1,
 80009a8:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4619      	mov	r1, r3
 80009b0:	2001      	movs	r0, #1
 80009b2:	f001 fe31 	bl	8002618 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80009b6:	f002 fca9 	bl	800330c <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f001 fe8c 	bl	80026d8 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80009c0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009c4:	f001 fefa 	bl	80027bc <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 80009c8:	4842      	ldr	r0, [pc, #264]	; (8000ad4 <main+0x1a4>)
 80009ca:	f001 fec7 	bl	800275c <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80009ce:	f04f 30ff 	mov.w	r0, #4294967295
 80009d2:	f001 fe91 	bl	80026f8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80009d6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009da:	f001 fea5 	bl	8002728 <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80009de:	f001 fdf3 	bl	80025c8 <BSP_LCD_GetXSize>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29c      	uxth	r4, r3
 80009e6:	f001 fe03 	bl	80025f0 <BSP_LCD_GetYSize>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	4619      	mov	r1, r3
 80009f0:	4620      	mov	r0, r4
 80009f2:	f003 f919 	bl	8003c28 <BSP_TS_Init>
	HAL_UART_Receive_IT(&huart7,rxbuffer,6);
 80009f6:	2206      	movs	r2, #6
 80009f8:	4937      	ldr	r1, [pc, #220]	; (8000ad8 <main+0x1a8>)
 80009fa:	4838      	ldr	r0, [pc, #224]	; (8000adc <main+0x1ac>)
 80009fc:	f009 fd3c 	bl	800a478 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex_LCD */
  osMutexDef(myMutex_LCD);
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  myMutex_LCDHandle = osMutexCreate(osMutex(myMutex_LCD));
 8000a0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00a fe20 	bl	800b656 <osMutexCreate>
 8000a16:	4602      	mov	r2, r0
 8000a18:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <main+0x1b0>)
 8000a1a:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 1, uint8_t);
 8000a1c:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <main+0x1b4>)
 8000a1e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 8000a28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f00a fe29 	bl	800b686 <osMessageCreate>
 8000a34:	4602      	mov	r2, r0
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <main+0x1b8>)
 8000a38:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000a3a:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <main+0x1bc>)
 8000a3c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a40:	461d      	mov	r5, r3
 8000a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00a fd9e 	bl	800b596 <osThreadCreate>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <main+0x1c0>)
 8000a5e:	601a      	str	r2, [r3, #0]

  /* definition and creation of RRacket */
  osThreadDef(RRacket, StartRRacket, osPriorityAboveNormal, 0, 1024);
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <main+0x1c4>)
 8000a62:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a66:	461d      	mov	r5, r3
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RRacketHandle = osThreadCreate(osThread(RRacket), NULL);
 8000a74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f00a fd8b 	bl	800b596 <osThreadCreate>
 8000a80:	4602      	mov	r2, r0
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <main+0x1c8>)
 8000a84:	601a      	str	r2, [r3, #0]

  /* definition and creation of BallDisplay */
  osThreadDef(BallDisplay, StartBall, osPriorityHigh, 0, 1024);
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <main+0x1cc>)
 8000a88:	f107 041c 	add.w	r4, r7, #28
 8000a8c:	461d      	mov	r5, r3
 8000a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BallDisplayHandle = osThreadCreate(osThread(BallDisplay), NULL);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f00a fd78 	bl	800b596 <osThreadCreate>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <main+0x1d0>)
 8000aaa:	601a      	str	r2, [r3, #0]

  /* definition and creation of BgChanger */
  osThreadDef(BgChanger, StartBgChanger, osPriorityBelowNormal, 0, 1024);
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <main+0x1d4>)
 8000aae:	463c      	mov	r4, r7
 8000ab0:	461d      	mov	r5, r3
 8000ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BgChangerHandle = osThreadCreate(osThread(BgChanger), NULL);
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f00a fd67 	bl	800b596 <osThreadCreate>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <main+0x1d8>)
 8000acc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ace:	f00a fd5b 	bl	800b588 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000ad2:	e7fe      	b.n	8000ad2 <main+0x1a2>
 8000ad4:	2000003c 	.word	0x2000003c
 8000ad8:	20008ba0 	.word	0x20008ba0
 8000adc:	2000869c 	.word	0x2000869c
 8000ae0:	20008b9c 	.word	0x20008b9c
 8000ae4:	0800dc88 	.word	0x0800dc88
 8000ae8:	20008bb0 	.word	0x20008bb0
 8000aec:	0800dca4 	.word	0x0800dca4
 8000af0:	200085e8 	.word	0x200085e8
 8000af4:	0800dcc8 	.word	0x0800dcc8
 8000af8:	20008a18 	.word	0x20008a18
 8000afc:	0800dcf0 	.word	0x0800dcf0
 8000b00:	20008bac 	.word	0x20008bac
 8000b04:	0800dd18 	.word	0x0800dd18
 8000b08:	20008960 	.word	0x20008960

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0b4      	sub	sp, #208	; 0xd0
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b16:	2230      	movs	r2, #48	; 0x30
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00d f89f 	bl	800dc5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	2284      	movs	r2, #132	; 0x84
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00d f890 	bl	800dc5e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b3e:	f006 fcf9 	bl	8007534 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b47      	ldr	r3, [pc, #284]	; (8000c60 <SystemClock_Config+0x154>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a46      	ldr	r2, [pc, #280]	; (8000c60 <SystemClock_Config+0x154>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b44      	ldr	r3, [pc, #272]	; (8000c60 <SystemClock_Config+0x154>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b5a:	4b42      	ldr	r3, [pc, #264]	; (8000c64 <SystemClock_Config+0x158>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a41      	ldr	r2, [pc, #260]	; (8000c64 <SystemClock_Config+0x158>)
 8000b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <SystemClock_Config+0x158>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b72:	2309      	movs	r3, #9
 8000b74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b80:	2301      	movs	r3, #1
 8000b82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b94:	2319      	movs	r3, #25
 8000b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000b9a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ba8:	2309      	movs	r3, #9
 8000baa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f006 fd1e 	bl	80075f4 <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bbe:	f001 faeb 	bl	8002198 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bc2:	f006 fcc7 	bl	8007554 <HAL_PWREx_EnableOverDrive>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bcc:	f001 fae4 	bl	8002198 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000be2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bf2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bf6:	2106      	movs	r1, #6
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f006 ff9f 	bl	8007b3c <HAL_RCC_ClockConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000c04:	f001 fac8 	bl	8002198 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <SystemClock_Config+0x15c>)
 8000c0a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c0c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c10:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000c12:	2305      	movs	r3, #5
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c32:	2300      	movs	r3, #0
 8000c34:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	4618      	mov	r0, r3
 8000c48:	f007 f97c 	bl	8007f44 <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000c52:	f001 faa1 	bl	8002198 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	37d0      	adds	r7, #208	; 0xd0
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000
 8000c68:	00015868 	.word	0x00015868

08000c6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000c80:	4a21      	ldr	r2, [pc, #132]	; (8000d08 <MX_ADC1_Init+0x9c>)
 8000c82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000c86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <MX_ADC1_Init+0xa0>)
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000cce:	f003 fe2f 	bl	8004930 <HAL_ADC_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cd8:	f001 fa5e 	bl	8002198 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce8:	463b      	mov	r3, r7
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_ADC1_Init+0x98>)
 8000cee:	f003 ffb5 	bl	8004c5c <HAL_ADC_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cf8:	f001 fa4e 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200088d0 	.word	0x200088d0
 8000d08:	40012000 	.word	0x40012000
 8000d0c:	0f000001 	.word	0x0f000001

08000d10 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d16:	463b      	mov	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d24:	4a21      	ldr	r2, [pc, #132]	; (8000dac <MX_ADC3_Init+0x9c>)
 8000d26:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d2e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <MX_ADC3_Init+0xa0>)
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d72:	f003 fddd 	bl	8004930 <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f001 fa0c 	bl	8002198 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d80:	2308      	movs	r3, #8
 8000d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_ADC3_Init+0x98>)
 8000d92:	f003 ff63 	bl	8004c5c <HAL_ADC_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000d9c:	f001 f9fc 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20008918 	.word	0x20008918
 8000dac:	40012200 	.word	0x40012200
 8000db0:	0f000001 	.word	0x0f000001

08000db4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_DAC_Init+0x4c>)
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <MX_DAC_Init+0x50>)
 8000dc6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_DAC_Init+0x4c>)
 8000dca:	f004 fa6d 	bl	80052a8 <HAL_DAC_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000dd4:	f001 f9e0 	bl	8002198 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <MX_DAC_Init+0x4c>)
 8000de8:	f004 fad4 	bl	8005394 <HAL_DAC_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000df2:	f001 f9d1 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200089e4 	.word	0x200089e4
 8000e04:	40007400 	.word	0x40007400

08000e08 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_DMA2D_Init+0x5c>)
 8000e0e:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <MX_DMA2D_Init+0x60>)
 8000e10:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_DMA2D_Init+0x5c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_DMA2D_Init+0x5c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_DMA2D_Init+0x5c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_DMA2D_Init+0x5c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_DMA2D_Init+0x5c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_DMA2D_Init+0x5c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_DMA2D_Init+0x5c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <MX_DMA2D_Init+0x5c>)
 8000e3e:	f004 fcdf 	bl	8005800 <HAL_DMA2D_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000e48:	f001 f9a6 	bl	8002198 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_DMA2D_Init+0x5c>)
 8000e50:	f004 fe34 	bl	8005abc <HAL_DMA2D_ConfigLayer>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000e5a:	f001 f99d 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20008ae8 	.word	0x20008ae8
 8000e68:	4002b000 	.word	0x4002b000

08000e6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <MX_I2C1_Init+0x78>)
 8000e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <MX_I2C1_Init+0x7c>)
 8000e7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000ea8:	f005 fa1c 	bl	80062e4 <HAL_I2C_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eb2:	f001 f971 	bl	8002198 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000eba:	f005 ff2b 	bl	8006d14 <HAL_I2CEx_ConfigAnalogFilter>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ec4:	f001 f968 	bl	8002198 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000ecc:	f005 ff6d 	bl	8006daa <HAL_I2CEx_ConfigDigitalFilter>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ed6:	f001 f95f 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000875c 	.word	0x2000875c
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	00c0eaff 	.word	0x00c0eaff

08000eec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_I2C3_Init+0x74>)
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <MX_I2C3_Init+0x78>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <MX_I2C3_Init+0x74>)
 8000ef8:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <MX_I2C3_Init+0x7c>)
 8000efa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_I2C3_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <MX_I2C3_Init+0x74>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_I2C3_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_I2C3_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_I2C3_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_I2C3_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_I2C3_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f26:	480e      	ldr	r0, [pc, #56]	; (8000f60 <MX_I2C3_Init+0x74>)
 8000f28:	f005 f9dc 	bl	80062e4 <HAL_I2C_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f32:	f001 f931 	bl	8002198 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f36:	2100      	movs	r1, #0
 8000f38:	4809      	ldr	r0, [pc, #36]	; (8000f60 <MX_I2C3_Init+0x74>)
 8000f3a:	f005 feeb 	bl	8006d14 <HAL_I2CEx_ConfigAnalogFilter>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f44:	f001 f928 	bl	8002198 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_I2C3_Init+0x74>)
 8000f4c:	f005 ff2d 	bl	8006daa <HAL_I2CEx_ConfigDigitalFilter>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f56:	f001 f91f 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200085ec 	.word	0x200085ec
 8000f64:	40005c00 	.word	0x40005c00
 8000f68:	00c0eaff 	.word	0x00c0eaff

08000f6c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2234      	movs	r2, #52	; 0x34
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00c fe70 	bl	800dc5e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f7e:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000f80:	4a3a      	ldr	r2, [pc, #232]	; (800106c <MX_LTDC_Init+0x100>)
 8000f82:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f84:	4b38      	ldr	r3, [pc, #224]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f90:	4b35      	ldr	r3, [pc, #212]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f96:	4b34      	ldr	r3, [pc, #208]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000f9c:	4b32      	ldr	r3, [pc, #200]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000f9e:	2228      	movs	r2, #40	; 0x28
 8000fa0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000fa4:	2209      	movs	r2, #9
 8000fa6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000fa8:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000faa:	2235      	movs	r2, #53	; 0x35
 8000fac:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000fb0:	220b      	movs	r2, #11
 8000fb2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000fb6:	f240 2215 	movw	r2, #533	; 0x215
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000fbc:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000fbe:	f240 121b 	movw	r2, #283	; 0x11b
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000fc6:	f240 2235 	movw	r2, #565	; 0x235
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000fce:	f240 121d 	movw	r2, #285	; 0x11d
 8000fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fec:	481e      	ldr	r0, [pc, #120]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000fee:	f005 ff29 	bl	8006e44 <HAL_LTDC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ff8:	f001 f8ce 	bl	8002198 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001000:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001004:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800100a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800100e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001010:	2302      	movs	r3, #2
 8001012:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001014:	23ff      	movs	r3, #255	; 0xff
 8001016:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800101c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001020:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001022:	2307      	movs	r3, #7
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001026:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800102c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001032:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_LTDC_Init+0xfc>)
 8001052:	f006 f889 	bl	8007168 <HAL_LTDC_ConfigLayer>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800105c:	f001 f89c 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3738      	adds	r7, #56	; 0x38
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20008828 	.word	0x20008828
 800106c:	40016800 	.word	0x40016800

08001070 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b092      	sub	sp, #72	; 0x48
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001076:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]
 8001086:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	222c      	movs	r2, #44	; 0x2c
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f00c fde3 	bl	800dc5e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001098:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <MX_RTC_Init+0x144>)
 800109a:	4a47      	ldr	r2, [pc, #284]	; (80011b8 <MX_RTC_Init+0x148>)
 800109c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800109e:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <MX_RTC_Init+0x144>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010a4:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <MX_RTC_Init+0x144>)
 80010a6:	227f      	movs	r2, #127	; 0x7f
 80010a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010aa:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <MX_RTC_Init+0x144>)
 80010ac:	22ff      	movs	r2, #255	; 0xff
 80010ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010b0:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <MX_RTC_Init+0x144>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010b6:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <MX_RTC_Init+0x144>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010bc:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <MX_RTC_Init+0x144>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010c2:	483c      	ldr	r0, [pc, #240]	; (80011b4 <MX_RTC_Init+0x144>)
 80010c4:	f007 fb2c 	bl	8008720 <HAL_RTC_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80010ce:	f001 f863 	bl	8002198 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010f0:	2201      	movs	r2, #1
 80010f2:	4619      	mov	r1, r3
 80010f4:	482f      	ldr	r0, [pc, #188]	; (80011b4 <MX_RTC_Init+0x144>)
 80010f6:	f007 fb8f 	bl	8008818 <HAL_RTC_SetTime>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001100:	f001 f84a 	bl	8002198 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800110a:	2301      	movs	r3, #1
 800110c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001110:	2301      	movs	r3, #1
 8001112:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001116:	2300      	movs	r3, #0
 8001118:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	2201      	movs	r2, #1
 8001122:	4619      	mov	r1, r3
 8001124:	4823      	ldr	r0, [pc, #140]	; (80011b4 <MX_RTC_Init+0x144>)
 8001126:	f007 fc35 	bl	8008994 <HAL_RTC_SetDate>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001130:	f001 f832 	bl	8002198 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001134:	2300      	movs	r3, #0
 8001136:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001138:	2300      	movs	r3, #0
 800113a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800113c:	2300      	movs	r3, #0
 800113e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001158:	2301      	movs	r3, #1
 800115a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800115e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001164:	463b      	mov	r3, r7
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	4812      	ldr	r0, [pc, #72]	; (80011b4 <MX_RTC_Init+0x144>)
 800116c:	f007 fcba 	bl	8008ae4 <HAL_RTC_SetAlarm>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001176:	f001 f80f 	bl	8002198 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800117a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	2201      	movs	r2, #1
 8001184:	4619      	mov	r1, r3
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <MX_RTC_Init+0x144>)
 8001188:	f007 fcac 	bl	8008ae4 <HAL_RTC_SetAlarm>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001192:	f001 f801 	bl	8002198 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001196:	2202      	movs	r2, #2
 8001198:	2100      	movs	r1, #0
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_RTC_Init+0x144>)
 800119c:	f007 fe2c 	bl	8008df8 <HAL_RTCEx_SetTimeStamp>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80011a6:	f000 fff7 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3748      	adds	r7, #72	; 0x48
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200089f8 	.word	0x200089f8
 80011b8:	40002800 	.word	0x40002800

080011bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_SPI2_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_SPI2_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_SPI2_Init+0x74>)
 80011c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_SPI2_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_SPI2_Init+0x74>)
 80011d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_SPI2_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_SPI2_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_SPI2_Init+0x74>)
 80011ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_SPI2_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_SPI2_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_SPI2_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_SPI2_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_SPI2_Init+0x74>)
 800120a:	2207      	movs	r2, #7
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_SPI2_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_SPI2_Init+0x74>)
 8001216:	2208      	movs	r2, #8
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_SPI2_Init+0x74>)
 800121c:	f007 fec1 	bl	8008fa2 <HAL_SPI_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 ffb7 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20008638 	.word	0x20008638
 8001234:	40003800 	.word	0x40003800

08001238 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <MX_TIM1_Init+0xa0>)
 8001258:	4a20      	ldr	r2, [pc, #128]	; (80012dc <MX_TIM1_Init+0xa4>)
 800125a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_TIM1_Init+0xa0>)
 800125e:	2200      	movs	r2, #0
 8001260:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <MX_TIM1_Init+0xa0>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_TIM1_Init+0xa0>)
 800126a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_TIM1_Init+0xa0>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_TIM1_Init+0xa0>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_TIM1_Init+0xa0>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001282:	4815      	ldr	r0, [pc, #84]	; (80012d8 <MX_TIM1_Init+0xa0>)
 8001284:	f007 ff1f 	bl	80090c6 <HAL_TIM_Base_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800128e:	f000 ff83 	bl	8002198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001296:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	480e      	ldr	r0, [pc, #56]	; (80012d8 <MX_TIM1_Init+0xa0>)
 80012a0:	f008 f9d2 	bl	8009648 <HAL_TIM_ConfigClockSource>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012aa:	f000 ff75 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MX_TIM1_Init+0xa0>)
 80012c0:	f008 ff06 	bl	800a0d0 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012ca:	f000 ff65 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20008a1c 	.word	0x20008a1c
 80012dc:	40010000 	.word	0x40010000

080012e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <MX_TIM2_Init+0x98>)
 8001300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001304:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <MX_TIM2_Init+0x98>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_TIM2_Init+0x98>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_TIM2_Init+0x98>)
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <MX_TIM2_Init+0x98>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_TIM2_Init+0x98>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001326:	4814      	ldr	r0, [pc, #80]	; (8001378 <MX_TIM2_Init+0x98>)
 8001328:	f007 fecd 	bl	80090c6 <HAL_TIM_Base_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001332:	f000 ff31 	bl	8002198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	4619      	mov	r1, r3
 8001342:	480d      	ldr	r0, [pc, #52]	; (8001378 <MX_TIM2_Init+0x98>)
 8001344:	f008 f980 	bl	8009648 <HAL_TIM_ConfigClockSource>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800134e:	f000 ff23 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <MX_TIM2_Init+0x98>)
 8001360:	f008 feb6 	bl	800a0d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800136a:	f000 ff15 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3720      	adds	r7, #32
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20008b28 	.word	0x20008b28

0800137c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	; 0x30
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0320 	add.w	r3, r7, #32
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <MX_TIM3_Init+0xc4>)
 80013ac:	4a25      	ldr	r2, [pc, #148]	; (8001444 <MX_TIM3_Init+0xc8>)
 80013ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <MX_TIM3_Init+0xc4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <MX_TIM3_Init+0xc4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_TIM3_Init+0xc4>)
 80013be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <MX_TIM3_Init+0xc4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_TIM3_Init+0xc4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013d0:	481b      	ldr	r0, [pc, #108]	; (8001440 <MX_TIM3_Init+0xc4>)
 80013d2:	f007 fe78 	bl	80090c6 <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80013dc:	f000 fedc 	bl	8002198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	4619      	mov	r1, r3
 80013ec:	4814      	ldr	r0, [pc, #80]	; (8001440 <MX_TIM3_Init+0xc4>)
 80013ee:	f008 f92b 	bl	8009648 <HAL_TIM_ConfigClockSource>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80013f8:	f000 fece 	bl	8002198 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_TIM3_Init+0xc4>)
 800140c:	f008 f9d6 	bl	80097bc <HAL_TIM_SlaveConfigSynchro>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001416:	f000 febf 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_TIM3_Init+0xc4>)
 8001428:	f008 fe52 	bl	800a0d0 <HAL_TIMEx_MasterConfigSynchronization>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001432:	f000 feb1 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3730      	adds	r7, #48	; 0x30
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200087e8 	.word	0x200087e8
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <MX_TIM5_Init+0x94>)
 8001468:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <MX_TIM5_Init+0x98>)
 800146a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_TIM5_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_TIM5_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_TIM5_Init+0x94>)
 800147a:	f04f 32ff 	mov.w	r2, #4294967295
 800147e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_TIM5_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <MX_TIM5_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800148c:	4813      	ldr	r0, [pc, #76]	; (80014dc <MX_TIM5_Init+0x94>)
 800148e:	f007 fe1a 	bl	80090c6 <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001498:	f000 fe7e 	bl	8002198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <MX_TIM5_Init+0x94>)
 80014aa:	f008 f8cd 	bl	8009648 <HAL_TIM_ConfigClockSource>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80014b4:	f000 fe70 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_TIM5_Init+0x94>)
 80014c6:	f008 fe03 	bl	800a0d0 <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80014d0:	f000 fe62 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200087a8 	.word	0x200087a8
 80014e0:	40000c00 	.word	0x40000c00

080014e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b09a      	sub	sp, #104	; 0x68
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001504:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	222c      	movs	r2, #44	; 0x2c
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f00c fb9d 	bl	800dc5e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001524:	4b42      	ldr	r3, [pc, #264]	; (8001630 <MX_TIM8_Init+0x14c>)
 8001526:	4a43      	ldr	r2, [pc, #268]	; (8001634 <MX_TIM8_Init+0x150>)
 8001528:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <MX_TIM8_Init+0x14c>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <MX_TIM8_Init+0x14c>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001536:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <MX_TIM8_Init+0x14c>)
 8001538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800153c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <MX_TIM8_Init+0x14c>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001544:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <MX_TIM8_Init+0x14c>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <MX_TIM8_Init+0x14c>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001550:	4837      	ldr	r0, [pc, #220]	; (8001630 <MX_TIM8_Init+0x14c>)
 8001552:	f007 fdb8 	bl	80090c6 <HAL_TIM_Base_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800155c:	f000 fe1c 	bl	8002198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001564:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001566:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800156a:	4619      	mov	r1, r3
 800156c:	4830      	ldr	r0, [pc, #192]	; (8001630 <MX_TIM8_Init+0x14c>)
 800156e:	f008 f86b 	bl	8009648 <HAL_TIM_ConfigClockSource>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001578:	f000 fe0e 	bl	8002198 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800157c:	482c      	ldr	r0, [pc, #176]	; (8001630 <MX_TIM8_Init+0x14c>)
 800157e:	f007 fdf7 	bl	8009170 <HAL_TIM_PWM_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001588:	f000 fe06 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001598:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800159c:	4619      	mov	r1, r3
 800159e:	4824      	ldr	r0, [pc, #144]	; (8001630 <MX_TIM8_Init+0x14c>)
 80015a0:	f008 fd96 	bl	800a0d0 <HAL_TIMEx_MasterConfigSynchronization>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80015aa:	f000 fdf5 	bl	8002198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ae:	2360      	movs	r3, #96	; 0x60
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b6:	2300      	movs	r3, #0
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ca:	220c      	movs	r2, #12
 80015cc:	4619      	mov	r1, r3
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <MX_TIM8_Init+0x14c>)
 80015d0:	f007 ff22 	bl	8009418 <HAL_TIM_PWM_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80015da:	f000 fddd 	bl	8002198 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4619      	mov	r1, r3
 8001612:	4807      	ldr	r0, [pc, #28]	; (8001630 <MX_TIM8_Init+0x14c>)
 8001614:	f008 fdea 	bl	800a1ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800161e:	f000 fdbb 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001622:	4803      	ldr	r0, [pc, #12]	; (8001630 <MX_TIM8_Init+0x14c>)
 8001624:	f002 feb4 	bl	8004390 <HAL_TIM_MspPostInit>

}
 8001628:	bf00      	nop
 800162a:	3768      	adds	r7, #104	; 0x68
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000871c 	.word	0x2000871c
 8001634:	40010400 	.word	0x40010400

08001638 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_UART7_Init+0x58>)
 800163e:	4a15      	ldr	r2, [pc, #84]	; (8001694 <MX_UART7_Init+0x5c>)
 8001640:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_UART7_Init+0x58>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_UART7_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_UART7_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_UART7_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_UART7_Init+0x58>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_UART7_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_UART7_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_UART7_Init+0x58>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_UART7_Init+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_UART7_Init+0x58>)
 800167c:	f008 fe52 	bl	800a324 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001686:	f000 fd87 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000869c 	.word	0x2000869c
 8001694:	40007800 	.word	0x40007800

08001698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 800169e:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <MX_USART1_UART_Init+0x5c>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016dc:	f008 fe22 	bl	800a324 <HAL_UART_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016e6:	f000 fd57 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20008964 	.word	0x20008964
 80016f4:	40011000 	.word	0x40011000

080016f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_USART6_UART_Init+0x58>)
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <MX_USART6_UART_Init+0x5c>)
 8001700:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_USART6_UART_Init+0x58>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_USART6_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_USART6_UART_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_USART6_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_USART6_UART_Init+0x58>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_USART6_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_USART6_UART_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_USART6_UART_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_USART6_UART_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_USART6_UART_Init+0x58>)
 800173c:	f008 fdf2 	bl	800a324 <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001746:	f000 fd27 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20008a68 	.word	0x20008a68
 8001754:	40011400 	.word	0x40011400

08001758 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	615a      	str	r2, [r3, #20]
 800176e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <MX_FMC_Init+0x94>)
 8001772:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <MX_FMC_Init+0x98>)
 8001774:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <MX_FMC_Init+0x94>)
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <MX_FMC_Init+0x94>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <MX_FMC_Init+0x94>)
 8001784:	2204      	movs	r2, #4
 8001786:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <MX_FMC_Init+0x94>)
 800178a:	2210      	movs	r2, #16
 800178c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <MX_FMC_Init+0x94>)
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_FMC_Init+0x94>)
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_FMC_Init+0x94>)
 800179c:	2200      	movs	r2, #0
 800179e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_FMC_Init+0x94>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_FMC_Init+0x94>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_FMC_Init+0x94>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80017b2:	2310      	movs	r3, #16
 80017b4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80017b6:	2310      	movs	r3, #16
 80017b8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80017ba:	2310      	movs	r3, #16
 80017bc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80017be:	2310      	movs	r3, #16
 80017c0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80017c2:	2310      	movs	r3, #16
 80017c4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80017c6:	2310      	movs	r3, #16
 80017c8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80017ca:	2310      	movs	r3, #16
 80017cc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	4806      	ldr	r0, [pc, #24]	; (80017ec <MX_FMC_Init+0x94>)
 80017d4:	f007 fb66 	bl	8008ea4 <HAL_SDRAM_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80017de:	f000 fcdb 	bl	8002198 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017e2:	bf00      	nop
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20008b68 	.word	0x20008b68
 80017f0:	a0000140 	.word	0xa0000140

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b090      	sub	sp, #64	; 0x40
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800180a:	4bb0      	ldr	r3, [pc, #704]	; (8001acc <MX_GPIO_Init+0x2d8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4aaf      	ldr	r2, [pc, #700]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001810:	f043 0310 	orr.w	r3, r3, #16
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4bad      	ldr	r3, [pc, #692]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001820:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	4baa      	ldr	r3, [pc, #680]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4aa9      	ldr	r2, [pc, #676]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4ba7      	ldr	r3, [pc, #668]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4ba4      	ldr	r3, [pc, #656]	; (8001acc <MX_GPIO_Init+0x2d8>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4aa3      	ldr	r2, [pc, #652]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4ba1      	ldr	r3, [pc, #644]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	623b      	str	r3, [r7, #32]
 8001850:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001852:	4b9e      	ldr	r3, [pc, #632]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a9d      	ldr	r2, [pc, #628]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b9b      	ldr	r3, [pc, #620]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800186a:	4b98      	ldr	r3, [pc, #608]	; (8001acc <MX_GPIO_Init+0x2d8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a97      	ldr	r2, [pc, #604]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b95      	ldr	r3, [pc, #596]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	4b92      	ldr	r3, [pc, #584]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a91      	ldr	r2, [pc, #580]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b8f      	ldr	r3, [pc, #572]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800189a:	4b8c      	ldr	r3, [pc, #560]	; (8001acc <MX_GPIO_Init+0x2d8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a8b      	ldr	r2, [pc, #556]	; (8001acc <MX_GPIO_Init+0x2d8>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b89      	ldr	r3, [pc, #548]	; (8001acc <MX_GPIO_Init+0x2d8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018b2:	4b86      	ldr	r3, [pc, #536]	; (8001acc <MX_GPIO_Init+0x2d8>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a85      	ldr	r2, [pc, #532]	; (8001acc <MX_GPIO_Init+0x2d8>)
 80018b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b83      	ldr	r3, [pc, #524]	; (8001acc <MX_GPIO_Init+0x2d8>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	4b80      	ldr	r3, [pc, #512]	; (8001acc <MX_GPIO_Init+0x2d8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a7f      	ldr	r2, [pc, #508]	; (8001acc <MX_GPIO_Init+0x2d8>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b7d      	ldr	r3, [pc, #500]	; (8001acc <MX_GPIO_Init+0x2d8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e2:	4b7a      	ldr	r3, [pc, #488]	; (8001acc <MX_GPIO_Init+0x2d8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a79      	ldr	r2, [pc, #484]	; (8001acc <MX_GPIO_Init+0x2d8>)
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b77      	ldr	r3, [pc, #476]	; (8001acc <MX_GPIO_Init+0x2d8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fa:	4b74      	ldr	r3, [pc, #464]	; (8001acc <MX_GPIO_Init+0x2d8>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a73      	ldr	r2, [pc, #460]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b71      	ldr	r3, [pc, #452]	; (8001acc <MX_GPIO_Init+0x2d8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2110      	movs	r1, #16
 8001916:	486e      	ldr	r0, [pc, #440]	; (8001ad0 <MX_GPIO_Init+0x2dc>)
 8001918:	f004 fcca 	bl	80062b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	2160      	movs	r1, #96	; 0x60
 8001920:	486c      	ldr	r0, [pc, #432]	; (8001ad4 <MX_GPIO_Init+0x2e0>)
 8001922:	f004 fcc5 	bl	80062b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001926:	2201      	movs	r2, #1
 8001928:	2120      	movs	r1, #32
 800192a:	486b      	ldr	r0, [pc, #428]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 800192c:	f004 fcc0 	bl	80062b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2108      	movs	r1, #8
 8001934:	4868      	ldr	r0, [pc, #416]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001936:	f004 fcbb 	bl	80062b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	2108      	movs	r1, #8
 800193e:	4867      	ldr	r0, [pc, #412]	; (8001adc <MX_GPIO_Init+0x2e8>)
 8001940:	f004 fcb6 	bl	80062b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	2108      	movs	r1, #8
 8001948:	4865      	ldr	r0, [pc, #404]	; (8001ae0 <MX_GPIO_Init+0x2ec>)
 800194a:	f004 fcb1 	bl	80062b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001954:	4861      	ldr	r0, [pc, #388]	; (8001adc <MX_GPIO_Init+0x2e8>)
 8001956:	f004 fcab 	bl	80062b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800195a:	2200      	movs	r2, #0
 800195c:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001960:	4860      	ldr	r0, [pc, #384]	; (8001ae4 <MX_GPIO_Init+0x2f0>)
 8001962:	f004 fca5 	bl	80062b0 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2108      	movs	r1, #8
 800196a:	485f      	ldr	r0, [pc, #380]	; (8001ae8 <MX_GPIO_Init+0x2f4>)
 800196c:	f004 fca0 	bl	80062b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001970:	2308      	movs	r3, #8
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001974:	2300      	movs	r3, #0
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800197c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001980:	4619      	mov	r1, r3
 8001982:	4854      	ldr	r0, [pc, #336]	; (8001ad4 <MX_GPIO_Init+0x2e0>)
 8001984:	f004 f9c8 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001988:	f643 0323 	movw	r3, #14371	; 0x3823
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800199a:	230a      	movs	r3, #10
 800199c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a2:	4619      	mov	r1, r3
 80019a4:	484a      	ldr	r0, [pc, #296]	; (8001ad0 <MX_GPIO_Init+0x2dc>)
 80019a6:	f004 f9b7 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80019aa:	2310      	movs	r3, #16
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019be:	4619      	mov	r1, r3
 80019c0:	4843      	ldr	r0, [pc, #268]	; (8001ad0 <MX_GPIO_Init+0x2dc>)
 80019c2:	f004 f9a9 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 80019c6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d8:	4619      	mov	r1, r3
 80019da:	4844      	ldr	r0, [pc, #272]	; (8001aec <MX_GPIO_Init+0x2f8>)
 80019dc:	f004 f99c 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80019e0:	2360      	movs	r3, #96	; 0x60
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f4:	4619      	mov	r1, r3
 80019f6:	4837      	ldr	r0, [pc, #220]	; (8001ad4 <MX_GPIO_Init+0x2e0>)
 80019f8:	f004 f98e 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80019fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a02:	2300      	movs	r3, #0
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4837      	ldr	r0, [pc, #220]	; (8001af0 <MX_GPIO_Init+0x2fc>)
 8001a12:	f004 f981 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a16:	2340      	movs	r3, #64	; 0x40
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a1a:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <MX_GPIO_Init+0x300>)
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a26:	4619      	mov	r1, r3
 8001a28:	482b      	ldr	r0, [pc, #172]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001a2a:	f004 f975 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001a2e:	2328      	movs	r3, #40	; 0x28
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a42:	4619      	mov	r1, r3
 8001a44:	4824      	ldr	r0, [pc, #144]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001a46:	f004 f967 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001a4a:	f241 0308 	movw	r3, #4104	; 0x1008
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a60:	4619      	mov	r1, r3
 8001a62:	481e      	ldr	r0, [pc, #120]	; (8001adc <MX_GPIO_Init+0x2e8>)
 8001a64:	f004 f958 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481e      	ldr	r0, [pc, #120]	; (8001af8 <MX_GPIO_Init+0x304>)
 8001a7e:	f004 f94b 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a82:	2308      	movs	r3, #8
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	2301      	movs	r3, #1
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a96:	4619      	mov	r1, r3
 8001a98:	4811      	ldr	r0, [pc, #68]	; (8001ae0 <MX_GPIO_Init+0x2ec>)
 8001a9a:	f004 f93d 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a9e:	2310      	movs	r3, #16
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001ab2:	f004 f931 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001ab6:	f248 0304 	movw	r3, #32772	; 0x8004
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac8:	4619      	mov	r1, r3
 8001aca:	e017      	b.n	8001afc <MX_GPIO_Init+0x308>
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40020c00 	.word	0x40020c00
 8001adc:	40022000 	.word	0x40022000
 8001ae0:	40022800 	.word	0x40022800
 8001ae4:	40021c00 	.word	0x40021c00
 8001ae8:	40021800 	.word	0x40021800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40022400 	.word	0x40022400
 8001af4:	10120000 	.word	0x10120000
 8001af8:	40020800 	.word	0x40020800
 8001afc:	4836      	ldr	r0, [pc, #216]	; (8001bd8 <MX_GPIO_Init+0x3e4>)
 8001afe:	f004 f90b 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001b02:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b18:	4619      	mov	r1, r3
 8001b1a:	482f      	ldr	r0, [pc, #188]	; (8001bd8 <MX_GPIO_Init+0x3e4>)
 8001b1c:	f004 f8fc 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <MX_GPIO_Init+0x3e8>)
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b32:	4619      	mov	r1, r3
 8001b34:	482a      	ldr	r0, [pc, #168]	; (8001be0 <MX_GPIO_Init+0x3ec>)
 8001b36:	f004 f8ef 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b52:	4619      	mov	r1, r3
 8001b54:	4820      	ldr	r0, [pc, #128]	; (8001bd8 <MX_GPIO_Init+0x3e4>)
 8001b56:	f004 f8df 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001b5a:	2384      	movs	r3, #132	; 0x84
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	481d      	ldr	r0, [pc, #116]	; (8001be4 <MX_GPIO_Init+0x3f0>)
 8001b6e:	f004 f8d3 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001b72:	2305      	movs	r3, #5
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b82:	230a      	movs	r3, #10
 8001b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4816      	ldr	r0, [pc, #88]	; (8001be8 <MX_GPIO_Init+0x3f4>)
 8001b8e:	f004 f8c3 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001b92:	2308      	movs	r3, #8
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	480e      	ldr	r0, [pc, #56]	; (8001be4 <MX_GPIO_Init+0x3f0>)
 8001baa:	f004 f8b5 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001bae:	2328      	movs	r3, #40	; 0x28
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4808      	ldr	r0, [pc, #32]	; (8001bec <MX_GPIO_Init+0x3f8>)
 8001bca:	f004 f8a5 	bl	8005d18 <HAL_GPIO_Init>

}
 8001bce:	bf00      	nop
 8001bd0:	3740      	adds	r7, #64	; 0x40
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021c00 	.word	0x40021c00
 8001bdc:	10120000 	.word	0x10120000
 8001be0:	40022000 	.word	0x40022000
 8001be4:	40021800 	.word	0x40021800
 8001be8:	40020800 	.word	0x40020800
 8001bec:	40020000 	.word	0x40020000

08001bf0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	//Réception du rayon de la balle, des coordonnées de la balle, du drapeau de perte
	r_balle = rxbuffer[0];
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_UART_RxCpltCallback+0x70>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_UART_RxCpltCallback+0x74>)
 8001c00:	801a      	strh	r2, [r3, #0]
	x_balle = ((rxbuffer[1] << 8) | rxbuffer[2]);
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_UART_RxCpltCallback+0x70>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_UART_RxCpltCallback+0x70>)
 8001c0c:	789b      	ldrb	r3, [r3, #2]
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_UART_RxCpltCallback+0x78>)
 8001c16:	801a      	strh	r2, [r3, #0]
	y_balle = ((rxbuffer[3] << 8) | rxbuffer[4]);
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_UART_RxCpltCallback+0x70>)
 8001c1a:	78db      	ldrb	r3, [r3, #3]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_UART_RxCpltCallback+0x70>)
 8001c22:	791b      	ldrb	r3, [r3, #4]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_UART_RxCpltCallback+0x7c>)
 8001c2c:	801a      	strh	r2, [r3, #0]
	lost = rxbuffer[5];
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_UART_RxCpltCallback+0x70>)
 8001c30:	795b      	ldrb	r3, [r3, #5]
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_UART_RxCpltCallback+0x80>)
 8001c36:	701a      	strb	r2, [r3, #0]

	//Offset des coordonées de la raquette droite
	x_balle -= 480;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_UART_RxCpltCallback+0x78>)
 8001c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <HAL_UART_RxCpltCallback+0x78>)
 8001c4a:	801a      	strh	r2, [r3, #0]

	//Attente d'une nouvelle réception sur interruption
	HAL_UART_Receive_IT(&huart7, rxbuffer, 6);
 8001c4c:	2206      	movs	r2, #6
 8001c4e:	4904      	ldr	r1, [pc, #16]	; (8001c60 <HAL_UART_RxCpltCallback+0x70>)
 8001c50:	4808      	ldr	r0, [pc, #32]	; (8001c74 <HAL_UART_RxCpltCallback+0x84>)
 8001c52:	f008 fc11 	bl	800a478 <HAL_UART_Receive_IT>

}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20008ba0 	.word	0x20008ba0
 8001c64:	20000030 	.word	0x20000030
 8001c68:	2000002c 	.word	0x2000002c
 8001c6c:	2000002e 	.word	0x2000002e
 8001c70:	200002d2 	.word	0x200002d2
 8001c74:	2000869c 	.word	0x2000869c

08001c78 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8001c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c84:	f009 fcd3 	bl	800b62e <osDelay>
 8001c88:	e7fa      	b.n	8001c80 <StartDefaultTask+0x8>
	...

08001c8c <StartRRacket>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRRacket */
void StartRRacket(void const * argument)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRRacket */

	//Initialisation des variables pour le joystick
	int32_t joystick_h, joystick_v;
	joystick_h = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
	joystick_v = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
	//Initialisation du stockage des coordonnées de la raquette droite
	int16_t x_RRacket_hold;
	int16_t y_RRacket_hold;

	//Initialisation du CAN du joystick (ADC_CHANNEL_8)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001caa:	2301      	movs	r3, #1
 8001cac:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	486e      	ldr	r0, [pc, #440]	; (8001e74 <StartRRacket+0x1e8>)
 8001cba:	f002 ffcf 	bl	8004c5c <HAL_ADC_ConfigChannel>

	/* Infinite loop */
	for(;;){
		//Capture des valeurs des joysticks sur ADC_CHANNEL_8
		sConfig.Channel = ADC_CHANNEL_8;
 8001cbe:	2308      	movs	r3, #8
 8001cc0:	60fb      	str	r3, [r7, #12]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	486a      	ldr	r0, [pc, #424]	; (8001e74 <StartRRacket+0x1e8>)
 8001cca:	f002 ffc7 	bl	8004c5c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001cce:	4869      	ldr	r0, [pc, #420]	; (8001e74 <StartRRacket+0x1e8>)
 8001cd0:	f002 fe72 	bl	80049b8 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001cd4:	bf00      	nop
 8001cd6:	2164      	movs	r1, #100	; 0x64
 8001cd8:	4866      	ldr	r0, [pc, #408]	; (8001e74 <StartRRacket+0x1e8>)
 8001cda:	f002 ff2d 	bl	8004b38 <HAL_ADC_PollForConversion>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f8      	bne.n	8001cd6 <StartRRacket+0x4a>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001ce4:	4863      	ldr	r0, [pc, #396]	; (8001e74 <StartRRacket+0x1e8>)
 8001ce6:	f002 ffab 	bl	8004c40 <HAL_ADC_GetValue>
 8001cea:	4603      	mov	r3, r0
 8001cec:	61fb      	str	r3, [r7, #28]
		HAL_ADC_Start(&hadc1);
 8001cee:	4862      	ldr	r0, [pc, #392]	; (8001e78 <StartRRacket+0x1ec>)
 8001cf0:	f002 fe62 	bl	80049b8 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001cf4:	bf00      	nop
 8001cf6:	2164      	movs	r1, #100	; 0x64
 8001cf8:	485f      	ldr	r0, [pc, #380]	; (8001e78 <StartRRacket+0x1ec>)
 8001cfa:	f002 ff1d 	bl	8004b38 <HAL_ADC_PollForConversion>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f8      	bne.n	8001cf6 <StartRRacket+0x6a>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001d04:	485c      	ldr	r0, [pc, #368]	; (8001e78 <StartRRacket+0x1ec>)
 8001d06:	f002 ff9b 	bl	8004c40 <HAL_ADC_GetValue>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	623b      	str	r3, [r7, #32]

		//Actualisation des coordonnées de la raquette droite, le joystick
		//horizontal nécessite une corrcetion pour ne pas dériver
		x_RRacket -= (joystick_h - 2018)/100;
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f2a3 73e2 	subw	r3, r3, #2018	; 0x7e2
 8001d14:	4a59      	ldr	r2, [pc, #356]	; (8001e7c <StartRRacket+0x1f0>)
 8001d16:	fb82 1203 	smull	r1, r2, r2, r3
 8001d1a:	1152      	asrs	r2, r2, #5
 8001d1c:	17db      	asrs	r3, r3, #31
 8001d1e:	1a9b      	subs	r3, r3, r2
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <StartRRacket+0x1f4>)
 8001d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <StartRRacket+0x1f4>)
 8001d32:	801a      	strh	r2, [r3, #0]
		y_RRacket -= (joystick_v - 2080)/150;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001d3a:	4a52      	ldr	r2, [pc, #328]	; (8001e84 <StartRRacket+0x1f8>)
 8001d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d40:	1112      	asrs	r2, r2, #4
 8001d42:	17db      	asrs	r3, r3, #31
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	4b4f      	ldr	r3, [pc, #316]	; (8001e88 <StartRRacket+0x1fc>)
 8001d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4413      	add	r3, r2
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <StartRRacket+0x1fc>)
 8001d58:	801a      	strh	r2, [r3, #0]

		// Cadrage des coordonnées RRacket
		if (x_RRacket <= 240) x_RRacket = 240;
 8001d5a:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <StartRRacket+0x1f4>)
 8001d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d60:	2bf0      	cmp	r3, #240	; 0xf0
 8001d62:	dc02      	bgt.n	8001d6a <StartRRacket+0xde>
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <StartRRacket+0x1f4>)
 8001d66:	22f0      	movs	r2, #240	; 0xf0
 8001d68:	801a      	strh	r2, [r3, #0]
		if (x_RRacket >= 479 - width_rackets) x_RRacket = 479 - width_rackets;
 8001d6a:	4b45      	ldr	r3, [pc, #276]	; (8001e80 <StartRRacket+0x1f4>)
 8001d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d70:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8001d74:	dd03      	ble.n	8001d7e <StartRRacket+0xf2>
 8001d76:	4b42      	ldr	r3, [pc, #264]	; (8001e80 <StartRRacket+0x1f4>)
 8001d78:	f240 12d7 	movw	r2, #471	; 0x1d7
 8001d7c:	801a      	strh	r2, [r3, #0]
		if (y_RRacket <= 0) y_RRacket = 0;
 8001d7e:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <StartRRacket+0x1fc>)
 8001d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	dc02      	bgt.n	8001d8e <StartRRacket+0x102>
 8001d88:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <StartRRacket+0x1fc>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	801a      	strh	r2, [r3, #0]
		if (y_RRacket + height_rackets >= 272) y_RRacket = 272 - height_rackets;
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <StartRRacket+0x1fc>)
 8001d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d94:	3328      	adds	r3, #40	; 0x28
 8001d96:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001d9a:	db02      	blt.n	8001da2 <StartRRacket+0x116>
 8001d9c:	4b3a      	ldr	r3, [pc, #232]	; (8001e88 <StartRRacket+0x1fc>)
 8001d9e:	22e8      	movs	r2, #232	; 0xe8
 8001da0:	801a      	strh	r2, [r3, #0]

		//Tracé de RRacket
		//Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001da2:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <StartRRacket+0x200>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f04f 31ff 	mov.w	r1, #4294967295
 8001daa:	4618      	mov	r0, r3
 8001dac:	f009 ffde 	bl	800bd6c <xQueueSemaphoreTake>

		//Effaçage du précedent rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001db0:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <StartRRacket+0x204>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <StartRRacket+0x132>
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	e001      	b.n	8001dc2 <StartRRacket+0x136>
 8001dbe:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fc98 	bl	80026f8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_RRacket_hold, y_RRacket_hold, width_rackets,
 8001dc8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001dca:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001dcc:	2328      	movs	r3, #40	; 0x28
 8001dce:	2208      	movs	r2, #8
 8001dd0:	f001 f89e 	bl	8002f10 <BSP_LCD_FillRect>
				height_rackets);

		//Création du nouveau rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001dd4:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <StartRRacket+0x204>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <StartRRacket+0x156>
 8001ddc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001de0:	e001      	b.n	8001de6 <StartRRacket+0x15a>
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fc86 	bl	80026f8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_RRacket, y_RRacket, width_rackets, height_rackets);
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <StartRRacket+0x1f4>)
 8001dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df2:	b298      	uxth	r0, r3
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <StartRRacket+0x1fc>)
 8001df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfa:	b299      	uxth	r1, r3
 8001dfc:	2328      	movs	r3, #40	; 0x28
 8001dfe:	2208      	movs	r2, #8
 8001e00:	f001 f886 	bl	8002f10 <BSP_LCD_FillRect>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <StartRRacket+0x200>)
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	f009 feab 	bl	800bb68 <xQueueGenericSend>

		if(x_RRacket!=x_RRacket_hold){
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <StartRRacket+0x1f4>)
 8001e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e18:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d01e      	beq.n	8001e5e <StartRRacket+0x1d2>
			//Si la raquette a bougé, on envoie les nouvelles coordonnées par liaison série
			txbuffer[0]=(x_RRacket & 0xFF00) >> 8;
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <StartRRacket+0x1f4>)
 8001e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e26:	121b      	asrs	r3, r3, #8
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <StartRRacket+0x208>)
 8001e2c:	701a      	strb	r2, [r3, #0]
			txbuffer[1]= x_RRacket & 0x00FF;
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <StartRRacket+0x1f4>)
 8001e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <StartRRacket+0x208>)
 8001e38:	705a      	strb	r2, [r3, #1]
			txbuffer[2]=(y_RRacket & 0xFF00) >> 8;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <StartRRacket+0x1fc>)
 8001e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e40:	121b      	asrs	r3, r3, #8
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <StartRRacket+0x208>)
 8001e46:	709a      	strb	r2, [r3, #2]
			txbuffer[3]=y_RRacket & 0x00FF;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <StartRRacket+0x1fc>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <StartRRacket+0x208>)
 8001e52:	70da      	strb	r2, [r3, #3]

			HAL_UART_Transmit_IT(&huart7,txbuffer,4);
 8001e54:	2204      	movs	r2, #4
 8001e56:	490f      	ldr	r1, [pc, #60]	; (8001e94 <StartRRacket+0x208>)
 8001e58:	480f      	ldr	r0, [pc, #60]	; (8001e98 <StartRRacket+0x20c>)
 8001e5a:	f008 fab1 	bl	800a3c0 <HAL_UART_Transmit_IT>
		}


		//Stockage des dernières coordonnées de la raquette droite
		x_RRacket_hold = x_RRacket;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <StartRRacket+0x1f4>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	84fb      	strh	r3, [r7, #38]	; 0x26
		y_RRacket_hold = y_RRacket;
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <StartRRacket+0x1fc>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	84bb      	strh	r3, [r7, #36]	; 0x24
		osDelay(100);
 8001e6a:	2064      	movs	r0, #100	; 0x64
 8001e6c:	f009 fbdf 	bl	800b62e <osDelay>
		sConfig.Channel = ADC_CHANNEL_8;
 8001e70:	e725      	b.n	8001cbe <StartRRacket+0x32>
 8001e72:	bf00      	nop
 8001e74:	20008918 	.word	0x20008918
 8001e78:	200088d0 	.word	0x200088d0
 8001e7c:	51eb851f 	.word	0x51eb851f
 8001e80:	20000028 	.word	0x20000028
 8001e84:	1b4e81b5 	.word	0x1b4e81b5
 8001e88:	2000002a 	.word	0x2000002a
 8001e8c:	20008b9c 	.word	0x20008b9c
 8001e90:	20000032 	.word	0x20000032
 8001e94:	20008a5c 	.word	0x20008a5c
 8001e98:	2000869c 	.word	0x2000869c

08001e9c <StartBall>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBall */
void StartBall(void const * argument)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b092      	sub	sp, #72	; 0x48
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBall */

	//Initialisation de la régularité de lancement de la tache
	TickType_t xFrequency=10;
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	643b      	str	r3, [r7, #64]	; 0x40
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8001ea8:	f00a fd6c 	bl	800c984 <xTaskGetTickCount>
 8001eac:	4603      	mov	r3, r0
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Initialisation des anciennes coordonnées de la balle
	int16_t x_balle_hold = 8;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t y_balle_hold = 136;
 8001eb6:	2388      	movs	r3, #136	; 0x88
 8001eb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  /* Infinite loop */
  for(;;)
  {

	  if(lost == 1){
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <StartBall+0x1cc>)
 8001ebe:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d116      	bne.n	8001ef4 <StartBall+0x58>
		  //Si la balle touche le bord gauche de l'écran, on a perdu
		  //Capture de la ressource
		  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001ec6:	4b69      	ldr	r3, [pc, #420]	; (800206c <StartBall+0x1d0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f04f 31ff 	mov.w	r1, #4294967295
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f009 ff4c 	bl	800bd6c <xQueueSemaphoreTake>

		  //Affichage du message de perte sous le chronomètre
		  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Perdu");
 8001ed4:	4966      	ldr	r1, [pc, #408]	; (8002070 <StartBall+0x1d4>)
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	f000 fda0 	bl	8002a1c <BSP_LCD_DisplayStringAtLine>

		  //Libération de la ressource
		  xSemaphoreGive(myMutex_LCDHandle);
 8001edc:	4b63      	ldr	r3, [pc, #396]	; (800206c <StartBall+0x1d0>)
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	f009 fe3f 	bl	800bb68 <xQueueGenericSend>

		  //Mise en pause du déplacement de la balle
		  vTaskSuspend(BallDisplayHandle);
 8001eea:	4b62      	ldr	r3, [pc, #392]	; (8002074 <StartBall+0x1d8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f00a fba6 	bl	800c640 <vTaskSuspend>
	  }



	  //Capture de la ressource
	  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001ef4:	4b5d      	ldr	r3, [pc, #372]	; (800206c <StartBall+0x1d0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	4618      	mov	r0, r3
 8001efe:	f009 ff35 	bl	800bd6c <xQueueSemaphoreTake>

	  //Effaçage des anciens dessins
	  if(x_balle_hold >= 0){
 8001f02:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db17      	blt.n	8001f3a <StartBall+0x9e>
		  //Effaçage de l'ancienne balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001f0a:	4b5b      	ldr	r3, [pc, #364]	; (8002078 <StartBall+0x1dc>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <StartBall+0x7c>
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e001      	b.n	8001f1c <StartBall+0x80>
 8001f18:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fbeb 	bl	80026f8 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle_hold, y_balle_hold, r_balle);
 8001f22:	f8b7 0046 	ldrh.w	r0, [r7, #70]	; 0x46
 8001f26:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8001f2a:	4b54      	ldr	r3, [pc, #336]	; (800207c <StartBall+0x1e0>)
 8001f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	f001 f866 	bl	8003004 <BSP_LCD_FillCircle>
 8001f38:	e02c      	b.n	8001f94 <StartBall+0xf8>
	  }
	  else{
		  //Effaçage de l'ancien triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001f3a:	4b4f      	ldr	r3, [pc, #316]	; (8002078 <StartBall+0x1dc>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d102      	bne.n	8001f48 <StartBall+0xac>
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	e001      	b.n	8001f4c <StartBall+0xb0>
 8001f48:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fbd3 	bl	80026f8 <BSP_LCD_SetTextColor>
		  Point Point1 = {6,y_balle_hold+3};
 8001f52:	2306      	movs	r3, #6
 8001f54:	873b      	strh	r3, [r7, #56]	; 0x38
 8001f56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f5a:	3303      	adds	r3, #3
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	877b      	strh	r3, [r7, #58]	; 0x3a
		  Point Point2 = {0,y_balle_hold};
 8001f62:	2300      	movs	r3, #0
 8001f64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001f66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f6a:	86fb      	strh	r3, [r7, #54]	; 0x36
		  Point Point3 = {6,y_balle_hold-3};
 8001f6c:	2306      	movs	r3, #6
 8001f6e:	863b      	strh	r3, [r7, #48]	; 0x30
 8001f70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f74:	3b03      	subs	r3, #3
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	867b      	strh	r3, [r7, #50]	; 0x32

		  Point Points[3] = {Point1, Point2, Point3};
 8001f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
		  BSP_LCD_FillPolygon(Points,3);
 8001f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8c:	2103      	movs	r1, #3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 f8d8 	bl	8003144 <BSP_LCD_FillPolygon>
	  }

	  //Affichage des nouveaux dessins
	  if(x_balle >= 0){
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <StartBall+0x1e4>)
 8001f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db1b      	blt.n	8001fd6 <StartBall+0x13a>
		  //Affichage de la nouvelle balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001f9e:	4b36      	ldr	r3, [pc, #216]	; (8002078 <StartBall+0x1dc>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <StartBall+0x110>
 8001fa6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001faa:	e001      	b.n	8001fb0 <StartBall+0x114>
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fba1 	bl	80026f8 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle, y_balle, r_balle);
 8001fb6:	4b32      	ldr	r3, [pc, #200]	; (8002080 <StartBall+0x1e4>)
 8001fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbc:	b298      	uxth	r0, r3
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <StartBall+0x1e8>)
 8001fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc4:	b299      	uxth	r1, r3
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	; (800207c <StartBall+0x1e0>)
 8001fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f001 f818 	bl	8003004 <BSP_LCD_FillCircle>
 8001fd4:	e031      	b.n	800203a <StartBall+0x19e>
	  }
	  else{
		  //Affichage du nouveau triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001fd6:	4b28      	ldr	r3, [pc, #160]	; (8002078 <StartBall+0x1dc>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <StartBall+0x148>
 8001fde:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001fe2:	e001      	b.n	8001fe8 <StartBall+0x14c>
 8001fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fb85 	bl	80026f8 <BSP_LCD_SetTextColor>
		  Point Point1 = {6,y_balle+3};
 8001fee:	2306      	movs	r3, #6
 8001ff0:	843b      	strh	r3, [r7, #32]
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <StartBall+0x1e8>)
 8001ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3303      	adds	r3, #3
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	847b      	strh	r3, [r7, #34]	; 0x22
		  Point Point2 = {0,y_balle};
 8002002:	2300      	movs	r3, #0
 8002004:	83bb      	strh	r3, [r7, #28]
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <StartBall+0x1e8>)
 8002008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200c:	83fb      	strh	r3, [r7, #30]
		  Point Point3 = {6,y_balle-3};
 800200e:	2306      	movs	r3, #6
 8002010:	833b      	strh	r3, [r7, #24]
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <StartBall+0x1e8>)
 8002014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b03      	subs	r3, #3
 800201c:	b29b      	uxth	r3, r3
 800201e:	b21b      	sxth	r3, r3
 8002020:	837b      	strh	r3, [r7, #26]

		  Point Points[3] = {Point1, Point2, Point3};
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	617b      	str	r3, [r7, #20]
		  BSP_LCD_FillPolygon(Points,3);
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	2103      	movs	r1, #3
 8002034:	4618      	mov	r0, r3
 8002036:	f001 f885 	bl	8003144 <BSP_LCD_FillPolygon>
	  }

	  //Libération de la ressource
	 xSemaphoreGive(myMutex_LCDHandle);
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <StartBall+0x1d0>)
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	2300      	movs	r3, #0
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	f009 fd90 	bl	800bb68 <xQueueGenericSend>

	 //Stockage du dernier emplacement de dessin
	 x_balle_hold=x_balle;
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <StartBall+0x1e4>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	 y_balle_hold=y_balle;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <StartBall+0x1e8>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	 vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002058:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800205c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800205e:	4618      	mov	r0, r3
 8002060:	f00a fa38 	bl	800c4d4 <vTaskDelayUntil>
	  if(lost == 1){
 8002064:	e72a      	b.n	8001ebc <StartBall+0x20>
 8002066:	bf00      	nop
 8002068:	200002d2 	.word	0x200002d2
 800206c:	20008b9c 	.word	0x20008b9c
 8002070:	0800dd34 	.word	0x0800dd34
 8002074:	20008bac 	.word	0x20008bac
 8002078:	20000032 	.word	0x20000032
 800207c:	20000030 	.word	0x20000030
 8002080:	2000002c 	.word	0x2000002c
 8002084:	2000002e 	.word	0x2000002e

08002088 <StartBgChanger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBgChanger */
void StartBgChanger(void const * argument)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBgChanger */
	//Initialisation de l'état de BP1 et de l'état
	uint8_t BP1=1;
 8002090:	2301      	movs	r3, #1
 8002092:	73bb      	strb	r3, [r7, #14]
	uint8_t state=0;
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  //Lecture de l'état du BP1
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8002098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800209c:	4832      	ldr	r0, [pc, #200]	; (8002168 <StartBgChanger+0xe0>)
 800209e:	f004 f8ef 	bl	8006280 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73bb      	strb	r3, [r7, #14]

	  //Machine à états
	  switch(state){
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d009      	beq.n	80020c0 <StartBgChanger+0x38>
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d04d      	beq.n	800214c <StartBgChanger+0xc4>
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d154      	bne.n	800215e <StartBgChanger+0xd6>
		  case 0:
			  //Attente d'un changement d'état (d'un appui sur BP1)
			  if(!BP1) state = 1;
 80020b4:	7bbb      	ldrb	r3, [r7, #14]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d14e      	bne.n	8002158 <StartBgChanger+0xd0>
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
			  break;
 80020be:	e04b      	b.n	8002158 <StartBgChanger+0xd0>
		  case 1:
			  //Changement de la couleur
			  couleur = !couleur;
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <StartBgChanger+0xe4>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b26      	ldr	r3, [pc, #152]	; (800216c <StartBgChanger+0xe4>)
 80020d2:	701a      	strb	r2, [r3, #0]
			  if(couleur==0){
 80020d4:	4b25      	ldr	r3, [pc, #148]	; (800216c <StartBgChanger+0xe4>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d11a      	bne.n	8002112 <StartBgChanger+0x8a>
				  //Capture de la ressource
				  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80020dc:	4b24      	ldr	r3, [pc, #144]	; (8002170 <StartBgChanger+0xe8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	4618      	mov	r0, r3
 80020e6:	f009 fe41 	bl	800bd6c <xQueueSemaphoreTake>

				  //Nettoyage et recoloration du LCD en noir sur fond blanc
				  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80020ea:	f04f 30ff 	mov.w	r0, #4294967295
 80020ee:	f000 fb65 	bl	80027bc <BSP_LCD_Clear>
				  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80020f2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80020f6:	f000 faff 	bl	80026f8 <BSP_LCD_SetTextColor>
				  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80020fa:	f04f 30ff 	mov.w	r0, #4294967295
 80020fe:	f000 fb13 	bl	8002728 <BSP_LCD_SetBackColor>

				  //Libération de la ressource
				  xSemaphoreGive(myMutex_LCDHandle);
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <StartBgChanger+0xe8>)
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	2200      	movs	r2, #0
 800210a:	2100      	movs	r1, #0
 800210c:	f009 fd2c 	bl	800bb68 <xQueueGenericSend>
 8002110:	e019      	b.n	8002146 <StartBgChanger+0xbe>
			  }
			  else{
				  //Capture de la ressource
				  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <StartBgChanger+0xe8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f04f 31ff 	mov.w	r1, #4294967295
 800211a:	4618      	mov	r0, r3
 800211c:	f009 fe26 	bl	800bd6c <xQueueSemaphoreTake>

				  //Nettoyage et recoloration du LCD en blanc sur fond noir
				  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8002120:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002124:	f000 fb4a 	bl	80027bc <BSP_LCD_Clear>
				  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f000 fae4 	bl	80026f8 <BSP_LCD_SetTextColor>
				  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002130:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002134:	f000 faf8 	bl	8002728 <BSP_LCD_SetBackColor>

				  //Libération de la ressource
				  xSemaphoreGive(myMutex_LCDHandle);
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <StartBgChanger+0xe8>)
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	2300      	movs	r3, #0
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	f009 fd11 	bl	800bb68 <xQueueGenericSend>
			  }

			  //Changement d'état
			  state = 2;
 8002146:	2302      	movs	r3, #2
 8002148:	73fb      	strb	r3, [r7, #15]
			  break;
 800214a:	e008      	b.n	800215e <StartBgChanger+0xd6>
		  case 2:
			  //Attente d'un changement d'état (relachement du bouton BP1)
			  if(BP1) state = 0;
 800214c:	7bbb      	ldrb	r3, [r7, #14]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <StartBgChanger+0xd4>
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
			  break;
 8002156:	e001      	b.n	800215c <StartBgChanger+0xd4>
			  break;
 8002158:	bf00      	nop
 800215a:	e000      	b.n	800215e <StartBgChanger+0xd6>
			  break;
 800215c:	bf00      	nop
	  }
  osDelay(400);
 800215e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002162:	f009 fa64 	bl	800b62e <osDelay>
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8002166:	e797      	b.n	8002098 <StartBgChanger+0x10>
 8002168:	40020000 	.word	0x40020000
 800216c:	20000032 	.word	0x20000032
 8002170:	20008b9c 	.word	0x20008b9c

08002174 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d101      	bne.n	800218a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002186:	f002 fb91 	bl	80048ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40001000 	.word	0x40001000

08002198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800219c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800219e:	e7fe      	b.n	800219e <Error_Handler+0x6>

080021a0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08c      	sub	sp, #48	; 0x30
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a51      	ldr	r2, [pc, #324]	; (80022f0 <I2Cx_MspInit+0x150>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d14d      	bne.n	800224c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <I2Cx_MspInit+0x154>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	4a4f      	ldr	r2, [pc, #316]	; (80022f4 <I2Cx_MspInit+0x154>)
 80021b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ba:	6313      	str	r3, [r2, #48]	; 0x30
 80021bc:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <I2Cx_MspInit+0x154>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80021cc:	2312      	movs	r3, #18
 80021ce:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80021d4:	2302      	movs	r3, #2
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80021d8:	2304      	movs	r3, #4
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	4845      	ldr	r0, [pc, #276]	; (80022f8 <I2Cx_MspInit+0x158>)
 80021e4:	f003 fd98 	bl	8005d18 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80021e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80021ee:	f107 031c 	add.w	r3, r7, #28
 80021f2:	4619      	mov	r1, r3
 80021f4:	4840      	ldr	r0, [pc, #256]	; (80022f8 <I2Cx_MspInit+0x158>)
 80021f6:	f003 fd8f 	bl	8005d18 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80021fa:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <I2Cx_MspInit+0x154>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a3d      	ldr	r2, [pc, #244]	; (80022f4 <I2Cx_MspInit+0x154>)
 8002200:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <I2Cx_MspInit+0x154>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <I2Cx_MspInit+0x154>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a37      	ldr	r2, [pc, #220]	; (80022f4 <I2Cx_MspInit+0x154>)
 8002218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800221c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800221e:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <I2Cx_MspInit+0x154>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a34      	ldr	r2, [pc, #208]	; (80022f4 <I2Cx_MspInit+0x154>)
 8002224:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002228:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	210f      	movs	r1, #15
 800222e:	2048      	movs	r0, #72	; 0x48
 8002230:	f003 f810 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002234:	2048      	movs	r0, #72	; 0x48
 8002236:	f003 f829 	bl	800528c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	210f      	movs	r1, #15
 800223e:	2049      	movs	r0, #73	; 0x49
 8002240:	f003 f808 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002244:	2049      	movs	r0, #73	; 0x49
 8002246:	f003 f821 	bl	800528c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800224a:	e04d      	b.n	80022e8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800224c:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <I2Cx_MspInit+0x154>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <I2Cx_MspInit+0x154>)
 8002252:	f043 0302 	orr.w	r3, r3, #2
 8002256:	6313      	str	r3, [r2, #48]	; 0x30
 8002258:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <I2Cx_MspInit+0x154>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002268:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800226a:	2312      	movs	r3, #18
 800226c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002272:	2302      	movs	r3, #2
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002276:	2304      	movs	r3, #4
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	481e      	ldr	r0, [pc, #120]	; (80022fc <I2Cx_MspInit+0x15c>)
 8002282:	f003 fd49 	bl	8005d18 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800228a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	4619      	mov	r1, r3
 8002292:	481a      	ldr	r0, [pc, #104]	; (80022fc <I2Cx_MspInit+0x15c>)
 8002294:	f003 fd40 	bl	8005d18 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002298:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <I2Cx_MspInit+0x154>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <I2Cx_MspInit+0x154>)
 800229e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022a2:	6413      	str	r3, [r2, #64]	; 0x40
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <I2Cx_MspInit+0x154>)
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <I2Cx_MspInit+0x154>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <I2Cx_MspInit+0x154>)
 80022b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ba:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <I2Cx_MspInit+0x154>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <I2Cx_MspInit+0x154>)
 80022c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022c6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	210f      	movs	r1, #15
 80022cc:	201f      	movs	r0, #31
 80022ce:	f002 ffc1 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80022d2:	201f      	movs	r0, #31
 80022d4:	f002 ffda 	bl	800528c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	210f      	movs	r1, #15
 80022dc:	2020      	movs	r0, #32
 80022de:	f002 ffb9 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80022e2:	2020      	movs	r0, #32
 80022e4:	f002 ffd2 	bl	800528c <HAL_NVIC_EnableIRQ>
}
 80022e8:	bf00      	nop
 80022ea:	3730      	adds	r7, #48	; 0x30
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200002d4 	.word	0x200002d4
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40021c00 	.word	0x40021c00
 80022fc:	40020400 	.word	0x40020400

08002300 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f004 fad9 	bl	80068c0 <HAL_I2C_GetState>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d125      	bne.n	8002360 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <I2Cx_Init+0x68>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d103      	bne.n	8002324 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a13      	ldr	r2, [pc, #76]	; (800236c <I2Cx_Init+0x6c>)
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	e002      	b.n	800232a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <I2Cx_Init+0x70>)
 8002328:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <I2Cx_Init+0x74>)
 800232e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff23 	bl	80021a0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f003 ffc2 	bl	80062e4 <HAL_I2C_Init>
  }
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	200002d4 	.word	0x200002d4
 800236c:	40005c00 	.word	0x40005c00
 8002370:	40005400 	.word	0x40005400
 8002374:	40912732 	.word	0x40912732

08002378 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af04      	add	r7, sp, #16
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4603      	mov	r3, r0
 8002388:	72fb      	strb	r3, [r7, #11]
 800238a:	460b      	mov	r3, r1
 800238c:	813b      	strh	r3, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002396:	7afb      	ldrb	r3, [r7, #11]
 8002398:	b299      	uxth	r1, r3
 800239a:	88f8      	ldrh	r0, [r7, #6]
 800239c:	893a      	ldrh	r2, [r7, #8]
 800239e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a2:	9302      	str	r3, [sp, #8]
 80023a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4603      	mov	r3, r0
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f004 f96c 	bl	800668c <HAL_I2C_Mem_Read>
 80023b4:	4603      	mov	r3, r0
 80023b6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80023be:	7afb      	ldrb	r3, [r7, #11]
 80023c0:	4619      	mov	r1, r3
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f832 	bl	800242c <I2Cx_Error>
  }
  return status;    
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b08a      	sub	sp, #40	; 0x28
 80023d6:	af04      	add	r7, sp, #16
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	4608      	mov	r0, r1
 80023dc:	4611      	mov	r1, r2
 80023de:	461a      	mov	r2, r3
 80023e0:	4603      	mov	r3, r0
 80023e2:	72fb      	strb	r3, [r7, #11]
 80023e4:	460b      	mov	r3, r1
 80023e6:	813b      	strh	r3, [r7, #8]
 80023e8:	4613      	mov	r3, r2
 80023ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80023f0:	7afb      	ldrb	r3, [r7, #11]
 80023f2:	b299      	uxth	r1, r3
 80023f4:	88f8      	ldrh	r0, [r7, #6]
 80023f6:	893a      	ldrh	r2, [r7, #8]
 80023f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	4603      	mov	r3, r0
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f004 f82b 	bl	8006464 <HAL_I2C_Mem_Write>
 800240e:	4603      	mov	r3, r0
 8002410:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002418:	7afb      	ldrb	r3, [r7, #11]
 800241a:	4619      	mov	r1, r3
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f805 	bl	800242c <I2Cx_Error>
  }
  return status;
 8002422:	7dfb      	ldrb	r3, [r7, #23]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f003 ffe3 	bl	8006404 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ff5e 	bl	8002300 <I2Cx_Init>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <TS_IO_Init+0x10>)
 8002452:	f7ff ff55 	bl	8002300 <I2Cx_Init>
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200002d4 	.word	0x200002d4

08002460 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af02      	add	r7, sp, #8
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
 800246a:	460b      	mov	r3, r1
 800246c:	71bb      	strb	r3, [r7, #6]
 800246e:	4613      	mov	r3, r2
 8002470:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002472:	79bb      	ldrb	r3, [r7, #6]
 8002474:	b29a      	uxth	r2, r3
 8002476:	79f9      	ldrb	r1, [r7, #7]
 8002478:	2301      	movs	r3, #1
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	1d7b      	adds	r3, r7, #5
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2301      	movs	r3, #1
 8002482:	4803      	ldr	r0, [pc, #12]	; (8002490 <TS_IO_Write+0x30>)
 8002484:	f7ff ffa5 	bl	80023d2 <I2Cx_WriteMultiple>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200002d4 	.word	0x200002d4

08002494 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af02      	add	r7, sp, #8
 800249a:	4603      	mov	r3, r0
 800249c:	460a      	mov	r2, r1
 800249e:	71fb      	strb	r3, [r7, #7]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	79f9      	ldrb	r1, [r7, #7]
 80024ae:	2301      	movs	r3, #1
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	f107 030f 	add.w	r3, r7, #15
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2301      	movs	r3, #1
 80024ba:	4804      	ldr	r0, [pc, #16]	; (80024cc <TS_IO_Read+0x38>)
 80024bc:	f7ff ff5c 	bl	8002378 <I2Cx_ReadMultiple>

  return read_value;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200002d4 	.word	0x200002d4

080024d0 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f002 fa07 	bl	80048ec <HAL_Delay>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80024ec:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <BSP_LCD_Init+0xcc>)
 80024ee:	2228      	movs	r2, #40	; 0x28
 80024f0:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <BSP_LCD_Init+0xcc>)
 80024f4:	2209      	movs	r2, #9
 80024f6:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80024f8:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <BSP_LCD_Init+0xcc>)
 80024fa:	2235      	movs	r2, #53	; 0x35
 80024fc:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80024fe:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <BSP_LCD_Init+0xcc>)
 8002500:	220b      	movs	r2, #11
 8002502:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <BSP_LCD_Init+0xcc>)
 8002506:	f240 121b 	movw	r2, #283	; 0x11b
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <BSP_LCD_Init+0xcc>)
 800250e:	f240 2215 	movw	r2, #533	; 0x215
 8002512:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <BSP_LCD_Init+0xcc>)
 8002516:	f240 121d 	movw	r2, #285	; 0x11d
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <BSP_LCD_Init+0xcc>)
 800251e:	f240 2235 	movw	r2, #565	; 0x235
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002524:	2100      	movs	r1, #0
 8002526:	4823      	ldr	r0, [pc, #140]	; (80025b4 <BSP_LCD_Init+0xcc>)
 8002528:	f000 ffe8 	bl	80034fc <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <BSP_LCD_Init+0xcc>)
 800252e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002532:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002534:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <BSP_LCD_Init+0xcc>)
 8002536:	f44f 7288 	mov.w	r2, #272	; 0x110
 800253a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <BSP_LCD_Init+0xcc>)
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <BSP_LCD_Init+0xcc>)
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <BSP_LCD_Init+0xcc>)
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002554:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <BSP_LCD_Init+0xcc>)
 8002556:	2200      	movs	r2, #0
 8002558:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <BSP_LCD_Init+0xcc>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <BSP_LCD_Init+0xcc>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002566:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <BSP_LCD_Init+0xcc>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <BSP_LCD_Init+0xcc>)
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <BSP_LCD_Init+0xd0>)
 8002570:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002572:	4810      	ldr	r0, [pc, #64]	; (80025b4 <BSP_LCD_Init+0xcc>)
 8002574:	f004 fe36 	bl	80071e4 <HAL_LTDC_GetState>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d103      	bne.n	8002586 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800257e:	2100      	movs	r1, #0
 8002580:	480c      	ldr	r0, [pc, #48]	; (80025b4 <BSP_LCD_Init+0xcc>)
 8002582:	f000 fee1 	bl	8003348 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002586:	480b      	ldr	r0, [pc, #44]	; (80025b4 <BSP_LCD_Init+0xcc>)
 8002588:	f004 fc5c 	bl	8006e44 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800258c:	2201      	movs	r2, #1
 800258e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002592:	480a      	ldr	r0, [pc, #40]	; (80025bc <BSP_LCD_Init+0xd4>)
 8002594:	f003 fe8c 	bl	80062b0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002598:	2201      	movs	r2, #1
 800259a:	2108      	movs	r1, #8
 800259c:	4808      	ldr	r0, [pc, #32]	; (80025c0 <BSP_LCD_Init+0xd8>)
 800259e:	f003 fe87 	bl	80062b0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80025a2:	f001 f98b 	bl	80038bc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80025a6:	4807      	ldr	r0, [pc, #28]	; (80025c4 <BSP_LCD_Init+0xdc>)
 80025a8:	f000 f8d8 	bl	800275c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20008bb4 	.word	0x20008bb4
 80025b8:	40016800 	.word	0x40016800
 80025bc:	40022000 	.word	0x40022000
 80025c0:	40022800 	.word	0x40022800
 80025c4:	20000034 	.word	0x20000034

080025c8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <BSP_LCD_GetXSize+0x20>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a06      	ldr	r2, [pc, #24]	; (80025ec <BSP_LCD_GetXSize+0x24>)
 80025d2:	2134      	movs	r1, #52	; 0x34
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3360      	adds	r3, #96	; 0x60
 80025dc:	681b      	ldr	r3, [r3, #0]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	20000360 	.word	0x20000360
 80025ec:	20008bb4 	.word	0x20008bb4

080025f0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <BSP_LCD_GetYSize+0x20>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a06      	ldr	r2, [pc, #24]	; (8002614 <BSP_LCD_GetYSize+0x24>)
 80025fa:	2134      	movs	r1, #52	; 0x34
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3364      	adds	r3, #100	; 0x64
 8002604:	681b      	ldr	r3, [r3, #0]
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	20000360 	.word	0x20000360
 8002614:	20008bb4 	.word	0x20008bb4

08002618 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002618:	b580      	push	{r7, lr}
 800261a:	b090      	sub	sp, #64	; 0x40
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002628:	f7ff ffce 	bl	80025c8 <BSP_LCD_GetXSize>
 800262c:	4603      	mov	r3, r0
 800262e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002634:	f7ff ffdc 	bl	80025f0 <BSP_LCD_GetYSize>
 8002638:	4603      	mov	r3, r0
 800263a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002644:	23ff      	movs	r3, #255	; 0xff
 8002646:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800265e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002664:	2307      	movs	r3, #7
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002668:	f7ff ffae 	bl	80025c8 <BSP_LCD_GetXSize>
 800266c:	4603      	mov	r3, r0
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002670:	f7ff ffbe 	bl	80025f0 <BSP_LCD_GetYSize>
 8002674:	4603      	mov	r3, r0
 8002676:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002678:	88fa      	ldrh	r2, [r7, #6]
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	4619      	mov	r1, r3
 8002680:	4812      	ldr	r0, [pc, #72]	; (80026cc <BSP_LCD_LayerDefaultInit+0xb4>)
 8002682:	f004 fd71 	bl	8007168 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002686:	88fa      	ldrh	r2, [r7, #6]
 8002688:	4911      	ldr	r1, [pc, #68]	; (80026d0 <BSP_LCD_LayerDefaultInit+0xb8>)
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3304      	adds	r3, #4
 8002696:	f04f 32ff 	mov.w	r2, #4294967295
 800269a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800269c:	88fa      	ldrh	r2, [r7, #6]
 800269e:	490c      	ldr	r1, [pc, #48]	; (80026d0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3308      	adds	r3, #8
 80026ac:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80026ae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80026b0:	88fa      	ldrh	r2, [r7, #6]
 80026b2:	4907      	ldr	r1, [pc, #28]	; (80026d0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80026c2:	601a      	str	r2, [r3, #0]
}
 80026c4:	bf00      	nop
 80026c6:	3740      	adds	r7, #64	; 0x40
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20008bb4 	.word	0x20008bb4
 80026d0:	20000364 	.word	0x20000364
 80026d4:	20000034 	.word	0x20000034

080026d8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <BSP_LCD_SelectLayer+0x1c>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6013      	str	r3, [r2, #0]
} 
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000360 	.word	0x20000360

080026f8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <BSP_LCD_SetTextColor+0x28>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4907      	ldr	r1, [pc, #28]	; (8002724 <BSP_LCD_SetTextColor+0x2c>)
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	601a      	str	r2, [r3, #0]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	20000360 	.word	0x20000360
 8002724:	20000364 	.word	0x20000364

08002728 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <BSP_LCD_SetBackColor+0x2c>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4908      	ldr	r1, [pc, #32]	; (8002758 <BSP_LCD_SetBackColor+0x30>)
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3304      	adds	r3, #4
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	601a      	str	r2, [r3, #0]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000360 	.word	0x20000360
 8002758:	20000364 	.word	0x20000364

0800275c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <BSP_LCD_SetFont+0x2c>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4908      	ldr	r1, [pc, #32]	; (800278c <BSP_LCD_SetFont+0x30>)
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	3308      	adds	r3, #8
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000360 	.word	0x20000360
 800278c:	20000364 	.word	0x20000364

08002790 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <BSP_LCD_GetFont+0x24>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4907      	ldr	r1, [pc, #28]	; (80027b8 <BSP_LCD_GetFont+0x28>)
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3308      	adds	r3, #8
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000360 	.word	0x20000360
 80027b8:	20000364 	.word	0x20000364

080027bc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80027bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027be:	b085      	sub	sp, #20
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <BSP_LCD_Clear+0x48>)
 80027c6:	681c      	ldr	r4, [r3, #0]
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <BSP_LCD_Clear+0x48>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <BSP_LCD_Clear+0x4c>)
 80027ce:	2134      	movs	r1, #52	; 0x34
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	335c      	adds	r3, #92	; 0x5c
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461d      	mov	r5, r3
 80027dc:	f7ff fef4 	bl	80025c8 <BSP_LCD_GetXSize>
 80027e0:	4606      	mov	r6, r0
 80027e2:	f7ff ff05 	bl	80025f0 <BSP_LCD_GetYSize>
 80027e6:	4602      	mov	r2, r0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	2300      	movs	r3, #0
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	4632      	mov	r2, r6
 80027f4:	4629      	mov	r1, r5
 80027f6:	4620      	mov	r0, r4
 80027f8:	f001 f814 	bl	8003824 <LL_FillBuffer>
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002804:	20000360 	.word	0x20000360
 8002808:	20008bb4 	.word	0x20008bb4

0800280c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	80fb      	strh	r3, [r7, #6]
 8002816:	460b      	mov	r3, r1
 8002818:	80bb      	strh	r3, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <BSP_LCD_DisplayChar+0x80>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	491b      	ldr	r1, [pc, #108]	; (8002890 <BSP_LCD_DisplayChar+0x84>)
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	3308      	adds	r3, #8
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <BSP_LCD_DisplayChar+0x80>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4c14      	ldr	r4, [pc, #80]	; (8002890 <BSP_LCD_DisplayChar+0x84>)
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4423      	add	r3, r4
 800284a:	3308      	adds	r3, #8
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002850:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <BSP_LCD_DisplayChar+0x80>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4c0d      	ldr	r4, [pc, #52]	; (8002890 <BSP_LCD_DisplayChar+0x84>)
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4423      	add	r3, r4
 8002864:	3308      	adds	r3, #8
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	889b      	ldrh	r3, [r3, #4]
 800286a:	3307      	adds	r3, #7
 800286c:	2b00      	cmp	r3, #0
 800286e:	da00      	bge.n	8002872 <BSP_LCD_DisplayChar+0x66>
 8002870:	3307      	adds	r3, #7
 8002872:	10db      	asrs	r3, r3, #3
 8002874:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002878:	18ca      	adds	r2, r1, r3
 800287a:	88b9      	ldrh	r1, [r7, #4]
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fe58 	bl	8003534 <DrawChar>
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bd90      	pop	{r4, r7, pc}
 800288c:	20000360 	.word	0x20000360
 8002890:	20000364 	.word	0x20000364

08002894 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002894:	b5b0      	push	{r4, r5, r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	60ba      	str	r2, [r7, #8]
 800289c:	461a      	mov	r2, r3
 800289e:	4603      	mov	r3, r0
 80028a0:	81fb      	strh	r3, [r7, #14]
 80028a2:	460b      	mov	r3, r1
 80028a4:	81bb      	strh	r3, [r7, #12]
 80028a6:	4613      	mov	r3, r2
 80028a8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80028aa:	2301      	movs	r3, #1
 80028ac:	83fb      	strh	r3, [r7, #30]
 80028ae:	2300      	movs	r3, #0
 80028b0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80028be:	e002      	b.n	80028c6 <BSP_LCD_DisplayStringAt+0x32>
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	3301      	adds	r3, #1
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	617a      	str	r2, [r7, #20]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f6      	bne.n	80028c0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80028d2:	f7ff fe79 	bl	80025c8 <BSP_LCD_GetXSize>
 80028d6:	4b4f      	ldr	r3, [pc, #316]	; (8002a14 <BSP_LCD_DisplayStringAt+0x180>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	494f      	ldr	r1, [pc, #316]	; (8002a18 <BSP_LCD_DisplayStringAt+0x184>)
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	3308      	adds	r3, #8
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	889b      	ldrh	r3, [r3, #4]
 80028ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f0:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d01c      	beq.n	8002932 <BSP_LCD_DisplayStringAt+0x9e>
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d017      	beq.n	800292c <BSP_LCD_DisplayStringAt+0x98>
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d12e      	bne.n	800295e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	1ad1      	subs	r1, r2, r3
 8002906:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <BSP_LCD_DisplayStringAt+0x180>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4843      	ldr	r0, [pc, #268]	; (8002a18 <BSP_LCD_DisplayStringAt+0x184>)
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4403      	add	r3, r0
 8002916:	3308      	adds	r3, #8
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	889b      	ldrh	r3, [r3, #4]
 800291c:	fb03 f301 	mul.w	r3, r3, r1
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	4413      	add	r3, r2
 8002928:	83fb      	strh	r3, [r7, #30]
      break;
 800292a:	e01b      	b.n	8002964 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800292c:	89fb      	ldrh	r3, [r7, #14]
 800292e:	83fb      	strh	r3, [r7, #30]
      break;
 8002930:	e018      	b.n	8002964 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	b299      	uxth	r1, r3
 800293a:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <BSP_LCD_DisplayStringAt+0x180>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4836      	ldr	r0, [pc, #216]	; (8002a18 <BSP_LCD_DisplayStringAt+0x184>)
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4403      	add	r3, r0
 800294a:	3308      	adds	r3, #8
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	889b      	ldrh	r3, [r3, #4]
 8002950:	fb11 f303 	smulbb	r3, r1, r3
 8002954:	b29a      	uxth	r2, r3
 8002956:	89fb      	ldrh	r3, [r7, #14]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	83fb      	strh	r3, [r7, #30]
      break;
 800295c:	e002      	b.n	8002964 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800295e:	89fb      	ldrh	r3, [r7, #14]
 8002960:	83fb      	strh	r3, [r7, #30]
      break;
 8002962:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002964:	8bfb      	ldrh	r3, [r7, #30]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <BSP_LCD_DisplayStringAt+0xde>
 800296a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800296e:	2b00      	cmp	r3, #0
 8002970:	da1d      	bge.n	80029ae <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8002972:	2301      	movs	r3, #1
 8002974:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002976:	e01a      	b.n	80029ae <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	89b9      	ldrh	r1, [r7, #12]
 800297e:	8bfb      	ldrh	r3, [r7, #30]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff43 	bl	800280c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <BSP_LCD_DisplayStringAt+0x180>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4923      	ldr	r1, [pc, #140]	; (8002a18 <BSP_LCD_DisplayStringAt+0x184>)
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	3308      	adds	r3, #8
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	889a      	ldrh	r2, [r3, #4]
 800299c:	8bfb      	ldrh	r3, [r7, #30]
 800299e:	4413      	add	r3, r2
 80029a0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3301      	adds	r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
    i++;
 80029a8:	8bbb      	ldrh	r3, [r7, #28]
 80029aa:	3301      	adds	r3, #1
 80029ac:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2dc      	uxtb	r4, r3
 80029bc:	f7ff fe04 	bl	80025c8 <BSP_LCD_GetXSize>
 80029c0:	4605      	mov	r5, r0
 80029c2:	8bb9      	ldrh	r1, [r7, #28]
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <BSP_LCD_DisplayStringAt+0x180>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4813      	ldr	r0, [pc, #76]	; (8002a18 <BSP_LCD_DisplayStringAt+0x184>)
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4403      	add	r3, r0
 80029d4:	3308      	adds	r3, #8
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	889b      	ldrh	r3, [r3, #4]
 80029da:	fb03 f301 	mul.w	r3, r3, r1
 80029de:	1aeb      	subs	r3, r5, r3
 80029e0:	b299      	uxth	r1, r3
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <BSP_LCD_DisplayStringAt+0x180>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	480c      	ldr	r0, [pc, #48]	; (8002a18 <BSP_LCD_DisplayStringAt+0x184>)
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4403      	add	r3, r0
 80029f2:	3308      	adds	r3, #8
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	889b      	ldrh	r3, [r3, #4]
 80029f8:	4299      	cmp	r1, r3
 80029fa:	bf2c      	ite	cs
 80029fc:	2301      	movcs	r3, #1
 80029fe:	2300      	movcc	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	4023      	ands	r3, r4
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1b6      	bne.n	8002978 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8002a0a:	bf00      	nop
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bdb0      	pop	{r4, r5, r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000360 	.word	0x20000360
 8002a18:	20000364 	.word	0x20000364

08002a1c <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	6039      	str	r1, [r7, #0]
 8002a26:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002a28:	f7ff feb2 	bl	8002790 <BSP_LCD_GetFont>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	88db      	ldrh	r3, [r3, #6]
 8002a30:	88fa      	ldrh	r2, [r7, #6]
 8002a32:	fb12 f303 	smulbb	r3, r2, r3
 8002a36:	b299      	uxth	r1, r3
 8002a38:	2303      	movs	r3, #3
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7ff ff29 	bl	8002894 <BSP_LCD_DisplayStringAt>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a4c:	b5b0      	push	{r4, r5, r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	4603      	mov	r3, r0
 8002a54:	80fb      	strh	r3, [r7, #6]
 8002a56:	460b      	mov	r3, r1
 8002a58:	80bb      	strh	r3, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <BSP_LCD_DrawHLine+0xb0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a26      	ldr	r2, [pc, #152]	; (8002b00 <BSP_LCD_DrawHLine+0xb4>)
 8002a68:	2134      	movs	r1, #52	; 0x34
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3348      	adds	r3, #72	; 0x48
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d114      	bne.n	8002aa2 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a78:	4b20      	ldr	r3, [pc, #128]	; (8002afc <BSP_LCD_DrawHLine+0xb0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a20      	ldr	r2, [pc, #128]	; (8002b00 <BSP_LCD_DrawHLine+0xb4>)
 8002a7e:	2134      	movs	r1, #52	; 0x34
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	335c      	adds	r3, #92	; 0x5c
 8002a88:	681c      	ldr	r4, [r3, #0]
 8002a8a:	f7ff fd9d 	bl	80025c8 <BSP_LCD_GetXSize>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	88bb      	ldrh	r3, [r7, #4]
 8002a92:	fb03 f202 	mul.w	r2, r3, r2
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	4413      	add	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4423      	add	r3, r4
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e013      	b.n	8002aca <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <BSP_LCD_DrawHLine+0xb0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <BSP_LCD_DrawHLine+0xb4>)
 8002aa8:	2134      	movs	r1, #52	; 0x34
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	335c      	adds	r3, #92	; 0x5c
 8002ab2:	681c      	ldr	r4, [r3, #0]
 8002ab4:	f7ff fd88 	bl	80025c8 <BSP_LCD_GetXSize>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	88bb      	ldrh	r3, [r7, #4]
 8002abc:	fb03 f202 	mul.w	r2, r3, r2
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4423      	add	r3, r4
 8002ac8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <BSP_LCD_DrawHLine+0xb0>)
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	68fc      	ldr	r4, [r7, #12]
 8002ad0:	887d      	ldrh	r5, [r7, #2]
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <BSP_LCD_DrawHLine+0xb0>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	490b      	ldr	r1, [pc, #44]	; (8002b04 <BSP_LCD_DrawHLine+0xb8>)
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	2301      	movs	r3, #1
 8002aec:	462a      	mov	r2, r5
 8002aee:	4621      	mov	r1, r4
 8002af0:	f000 fe98 	bl	8003824 <LL_FillBuffer>
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bdb0      	pop	{r4, r5, r7, pc}
 8002afc:	20000360 	.word	0x20000360
 8002b00:	20008bb4 	.word	0x20008bb4
 8002b04:	20000364 	.word	0x20000364

08002b08 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b08b      	sub	sp, #44	; 0x2c
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4604      	mov	r4, r0
 8002b10:	4608      	mov	r0, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	461a      	mov	r2, r3
 8002b16:	4623      	mov	r3, r4
 8002b18:	80fb      	strh	r3, [r7, #6]
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80bb      	strh	r3, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	807b      	strh	r3, [r7, #2]
 8002b22:	4613      	mov	r3, r2
 8002b24:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002b26:	2300      	movs	r3, #0
 8002b28:	823b      	strh	r3, [r7, #16]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	81fb      	strh	r3, [r7, #14]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b32:	2300      	movs	r3, #0
 8002b34:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002b36:	2300      	movs	r3, #0
 8002b38:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8002b3e:	2300      	movs	r3, #0
 8002b40:	83fb      	strh	r3, [r7, #30]
 8002b42:	2300      	movs	r3, #0
 8002b44:	83bb      	strh	r3, [r7, #28]
 8002b46:	2300      	movs	r3, #0
 8002b48:	837b      	strh	r3, [r7, #26]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	833b      	strh	r3, [r7, #24]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	82fb      	strh	r3, [r7, #22]
 8002b52:	2300      	movs	r3, #0
 8002b54:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bfb8      	it	lt
 8002b64:	425b      	neglt	r3, r3
 8002b66:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002b68:	883a      	ldrh	r2, [r7, #0]
 8002b6a:	88bb      	ldrh	r3, [r7, #4]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bfb8      	it	lt
 8002b72:	425b      	neglt	r3, r3
 8002b74:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8002b7a:	88bb      	ldrh	r3, [r7, #4]
 8002b7c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d304      	bcc.n	8002b90 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	843b      	strh	r3, [r7, #32]
 8002b8e:	e005      	b.n	8002b9c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b94:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b9a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8002b9c:	883a      	ldrh	r2, [r7, #0]
 8002b9e:	88bb      	ldrh	r3, [r7, #4]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d304      	bcc.n	8002bae <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	83bb      	strh	r3, [r7, #28]
 8002bac:	e005      	b.n	8002bba <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002bba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002bbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	db11      	blt.n	8002bea <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002bca:	2300      	movs	r3, #0
 8002bcc:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002bce:	8a3b      	ldrh	r3, [r7, #16]
 8002bd0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002bd2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da00      	bge.n	8002bdc <BSP_LCD_DrawLine+0xd4>
 8002bda:	3301      	adds	r3, #1
 8002bdc:	105b      	asrs	r3, r3, #1
 8002bde:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8002be0:	89fb      	ldrh	r3, [r7, #14]
 8002be2:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8002be4:	8a3b      	ldrh	r3, [r7, #16]
 8002be6:	82bb      	strh	r3, [r7, #20]
 8002be8:	e010      	b.n	8002c0c <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002bea:	2300      	movs	r3, #0
 8002bec:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002bee:	2300      	movs	r3, #0
 8002bf0:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002bf2:	89fb      	ldrh	r3, [r7, #14]
 8002bf4:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002bf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	da00      	bge.n	8002c00 <BSP_LCD_DrawLine+0xf8>
 8002bfe:	3301      	adds	r3, #1
 8002c00:	105b      	asrs	r3, r3, #1
 8002c02:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8002c04:	8a3b      	ldrh	r3, [r7, #16]
 8002c06:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8002c08:	89fb      	ldrh	r3, [r7, #14]
 8002c0a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	827b      	strh	r3, [r7, #18]
 8002c10:	e038      	b.n	8002c84 <BSP_LCD_DrawLine+0x17c>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002c12:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002c14:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <BSP_LCD_DrawLine+0x190>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4920      	ldr	r1, [pc, #128]	; (8002c9c <BSP_LCD_DrawLine+0x194>)
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	f000 f928 	bl	8002e80 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002c30:	8b3a      	ldrh	r2, [r7, #24]
 8002c32:	8afb      	ldrh	r3, [r7, #22]
 8002c34:	4413      	add	r3, r2
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002c3a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002c3e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	db0e      	blt.n	8002c64 <BSP_LCD_DrawLine+0x15c>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002c46:	8b3a      	ldrh	r2, [r7, #24]
 8002c48:	8b7b      	ldrh	r3, [r7, #26]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002c50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c54:	4413      	add	r3, r2
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002c5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c5c:	8bfb      	ldrh	r3, [r7, #30]
 8002c5e:	4413      	add	r3, r2
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002c64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c66:	8c3b      	ldrh	r3, [r7, #32]
 8002c68:	4413      	add	r3, r2
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002c6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c70:	8bbb      	ldrh	r3, [r7, #28]
 8002c72:	4413      	add	r3, r2
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002c78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	827b      	strh	r3, [r7, #18]
 8002c84:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	ddc0      	ble.n	8002c12 <BSP_LCD_DrawLine+0x10a>
  }
}
 8002c90:	bf00      	nop
 8002c92:	372c      	adds	r7, #44	; 0x2c
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd90      	pop	{r4, r7, pc}
 8002c98:	20000360 	.word	0x20000360
 8002c9c:	20000364 	.word	0x20000364

08002ca0 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	80fb      	strh	r3, [r7, #6]
 8002caa:	460b      	mov	r3, r1
 8002cac:	80bb      	strh	r3, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	f1c3 0303 	rsb	r3, r3, #3
 8002cba:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002cc0:	887b      	ldrh	r3, [r7, #2]
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002cc4:	e0cf      	b.n	8002e66 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	4413      	add	r3, r2
 8002cce:	b298      	uxth	r0, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	88ba      	ldrh	r2, [r7, #4]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	b29c      	uxth	r4, r3
 8002cda:	4b67      	ldr	r3, [pc, #412]	; (8002e78 <BSP_LCD_DrawCircle+0x1d8>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4967      	ldr	r1, [pc, #412]	; (8002e7c <BSP_LCD_DrawCircle+0x1dc>)
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4621      	mov	r1, r4
 8002cf0:	f000 f8c6 	bl	8002e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	b298      	uxth	r0, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	88ba      	ldrh	r2, [r7, #4]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	b29c      	uxth	r4, r3
 8002d08:	4b5b      	ldr	r3, [pc, #364]	; (8002e78 <BSP_LCD_DrawCircle+0x1d8>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	495b      	ldr	r1, [pc, #364]	; (8002e7c <BSP_LCD_DrawCircle+0x1dc>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	f000 f8af 	bl	8002e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	4413      	add	r3, r2
 8002d2a:	b298      	uxth	r0, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	88ba      	ldrh	r2, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	b29c      	uxth	r4, r3
 8002d36:	4b50      	ldr	r3, [pc, #320]	; (8002e78 <BSP_LCD_DrawCircle+0x1d8>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4950      	ldr	r1, [pc, #320]	; (8002e7c <BSP_LCD_DrawCircle+0x1dc>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	f000 f898 	bl	8002e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	88fa      	ldrh	r2, [r7, #6]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	b298      	uxth	r0, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	88ba      	ldrh	r2, [r7, #4]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	b29c      	uxth	r4, r3
 8002d64:	4b44      	ldr	r3, [pc, #272]	; (8002e78 <BSP_LCD_DrawCircle+0x1d8>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4944      	ldr	r1, [pc, #272]	; (8002e7c <BSP_LCD_DrawCircle+0x1dc>)
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4621      	mov	r1, r4
 8002d7a:	f000 f881 	bl	8002e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	4413      	add	r3, r2
 8002d86:	b298      	uxth	r0, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	88bb      	ldrh	r3, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	b29c      	uxth	r4, r3
 8002d92:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <BSP_LCD_DrawCircle+0x1d8>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4939      	ldr	r1, [pc, #228]	; (8002e7c <BSP_LCD_DrawCircle+0x1dc>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4621      	mov	r1, r4
 8002da8:	f000 f86a 	bl	8002e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	88fa      	ldrh	r2, [r7, #6]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	b298      	uxth	r0, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	88bb      	ldrh	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b29c      	uxth	r4, r3
 8002dc0:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <BSP_LCD_DrawCircle+0x1d8>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	492d      	ldr	r1, [pc, #180]	; (8002e7c <BSP_LCD_DrawCircle+0x1dc>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	f000 f853 	bl	8002e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	4413      	add	r3, r2
 8002de2:	b298      	uxth	r0, r3
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	88bb      	ldrh	r3, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	b29c      	uxth	r4, r3
 8002dee:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <BSP_LCD_DrawCircle+0x1d8>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4922      	ldr	r1, [pc, #136]	; (8002e7c <BSP_LCD_DrawCircle+0x1dc>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4621      	mov	r1, r4
 8002e04:	f000 f83c 	bl	8002e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	88fa      	ldrh	r2, [r7, #6]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	b298      	uxth	r0, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	88bb      	ldrh	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	b29c      	uxth	r4, r3
 8002e1c:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <BSP_LCD_DrawCircle+0x1d8>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4916      	ldr	r1, [pc, #88]	; (8002e7c <BSP_LCD_DrawCircle+0x1dc>)
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4621      	mov	r1, r4
 8002e32:	f000 f825 	bl	8002e80 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	da06      	bge.n	8002e4a <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	009a      	lsls	r2, r3, #2
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	4413      	add	r3, r2
 8002e44:	3306      	adds	r3, #6
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e00a      	b.n	8002e60 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	009a      	lsls	r2, r3, #2
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4413      	add	r3, r2
 8002e56:	330a      	adds	r3, #10
 8002e58:	617b      	str	r3, [r7, #20]
      current_y--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	3301      	adds	r3, #1
 8002e64:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	f67f af2b 	bls.w	8002cc6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd90      	pop	{r4, r7, pc}
 8002e78:	20000360 	.word	0x20000360
 8002e7c:	20000364 	.word	0x20000364

08002e80 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002e80:	b5b0      	push	{r4, r5, r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	603a      	str	r2, [r7, #0]
 8002e8a:	80fb      	strh	r3, [r7, #6]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e90:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <BSP_LCD_DrawPixel+0x88>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <BSP_LCD_DrawPixel+0x8c>)
 8002e96:	2134      	movs	r1, #52	; 0x34
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3348      	adds	r3, #72	; 0x48
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d116      	bne.n	8002ed4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002ea6:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <BSP_LCD_DrawPixel+0x88>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <BSP_LCD_DrawPixel+0x8c>)
 8002eac:	2134      	movs	r1, #52	; 0x34
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	335c      	adds	r3, #92	; 0x5c
 8002eb6:	681c      	ldr	r4, [r3, #0]
 8002eb8:	88bd      	ldrh	r5, [r7, #4]
 8002eba:	f7ff fb85 	bl	80025c8 <BSP_LCD_GetXSize>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	fb03 f205 	mul.w	r2, r3, r5
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4423      	add	r3, r4
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	b292      	uxth	r2, r2
 8002ed0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002ed2:	e015      	b.n	8002f00 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <BSP_LCD_DrawPixel+0x88>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0c      	ldr	r2, [pc, #48]	; (8002f0c <BSP_LCD_DrawPixel+0x8c>)
 8002eda:	2134      	movs	r1, #52	; 0x34
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	335c      	adds	r3, #92	; 0x5c
 8002ee4:	681c      	ldr	r4, [r3, #0]
 8002ee6:	88bd      	ldrh	r5, [r7, #4]
 8002ee8:	f7ff fb6e 	bl	80025c8 <BSP_LCD_GetXSize>
 8002eec:	4603      	mov	r3, r0
 8002eee:	fb03 f205 	mul.w	r2, r3, r5
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4423      	add	r3, r4
 8002efa:	461a      	mov	r2, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6013      	str	r3, [r2, #0]
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bdb0      	pop	{r4, r5, r7, pc}
 8002f08:	20000360 	.word	0x20000360
 8002f0c:	20008bb4 	.word	0x20008bb4

08002f10 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f14:	b086      	sub	sp, #24
 8002f16:	af02      	add	r7, sp, #8
 8002f18:	4604      	mov	r4, r0
 8002f1a:	4608      	mov	r0, r1
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4623      	mov	r3, r4
 8002f22:	80fb      	strh	r3, [r7, #6]
 8002f24:	4603      	mov	r3, r0
 8002f26:	80bb      	strh	r3, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002f34:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <BSP_LCD_FillRect+0xe8>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4930      	ldr	r1, [pc, #192]	; (8002ffc <BSP_LCD_FillRect+0xec>)
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fbd6 	bl	80026f8 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <BSP_LCD_FillRect+0xe8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2b      	ldr	r2, [pc, #172]	; (8003000 <BSP_LCD_FillRect+0xf0>)
 8002f52:	2134      	movs	r1, #52	; 0x34
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	3348      	adds	r3, #72	; 0x48
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d114      	bne.n	8002f8c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <BSP_LCD_FillRect+0xe8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a26      	ldr	r2, [pc, #152]	; (8003000 <BSP_LCD_FillRect+0xf0>)
 8002f68:	2134      	movs	r1, #52	; 0x34
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	335c      	adds	r3, #92	; 0x5c
 8002f72:	681c      	ldr	r4, [r3, #0]
 8002f74:	f7ff fb28 	bl	80025c8 <BSP_LCD_GetXSize>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	88bb      	ldrh	r3, [r7, #4]
 8002f7c:	fb03 f202 	mul.w	r2, r3, r2
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	4413      	add	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4423      	add	r3, r4
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	e013      	b.n	8002fb4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ff8 <BSP_LCD_FillRect+0xe8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1b      	ldr	r2, [pc, #108]	; (8003000 <BSP_LCD_FillRect+0xf0>)
 8002f92:	2134      	movs	r1, #52	; 0x34
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	335c      	adds	r3, #92	; 0x5c
 8002f9c:	681c      	ldr	r4, [r3, #0]
 8002f9e:	f7ff fb13 	bl	80025c8 <BSP_LCD_GetXSize>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	88bb      	ldrh	r3, [r7, #4]
 8002fa6:	fb03 f202 	mul.w	r2, r3, r2
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4423      	add	r3, r4
 8002fb2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <BSP_LCD_FillRect+0xe8>)
 8002fb6:	681c      	ldr	r4, [r3, #0]
 8002fb8:	68fd      	ldr	r5, [r7, #12]
 8002fba:	887e      	ldrh	r6, [r7, #2]
 8002fbc:	f8b7 8000 	ldrh.w	r8, [r7]
 8002fc0:	f7ff fb02 	bl	80025c8 <BSP_LCD_GetXSize>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	887b      	ldrh	r3, [r7, #2]
 8002fc8:	1ad1      	subs	r1, r2, r3
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <BSP_LCD_FillRect+0xe8>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	480b      	ldr	r0, [pc, #44]	; (8002ffc <BSP_LCD_FillRect+0xec>)
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4403      	add	r3, r0
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	9100      	str	r1, [sp, #0]
 8002fe0:	4643      	mov	r3, r8
 8002fe2:	4632      	mov	r2, r6
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f000 fc1c 	bl	8003824 <LL_FillBuffer>
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000360 	.word	0x20000360
 8002ffc:	20000364 	.word	0x20000364
 8003000:	20008bb4 	.word	0x20008bb4

08003004 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	80fb      	strh	r3, [r7, #6]
 800300e:	460b      	mov	r3, r1
 8003010:	80bb      	strh	r3, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	f1c3 0303 	rsb	r3, r3, #3
 800301e:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003028:	4b44      	ldr	r3, [pc, #272]	; (800313c <BSP_LCD_FillCircle+0x138>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4944      	ldr	r1, [pc, #272]	; (8003140 <BSP_LCD_FillCircle+0x13c>)
 800302e:	4613      	mov	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fb5c 	bl	80026f8 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003040:	e061      	b.n	8003106 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d021      	beq.n	800308c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	b29b      	uxth	r3, r3
 800304c:	88fa      	ldrh	r2, [r7, #6]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	b298      	uxth	r0, r3
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	b29a      	uxth	r2, r3
 8003056:	88bb      	ldrh	r3, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	b299      	uxth	r1, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	b29b      	uxth	r3, r3
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	f7ff fcf1 	bl	8002a4c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	b29b      	uxth	r3, r3
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	b298      	uxth	r0, r3
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	b29b      	uxth	r3, r3
 8003078:	88ba      	ldrh	r2, [r7, #4]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	b299      	uxth	r1, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	b29b      	uxth	r3, r3
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	b29b      	uxth	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	f7ff fce0 	bl	8002a4c <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d021      	beq.n	80030d6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	b29b      	uxth	r3, r3
 8003096:	88fa      	ldrh	r2, [r7, #6]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	b298      	uxth	r0, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	88ba      	ldrh	r2, [r7, #4]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	b299      	uxth	r1, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	f7ff fccc 	bl	8002a4c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	88fa      	ldrh	r2, [r7, #6]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	b298      	uxth	r0, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	88bb      	ldrh	r3, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	b299      	uxth	r1, r3
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	f7ff fcbb 	bl	8002a4c <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da06      	bge.n	80030ea <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	009a      	lsls	r2, r3, #2
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	4413      	add	r3, r2
 80030e4:	3306      	adds	r3, #6
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	e00a      	b.n	8003100 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	009a      	lsls	r2, r3, #2
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	4413      	add	r3, r2
 80030f6:	330a      	adds	r3, #10
 80030f8:	617b      	str	r3, [r7, #20]
      current_y--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	3301      	adds	r3, #1
 8003104:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	429a      	cmp	r2, r3
 800310c:	d999      	bls.n	8003042 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <BSP_LCD_FillCircle+0x138>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	490b      	ldr	r1, [pc, #44]	; (8003140 <BSP_LCD_FillCircle+0x13c>)
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fae9 	bl	80026f8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	88b9      	ldrh	r1, [r7, #4]
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fdb7 	bl	8002ca0 <BSP_LCD_DrawCircle>
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000360 	.word	0x20000360
 8003140:	20000364 	.word	0x20000364

08003144 <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8003144:	b5b0      	push	{r4, r5, r7, lr}
 8003146:	b08c      	sub	sp, #48	; 0x30
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	833b      	strh	r3, [r7, #24]
 8003154:	2300      	movs	r3, #0
 8003156:	82fb      	strh	r3, [r7, #22]
 8003158:	2300      	movs	r3, #0
 800315a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800315c:	2300      	movs	r3, #0
 800315e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003160:	2300      	movs	r3, #0
 8003162:	82bb      	strh	r3, [r7, #20]
 8003164:	2300      	movs	r3, #0
 8003166:	827b      	strh	r3, [r7, #18]
 8003168:	2300      	movs	r3, #0
 800316a:	823b      	strh	r3, [r7, #16]
 800316c:	2300      	movs	r3, #0
 800316e:	81fb      	strh	r3, [r7, #14]
 8003170:	2300      	movs	r3, #0
 8003172:	81bb      	strh	r3, [r7, #12]
 8003174:	2300      	movs	r3, #0
 8003176:	817b      	strh	r3, [r7, #10]
 8003178:	2300      	movs	r3, #0
 800317a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	843b      	strh	r3, [r7, #32]
 8003180:	2300      	movs	r3, #0
 8003182:	83fb      	strh	r3, [r7, #30]
 8003184:	2300      	movs	r3, #0
 8003186:	83bb      	strh	r3, [r7, #28]
 8003188:	2300      	movs	r3, #0
 800318a:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003192:	83fb      	strh	r3, [r7, #30]
 8003194:	8bfb      	ldrh	r3, [r7, #30]
 8003196:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800319e:	837b      	strh	r3, [r7, #26]
 80031a0:	8b7b      	ldrh	r3, [r7, #26]
 80031a2:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 80031a4:	2301      	movs	r3, #1
 80031a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80031a8:	e02f      	b.n	800320a <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 80031aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 80031b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80031bc:	8c3b      	ldrh	r3, [r7, #32]
 80031be:	429a      	cmp	r2, r3
 80031c0:	da01      	bge.n	80031c6 <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 80031c2:	89bb      	ldrh	r3, [r7, #12]
 80031c4:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 80031c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80031ca:	8bfb      	ldrh	r3, [r7, #30]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	dd01      	ble.n	80031d4 <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 80031d0:	89bb      	ldrh	r3, [r7, #12]
 80031d2:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 80031d4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	885b      	ldrh	r3, [r3, #2]
 80031e0:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 80031e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80031e6:	8bbb      	ldrh	r3, [r7, #28]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	da01      	bge.n	80031f0 <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 80031ec:	897b      	ldrh	r3, [r7, #10]
 80031ee:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 80031f0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80031f4:	8b7b      	ldrh	r3, [r7, #26]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	dd01      	ble.n	80031fe <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 80031fa:	897b      	ldrh	r3, [r7, #10]
 80031fc:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 80031fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003202:	b29b      	uxth	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	b29b      	uxth	r3, r3
 8003208:	847b      	strh	r3, [r7, #34]	; 0x22
 800320a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	429a      	cmp	r2, r3
 8003212:	dbca      	blt.n	80031aa <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d974      	bls.n	8003304 <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 800321a:	8c3a      	ldrh	r2, [r7, #32]
 800321c:	8bfb      	ldrh	r3, [r7, #30]
 800321e:	4413      	add	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	da00      	bge.n	8003226 <BSP_LCD_FillPolygon+0xe2>
 8003224:	3301      	adds	r3, #1
 8003226:	105b      	asrs	r3, r3, #1
 8003228:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 800322a:	8b7a      	ldrh	r2, [r7, #26]
 800322c:	8bbb      	ldrh	r3, [r7, #28]
 800322e:	4413      	add	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	da00      	bge.n	8003236 <BSP_LCD_FillPolygon+0xf2>
 8003234:	3301      	adds	r3, #1
 8003236:	105b      	asrs	r3, r3, #1
 8003238:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	885b      	ldrh	r3, [r3, #2]
 8003244:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 8003246:	e032      	b.n	80032ae <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	885b      	ldrh	r3, [r3, #2]
 8003252:	82fb      	strh	r3, [r7, #22]
    Points++;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	885b      	ldrh	r3, [r3, #2]
 8003264:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 8003266:	8b38      	ldrh	r0, [r7, #24]
 8003268:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800326a:	8abc      	ldrh	r4, [r7, #20]
 800326c:	8afd      	ldrh	r5, [r7, #22]
 800326e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003270:	8a7a      	ldrh	r2, [r7, #18]
 8003272:	9201      	str	r2, [sp, #4]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	462b      	mov	r3, r5
 8003278:	4622      	mov	r2, r4
 800327a:	f000 fa13 	bl	80036a4 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 800327e:	8b38      	ldrh	r0, [r7, #24]
 8003280:	8ab9      	ldrh	r1, [r7, #20]
 8003282:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003284:	8afd      	ldrh	r5, [r7, #22]
 8003286:	8a7b      	ldrh	r3, [r7, #18]
 8003288:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800328a:	9201      	str	r2, [sp, #4]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	462b      	mov	r3, r5
 8003290:	4622      	mov	r2, r4
 8003292:	f000 fa07 	bl	80036a4 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 8003296:	8ab8      	ldrh	r0, [r7, #20]
 8003298:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800329a:	8b3c      	ldrh	r4, [r7, #24]
 800329c:	8a7d      	ldrh	r5, [r7, #18]
 800329e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032a0:	8afa      	ldrh	r2, [r7, #22]
 80032a2:	9201      	str	r2, [sp, #4]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	462b      	mov	r3, r5
 80032a8:	4622      	mov	r2, r4
 80032aa:	f000 f9fb 	bl	80036a4 <FillTriangle>
  while(--PointCount)
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	807b      	strh	r3, [r7, #2]
 80032b4:	887b      	ldrh	r3, [r7, #2]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1c6      	bne.n	8003248 <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 80032ba:	8a38      	ldrh	r0, [r7, #16]
 80032bc:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80032be:	8abc      	ldrh	r4, [r7, #20]
 80032c0:	89fd      	ldrh	r5, [r7, #14]
 80032c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032c4:	8a7a      	ldrh	r2, [r7, #18]
 80032c6:	9201      	str	r2, [sp, #4]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	462b      	mov	r3, r5
 80032cc:	4622      	mov	r2, r4
 80032ce:	f000 f9e9 	bl	80036a4 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 80032d2:	8a38      	ldrh	r0, [r7, #16]
 80032d4:	8ab9      	ldrh	r1, [r7, #20]
 80032d6:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80032d8:	89fd      	ldrh	r5, [r7, #14]
 80032da:	8a7b      	ldrh	r3, [r7, #18]
 80032dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032de:	9201      	str	r2, [sp, #4]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	462b      	mov	r3, r5
 80032e4:	4622      	mov	r2, r4
 80032e6:	f000 f9dd 	bl	80036a4 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 80032ea:	8ab8      	ldrh	r0, [r7, #20]
 80032ec:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80032ee:	8a3c      	ldrh	r4, [r7, #16]
 80032f0:	8a7d      	ldrh	r5, [r7, #18]
 80032f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032f4:	89fa      	ldrh	r2, [r7, #14]
 80032f6:	9201      	str	r2, [sp, #4]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	462b      	mov	r3, r5
 80032fc:	4622      	mov	r2, r4
 80032fe:	f000 f9d1 	bl	80036a4 <FillTriangle>
 8003302:	e000      	b.n	8003306 <BSP_LCD_FillPolygon+0x1c2>
    return;
 8003304:	bf00      	nop
}
 8003306:	3728      	adds	r7, #40	; 0x28
 8003308:	46bd      	mov	sp, r7
 800330a:	bdb0      	pop	{r4, r5, r7, pc}

0800330c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <BSP_LCD_DisplayOn+0x30>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <BSP_LCD_DisplayOn+0x30>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003320:	2201      	movs	r2, #1
 8003322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003326:	4806      	ldr	r0, [pc, #24]	; (8003340 <BSP_LCD_DisplayOn+0x34>)
 8003328:	f002 ffc2 	bl	80062b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800332c:	2201      	movs	r2, #1
 800332e:	2108      	movs	r1, #8
 8003330:	4804      	ldr	r0, [pc, #16]	; (8003344 <BSP_LCD_DisplayOn+0x38>)
 8003332:	f002 ffbd 	bl	80062b0 <HAL_GPIO_WritePin>
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20008bb4 	.word	0x20008bb4
 8003340:	40022000 	.word	0x40022000
 8003344:	40022800 	.word	0x40022800

08003348 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b090      	sub	sp, #64	; 0x40
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003352:	4b64      	ldr	r3, [pc, #400]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	4a63      	ldr	r2, [pc, #396]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003358:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800335c:	6453      	str	r3, [r2, #68]	; 0x44
 800335e:	4b61      	ldr	r3, [pc, #388]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800336a:	4b5e      	ldr	r3, [pc, #376]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	4a5d      	ldr	r2, [pc, #372]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003370:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003374:	6313      	str	r3, [r2, #48]	; 0x30
 8003376:	4b5b      	ldr	r3, [pc, #364]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003382:	4b58      	ldr	r3, [pc, #352]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a57      	ldr	r2, [pc, #348]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003388:	f043 0310 	orr.w	r3, r3, #16
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b55      	ldr	r3, [pc, #340]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	623b      	str	r3, [r7, #32]
 8003398:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800339a:	4b52      	ldr	r3, [pc, #328]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a51      	ldr	r2, [pc, #324]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80033b2:	4b4c      	ldr	r3, [pc, #304]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a4b      	ldr	r2, [pc, #300]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b49      	ldr	r3, [pc, #292]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033ca:	4b46      	ldr	r3, [pc, #280]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a45      	ldr	r2, [pc, #276]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b43      	ldr	r3, [pc, #268]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80033e2:	4b40      	ldr	r3, [pc, #256]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a3f      	ldr	r2, [pc, #252]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80033fa:	4b3a      	ldr	r3, [pc, #232]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a39      	ldr	r2, [pc, #228]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003412:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a33      	ldr	r2, [pc, #204]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003418:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800342a:	2310      	movs	r3, #16
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003436:	2302      	movs	r3, #2
 8003438:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800343a:	230e      	movs	r3, #14
 800343c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800343e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003442:	4619      	mov	r1, r3
 8003444:	4828      	ldr	r0, [pc, #160]	; (80034e8 <BSP_LCD_MspInit+0x1a0>)
 8003446:	f002 fc67 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800344a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003454:	2309      	movs	r3, #9
 8003456:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800345c:	4619      	mov	r1, r3
 800345e:	4823      	ldr	r0, [pc, #140]	; (80034ec <BSP_LCD_MspInit+0x1a4>)
 8003460:	f002 fc5a 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003464:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800346a:	2302      	movs	r3, #2
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800346e:	230e      	movs	r3, #14
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003476:	4619      	mov	r1, r3
 8003478:	481d      	ldr	r0, [pc, #116]	; (80034f0 <BSP_LCD_MspInit+0x1a8>)
 800347a:	f002 fc4d 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800347e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003488:	230e      	movs	r3, #14
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800348c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003490:	4619      	mov	r1, r3
 8003492:	4818      	ldr	r0, [pc, #96]	; (80034f4 <BSP_LCD_MspInit+0x1ac>)
 8003494:	f002 fc40 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003498:	23f7      	movs	r3, #247	; 0xf7
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80034a0:	230e      	movs	r3, #14
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80034a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034a8:	4619      	mov	r1, r3
 80034aa:	4813      	ldr	r0, [pc, #76]	; (80034f8 <BSP_LCD_MspInit+0x1b0>)
 80034ac:	f002 fc34 	bl	8005d18 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80034b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80034b6:	2301      	movs	r3, #1
 80034b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80034ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034be:	4619      	mov	r1, r3
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <BSP_LCD_MspInit+0x1a8>)
 80034c2:	f002 fc29 	bl	8005d18 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80034c6:	2308      	movs	r3, #8
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80034ca:	2301      	movs	r3, #1
 80034cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80034ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034d2:	4619      	mov	r1, r3
 80034d4:	4808      	ldr	r0, [pc, #32]	; (80034f8 <BSP_LCD_MspInit+0x1b0>)
 80034d6:	f002 fc1f 	bl	8005d18 <HAL_GPIO_Init>
}
 80034da:	bf00      	nop
 80034dc:	3740      	adds	r7, #64	; 0x40
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40021800 	.word	0x40021800
 80034f0:	40022000 	.word	0x40022000
 80034f4:	40022400 	.word	0x40022400
 80034f8:	40022800 	.word	0x40022800

080034fc <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <BSP_LCD_ClockConfig+0x34>)
 8003508:	2208      	movs	r2, #8
 800350a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800350c:	4b08      	ldr	r3, [pc, #32]	; (8003530 <BSP_LCD_ClockConfig+0x34>)
 800350e:	22c0      	movs	r2, #192	; 0xc0
 8003510:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <BSP_LCD_ClockConfig+0x34>)
 8003514:	2205      	movs	r2, #5
 8003516:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <BSP_LCD_ClockConfig+0x34>)
 800351a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003520:	4803      	ldr	r0, [pc, #12]	; (8003530 <BSP_LCD_ClockConfig+0x34>)
 8003522:	f004 fd0f 	bl	8007f44 <HAL_RCCEx_PeriphCLKConfig>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	2000037c 	.word	0x2000037c

08003534 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	603a      	str	r2, [r7, #0]
 800353e:	80fb      	strh	r3, [r7, #6]
 8003540:	460b      	mov	r3, r1
 8003542:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800354c:	4b53      	ldr	r3, [pc, #332]	; (800369c <DrawChar+0x168>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4953      	ldr	r1, [pc, #332]	; (80036a0 <DrawChar+0x16c>)
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3308      	adds	r3, #8
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	88db      	ldrh	r3, [r3, #6]
 8003562:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003564:	4b4d      	ldr	r3, [pc, #308]	; (800369c <DrawChar+0x168>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	494d      	ldr	r1, [pc, #308]	; (80036a0 <DrawChar+0x16c>)
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3308      	adds	r3, #8
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	889b      	ldrh	r3, [r3, #4]
 800357a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800357c:	8a3b      	ldrh	r3, [r7, #16]
 800357e:	3307      	adds	r3, #7
 8003580:	2b00      	cmp	r3, #0
 8003582:	da00      	bge.n	8003586 <DrawChar+0x52>
 8003584:	3307      	adds	r3, #7
 8003586:	10db      	asrs	r3, r3, #3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	b2da      	uxtb	r2, r3
 800358e:	8a3b      	ldrh	r3, [r7, #16]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	e076      	b.n	800368a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800359c:	8a3b      	ldrh	r3, [r7, #16]
 800359e:	3307      	adds	r3, #7
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	da00      	bge.n	80035a6 <DrawChar+0x72>
 80035a4:	3307      	adds	r3, #7
 80035a6:	10db      	asrs	r3, r3, #3
 80035a8:	461a      	mov	r2, r3
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fb03 f302 	mul.w	r3, r3, r2
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80035b6:	8a3b      	ldrh	r3, [r7, #16]
 80035b8:	3307      	adds	r3, #7
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	da00      	bge.n	80035c0 <DrawChar+0x8c>
 80035be:	3307      	adds	r3, #7
 80035c0:	10db      	asrs	r3, r3, #3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d002      	beq.n	80035cc <DrawChar+0x98>
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d004      	beq.n	80035d4 <DrawChar+0xa0>
 80035ca:	e00c      	b.n	80035e6 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	617b      	str	r3, [r7, #20]
      break;
 80035d2:	e016      	b.n	8003602 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	3201      	adds	r2, #1
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
      break;
 80035e4:	e00d      	b.n	8003602 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	041a      	lsls	r2, r3, #16
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	3301      	adds	r3, #1
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	4313      	orrs	r3, r2
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	3202      	adds	r2, #2
 80035fa:	7812      	ldrb	r2, [r2, #0]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
      break;
 8003600:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	e036      	b.n	8003676 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003608:	8a3a      	ldrh	r2, [r7, #16]
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	1ad2      	subs	r2, r2, r3
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	4413      	add	r3, r2
 8003612:	3b01      	subs	r3, #1
 8003614:	2201      	movs	r2, #1
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	461a      	mov	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d012      	beq.n	800364a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	b29a      	uxth	r2, r3
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	4413      	add	r3, r2
 800362c:	b298      	uxth	r0, r3
 800362e:	4b1b      	ldr	r3, [pc, #108]	; (800369c <DrawChar+0x168>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	491b      	ldr	r1, [pc, #108]	; (80036a0 <DrawChar+0x16c>)
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	88bb      	ldrh	r3, [r7, #4]
 8003642:	4619      	mov	r1, r3
 8003644:	f7ff fc1c 	bl	8002e80 <BSP_LCD_DrawPixel>
 8003648:	e012      	b.n	8003670 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	b29a      	uxth	r2, r3
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	4413      	add	r3, r2
 8003652:	b298      	uxth	r0, r3
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <DrawChar+0x168>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4911      	ldr	r1, [pc, #68]	; (80036a0 <DrawChar+0x16c>)
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	3304      	adds	r3, #4
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	88bb      	ldrh	r3, [r7, #4]
 800366a:	4619      	mov	r1, r3
 800366c:	f7ff fc08 	bl	8002e80 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	3301      	adds	r3, #1
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	8a3b      	ldrh	r3, [r7, #16]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	429a      	cmp	r2, r3
 800367c:	d3c4      	bcc.n	8003608 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800367e:	88bb      	ldrh	r3, [r7, #4]
 8003680:	3301      	adds	r3, #1
 8003682:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	3301      	adds	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	8a7b      	ldrh	r3, [r7, #18]
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	429a      	cmp	r2, r3
 8003690:	d384      	bcc.n	800359c <DrawChar+0x68>
  }
}
 8003692:	bf00      	nop
 8003694:	3720      	adds	r7, #32
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000360 	.word	0x20000360
 80036a0:	20000364 	.word	0x20000364

080036a4 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b08b      	sub	sp, #44	; 0x2c
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4604      	mov	r4, r0
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4623      	mov	r3, r4
 80036b4:	80fb      	strh	r3, [r7, #6]
 80036b6:	4603      	mov	r3, r0
 80036b8:	80bb      	strh	r3, [r7, #4]
 80036ba:	460b      	mov	r3, r1
 80036bc:	807b      	strh	r3, [r7, #2]
 80036be:	4613      	mov	r3, r2
 80036c0:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80036c2:	2300      	movs	r3, #0
 80036c4:	823b      	strh	r3, [r7, #16]
 80036c6:	2300      	movs	r3, #0
 80036c8:	81fb      	strh	r3, [r7, #14]
 80036ca:	2300      	movs	r3, #0
 80036cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80036ce:	2300      	movs	r3, #0
 80036d0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80036d2:	2300      	movs	r3, #0
 80036d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80036d6:	2300      	movs	r3, #0
 80036d8:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 80036da:	2300      	movs	r3, #0
 80036dc:	83fb      	strh	r3, [r7, #30]
 80036de:	2300      	movs	r3, #0
 80036e0:	83bb      	strh	r3, [r7, #28]
 80036e2:	2300      	movs	r3, #0
 80036e4:	837b      	strh	r3, [r7, #26]
 80036e6:	2300      	movs	r3, #0
 80036e8:	833b      	strh	r3, [r7, #24]
 80036ea:	2300      	movs	r3, #0
 80036ec:	82fb      	strh	r3, [r7, #22]
 80036ee:	2300      	movs	r3, #0
 80036f0:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80036f6:	88ba      	ldrh	r2, [r7, #4]
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bfb8      	it	lt
 8003700:	425b      	neglt	r3, r3
 8003702:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003704:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003706:	883b      	ldrh	r3, [r7, #0]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	bfb8      	it	lt
 800370e:	425b      	neglt	r3, r3
 8003710:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003716:	883b      	ldrh	r3, [r7, #0]
 8003718:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800371a:	88ba      	ldrh	r2, [r7, #4]
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	429a      	cmp	r2, r3
 8003720:	d304      	bcc.n	800372c <FillTriangle+0x88>
  {
    xinc1 = 1;
 8003722:	2301      	movs	r3, #1
 8003724:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003726:	2301      	movs	r3, #1
 8003728:	843b      	strh	r3, [r7, #32]
 800372a:	e005      	b.n	8003738 <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800372c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003730:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003736:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003738:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800373a:	883b      	ldrh	r3, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d304      	bcc.n	800374a <FillTriangle+0xa6>
  {
    yinc1 = 1;
 8003740:	2301      	movs	r3, #1
 8003742:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003744:	2301      	movs	r3, #1
 8003746:	83bb      	strh	r3, [r7, #28]
 8003748:	e005      	b.n	8003756 <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800374a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800374e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003754:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003756:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800375a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800375e:	429a      	cmp	r2, r3
 8003760:	db11      	blt.n	8003786 <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003762:	2300      	movs	r3, #0
 8003764:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003766:	2300      	movs	r3, #0
 8003768:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800376a:	8a3b      	ldrh	r3, [r7, #16]
 800376c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800376e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	da00      	bge.n	8003778 <FillTriangle+0xd4>
 8003776:	3301      	adds	r3, #1
 8003778:	105b      	asrs	r3, r3, #1
 800377a:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 800377c:	89fb      	ldrh	r3, [r7, #14]
 800377e:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8003780:	8a3b      	ldrh	r3, [r7, #16]
 8003782:	82bb      	strh	r3, [r7, #20]
 8003784:	e010      	b.n	80037a8 <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003786:	2300      	movs	r3, #0
 8003788:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800378a:	2300      	movs	r3, #0
 800378c:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 800378e:	89fb      	ldrh	r3, [r7, #14]
 8003790:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003792:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003796:	2b00      	cmp	r3, #0
 8003798:	da00      	bge.n	800379c <FillTriangle+0xf8>
 800379a:	3301      	adds	r3, #1
 800379c:	105b      	asrs	r3, r3, #1
 800379e:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 80037a0:	8a3b      	ldrh	r3, [r7, #16]
 80037a2:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 80037a4:	89fb      	ldrh	r3, [r7, #14]
 80037a6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80037a8:	2300      	movs	r3, #0
 80037aa:	827b      	strh	r3, [r7, #18]
 80037ac:	e02f      	b.n	800380e <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 80037ae:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80037b0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80037b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80037b4:	887a      	ldrh	r2, [r7, #2]
 80037b6:	f7ff f9a7 	bl	8002b08 <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80037ba:	8b3a      	ldrh	r2, [r7, #24]
 80037bc:	8afb      	ldrh	r3, [r7, #22]
 80037be:	4413      	add	r3, r2
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 80037c4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80037c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	db0e      	blt.n	80037ee <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 80037d0:	8b3a      	ldrh	r2, [r7, #24]
 80037d2:	8b7b      	ldrh	r3, [r7, #26]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 80037da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80037dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037de:	4413      	add	r3, r2
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 80037e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037e6:	8bfb      	ldrh	r3, [r7, #30]
 80037e8:	4413      	add	r3, r2
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 80037ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80037f0:	8c3b      	ldrh	r3, [r7, #32]
 80037f2:	4413      	add	r3, r2
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 80037f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037fa:	8bbb      	ldrh	r3, [r7, #28]
 80037fc:	4413      	add	r3, r2
 80037fe:	b29b      	uxth	r3, r3
 8003800:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003802:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003806:	b29b      	uxth	r3, r3
 8003808:	3301      	adds	r3, #1
 800380a:	b29b      	uxth	r3, r3
 800380c:	827b      	strh	r3, [r7, #18]
 800380e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003812:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003816:	429a      	cmp	r2, r3
 8003818:	ddc9      	ble.n	80037ae <FillTriangle+0x10a>
  } 
}
 800381a:	bf00      	nop
 800381c:	372c      	adds	r7, #44	; 0x2c
 800381e:	46bd      	mov	sp, r7
 8003820:	bd90      	pop	{r4, r7, pc}
	...

08003824 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003832:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <LL_FillBuffer+0x88>)
 8003834:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003838:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <LL_FillBuffer+0x8c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <LL_FillBuffer+0x90>)
 8003840:	2134      	movs	r1, #52	; 0x34
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	3348      	adds	r3, #72	; 0x48
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d103      	bne.n	8003858 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003850:	4b16      	ldr	r3, [pc, #88]	; (80038ac <LL_FillBuffer+0x88>)
 8003852:	2202      	movs	r2, #2
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	e002      	b.n	800385e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <LL_FillBuffer+0x88>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800385e:	4a13      	ldr	r2, [pc, #76]	; (80038ac <LL_FillBuffer+0x88>)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <LL_FillBuffer+0x88>)
 8003866:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <LL_FillBuffer+0x94>)
 8003868:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800386a:	4810      	ldr	r0, [pc, #64]	; (80038ac <LL_FillBuffer+0x88>)
 800386c:	f001 ffc8 	bl	8005800 <HAL_DMA2D_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d115      	bne.n	80038a2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	480c      	ldr	r0, [pc, #48]	; (80038ac <LL_FillBuffer+0x88>)
 800387a:	f002 f91f 	bl	8005abc <HAL_DMA2D_ConfigLayer>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10e      	bne.n	80038a2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69f9      	ldr	r1, [r7, #28]
 800388e:	4807      	ldr	r0, [pc, #28]	; (80038ac <LL_FillBuffer+0x88>)
 8003890:	f002 f800 	bl	8005894 <HAL_DMA2D_Start>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d103      	bne.n	80038a2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800389a:	210a      	movs	r1, #10
 800389c:	4803      	ldr	r0, [pc, #12]	; (80038ac <LL_FillBuffer+0x88>)
 800389e:	f002 f824 	bl	80058ea <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000320 	.word	0x20000320
 80038b0:	20000360 	.word	0x20000360
 80038b4:	20008bb4 	.word	0x20008bb4
 80038b8:	4002b000 	.word	0x4002b000

080038bc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80038c0:	4b29      	ldr	r3, [pc, #164]	; (8003968 <BSP_SDRAM_Init+0xac>)
 80038c2:	4a2a      	ldr	r2, [pc, #168]	; (800396c <BSP_SDRAM_Init+0xb0>)
 80038c4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80038c6:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <BSP_SDRAM_Init+0xb4>)
 80038c8:	2202      	movs	r2, #2
 80038ca:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80038cc:	4b28      	ldr	r3, [pc, #160]	; (8003970 <BSP_SDRAM_Init+0xb4>)
 80038ce:	2207      	movs	r2, #7
 80038d0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80038d2:	4b27      	ldr	r3, [pc, #156]	; (8003970 <BSP_SDRAM_Init+0xb4>)
 80038d4:	2204      	movs	r2, #4
 80038d6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <BSP_SDRAM_Init+0xb4>)
 80038da:	2207      	movs	r2, #7
 80038dc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <BSP_SDRAM_Init+0xb4>)
 80038e0:	2202      	movs	r2, #2
 80038e2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <BSP_SDRAM_Init+0xb4>)
 80038e6:	2202      	movs	r2, #2
 80038e8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80038ea:	4b21      	ldr	r3, [pc, #132]	; (8003970 <BSP_SDRAM_Init+0xb4>)
 80038ec:	2202      	movs	r2, #2
 80038ee:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80038f0:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <BSP_SDRAM_Init+0xac>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80038f6:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <BSP_SDRAM_Init+0xac>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <BSP_SDRAM_Init+0xac>)
 80038fe:	2204      	movs	r2, #4
 8003900:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003902:	4b19      	ldr	r3, [pc, #100]	; (8003968 <BSP_SDRAM_Init+0xac>)
 8003904:	2210      	movs	r2, #16
 8003906:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003908:	4b17      	ldr	r3, [pc, #92]	; (8003968 <BSP_SDRAM_Init+0xac>)
 800390a:	2240      	movs	r2, #64	; 0x40
 800390c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800390e:	4b16      	ldr	r3, [pc, #88]	; (8003968 <BSP_SDRAM_Init+0xac>)
 8003910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003914:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003916:	4b14      	ldr	r3, [pc, #80]	; (8003968 <BSP_SDRAM_Init+0xac>)
 8003918:	2200      	movs	r2, #0
 800391a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800391c:	4b12      	ldr	r3, [pc, #72]	; (8003968 <BSP_SDRAM_Init+0xac>)
 800391e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003922:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003924:	4b10      	ldr	r3, [pc, #64]	; (8003968 <BSP_SDRAM_Init+0xac>)
 8003926:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800392a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <BSP_SDRAM_Init+0xac>)
 800392e:	2200      	movs	r2, #0
 8003930:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003932:	2100      	movs	r1, #0
 8003934:	480c      	ldr	r0, [pc, #48]	; (8003968 <BSP_SDRAM_Init+0xac>)
 8003936:	f000 f87f 	bl	8003a38 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800393a:	490d      	ldr	r1, [pc, #52]	; (8003970 <BSP_SDRAM_Init+0xb4>)
 800393c:	480a      	ldr	r0, [pc, #40]	; (8003968 <BSP_SDRAM_Init+0xac>)
 800393e:	f005 fab1 	bl	8008ea4 <HAL_SDRAM_Init>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <BSP_SDRAM_Init+0xb8>)
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	e002      	b.n	8003956 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003950:	4b08      	ldr	r3, [pc, #32]	; (8003974 <BSP_SDRAM_Init+0xb8>)
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003956:	f240 6003 	movw	r0, #1539	; 0x603
 800395a:	f000 f80d 	bl	8003978 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <BSP_SDRAM_Init+0xb8>)
 8003960:	781b      	ldrb	r3, [r3, #0]
}
 8003962:	4618      	mov	r0, r3
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20008c5c 	.word	0x20008c5c
 800396c:	a0000140 	.word	0xa0000140
 8003970:	20000400 	.word	0x20000400
 8003974:	20000044 	.word	0x20000044

08003978 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003984:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800398a:	4b29      	ldr	r3, [pc, #164]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800398c:	2210      	movs	r2, #16
 800398e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003990:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003992:	2201      	movs	r2, #1
 8003994:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003996:	4b26      	ldr	r3, [pc, #152]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003998:	2200      	movs	r2, #0
 800399a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800399c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039a0:	4923      	ldr	r1, [pc, #140]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039a2:	4824      	ldr	r0, [pc, #144]	; (8003a34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039a4:	f005 fab2 	bl	8008f0c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80039a8:	2001      	movs	r0, #1
 80039aa:	f000 ff9f 	bl	80048ec <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80039ae:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039b0:	2202      	movs	r2, #2
 80039b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039b4:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039b6:	2210      	movs	r2, #16
 80039b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039bc:	2201      	movs	r2, #1
 80039be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80039c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ca:	4919      	ldr	r1, [pc, #100]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039cc:	4819      	ldr	r0, [pc, #100]	; (8003a34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039ce:	f005 fa9d 	bl	8008f0c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039d4:	2203      	movs	r2, #3
 80039d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039d8:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039da:	2210      	movs	r2, #16
 80039dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80039de:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039e0:	2208      	movs	r2, #8
 80039e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80039e4:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80039ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ee:	4910      	ldr	r1, [pc, #64]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039f0:	4810      	ldr	r0, [pc, #64]	; (8003a34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039f2:	f005 fa8b 	bl	8008f0c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80039f6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80039fa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039fe:	2204      	movs	r2, #4
 8003a00:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a04:	2210      	movs	r2, #16
 8003a06:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a08:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a12:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a18:	4905      	ldr	r1, [pc, #20]	; (8003a30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a1a:	4806      	ldr	r0, [pc, #24]	; (8003a34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a1c:	f005 fa76 	bl	8008f0c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4804      	ldr	r0, [pc, #16]	; (8003a34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a24:	f005 fa9d 	bl	8008f62 <HAL_SDRAM_ProgramRefreshRate>
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	2000041c 	.word	0x2000041c
 8003a34:	20008c5c 	.word	0x20008c5c

08003a38 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b090      	sub	sp, #64	; 0x40
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003a42:	4b70      	ldr	r3, [pc, #448]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	4a6f      	ldr	r2, [pc, #444]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6393      	str	r3, [r2, #56]	; 0x38
 8003a4e:	4b6d      	ldr	r3, [pc, #436]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003a5a:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4a69      	ldr	r2, [pc, #420]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003a60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a64:	6313      	str	r3, [r2, #48]	; 0x30
 8003a66:	4b67      	ldr	r3, [pc, #412]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a72:	4b64      	ldr	r3, [pc, #400]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	4a63      	ldr	r2, [pc, #396]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7e:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a8a:	4b5e      	ldr	r3, [pc, #376]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	4a5d      	ldr	r2, [pc, #372]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003a90:	f043 0308 	orr.w	r3, r3, #8
 8003a94:	6313      	str	r3, [r2, #48]	; 0x30
 8003a96:	4b5b      	ldr	r3, [pc, #364]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003aa2:	4b58      	ldr	r3, [pc, #352]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	4a57      	ldr	r2, [pc, #348]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003aa8:	f043 0310 	orr.w	r3, r3, #16
 8003aac:	6313      	str	r3, [r2, #48]	; 0x30
 8003aae:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003aba:	4b52      	ldr	r3, [pc, #328]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	4a51      	ldr	r2, [pc, #324]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003ac0:	f043 0320 	orr.w	r3, r3, #32
 8003ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac6:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ad2:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	4a4b      	ldr	r2, [pc, #300]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003adc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ade:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003aea:	4b46      	ldr	r3, [pc, #280]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	4a45      	ldr	r2, [pc, #276]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af4:	6313      	str	r3, [r2, #48]	; 0x30
 8003af6:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <BSP_SDRAM_MspInit+0x1cc>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003b02:	2302      	movs	r3, #2
 8003b04:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003b06:	2301      	movs	r3, #1
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003b0e:	230c      	movs	r3, #12
 8003b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003b12:	2308      	movs	r3, #8
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	483a      	ldr	r0, [pc, #232]	; (8003c08 <BSP_SDRAM_MspInit+0x1d0>)
 8003b1e:	f002 f8fb 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003b22:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4837      	ldr	r0, [pc, #220]	; (8003c0c <BSP_SDRAM_MspInit+0x1d4>)
 8003b30:	f002 f8f2 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003b34:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4833      	ldr	r0, [pc, #204]	; (8003c10 <BSP_SDRAM_MspInit+0x1d8>)
 8003b42:	f002 f8e9 	bl	8005d18 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003b46:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b50:	4619      	mov	r1, r3
 8003b52:	4830      	ldr	r0, [pc, #192]	; (8003c14 <BSP_SDRAM_MspInit+0x1dc>)
 8003b54:	f002 f8e0 	bl	8005d18 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003b58:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b62:	4619      	mov	r1, r3
 8003b64:	482c      	ldr	r0, [pc, #176]	; (8003c18 <BSP_SDRAM_MspInit+0x1e0>)
 8003b66:	f002 f8d7 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003b6a:	2328      	movs	r3, #40	; 0x28
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b72:	4619      	mov	r1, r3
 8003b74:	4829      	ldr	r0, [pc, #164]	; (8003c1c <BSP_SDRAM_MspInit+0x1e4>)
 8003b76:	f002 f8cf 	bl	8005d18 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003b7a:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003b80:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003b86:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b8c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003b8e:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b94:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b96:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003b98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b9c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003ba0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ba4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003ba6:	4b1e      	ldr	r3, [pc, #120]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003bac:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003bae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bb2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003bb4:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003bba:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003bc0:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003bce:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <BSP_SDRAM_MspInit+0x1ec>)
 8003bd0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd8:	4a11      	ldr	r2, [pc, #68]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003bde:	4810      	ldr	r0, [pc, #64]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003be0:	f001 fcde 	bl	80055a0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003be4:	480e      	ldr	r0, [pc, #56]	; (8003c20 <BSP_SDRAM_MspInit+0x1e8>)
 8003be6:	f001 fc2d 	bl	8005444 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003bea:	2200      	movs	r2, #0
 8003bec:	210f      	movs	r1, #15
 8003bee:	2038      	movs	r0, #56	; 0x38
 8003bf0:	f001 fb30 	bl	8005254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003bf4:	2038      	movs	r0, #56	; 0x38
 8003bf6:	f001 fb49 	bl	800528c <HAL_NVIC_EnableIRQ>
}
 8003bfa:	bf00      	nop
 8003bfc:	3740      	adds	r7, #64	; 0x40
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40020800 	.word	0x40020800
 8003c0c:	40020c00 	.word	0x40020c00
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40021400 	.word	0x40021400
 8003c18:	40021800 	.word	0x40021800
 8003c1c:	40021c00 	.word	0x40021c00
 8003c20:	2000042c 	.word	0x2000042c
 8003c24:	40026410 	.word	0x40026410

08003c28 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	460a      	mov	r2, r1
 8003c32:	80fb      	strh	r3, [r7, #6]
 8003c34:	4613      	mov	r3, r2
 8003c36:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003c3c:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <BSP_TS_Init+0x68>)
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003c42:	4a14      	ldr	r2, [pc, #80]	; (8003c94 <BSP_TS_Init+0x6c>)
 8003c44:	88bb      	ldrh	r3, [r7, #4]
 8003c46:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <BSP_TS_Init+0x70>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2070      	movs	r0, #112	; 0x70
 8003c4e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <BSP_TS_Init+0x70>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2070      	movs	r0, #112	; 0x70
 8003c56:	4798      	blx	r3
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b51      	cmp	r3, #81	; 0x51
 8003c5c:	d111      	bne.n	8003c82 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <BSP_TS_Init+0x74>)
 8003c60:	4a0d      	ldr	r2, [pc, #52]	; (8003c98 <BSP_TS_Init+0x70>)
 8003c62:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <BSP_TS_Init+0x78>)
 8003c66:	2270      	movs	r2, #112	; 0x70
 8003c68:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <BSP_TS_Init+0x7c>)
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <BSP_TS_Init+0x74>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <BSP_TS_Init+0x78>)
 8003c78:	7812      	ldrb	r2, [r2, #0]
 8003c7a:	b292      	uxth	r2, r2
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4798      	blx	r3
 8003c80:	e001      	b.n	8003c86 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003c82:	2303      	movs	r3, #3
 8003c84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000490 	.word	0x20000490
 8003c94:	20000492 	.word	0x20000492
 8003c98:	20000000 	.word	0x20000000
 8003c9c:	2000048c 	.word	0x2000048c
 8003ca0:	20000495 	.word	0x20000495
 8003ca4:	20000494 	.word	0x20000494

08003ca8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <HAL_MspInit+0x4c>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <HAL_MspInit+0x4c>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <HAL_MspInit+0x4c>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_MspInit+0x4c>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <HAL_MspInit+0x4c>)
 8003ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <HAL_MspInit+0x4c>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	210f      	movs	r1, #15
 8003ce2:	f06f 0001 	mvn.w	r0, #1
 8003ce6:	f001 fab5 	bl	8005254 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800

08003cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08c      	sub	sp, #48	; 0x30
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d00:	f107 031c 	add.w	r3, r7, #28
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <HAL_ADC_MspInit+0xc8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d124      	bne.n	8003d64 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d1a:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <HAL_ADC_MspInit+0xcc>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <HAL_ADC_MspInit+0xcc>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d24:	6453      	str	r3, [r2, #68]	; 0x44
 8003d26:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_ADC_MspInit+0xcc>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_ADC_MspInit+0xcc>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4a23      	ldr	r2, [pc, #140]	; (8003dc4 <HAL_ADC_MspInit+0xcc>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3e:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <HAL_ADC_MspInit+0xcc>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d56:	f107 031c 	add.w	r3, r7, #28
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	481a      	ldr	r0, [pc, #104]	; (8003dc8 <HAL_ADC_MspInit+0xd0>)
 8003d5e:	f001 ffdb 	bl	8005d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003d62:	e029      	b.n	8003db8 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <HAL_ADC_MspInit+0xd4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d124      	bne.n	8003db8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <HAL_ADC_MspInit+0xcc>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <HAL_ADC_MspInit+0xcc>)
 8003d74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d78:	6453      	str	r3, [r2, #68]	; 0x44
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <HAL_ADC_MspInit+0xcc>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d86:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <HAL_ADC_MspInit+0xcc>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <HAL_ADC_MspInit+0xcc>)
 8003d8c:	f043 0320 	orr.w	r3, r3, #32
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <HAL_ADC_MspInit+0xcc>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003da4:	2303      	movs	r3, #3
 8003da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003dac:	f107 031c 	add.w	r3, r7, #28
 8003db0:	4619      	mov	r1, r3
 8003db2:	4807      	ldr	r0, [pc, #28]	; (8003dd0 <HAL_ADC_MspInit+0xd8>)
 8003db4:	f001 ffb0 	bl	8005d18 <HAL_GPIO_Init>
}
 8003db8:	bf00      	nop
 8003dba:	3730      	adds	r7, #48	; 0x30
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40012000 	.word	0x40012000
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40020000 	.word	0x40020000
 8003dcc:	40012200 	.word	0x40012200
 8003dd0:	40021400 	.word	0x40021400

08003dd4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	; 0x28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a19      	ldr	r2, [pc, #100]	; (8003e58 <HAL_DAC_MspInit+0x84>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d12b      	bne.n	8003e4e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003df6:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <HAL_DAC_MspInit+0x88>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <HAL_DAC_MspInit+0x88>)
 8003dfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e00:	6413      	str	r3, [r2, #64]	; 0x40
 8003e02:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <HAL_DAC_MspInit+0x88>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <HAL_DAC_MspInit+0x88>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <HAL_DAC_MspInit+0x88>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_DAC_MspInit+0x88>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e26:	2310      	movs	r3, #16
 8003e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e32:	f107 0314 	add.w	r3, r7, #20
 8003e36:	4619      	mov	r1, r3
 8003e38:	4809      	ldr	r0, [pc, #36]	; (8003e60 <HAL_DAC_MspInit+0x8c>)
 8003e3a:	f001 ff6d 	bl	8005d18 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2100      	movs	r1, #0
 8003e42:	2036      	movs	r0, #54	; 0x36
 8003e44:	f001 fa06 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e48:	2036      	movs	r0, #54	; 0x36
 8003e4a:	f001 fa1f 	bl	800528c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003e4e:	bf00      	nop
 8003e50:	3728      	adds	r7, #40	; 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40007400 	.word	0x40007400
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40020000 	.word	0x40020000

08003e64 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <HAL_DMA2D_MspInit+0x38>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d10b      	bne.n	8003e8e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_DMA2D_MspInit+0x3c>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <HAL_DMA2D_MspInit+0x3c>)
 8003e7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e80:	6313      	str	r3, [r2, #48]	; 0x30
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <HAL_DMA2D_MspInit+0x3c>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	4002b000 	.word	0x4002b000
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08c      	sub	sp, #48	; 0x30
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eac:	f107 031c 	add.w	r3, r7, #28
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2f      	ldr	r2, [pc, #188]	; (8003f80 <HAL_I2C_MspInit+0xdc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d129      	bne.n	8003f1a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec6:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <HAL_I2C_MspInit+0xe0>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a2e      	ldr	r2, [pc, #184]	; (8003f84 <HAL_I2C_MspInit+0xe0>)
 8003ecc:	f043 0302 	orr.w	r3, r3, #2
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed2:	4b2c      	ldr	r3, [pc, #176]	; (8003f84 <HAL_I2C_MspInit+0xe0>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003ede:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ee4:	2312      	movs	r3, #18
 8003ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eec:	2300      	movs	r3, #0
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef4:	f107 031c 	add.w	r3, r7, #28
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4823      	ldr	r0, [pc, #140]	; (8003f88 <HAL_I2C_MspInit+0xe4>)
 8003efc:	f001 ff0c 	bl	8005d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f00:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <HAL_I2C_MspInit+0xe0>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <HAL_I2C_MspInit+0xe0>)
 8003f06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <HAL_I2C_MspInit+0xe0>)
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003f18:	e02d      	b.n	8003f76 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1b      	ldr	r2, [pc, #108]	; (8003f8c <HAL_I2C_MspInit+0xe8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d128      	bne.n	8003f76 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f24:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <HAL_I2C_MspInit+0xe0>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <HAL_I2C_MspInit+0xe0>)
 8003f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f30:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_I2C_MspInit+0xe0>)
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003f3c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f42:	2312      	movs	r3, #18
 8003f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f46:	2301      	movs	r3, #1
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f4e:	2304      	movs	r3, #4
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003f52:	f107 031c 	add.w	r3, r7, #28
 8003f56:	4619      	mov	r1, r3
 8003f58:	480d      	ldr	r0, [pc, #52]	; (8003f90 <HAL_I2C_MspInit+0xec>)
 8003f5a:	f001 fedd 	bl	8005d18 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_I2C_MspInit+0xe0>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <HAL_I2C_MspInit+0xe0>)
 8003f64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_I2C_MspInit+0xe0>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
}
 8003f76:	bf00      	nop
 8003f78:	3730      	adds	r7, #48	; 0x30
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40005400 	.word	0x40005400
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40020400 	.word	0x40020400
 8003f8c:	40005c00 	.word	0x40005c00
 8003f90:	40021c00 	.word	0x40021c00

08003f94 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <HAL_I2C_MspDeInit+0x64>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d110      	bne.n	8003fc8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_I2C_MspDeInit+0x68>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <HAL_I2C_MspDeInit+0x68>)
 8003fac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8003fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fb6:	4812      	ldr	r0, [pc, #72]	; (8004000 <HAL_I2C_MspDeInit+0x6c>)
 8003fb8:	f002 f858 	bl	800606c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fc0:	480f      	ldr	r0, [pc, #60]	; (8004000 <HAL_I2C_MspDeInit+0x6c>)
 8003fc2:	f002 f853 	bl	800606c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003fc6:	e013      	b.n	8003ff0 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	; (8004004 <HAL_I2C_MspDeInit+0x70>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <HAL_I2C_MspDeInit+0x68>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_I2C_MspDeInit+0x68>)
 8003fd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fdc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003fde:	2180      	movs	r1, #128	; 0x80
 8003fe0:	4809      	ldr	r0, [pc, #36]	; (8004008 <HAL_I2C_MspDeInit+0x74>)
 8003fe2:	f002 f843 	bl	800606c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fea:	4807      	ldr	r0, [pc, #28]	; (8004008 <HAL_I2C_MspDeInit+0x74>)
 8003fec:	f002 f83e 	bl	800606c <HAL_GPIO_DeInit>
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40005400 	.word	0x40005400
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40020400 	.word	0x40020400
 8004004:	40005c00 	.word	0x40005c00
 8004008:	40021c00 	.word	0x40021c00

0800400c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08e      	sub	sp, #56	; 0x38
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	609a      	str	r2, [r3, #8]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a55      	ldr	r2, [pc, #340]	; (8004180 <HAL_LTDC_MspInit+0x174>)
 800402a:	4293      	cmp	r3, r2
 800402c:	f040 80a3 	bne.w	8004176 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004030:	4b54      	ldr	r3, [pc, #336]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 8004032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004034:	4a53      	ldr	r2, [pc, #332]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 8004036:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800403a:	6453      	str	r3, [r2, #68]	; 0x44
 800403c:	4b51      	ldr	r3, [pc, #324]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 800403e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004044:	623b      	str	r3, [r7, #32]
 8004046:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004048:	4b4e      	ldr	r3, [pc, #312]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	4a4d      	ldr	r2, [pc, #308]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 800404e:	f043 0310 	orr.w	r3, r3, #16
 8004052:	6313      	str	r3, [r2, #48]	; 0x30
 8004054:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004060:	4b48      	ldr	r3, [pc, #288]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	4a47      	ldr	r2, [pc, #284]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 8004066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800406a:	6313      	str	r3, [r2, #48]	; 0x30
 800406c:	4b45      	ldr	r3, [pc, #276]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004078:	4b42      	ldr	r3, [pc, #264]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	4a41      	ldr	r2, [pc, #260]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 800407e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004082:	6313      	str	r3, [r2, #48]	; 0x30
 8004084:	4b3f      	ldr	r3, [pc, #252]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004090:	4b3c      	ldr	r3, [pc, #240]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	4a3b      	ldr	r2, [pc, #236]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 8004096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409a:	6313      	str	r3, [r2, #48]	; 0x30
 800409c:	4b39      	ldr	r3, [pc, #228]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80040a8:	4b36      	ldr	r3, [pc, #216]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	4a35      	ldr	r2, [pc, #212]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 80040ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b2:	6313      	str	r3, [r2, #48]	; 0x30
 80040b4:	4b33      	ldr	r3, [pc, #204]	; (8004184 <HAL_LTDC_MspInit+0x178>)
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80040c0:	2310      	movs	r3, #16
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c4:	2302      	movs	r3, #2
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040cc:	2300      	movs	r3, #0
 80040ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040d0:	230e      	movs	r3, #14
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80040d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d8:	4619      	mov	r1, r3
 80040da:	482b      	ldr	r0, [pc, #172]	; (8004188 <HAL_LTDC_MspInit+0x17c>)
 80040dc:	f001 fe1c 	bl	8005d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80040e0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e6:	2302      	movs	r3, #2
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ee:	2300      	movs	r3, #0
 80040f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040f2:	230e      	movs	r3, #14
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80040f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040fa:	4619      	mov	r1, r3
 80040fc:	4823      	ldr	r0, [pc, #140]	; (800418c <HAL_LTDC_MspInit+0x180>)
 80040fe:	f001 fe0b 	bl	8005d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004102:	23f7      	movs	r3, #247	; 0xf7
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004106:	2302      	movs	r3, #2
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410a:	2300      	movs	r3, #0
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410e:	2300      	movs	r3, #0
 8004110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004112:	230e      	movs	r3, #14
 8004114:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800411a:	4619      	mov	r1, r3
 800411c:	481c      	ldr	r0, [pc, #112]	; (8004190 <HAL_LTDC_MspInit+0x184>)
 800411e:	f001 fdfb 	bl	8005d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004128:	2302      	movs	r3, #2
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412c:	2300      	movs	r3, #0
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004130:	2300      	movs	r3, #0
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004134:	2309      	movs	r3, #9
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800413c:	4619      	mov	r1, r3
 800413e:	4815      	ldr	r0, [pc, #84]	; (8004194 <HAL_LTDC_MspInit+0x188>)
 8004140:	f001 fdea 	bl	8005d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004144:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414a:	2302      	movs	r3, #2
 800414c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	2300      	movs	r3, #0
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004152:	2300      	movs	r3, #0
 8004154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004156:	230e      	movs	r3, #14
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800415a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800415e:	4619      	mov	r1, r3
 8004160:	480d      	ldr	r0, [pc, #52]	; (8004198 <HAL_LTDC_MspInit+0x18c>)
 8004162:	f001 fdd9 	bl	8005d18 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8004166:	2200      	movs	r2, #0
 8004168:	2105      	movs	r1, #5
 800416a:	2058      	movs	r0, #88	; 0x58
 800416c:	f001 f872 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004170:	2058      	movs	r0, #88	; 0x58
 8004172:	f001 f88b 	bl	800528c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004176:	bf00      	nop
 8004178:	3738      	adds	r7, #56	; 0x38
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40016800 	.word	0x40016800
 8004184:	40023800 	.word	0x40023800
 8004188:	40021000 	.word	0x40021000
 800418c:	40022400 	.word	0x40022400
 8004190:	40022800 	.word	0x40022800
 8004194:	40021800 	.word	0x40021800
 8004198:	40022000 	.word	0x40022000

0800419c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <HAL_RTC_MspInit+0x2c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d105      	bne.n	80041ba <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80041ae:	4b07      	ldr	r3, [pc, #28]	; (80041cc <HAL_RTC_MspInit+0x30>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	4a06      	ldr	r2, [pc, #24]	; (80041cc <HAL_RTC_MspInit+0x30>)
 80041b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40002800 	.word	0x40002800
 80041cc:	40023800 	.word	0x40023800

080041d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	; 0x28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d8:	f107 0314 	add.w	r3, r7, #20
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	60da      	str	r2, [r3, #12]
 80041e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a2d      	ldr	r2, [pc, #180]	; (80042a4 <HAL_SPI_MspInit+0xd4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d154      	bne.n	800429c <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80041f2:	4b2d      	ldr	r3, [pc, #180]	; (80042a8 <HAL_SPI_MspInit+0xd8>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	4a2c      	ldr	r2, [pc, #176]	; (80042a8 <HAL_SPI_MspInit+0xd8>)
 80041f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041fc:	6413      	str	r3, [r2, #64]	; 0x40
 80041fe:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <HAL_SPI_MspInit+0xd8>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800420a:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <HAL_SPI_MspInit+0xd8>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	4a26      	ldr	r2, [pc, #152]	; (80042a8 <HAL_SPI_MspInit+0xd8>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004214:	6313      	str	r3, [r2, #48]	; 0x30
 8004216:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <HAL_SPI_MspInit+0xd8>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004222:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <HAL_SPI_MspInit+0xd8>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	4a20      	ldr	r2, [pc, #128]	; (80042a8 <HAL_SPI_MspInit+0xd8>)
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	6313      	str	r3, [r2, #48]	; 0x30
 800422e:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <HAL_SPI_MspInit+0xd8>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800423a:	2302      	movs	r3, #2
 800423c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423e:	2302      	movs	r3, #2
 8004240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004246:	2300      	movs	r3, #0
 8004248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800424a:	2305      	movs	r3, #5
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800424e:	f107 0314 	add.w	r3, r7, #20
 8004252:	4619      	mov	r1, r3
 8004254:	4815      	ldr	r0, [pc, #84]	; (80042ac <HAL_SPI_MspInit+0xdc>)
 8004256:	f001 fd5f 	bl	8005d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800425a:	2301      	movs	r3, #1
 800425c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425e:	2302      	movs	r3, #2
 8004260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004266:	2303      	movs	r3, #3
 8004268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800426a:	2305      	movs	r3, #5
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800426e:	f107 0314 	add.w	r3, r7, #20
 8004272:	4619      	mov	r1, r3
 8004274:	480d      	ldr	r0, [pc, #52]	; (80042ac <HAL_SPI_MspInit+0xdc>)
 8004276:	f001 fd4f 	bl	8005d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800427a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800427e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004280:	2302      	movs	r3, #2
 8004282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004284:	2300      	movs	r3, #0
 8004286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004288:	2303      	movs	r3, #3
 800428a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800428c:	2305      	movs	r3, #5
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	4619      	mov	r1, r3
 8004296:	4806      	ldr	r0, [pc, #24]	; (80042b0 <HAL_SPI_MspInit+0xe0>)
 8004298:	f001 fd3e 	bl	8005d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800429c:	bf00      	nop
 800429e:	3728      	adds	r7, #40	; 0x28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40003800 	.word	0x40003800
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40022000 	.word	0x40022000
 80042b0:	40020400 	.word	0x40020400

080042b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	; 0x24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2e      	ldr	r2, [pc, #184]	; (800437c <HAL_TIM_Base_MspInit+0xc8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d10c      	bne.n	80042e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042c6:	4b2e      	ldr	r3, [pc, #184]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	4a2d      	ldr	r2, [pc, #180]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	6453      	str	r3, [r2, #68]	; 0x44
 80042d2:	4b2b      	ldr	r3, [pc, #172]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80042de:	e046      	b.n	800436e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e8:	d10c      	bne.n	8004304 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042ea:	4b25      	ldr	r3, [pc, #148]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	4a24      	ldr	r2, [pc, #144]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6413      	str	r3, [r2, #64]	; 0x40
 80042f6:	4b22      	ldr	r3, [pc, #136]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	69bb      	ldr	r3, [r7, #24]
}
 8004302:	e034      	b.n	800436e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <HAL_TIM_Base_MspInit+0xd0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10c      	bne.n	8004328 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800430e:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	6413      	str	r3, [r2, #64]	; 0x40
 800431a:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	697b      	ldr	r3, [r7, #20]
}
 8004326:	e022      	b.n	800436e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a16      	ldr	r2, [pc, #88]	; (8004388 <HAL_TIM_Base_MspInit+0xd4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d10c      	bne.n	800434c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004332:	4b13      	ldr	r3, [pc, #76]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 8004338:	f043 0308 	orr.w	r3, r3, #8
 800433c:	6413      	str	r3, [r2, #64]	; 0x40
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	693b      	ldr	r3, [r7, #16]
}
 800434a:	e010      	b.n	800436e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0e      	ldr	r2, [pc, #56]	; (800438c <HAL_TIM_Base_MspInit+0xd8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d10b      	bne.n	800436e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	4a09      	ldr	r2, [pc, #36]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	6453      	str	r3, [r2, #68]	; 0x44
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <HAL_TIM_Base_MspInit+0xcc>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
}
 800436e:	bf00      	nop
 8004370:	3724      	adds	r7, #36	; 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40010000 	.word	0x40010000
 8004380:	40023800 	.word	0x40023800
 8004384:	40000400 	.word	0x40000400
 8004388:	40000c00 	.word	0x40000c00
 800438c:	40010400 	.word	0x40010400

08004390 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004398:	f107 030c 	add.w	r3, r7, #12
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	605a      	str	r2, [r3, #4]
 80043a2:	609a      	str	r2, [r3, #8]
 80043a4:	60da      	str	r2, [r3, #12]
 80043a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a11      	ldr	r2, [pc, #68]	; (80043f4 <HAL_TIM_MspPostInit+0x64>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d11b      	bne.n	80043ea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80043b2:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <HAL_TIM_MspPostInit+0x68>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4a10      	ldr	r2, [pc, #64]	; (80043f8 <HAL_TIM_MspPostInit+0x68>)
 80043b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043bc:	6313      	str	r3, [r2, #48]	; 0x30
 80043be:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <HAL_TIM_MspPostInit+0x68>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	60bb      	str	r3, [r7, #8]
 80043c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI2     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043ca:	2304      	movs	r3, #4
 80043cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ce:	2302      	movs	r3, #2
 80043d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80043da:	2303      	movs	r3, #3
 80043dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80043de:	f107 030c 	add.w	r3, r7, #12
 80043e2:	4619      	mov	r1, r3
 80043e4:	4805      	ldr	r0, [pc, #20]	; (80043fc <HAL_TIM_MspPostInit+0x6c>)
 80043e6:	f001 fc97 	bl	8005d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80043ea:	bf00      	nop
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40010400 	.word	0x40010400
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40022000 	.word	0x40022000

08004400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08e      	sub	sp, #56	; 0x38
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a5b      	ldr	r2, [pc, #364]	; (800458c <HAL_UART_MspInit+0x18c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d130      	bne.n	8004484 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004422:	4b5b      	ldr	r3, [pc, #364]	; (8004590 <HAL_UART_MspInit+0x190>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	4a5a      	ldr	r2, [pc, #360]	; (8004590 <HAL_UART_MspInit+0x190>)
 8004428:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800442c:	6413      	str	r3, [r2, #64]	; 0x40
 800442e:	4b58      	ldr	r3, [pc, #352]	; (8004590 <HAL_UART_MspInit+0x190>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004436:	623b      	str	r3, [r7, #32]
 8004438:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800443a:	4b55      	ldr	r3, [pc, #340]	; (8004590 <HAL_UART_MspInit+0x190>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	4a54      	ldr	r2, [pc, #336]	; (8004590 <HAL_UART_MspInit+0x190>)
 8004440:	f043 0320 	orr.w	r3, r3, #32
 8004444:	6313      	str	r3, [r2, #48]	; 0x30
 8004446:	4b52      	ldr	r3, [pc, #328]	; (8004590 <HAL_UART_MspInit+0x190>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004452:	23c0      	movs	r3, #192	; 0xc0
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004456:	2302      	movs	r3, #2
 8004458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445a:	2300      	movs	r3, #0
 800445c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800445e:	2303      	movs	r3, #3
 8004460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004462:	2308      	movs	r3, #8
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800446a:	4619      	mov	r1, r3
 800446c:	4849      	ldr	r0, [pc, #292]	; (8004594 <HAL_UART_MspInit+0x194>)
 800446e:	f001 fc53 	bl	8005d18 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8004472:	2200      	movs	r2, #0
 8004474:	2105      	movs	r1, #5
 8004476:	2052      	movs	r0, #82	; 0x52
 8004478:	f000 feec 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800447c:	2052      	movs	r0, #82	; 0x52
 800447e:	f000 ff05 	bl	800528c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004482:	e07f      	b.n	8004584 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a43      	ldr	r2, [pc, #268]	; (8004598 <HAL_UART_MspInit+0x198>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d14d      	bne.n	800452a <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800448e:	4b40      	ldr	r3, [pc, #256]	; (8004590 <HAL_UART_MspInit+0x190>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	4a3f      	ldr	r2, [pc, #252]	; (8004590 <HAL_UART_MspInit+0x190>)
 8004494:	f043 0310 	orr.w	r3, r3, #16
 8004498:	6453      	str	r3, [r2, #68]	; 0x44
 800449a:	4b3d      	ldr	r3, [pc, #244]	; (8004590 <HAL_UART_MspInit+0x190>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a6:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <HAL_UART_MspInit+0x190>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	4a39      	ldr	r2, [pc, #228]	; (8004590 <HAL_UART_MspInit+0x190>)
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	6313      	str	r3, [r2, #48]	; 0x30
 80044b2:	4b37      	ldr	r3, [pc, #220]	; (8004590 <HAL_UART_MspInit+0x190>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044be:	4b34      	ldr	r3, [pc, #208]	; (8004590 <HAL_UART_MspInit+0x190>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	4a33      	ldr	r2, [pc, #204]	; (8004590 <HAL_UART_MspInit+0x190>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_UART_MspInit+0x190>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044da:	2302      	movs	r3, #2
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e2:	2300      	movs	r3, #0
 80044e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044e6:	2307      	movs	r3, #7
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80044ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ee:	4619      	mov	r1, r3
 80044f0:	482a      	ldr	r0, [pc, #168]	; (800459c <HAL_UART_MspInit+0x19c>)
 80044f2:	f001 fc11 	bl	8005d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80044f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fc:	2302      	movs	r3, #2
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004504:	2300      	movs	r3, #0
 8004506:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004508:	2307      	movs	r3, #7
 800450a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800450c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004510:	4619      	mov	r1, r3
 8004512:	4823      	ldr	r0, [pc, #140]	; (80045a0 <HAL_UART_MspInit+0x1a0>)
 8004514:	f001 fc00 	bl	8005d18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8004518:	2200      	movs	r2, #0
 800451a:	2107      	movs	r1, #7
 800451c:	2025      	movs	r0, #37	; 0x25
 800451e:	f000 fe99 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004522:	2025      	movs	r0, #37	; 0x25
 8004524:	f000 feb2 	bl	800528c <HAL_NVIC_EnableIRQ>
}
 8004528:	e02c      	b.n	8004584 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART6)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <HAL_UART_MspInit+0x1a4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d127      	bne.n	8004584 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004534:	4b16      	ldr	r3, [pc, #88]	; (8004590 <HAL_UART_MspInit+0x190>)
 8004536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004538:	4a15      	ldr	r2, [pc, #84]	; (8004590 <HAL_UART_MspInit+0x190>)
 800453a:	f043 0320 	orr.w	r3, r3, #32
 800453e:	6453      	str	r3, [r2, #68]	; 0x44
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_UART_MspInit+0x190>)
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <HAL_UART_MspInit+0x190>)
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	4a0f      	ldr	r2, [pc, #60]	; (8004590 <HAL_UART_MspInit+0x190>)
 8004552:	f043 0304 	orr.w	r3, r3, #4
 8004556:	6313      	str	r3, [r2, #48]	; 0x30
 8004558:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <HAL_UART_MspInit+0x190>)
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004564:	23c0      	movs	r3, #192	; 0xc0
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004568:	2302      	movs	r3, #2
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456c:	2300      	movs	r3, #0
 800456e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004570:	2303      	movs	r3, #3
 8004572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004574:	2308      	movs	r3, #8
 8004576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800457c:	4619      	mov	r1, r3
 800457e:	480a      	ldr	r0, [pc, #40]	; (80045a8 <HAL_UART_MspInit+0x1a8>)
 8004580:	f001 fbca 	bl	8005d18 <HAL_GPIO_Init>
}
 8004584:	bf00      	nop
 8004586:	3738      	adds	r7, #56	; 0x38
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40007800 	.word	0x40007800
 8004590:	40023800 	.word	0x40023800
 8004594:	40021400 	.word	0x40021400
 8004598:	40011000 	.word	0x40011000
 800459c:	40020400 	.word	0x40020400
 80045a0:	40020000 	.word	0x40020000
 80045a4:	40011400 	.word	0x40011400
 80045a8:	40020800 	.word	0x40020800

080045ac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80045b2:	1d3b      	adds	r3, r7, #4
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	609a      	str	r2, [r3, #8]
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80045c0:	4b3a      	ldr	r3, [pc, #232]	; (80046ac <HAL_FMC_MspInit+0x100>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d16d      	bne.n	80046a4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80045c8:	4b38      	ldr	r3, [pc, #224]	; (80046ac <HAL_FMC_MspInit+0x100>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80045ce:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <HAL_FMC_MspInit+0x104>)
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	4a37      	ldr	r2, [pc, #220]	; (80046b0 <HAL_FMC_MspInit+0x104>)
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	6393      	str	r3, [r2, #56]	; 0x38
 80045da:	4b35      	ldr	r3, [pc, #212]	; (80046b0 <HAL_FMC_MspInit+0x104>)
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80045e6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80045ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ec:	2302      	movs	r3, #2
 80045ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f4:	2303      	movs	r3, #3
 80045f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045f8:	230c      	movs	r3, #12
 80045fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045fc:	1d3b      	adds	r3, r7, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	482c      	ldr	r0, [pc, #176]	; (80046b4 <HAL_FMC_MspInit+0x108>)
 8004602:	f001 fb89 	bl	8005d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8004606:	f248 1333 	movw	r3, #33075	; 0x8133
 800460a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460c:	2302      	movs	r3, #2
 800460e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004614:	2303      	movs	r3, #3
 8004616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004618:	230c      	movs	r3, #12
 800461a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800461c:	1d3b      	adds	r3, r7, #4
 800461e:	4619      	mov	r1, r3
 8004620:	4825      	ldr	r0, [pc, #148]	; (80046b8 <HAL_FMC_MspInit+0x10c>)
 8004622:	f001 fb79 	bl	8005d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8004626:	f24c 7303 	movw	r3, #50947	; 0xc703
 800462a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462c:	2302      	movs	r3, #2
 800462e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004634:	2303      	movs	r3, #3
 8004636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004638:	230c      	movs	r3, #12
 800463a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800463c:	1d3b      	adds	r3, r7, #4
 800463e:	4619      	mov	r1, r3
 8004640:	481e      	ldr	r0, [pc, #120]	; (80046bc <HAL_FMC_MspInit+0x110>)
 8004642:	f001 fb69 	bl	8005d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004646:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800464a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464c:	2302      	movs	r3, #2
 800464e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004654:	2303      	movs	r3, #3
 8004656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004658:	230c      	movs	r3, #12
 800465a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800465c:	1d3b      	adds	r3, r7, #4
 800465e:	4619      	mov	r1, r3
 8004660:	4817      	ldr	r0, [pc, #92]	; (80046c0 <HAL_FMC_MspInit+0x114>)
 8004662:	f001 fb59 	bl	8005d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8004666:	2328      	movs	r3, #40	; 0x28
 8004668:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466a:	2302      	movs	r3, #2
 800466c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004672:	2303      	movs	r3, #3
 8004674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004676:	230c      	movs	r3, #12
 8004678:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	4619      	mov	r1, r3
 800467e:	4811      	ldr	r0, [pc, #68]	; (80046c4 <HAL_FMC_MspInit+0x118>)
 8004680:	f001 fb4a 	bl	8005d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004684:	2308      	movs	r3, #8
 8004686:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004688:	2302      	movs	r3, #2
 800468a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004690:	2303      	movs	r3, #3
 8004692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004694:	230c      	movs	r3, #12
 8004696:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004698:	1d3b      	adds	r3, r7, #4
 800469a:	4619      	mov	r1, r3
 800469c:	480a      	ldr	r0, [pc, #40]	; (80046c8 <HAL_FMC_MspInit+0x11c>)
 800469e:	f001 fb3b 	bl	8005d18 <HAL_GPIO_Init>
 80046a2:	e000      	b.n	80046a6 <HAL_FMC_MspInit+0xfa>
    return;
 80046a4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000498 	.word	0x20000498
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40021800 	.word	0x40021800
 80046bc:	40020c00 	.word	0x40020c00
 80046c0:	40021400 	.word	0x40021400
 80046c4:	40021c00 	.word	0x40021c00
 80046c8:	40020800 	.word	0x40020800

080046cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80046d4:	f7ff ff6a 	bl	80045ac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08c      	sub	sp, #48	; 0x30
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80046f0:	2200      	movs	r2, #0
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	2036      	movs	r0, #54	; 0x36
 80046f6:	f000 fdad 	bl	8005254 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80046fa:	2036      	movs	r0, #54	; 0x36
 80046fc:	f000 fdc6 	bl	800528c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004700:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <HAL_InitTick+0xa0>)
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <HAL_InitTick+0xa0>)
 8004706:	f043 0310 	orr.w	r3, r3, #16
 800470a:	6413      	str	r3, [r2, #64]	; 0x40
 800470c:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <HAL_InitTick+0xa0>)
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004718:	f107 0210 	add.w	r2, r7, #16
 800471c:	f107 0314 	add.w	r3, r7, #20
 8004720:	4611      	mov	r1, r2
 8004722:	4618      	mov	r0, r3
 8004724:	f003 fbdc 	bl	8007ee0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004728:	f003 fbb2 	bl	8007e90 <HAL_RCC_GetPCLK1Freq>
 800472c:	4603      	mov	r3, r0
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	4a13      	ldr	r2, [pc, #76]	; (8004784 <HAL_InitTick+0xa4>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	0c9b      	lsrs	r3, r3, #18
 800473c:	3b01      	subs	r3, #1
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004740:	4b11      	ldr	r3, [pc, #68]	; (8004788 <HAL_InitTick+0xa8>)
 8004742:	4a12      	ldr	r2, [pc, #72]	; (800478c <HAL_InitTick+0xac>)
 8004744:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <HAL_InitTick+0xa8>)
 8004748:	f240 32e7 	movw	r2, #999	; 0x3e7
 800474c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800474e:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <HAL_InitTick+0xa8>)
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_InitTick+0xa8>)
 8004756:	2200      	movs	r2, #0
 8004758:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_InitTick+0xa8>)
 800475c:	2200      	movs	r2, #0
 800475e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004760:	4809      	ldr	r0, [pc, #36]	; (8004788 <HAL_InitTick+0xa8>)
 8004762:	f004 fcb0 	bl	80090c6 <HAL_TIM_Base_Init>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800476c:	4806      	ldr	r0, [pc, #24]	; (8004788 <HAL_InitTick+0xa8>)
 800476e:	f004 fcd5 	bl	800911c <HAL_TIM_Base_Start_IT>
 8004772:	4603      	mov	r3, r0
 8004774:	e000      	b.n	8004778 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
}
 8004778:	4618      	mov	r0, r3
 800477a:	3730      	adds	r7, #48	; 0x30
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40023800 	.word	0x40023800
 8004784:	431bde83 	.word	0x431bde83
 8004788:	20008c90 	.word	0x20008c90
 800478c:	40001000 	.word	0x40001000

08004790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004794:	e7fe      	b.n	8004794 <NMI_Handler+0x4>

08004796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004796:	b480      	push	{r7}
 8004798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800479a:	e7fe      	b.n	800479a <HardFault_Handler+0x4>

0800479c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047a0:	e7fe      	b.n	80047a0 <MemManage_Handler+0x4>

080047a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047a2:	b480      	push	{r7}
 80047a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047a6:	e7fe      	b.n	80047a6 <BusFault_Handler+0x4>

080047a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047ac:	e7fe      	b.n	80047ac <UsageFault_Handler+0x4>

080047ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047ae:	b480      	push	{r7}
 80047b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047b2:	bf00      	nop
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80047c0:	4802      	ldr	r0, [pc, #8]	; (80047cc <USART1_IRQHandler+0x10>)
 80047c2:	f005 fefb 	bl	800a5bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80047c6:	bf00      	nop
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20008964 	.word	0x20008964

080047d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80047d4:	4803      	ldr	r0, [pc, #12]	; (80047e4 <TIM6_DAC_IRQHandler+0x14>)
 80047d6:	f000 fd89 	bl	80052ec <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80047da:	4803      	ldr	r0, [pc, #12]	; (80047e8 <TIM6_DAC_IRQHandler+0x18>)
 80047dc:	f004 fcfd 	bl	80091da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80047e0:	bf00      	nop
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	200089e4 	.word	0x200089e4
 80047e8:	20008c90 	.word	0x20008c90

080047ec <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80047f0:	4802      	ldr	r0, [pc, #8]	; (80047fc <UART7_IRQHandler+0x10>)
 80047f2:	f005 fee3 	bl	800a5bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	2000869c 	.word	0x2000869c

08004800 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004804:	4802      	ldr	r0, [pc, #8]	; (8004810 <LTDC_IRQHandler+0x10>)
 8004806:	f002 fbed 	bl	8006fe4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20008828 	.word	0x20008828

08004814 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004818:	4b08      	ldr	r3, [pc, #32]	; (800483c <SystemInit+0x28>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	4a07      	ldr	r2, [pc, #28]	; (800483c <SystemInit+0x28>)
 8004820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <SystemInit+0x28>)
 800482a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800482e:	609a      	str	r2, [r3, #8]
#endif
}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004878 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004844:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004846:	e003      	b.n	8004850 <LoopCopyDataInit>

08004848 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004848:	4b0c      	ldr	r3, [pc, #48]	; (800487c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800484a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800484c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800484e:	3104      	adds	r1, #4

08004850 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004850:	480b      	ldr	r0, [pc, #44]	; (8004880 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004852:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004854:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004856:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004858:	d3f6      	bcc.n	8004848 <CopyDataInit>
  ldr  r2, =_sbss
 800485a:	4a0b      	ldr	r2, [pc, #44]	; (8004888 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800485c:	e002      	b.n	8004864 <LoopFillZerobss>

0800485e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800485e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004860:	f842 3b04 	str.w	r3, [r2], #4

08004864 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004866:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004868:	d3f9      	bcc.n	800485e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800486a:	f7ff ffd3 	bl	8004814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800486e:	f009 f9c7 	bl	800dc00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004872:	f7fc f85d 	bl	8000930 <main>
  bx  lr    
 8004876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004878:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800487c:	0800fca0 	.word	0x0800fca0
  ldr  r0, =_sdata
 8004880:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004884:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 8004888:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 800488c:	20008cd4 	.word	0x20008cd4

08004890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004890:	e7fe      	b.n	8004890 <ADC_IRQHandler>

08004892 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004896:	2003      	movs	r0, #3
 8004898:	f000 fcd1 	bl	800523e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800489c:	2000      	movs	r0, #0
 800489e:	f7ff ff1f 	bl	80046e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80048a2:	f7ff fa01 	bl	8003ca8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_IncTick+0x20>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_IncTick+0x24>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4413      	add	r3, r2
 80048bc:	4a04      	ldr	r2, [pc, #16]	; (80048d0 <HAL_IncTick+0x24>)
 80048be:	6013      	str	r3, [r2, #0]
}
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000050 	.word	0x20000050
 80048d0:	20008cd0 	.word	0x20008cd0

080048d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return uwTick;
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <HAL_GetTick+0x14>)
 80048da:	681b      	ldr	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20008cd0 	.word	0x20008cd0

080048ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048f4:	f7ff ffee 	bl	80048d4 <HAL_GetTick>
 80048f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d005      	beq.n	8004912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004906:	4b09      	ldr	r3, [pc, #36]	; (800492c <HAL_Delay+0x40>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004912:	bf00      	nop
 8004914:	f7ff ffde 	bl	80048d4 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	429a      	cmp	r2, r3
 8004922:	d8f7      	bhi.n	8004914 <HAL_Delay+0x28>
  {
  }
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000050 	.word	0x20000050

08004930 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e031      	b.n	80049aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff f9d2 	bl	8003cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	d116      	bne.n	800499c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <HAL_ADC_Init+0x84>)
 8004974:	4013      	ands	r3, r2
 8004976:	f043 0202 	orr.w	r2, r3, #2
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fab6 	bl	8004ef0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f023 0303 	bic.w	r3, r3, #3
 8004992:	f043 0201 	orr.w	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
 800499a:	e001      	b.n	80049a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	ffffeefd 	.word	0xffffeefd

080049b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_ADC_Start+0x1a>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e0a0      	b.n	8004b14 <HAL_ADC_Start+0x15c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d018      	beq.n	8004a1a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80049f8:	4b49      	ldr	r3, [pc, #292]	; (8004b20 <HAL_ADC_Start+0x168>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a49      	ldr	r2, [pc, #292]	; (8004b24 <HAL_ADC_Start+0x16c>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	0c9a      	lsrs	r2, r3, #18
 8004a04:	4613      	mov	r3, r2
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	4413      	add	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a0c:	e002      	b.n	8004a14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f9      	bne.n	8004a0e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d174      	bne.n	8004b12 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a2c:	4b3e      	ldr	r3, [pc, #248]	; (8004b28 <HAL_ADC_Start+0x170>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a62:	d106      	bne.n	8004a72 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a68:	f023 0206 	bic.w	r2, r3, #6
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	645a      	str	r2, [r3, #68]	; 0x44
 8004a70:	e002      	b.n	8004a78 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004a88:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004a8a:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <HAL_ADC_Start+0x174>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10f      	bne.n	8004ab6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d136      	bne.n	8004b12 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	e02d      	b.n	8004b12 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <HAL_ADC_Start+0x178>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d10e      	bne.n	8004ade <HAL_ADC_Start+0x126>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d107      	bne.n	8004ade <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004adc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <HAL_ADC_Start+0x174>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d113      	bne.n	8004b12 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a11      	ldr	r2, [pc, #68]	; (8004b34 <HAL_ADC_Start+0x17c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d10e      	bne.n	8004b12 <HAL_ADC_Start+0x15a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d107      	bne.n	8004b12 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b10:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	20000048 	.word	0x20000048
 8004b24:	431bde83 	.word	0x431bde83
 8004b28:	fffff8fe 	.word	0xfffff8fe
 8004b2c:	40012300 	.word	0x40012300
 8004b30:	40012000 	.word	0x40012000
 8004b34:	40012200 	.word	0x40012200

08004b38 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b54:	d113      	bne.n	8004b7e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b64:	d10b      	bne.n	8004b7e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e05c      	b.n	8004c38 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004b7e:	f7ff fea9 	bl	80048d4 <HAL_GetTick>
 8004b82:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b84:	e01a      	b.n	8004bbc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d016      	beq.n	8004bbc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <HAL_ADC_PollForConversion+0x6c>
 8004b94:	f7ff fe9e 	bl	80048d4 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d20b      	bcs.n	8004bbc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	f043 0204 	orr.w	r2, r3, #4
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e03d      	b.n	8004c38 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d1dd      	bne.n	8004b86 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0212 	mvn.w	r2, #18
 8004bd2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d123      	bne.n	8004c36 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11f      	bne.n	8004c36 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d111      	bne.n	8004c36 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d105      	bne.n	8004c36 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f043 0201 	orr.w	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x1c>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e12a      	b.n	8004ece <HAL_ADC_ConfigChannel+0x272>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b09      	cmp	r3, #9
 8004c86:	d93a      	bls.n	8004cfe <HAL_ADC_ConfigChannel+0xa2>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c90:	d035      	beq.n	8004cfe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68d9      	ldr	r1, [r3, #12]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3b1e      	subs	r3, #30
 8004ca8:	2207      	movs	r2, #7
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a87      	ldr	r2, [pc, #540]	; (8004edc <HAL_ADC_ConfigChannel+0x280>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68d9      	ldr	r1, [r3, #12]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	061a      	lsls	r2, r3, #24
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cd6:	e035      	b.n	8004d44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68d9      	ldr	r1, [r3, #12]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4618      	mov	r0, r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	4403      	add	r3, r0
 8004cf0:	3b1e      	subs	r3, #30
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cfc:	e022      	b.n	8004d44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6919      	ldr	r1, [r3, #16]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	2207      	movs	r2, #7
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	43da      	mvns	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	400a      	ands	r2, r1
 8004d20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6919      	ldr	r1, [r3, #16]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	4618      	mov	r0, r3
 8004d34:	4603      	mov	r3, r0
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	4403      	add	r3, r0
 8004d3a:	409a      	lsls	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b06      	cmp	r3, #6
 8004d4a:	d824      	bhi.n	8004d96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3b05      	subs	r3, #5
 8004d5e:	221f      	movs	r2, #31
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	43da      	mvns	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	400a      	ands	r2, r1
 8004d6c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	3b05      	subs	r3, #5
 8004d88:	fa00 f203 	lsl.w	r2, r0, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	635a      	str	r2, [r3, #52]	; 0x34
 8004d94:	e04c      	b.n	8004e30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b0c      	cmp	r3, #12
 8004d9c:	d824      	bhi.n	8004de8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	3b23      	subs	r3, #35	; 0x23
 8004db0:	221f      	movs	r2, #31
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	43da      	mvns	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	400a      	ands	r2, r1
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	4618      	mov	r0, r3
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3b23      	subs	r3, #35	; 0x23
 8004dda:	fa00 f203 	lsl.w	r2, r0, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
 8004de6:	e023      	b.n	8004e30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	3b41      	subs	r3, #65	; 0x41
 8004dfa:	221f      	movs	r2, #31
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43da      	mvns	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	400a      	ands	r2, r1
 8004e08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4618      	mov	r0, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	3b41      	subs	r3, #65	; 0x41
 8004e24:	fa00 f203 	lsl.w	r2, r0, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2a      	ldr	r2, [pc, #168]	; (8004ee0 <HAL_ADC_ConfigChannel+0x284>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d10a      	bne.n	8004e50 <HAL_ADC_ConfigChannel+0x1f4>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e42:	d105      	bne.n	8004e50 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004e44:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <HAL_ADC_ConfigChannel+0x288>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	4a26      	ldr	r2, [pc, #152]	; (8004ee4 <HAL_ADC_ConfigChannel+0x288>)
 8004e4a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004e4e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a22      	ldr	r2, [pc, #136]	; (8004ee0 <HAL_ADC_ConfigChannel+0x284>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d109      	bne.n	8004e6e <HAL_ADC_ConfigChannel+0x212>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b12      	cmp	r3, #18
 8004e60:	d105      	bne.n	8004e6e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004e62:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_ADC_ConfigChannel+0x288>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <HAL_ADC_ConfigChannel+0x288>)
 8004e68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e6c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <HAL_ADC_ConfigChannel+0x284>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d125      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x268>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a17      	ldr	r2, [pc, #92]	; (8004edc <HAL_ADC_ConfigChannel+0x280>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <HAL_ADC_ConfigChannel+0x22e>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b11      	cmp	r3, #17
 8004e88:	d11c      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004e8a:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <HAL_ADC_ConfigChannel+0x288>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <HAL_ADC_ConfigChannel+0x288>)
 8004e90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e94:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a10      	ldr	r2, [pc, #64]	; (8004edc <HAL_ADC_ConfigChannel+0x280>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d111      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <HAL_ADC_ConfigChannel+0x28c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a11      	ldr	r2, [pc, #68]	; (8004eec <HAL_ADC_ConfigChannel+0x290>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	0c9a      	lsrs	r2, r3, #18
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004eb6:	e002      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f9      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	10000012 	.word	0x10000012
 8004ee0:	40012000 	.word	0x40012000
 8004ee4:	40012300 	.word	0x40012300
 8004ee8:	20000048 	.word	0x20000048
 8004eec:	431bde83 	.word	0x431bde83

08004ef0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004ef8:	4b78      	ldr	r3, [pc, #480]	; (80050dc <ADC_Init+0x1ec>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4a77      	ldr	r2, [pc, #476]	; (80050dc <ADC_Init+0x1ec>)
 8004efe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004f02:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004f04:	4b75      	ldr	r3, [pc, #468]	; (80050dc <ADC_Init+0x1ec>)
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4973      	ldr	r1, [pc, #460]	; (80050dc <ADC_Init+0x1ec>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6859      	ldr	r1, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	021a      	lsls	r2, r3, #8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6859      	ldr	r1, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6899      	ldr	r1, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	4a58      	ldr	r2, [pc, #352]	; (80050e0 <ADC_Init+0x1f0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d022      	beq.n	8004fca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6899      	ldr	r1, [r3, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6899      	ldr	r1, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	e00f      	b.n	8004fea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fe8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0202 	bic.w	r2, r2, #2
 8004ff8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6899      	ldr	r1, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	005a      	lsls	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01b      	beq.n	8005050 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005026:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005036:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6859      	ldr	r1, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	3b01      	subs	r3, #1
 8005044:	035a      	lsls	r2, r3, #13
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
 800504e:	e007      	b.n	8005060 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800505e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800506e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	3b01      	subs	r3, #1
 800507c:	051a      	lsls	r2, r3, #20
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005094:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6899      	ldr	r1, [r3, #8]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050a2:	025a      	lsls	r2, r3, #9
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6899      	ldr	r1, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	029a      	lsls	r2, r3, #10
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	609a      	str	r2, [r3, #8]
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	40012300 	.word	0x40012300
 80050e0:	0f000001 	.word	0x0f000001

080050e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <__NVIC_SetPriorityGrouping+0x40>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005100:	4013      	ands	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <__NVIC_SetPriorityGrouping+0x44>)
 800510e:	4313      	orrs	r3, r2
 8005110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005112:	4a04      	ldr	r2, [pc, #16]	; (8005124 <__NVIC_SetPriorityGrouping+0x40>)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	60d3      	str	r3, [r2, #12]
}
 8005118:	bf00      	nop
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	e000ed00 	.word	0xe000ed00
 8005128:	05fa0000 	.word	0x05fa0000

0800512c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005130:	4b04      	ldr	r3, [pc, #16]	; (8005144 <__NVIC_GetPriorityGrouping+0x18>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	0a1b      	lsrs	r3, r3, #8
 8005136:	f003 0307 	and.w	r3, r3, #7
}
 800513a:	4618      	mov	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	e000ed00 	.word	0xe000ed00

08005148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005156:	2b00      	cmp	r3, #0
 8005158:	db0b      	blt.n	8005172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	f003 021f 	and.w	r2, r3, #31
 8005160:	4907      	ldr	r1, [pc, #28]	; (8005180 <__NVIC_EnableIRQ+0x38>)
 8005162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	2001      	movs	r0, #1
 800516a:	fa00 f202 	lsl.w	r2, r0, r2
 800516e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	e000e100 	.word	0xe000e100

08005184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	6039      	str	r1, [r7, #0]
 800518e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005194:	2b00      	cmp	r3, #0
 8005196:	db0a      	blt.n	80051ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	b2da      	uxtb	r2, r3
 800519c:	490c      	ldr	r1, [pc, #48]	; (80051d0 <__NVIC_SetPriority+0x4c>)
 800519e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a2:	0112      	lsls	r2, r2, #4
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	440b      	add	r3, r1
 80051a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051ac:	e00a      	b.n	80051c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	4908      	ldr	r1, [pc, #32]	; (80051d4 <__NVIC_SetPriority+0x50>)
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	3b04      	subs	r3, #4
 80051bc:	0112      	lsls	r2, r2, #4
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	440b      	add	r3, r1
 80051c2:	761a      	strb	r2, [r3, #24]
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	e000e100 	.word	0xe000e100
 80051d4:	e000ed00 	.word	0xe000ed00

080051d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051d8:	b480      	push	{r7}
 80051da:	b089      	sub	sp, #36	; 0x24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f1c3 0307 	rsb	r3, r3, #7
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	bf28      	it	cs
 80051f6:	2304      	movcs	r3, #4
 80051f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	3304      	adds	r3, #4
 80051fe:	2b06      	cmp	r3, #6
 8005200:	d902      	bls.n	8005208 <NVIC_EncodePriority+0x30>
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	3b03      	subs	r3, #3
 8005206:	e000      	b.n	800520a <NVIC_EncodePriority+0x32>
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800520c:	f04f 32ff 	mov.w	r2, #4294967295
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43da      	mvns	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	401a      	ands	r2, r3
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005220:	f04f 31ff 	mov.w	r1, #4294967295
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	fa01 f303 	lsl.w	r3, r1, r3
 800522a:	43d9      	mvns	r1, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005230:	4313      	orrs	r3, r2
         );
}
 8005232:	4618      	mov	r0, r3
 8005234:	3724      	adds	r7, #36	; 0x24
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b082      	sub	sp, #8
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff ff4c 	bl	80050e4 <__NVIC_SetPriorityGrouping>
}
 800524c:	bf00      	nop
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005266:	f7ff ff61 	bl	800512c <__NVIC_GetPriorityGrouping>
 800526a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	6978      	ldr	r0, [r7, #20]
 8005272:	f7ff ffb1 	bl	80051d8 <NVIC_EncodePriority>
 8005276:	4602      	mov	r2, r0
 8005278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800527c:	4611      	mov	r1, r2
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff ff80 	bl	8005184 <__NVIC_SetPriority>
}
 8005284:	bf00      	nop
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff ff54 	bl	8005148 <__NVIC_EnableIRQ>
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e014      	b.n	80052e4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	791b      	ldrb	r3, [r3, #4]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d105      	bne.n	80052d0 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fe fd82 	bl	8003dd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005302:	d118      	bne.n	8005336 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2204      	movs	r2, #4
 8005308:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f043 0201 	orr.w	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800531e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800532e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f825 	bl	8005380 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005344:	d118      	bne.n	8005378 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f043 0202 	orr.w	r2, r3, #2
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005360:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005370:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f85b 	bl	800542e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	795b      	ldrb	r3, [r3, #5]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_DAC_ConfigChannel+0x20>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e036      	b.n	8005422 <HAL_DAC_ConfigChannel+0x8e>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2202      	movs	r2, #2
 80053be:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80053c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	43db      	mvns	r3, r3
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4013      	ands	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6819      	ldr	r1, [r3, #0]
 8005402:	22c0      	movs	r2, #192	; 0xc0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	43da      	mvns	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	400a      	ands	r2, r1
 8005412:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005450:	f7ff fa40 	bl	80048d4 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e099      	b.n	8005594 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0201 	bic.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005480:	e00f      	b.n	80054a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005482:	f7ff fa27 	bl	80048d4 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b05      	cmp	r3, #5
 800548e:	d908      	bls.n	80054a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2203      	movs	r2, #3
 800549a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e078      	b.n	8005594 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e8      	bne.n	8005482 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4b38      	ldr	r3, [pc, #224]	; (800559c <HAL_DMA_Init+0x158>)
 80054bc:	4013      	ands	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d107      	bne.n	800550c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	4313      	orrs	r3, r2
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0307 	bic.w	r3, r3, #7
 8005522:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	2b04      	cmp	r3, #4
 8005534:	d117      	bne.n	8005566 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00e      	beq.n	8005566 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f8df 	bl	800570c <DMA_CheckFifoParam>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2240      	movs	r2, #64	; 0x40
 8005558:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005562:	2301      	movs	r3, #1
 8005564:	e016      	b.n	8005594 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f896 	bl	80056a0 <DMA_CalcBaseAndBitshift>
 8005574:	4603      	mov	r3, r0
 8005576:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557c:	223f      	movs	r2, #63	; 0x3f
 800557e:	409a      	lsls	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	f010803f 	.word	0xf010803f

080055a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e050      	b.n	8005654 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d101      	bne.n	80055c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80055be:	2302      	movs	r3, #2
 80055c0:	e048      	b.n	8005654 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2200      	movs	r2, #0
 80055e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2200      	movs	r2, #0
 80055e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2200      	movs	r2, #0
 80055f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2200      	movs	r2, #0
 80055f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2221      	movs	r2, #33	; 0x21
 8005600:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f84c 	bl	80056a0 <DMA_CalcBaseAndBitshift>
 8005608:	4603      	mov	r3, r0
 800560a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005610:	223f      	movs	r2, #63	; 0x3f
 8005612:	409a      	lsls	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d004      	beq.n	800567a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2280      	movs	r2, #128	; 0x80
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e00c      	b.n	8005694 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2205      	movs	r2, #5
 800567e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	3b10      	subs	r3, #16
 80056b0:	4a13      	ldr	r2, [pc, #76]	; (8005700 <DMA_CalcBaseAndBitshift+0x60>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	091b      	lsrs	r3, r3, #4
 80056b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056ba:	4a12      	ldr	r2, [pc, #72]	; (8005704 <DMA_CalcBaseAndBitshift+0x64>)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d908      	bls.n	80056e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <DMA_CalcBaseAndBitshift+0x68>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	1d1a      	adds	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	659a      	str	r2, [r3, #88]	; 0x58
 80056de:	e006      	b.n	80056ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	4b08      	ldr	r3, [pc, #32]	; (8005708 <DMA_CalcBaseAndBitshift+0x68>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	aaaaaaab 	.word	0xaaaaaaab
 8005704:	0800fc88 	.word	0x0800fc88
 8005708:	fffffc00 	.word	0xfffffc00

0800570c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d11f      	bne.n	8005766 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b03      	cmp	r3, #3
 800572a:	d855      	bhi.n	80057d8 <DMA_CheckFifoParam+0xcc>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <DMA_CheckFifoParam+0x28>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005745 	.word	0x08005745
 8005738:	08005757 	.word	0x08005757
 800573c:	08005745 	.word	0x08005745
 8005740:	080057d9 	.word	0x080057d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d045      	beq.n	80057dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005754:	e042      	b.n	80057dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800575e:	d13f      	bne.n	80057e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005764:	e03c      	b.n	80057e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576e:	d121      	bne.n	80057b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b03      	cmp	r3, #3
 8005774:	d836      	bhi.n	80057e4 <DMA_CheckFifoParam+0xd8>
 8005776:	a201      	add	r2, pc, #4	; (adr r2, 800577c <DMA_CheckFifoParam+0x70>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	0800578d 	.word	0x0800578d
 8005780:	08005793 	.word	0x08005793
 8005784:	0800578d 	.word	0x0800578d
 8005788:	080057a5 	.word	0x080057a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
      break;
 8005790:	e02f      	b.n	80057f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d024      	beq.n	80057e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a2:	e021      	b.n	80057e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057ac:	d11e      	bne.n	80057ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057b2:	e01b      	b.n	80057ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d902      	bls.n	80057c0 <DMA_CheckFifoParam+0xb4>
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d003      	beq.n	80057c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057be:	e018      	b.n	80057f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
      break;
 80057c4:	e015      	b.n	80057f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
      break;
 80057d6:	e00b      	b.n	80057f0 <DMA_CheckFifoParam+0xe4>
      break;
 80057d8:	bf00      	nop
 80057da:	e00a      	b.n	80057f2 <DMA_CheckFifoParam+0xe6>
      break;
 80057dc:	bf00      	nop
 80057de:	e008      	b.n	80057f2 <DMA_CheckFifoParam+0xe6>
      break;
 80057e0:	bf00      	nop
 80057e2:	e006      	b.n	80057f2 <DMA_CheckFifoParam+0xe6>
      break;
 80057e4:	bf00      	nop
 80057e6:	e004      	b.n	80057f2 <DMA_CheckFifoParam+0xe6>
      break;
 80057e8:	bf00      	nop
 80057ea:	e002      	b.n	80057f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <DMA_CheckFifoParam+0xe6>
      break;
 80057f0:	bf00      	nop
    }
  } 
  
  return status; 
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e039      	b.n	8005886 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fe fb1c 	bl	8003e64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005850:	f023 0107 	bic.w	r1, r3, #7
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <HAL_DMA2D_Init+0x90>)
 8005868:	4013      	ands	r3, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68d1      	ldr	r1, [r2, #12]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	430b      	orrs	r3, r1
 8005874:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	ffffc000 	.word	0xffffc000

08005894 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_DMA2D_Start+0x1c>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e018      	b.n	80058e2 <HAL_DMA2D_Start+0x4e>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f988 	bl	8005be0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b086      	sub	sp, #24
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d056      	beq.n	80059b4 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005906:	f7fe ffe5 	bl	80048d4 <HAL_GetTick>
 800590a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800590c:	e04b      	b.n	80059a6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800591c:	2b00      	cmp	r3, #0
 800591e:	d023      	beq.n	8005968 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	f043 0202 	orr.w	r2, r3, #2
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	f043 0201 	orr.w	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2221      	movs	r2, #33	; 0x21
 8005952:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2204      	movs	r2, #4
 8005958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0a5      	b.n	8005ab4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d01a      	beq.n	80059a6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005970:	f7fe ffb0 	bl	80048d4 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <HAL_DMA2D_PollForTransfer+0x9c>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10f      	bne.n	80059a6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	f043 0220 	orr.w	r2, r3, #32
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2203      	movs	r2, #3
 8005996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e086      	b.n	8005ab4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0ac      	beq.n	800590e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d061      	beq.n	8005a9a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80059d6:	f7fe ff7d 	bl	80048d4 <HAL_GetTick>
 80059da:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80059dc:	e056      	b.n	8005a8c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02e      	beq.n	8005a4e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fe:	f043 0204 	orr.w	r2, r3, #4
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a14:	f043 0202 	orr.w	r2, r3, #2
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	f043 0201 	orr.w	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2229      	movs	r2, #41	; 0x29
 8005a38:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e032      	b.n	8005ab4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a54:	d01a      	beq.n	8005a8c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005a56:	f7fe ff3d 	bl	80048d4 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d302      	bcc.n	8005a6c <HAL_DMA2D_PollForTransfer+0x182>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10f      	bne.n	8005a8c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a70:	f043 0220 	orr.w	r2, r3, #32
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e013      	b.n	8005ab4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0a1      	beq.n	80059de <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2212      	movs	r2, #18
 8005aa0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_DMA2D_ConfigLayer+0x20>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e079      	b.n	8005bd0 <HAL_DMA2D_ConfigLayer+0x114>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	3318      	adds	r3, #24
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	4413      	add	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	041b      	lsls	r3, r3, #16
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005b06:	4b35      	ldr	r3, [pc, #212]	; (8005bdc <HAL_DMA2D_ConfigLayer+0x120>)
 8005b08:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b0a      	cmp	r3, #10
 8005b10:	d003      	beq.n	8005b1a <HAL_DMA2D_ConfigLayer+0x5e>
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b09      	cmp	r3, #9
 8005b18:	d107      	bne.n	8005b2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	e005      	b.n	8005b36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	061b      	lsls	r3, r3, #24
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d120      	bne.n	8005b7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	ea02 0103 	and.w	r1, r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b0a      	cmp	r3, #10
 8005b64:	d003      	beq.n	8005b6e <HAL_DMA2D_ConfigLayer+0xb2>
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b09      	cmp	r3, #9
 8005b6c:	d127      	bne.n	8005bbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b7c:	e01f      	b.n	8005bbe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	43db      	mvns	r3, r3
 8005b88:	ea02 0103 	and.w	r1, r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	6812      	ldr	r2, [r2, #0]
 8005b9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b0a      	cmp	r3, #10
 8005ba6:	d003      	beq.n	8005bb0 <HAL_DMA2D_ConfigLayer+0xf4>
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b09      	cmp	r3, #9
 8005bae:	d106      	bne.n	8005bbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005bbc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	ff03000f 	.word	0xff03000f

08005be0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b08b      	sub	sp, #44	; 0x2c
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	041a      	lsls	r2, r3, #16
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c18:	d174      	bne.n	8005d04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c20:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c28:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c30:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	431a      	orrs	r2, r3
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c50:	e053      	b.n	8005cfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d106      	bne.n	8005c68 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
 8005c66:	e048      	b.n	8005cfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d111      	bne.n	8005c94 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	0cdb      	lsrs	r3, r3, #19
 8005c74:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	0a9b      	lsrs	r3, r3, #10
 8005c7a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	08db      	lsrs	r3, r3, #3
 8005c80:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	02db      	lsls	r3, r3, #11
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
 8005c92:	e032      	b.n	8005cfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d117      	bne.n	8005ccc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	0fdb      	lsrs	r3, r3, #31
 8005ca0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	0cdb      	lsrs	r3, r3, #19
 8005ca6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	0adb      	lsrs	r3, r3, #11
 8005cac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	08db      	lsrs	r3, r3, #3
 8005cb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	029b      	lsls	r3, r3, #10
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	03db      	lsls	r3, r3, #15
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cca:	e016      	b.n	8005cfa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	0f1b      	lsrs	r3, r3, #28
 8005cd0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	0d1b      	lsrs	r3, r3, #20
 8005cd6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	0b1b      	lsrs	r3, r3, #12
 8005cdc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	091b      	lsrs	r3, r3, #4
 8005ce2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	011a      	lsls	r2, r3, #4
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	431a      	orrs	r2, r3
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	031b      	lsls	r3, r3, #12
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d00:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005d02:	e003      	b.n	8005d0c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	60da      	str	r2, [r3, #12]
}
 8005d0c:	bf00      	nop
 8005d0e:	372c      	adds	r7, #44	; 0x2c
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b089      	sub	sp, #36	; 0x24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e175      	b.n	8006024 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005d38:	2201      	movs	r2, #1
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	f040 8164 	bne.w	800601e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d00b      	beq.n	8005d76 <HAL_GPIO_Init+0x5e>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d007      	beq.n	8005d76 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d6a:	2b11      	cmp	r3, #17
 8005d6c:	d003      	beq.n	8005d76 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b12      	cmp	r3, #18
 8005d74:	d130      	bne.n	8005dd8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	2203      	movs	r2, #3
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43db      	mvns	r3, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005dac:	2201      	movs	r2, #1
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	43db      	mvns	r3, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4013      	ands	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	091b      	lsrs	r3, r3, #4
 8005dc2:	f003 0201 	and.w	r2, r3, #1
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	2203      	movs	r2, #3
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	43db      	mvns	r3, r3
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	4013      	ands	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d003      	beq.n	8005e18 <HAL_GPIO_Init+0x100>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b12      	cmp	r3, #18
 8005e16:	d123      	bne.n	8005e60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	08da      	lsrs	r2, r3, #3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3208      	adds	r2, #8
 8005e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	220f      	movs	r2, #15
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	43db      	mvns	r3, r3
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	08da      	lsrs	r2, r3, #3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3208      	adds	r2, #8
 8005e5a:	69b9      	ldr	r1, [r7, #24]
 8005e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	43db      	mvns	r3, r3
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	4013      	ands	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f003 0203 	and.w	r2, r3, #3
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 80be 	beq.w	800601e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ea2:	4b65      	ldr	r3, [pc, #404]	; (8006038 <HAL_GPIO_Init+0x320>)
 8005ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea6:	4a64      	ldr	r2, [pc, #400]	; (8006038 <HAL_GPIO_Init+0x320>)
 8005ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005eac:	6453      	str	r3, [r2, #68]	; 0x44
 8005eae:	4b62      	ldr	r3, [pc, #392]	; (8006038 <HAL_GPIO_Init+0x320>)
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005eba:	4a60      	ldr	r2, [pc, #384]	; (800603c <HAL_GPIO_Init+0x324>)
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	089b      	lsrs	r3, r3, #2
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	220f      	movs	r2, #15
 8005ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	4013      	ands	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a57      	ldr	r2, [pc, #348]	; (8006040 <HAL_GPIO_Init+0x328>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d037      	beq.n	8005f56 <HAL_GPIO_Init+0x23e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a56      	ldr	r2, [pc, #344]	; (8006044 <HAL_GPIO_Init+0x32c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d031      	beq.n	8005f52 <HAL_GPIO_Init+0x23a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a55      	ldr	r2, [pc, #340]	; (8006048 <HAL_GPIO_Init+0x330>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d02b      	beq.n	8005f4e <HAL_GPIO_Init+0x236>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a54      	ldr	r2, [pc, #336]	; (800604c <HAL_GPIO_Init+0x334>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d025      	beq.n	8005f4a <HAL_GPIO_Init+0x232>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a53      	ldr	r2, [pc, #332]	; (8006050 <HAL_GPIO_Init+0x338>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d01f      	beq.n	8005f46 <HAL_GPIO_Init+0x22e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a52      	ldr	r2, [pc, #328]	; (8006054 <HAL_GPIO_Init+0x33c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d019      	beq.n	8005f42 <HAL_GPIO_Init+0x22a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a51      	ldr	r2, [pc, #324]	; (8006058 <HAL_GPIO_Init+0x340>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <HAL_GPIO_Init+0x226>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a50      	ldr	r2, [pc, #320]	; (800605c <HAL_GPIO_Init+0x344>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00d      	beq.n	8005f3a <HAL_GPIO_Init+0x222>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a4f      	ldr	r2, [pc, #316]	; (8006060 <HAL_GPIO_Init+0x348>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d007      	beq.n	8005f36 <HAL_GPIO_Init+0x21e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a4e      	ldr	r2, [pc, #312]	; (8006064 <HAL_GPIO_Init+0x34c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d101      	bne.n	8005f32 <HAL_GPIO_Init+0x21a>
 8005f2e:	2309      	movs	r3, #9
 8005f30:	e012      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f32:	230a      	movs	r3, #10
 8005f34:	e010      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f36:	2308      	movs	r3, #8
 8005f38:	e00e      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f3a:	2307      	movs	r3, #7
 8005f3c:	e00c      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f3e:	2306      	movs	r3, #6
 8005f40:	e00a      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f42:	2305      	movs	r3, #5
 8005f44:	e008      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f46:	2304      	movs	r3, #4
 8005f48:	e006      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e004      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e002      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f56:	2300      	movs	r3, #0
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	f002 0203 	and.w	r2, r2, #3
 8005f5e:	0092      	lsls	r2, r2, #2
 8005f60:	4093      	lsls	r3, r2
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005f68:	4934      	ldr	r1, [pc, #208]	; (800603c <HAL_GPIO_Init+0x324>)
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	089b      	lsrs	r3, r3, #2
 8005f6e:	3302      	adds	r3, #2
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f76:	4b3c      	ldr	r3, [pc, #240]	; (8006068 <HAL_GPIO_Init+0x350>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	43db      	mvns	r3, r3
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	4013      	ands	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f9a:	4a33      	ldr	r2, [pc, #204]	; (8006068 <HAL_GPIO_Init+0x350>)
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005fa0:	4b31      	ldr	r3, [pc, #196]	; (8006068 <HAL_GPIO_Init+0x350>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4013      	ands	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fc4:	4a28      	ldr	r2, [pc, #160]	; (8006068 <HAL_GPIO_Init+0x350>)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fca:	4b27      	ldr	r3, [pc, #156]	; (8006068 <HAL_GPIO_Init+0x350>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fee:	4a1e      	ldr	r2, [pc, #120]	; (8006068 <HAL_GPIO_Init+0x350>)
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ff4:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <HAL_GPIO_Init+0x350>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	4013      	ands	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006018:	4a13      	ldr	r2, [pc, #76]	; (8006068 <HAL_GPIO_Init+0x350>)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	3301      	adds	r3, #1
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	2b0f      	cmp	r3, #15
 8006028:	f67f ae86 	bls.w	8005d38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800602c:	bf00      	nop
 800602e:	3724      	adds	r7, #36	; 0x24
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	40023800 	.word	0x40023800
 800603c:	40013800 	.word	0x40013800
 8006040:	40020000 	.word	0x40020000
 8006044:	40020400 	.word	0x40020400
 8006048:	40020800 	.word	0x40020800
 800604c:	40020c00 	.word	0x40020c00
 8006050:	40021000 	.word	0x40021000
 8006054:	40021400 	.word	0x40021400
 8006058:	40021800 	.word	0x40021800
 800605c:	40021c00 	.word	0x40021c00
 8006060:	40022000 	.word	0x40022000
 8006064:	40022400 	.word	0x40022400
 8006068:	40013c00 	.word	0x40013c00

0800606c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006076:	2300      	movs	r3, #0
 8006078:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800607e:	2300      	movs	r3, #0
 8006080:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e0d9      	b.n	800623c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006088:	2201      	movs	r2, #1
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4013      	ands	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	429a      	cmp	r2, r3
 80060a0:	f040 80c9 	bne.w	8006236 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80060a4:	4a6a      	ldr	r2, [pc, #424]	; (8006250 <HAL_GPIO_DeInit+0x1e4>)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	089b      	lsrs	r3, r3, #2
 80060aa:	3302      	adds	r3, #2
 80060ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	220f      	movs	r2, #15
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	4013      	ands	r3, r2
 80060c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a62      	ldr	r2, [pc, #392]	; (8006254 <HAL_GPIO_DeInit+0x1e8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d037      	beq.n	800613e <HAL_GPIO_DeInit+0xd2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a61      	ldr	r2, [pc, #388]	; (8006258 <HAL_GPIO_DeInit+0x1ec>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d031      	beq.n	800613a <HAL_GPIO_DeInit+0xce>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a60      	ldr	r2, [pc, #384]	; (800625c <HAL_GPIO_DeInit+0x1f0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d02b      	beq.n	8006136 <HAL_GPIO_DeInit+0xca>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a5f      	ldr	r2, [pc, #380]	; (8006260 <HAL_GPIO_DeInit+0x1f4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d025      	beq.n	8006132 <HAL_GPIO_DeInit+0xc6>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a5e      	ldr	r2, [pc, #376]	; (8006264 <HAL_GPIO_DeInit+0x1f8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d01f      	beq.n	800612e <HAL_GPIO_DeInit+0xc2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a5d      	ldr	r2, [pc, #372]	; (8006268 <HAL_GPIO_DeInit+0x1fc>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d019      	beq.n	800612a <HAL_GPIO_DeInit+0xbe>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a5c      	ldr	r2, [pc, #368]	; (800626c <HAL_GPIO_DeInit+0x200>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d013      	beq.n	8006126 <HAL_GPIO_DeInit+0xba>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a5b      	ldr	r2, [pc, #364]	; (8006270 <HAL_GPIO_DeInit+0x204>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00d      	beq.n	8006122 <HAL_GPIO_DeInit+0xb6>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a5a      	ldr	r2, [pc, #360]	; (8006274 <HAL_GPIO_DeInit+0x208>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d007      	beq.n	800611e <HAL_GPIO_DeInit+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a59      	ldr	r2, [pc, #356]	; (8006278 <HAL_GPIO_DeInit+0x20c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d101      	bne.n	800611a <HAL_GPIO_DeInit+0xae>
 8006116:	2309      	movs	r3, #9
 8006118:	e012      	b.n	8006140 <HAL_GPIO_DeInit+0xd4>
 800611a:	230a      	movs	r3, #10
 800611c:	e010      	b.n	8006140 <HAL_GPIO_DeInit+0xd4>
 800611e:	2308      	movs	r3, #8
 8006120:	e00e      	b.n	8006140 <HAL_GPIO_DeInit+0xd4>
 8006122:	2307      	movs	r3, #7
 8006124:	e00c      	b.n	8006140 <HAL_GPIO_DeInit+0xd4>
 8006126:	2306      	movs	r3, #6
 8006128:	e00a      	b.n	8006140 <HAL_GPIO_DeInit+0xd4>
 800612a:	2305      	movs	r3, #5
 800612c:	e008      	b.n	8006140 <HAL_GPIO_DeInit+0xd4>
 800612e:	2304      	movs	r3, #4
 8006130:	e006      	b.n	8006140 <HAL_GPIO_DeInit+0xd4>
 8006132:	2303      	movs	r3, #3
 8006134:	e004      	b.n	8006140 <HAL_GPIO_DeInit+0xd4>
 8006136:	2302      	movs	r3, #2
 8006138:	e002      	b.n	8006140 <HAL_GPIO_DeInit+0xd4>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <HAL_GPIO_DeInit+0xd4>
 800613e:	2300      	movs	r3, #0
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	f002 0203 	and.w	r2, r2, #3
 8006146:	0092      	lsls	r2, r2, #2
 8006148:	4093      	lsls	r3, r2
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	429a      	cmp	r2, r3
 800614e:	d132      	bne.n	80061b6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006150:	4b4a      	ldr	r3, [pc, #296]	; (800627c <HAL_GPIO_DeInit+0x210>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	43db      	mvns	r3, r3
 8006158:	4948      	ldr	r1, [pc, #288]	; (800627c <HAL_GPIO_DeInit+0x210>)
 800615a:	4013      	ands	r3, r2
 800615c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800615e:	4b47      	ldr	r3, [pc, #284]	; (800627c <HAL_GPIO_DeInit+0x210>)
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	43db      	mvns	r3, r3
 8006166:	4945      	ldr	r1, [pc, #276]	; (800627c <HAL_GPIO_DeInit+0x210>)
 8006168:	4013      	ands	r3, r2
 800616a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800616c:	4b43      	ldr	r3, [pc, #268]	; (800627c <HAL_GPIO_DeInit+0x210>)
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	43db      	mvns	r3, r3
 8006174:	4941      	ldr	r1, [pc, #260]	; (800627c <HAL_GPIO_DeInit+0x210>)
 8006176:	4013      	ands	r3, r2
 8006178:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800617a:	4b40      	ldr	r3, [pc, #256]	; (800627c <HAL_GPIO_DeInit+0x210>)
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	43db      	mvns	r3, r3
 8006182:	493e      	ldr	r1, [pc, #248]	; (800627c <HAL_GPIO_DeInit+0x210>)
 8006184:	4013      	ands	r3, r2
 8006186:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	220f      	movs	r2, #15
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006198:	4a2d      	ldr	r2, [pc, #180]	; (8006250 <HAL_GPIO_DeInit+0x1e4>)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	089b      	lsrs	r3, r3, #2
 800619e:	3302      	adds	r3, #2
 80061a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	43da      	mvns	r2, r3
 80061a8:	4829      	ldr	r0, [pc, #164]	; (8006250 <HAL_GPIO_DeInit+0x1e4>)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	089b      	lsrs	r3, r3, #2
 80061ae:	400a      	ands	r2, r1
 80061b0:	3302      	adds	r3, #2
 80061b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	2103      	movs	r1, #3
 80061c0:	fa01 f303 	lsl.w	r3, r1, r3
 80061c4:	43db      	mvns	r3, r3
 80061c6:	401a      	ands	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	08da      	lsrs	r2, r3, #3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3208      	adds	r2, #8
 80061d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	220f      	movs	r2, #15
 80061e2:	fa02 f303 	lsl.w	r3, r2, r3
 80061e6:	43db      	mvns	r3, r3
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	08d2      	lsrs	r2, r2, #3
 80061ec:	4019      	ands	r1, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3208      	adds	r2, #8
 80061f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	2103      	movs	r1, #3
 8006200:	fa01 f303 	lsl.w	r3, r1, r3
 8006204:	43db      	mvns	r3, r3
 8006206:	401a      	ands	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	2101      	movs	r1, #1
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	fa01 f303 	lsl.w	r3, r1, r3
 8006218:	43db      	mvns	r3, r3
 800621a:	401a      	ands	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	2103      	movs	r1, #3
 800622a:	fa01 f303 	lsl.w	r3, r1, r3
 800622e:	43db      	mvns	r3, r3
 8006230:	401a      	ands	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	3301      	adds	r3, #1
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2b0f      	cmp	r3, #15
 8006240:	f67f af22 	bls.w	8006088 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40013800 	.word	0x40013800
 8006254:	40020000 	.word	0x40020000
 8006258:	40020400 	.word	0x40020400
 800625c:	40020800 	.word	0x40020800
 8006260:	40020c00 	.word	0x40020c00
 8006264:	40021000 	.word	0x40021000
 8006268:	40021400 	.word	0x40021400
 800626c:	40021800 	.word	0x40021800
 8006270:	40021c00 	.word	0x40021c00
 8006274:	40022000 	.word	0x40022000
 8006278:	40022400 	.word	0x40022400
 800627c:	40013c00 	.word	0x40013c00

08006280 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	887b      	ldrh	r3, [r7, #2]
 8006292:	4013      	ands	r3, r2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006298:	2301      	movs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
 800629c:	e001      	b.n	80062a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	807b      	strh	r3, [r7, #2]
 80062bc:	4613      	mov	r3, r2
 80062be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062c0:	787b      	ldrb	r3, [r7, #1]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062c6:	887a      	ldrh	r2, [r7, #2]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80062cc:	e003      	b.n	80062d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80062ce:	887b      	ldrh	r3, [r7, #2]
 80062d0:	041a      	lsls	r2, r3, #16
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	619a      	str	r2, [r3, #24]
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e07f      	b.n	80063f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fd fdca 	bl	8003ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2224      	movs	r2, #36	; 0x24
 8006314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0201 	bic.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006334:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006344:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d107      	bne.n	800635e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800635a:	609a      	str	r2, [r3, #8]
 800635c:	e006      	b.n	800636c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800636a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d104      	bne.n	800637e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800637c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6859      	ldr	r1, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	4b1d      	ldr	r3, [pc, #116]	; (8006400 <HAL_I2C_Init+0x11c>)
 800638a:	430b      	orrs	r3, r1
 800638c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800639c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691a      	ldr	r2, [r3, #16]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	ea42 0103 	orr.w	r1, r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	021a      	lsls	r2, r3, #8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	69d9      	ldr	r1, [r3, #28]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1a      	ldr	r2, [r3, #32]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	02008000 	.word	0x02008000

08006404 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e021      	b.n	800645a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2224      	movs	r2, #36	; 0x24
 800641a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fd fdb0 	bl	8003f94 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	4608      	mov	r0, r1
 800646e:	4611      	mov	r1, r2
 8006470:	461a      	mov	r2, r3
 8006472:	4603      	mov	r3, r0
 8006474:	817b      	strh	r3, [r7, #10]
 8006476:	460b      	mov	r3, r1
 8006478:	813b      	strh	r3, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b20      	cmp	r3, #32
 8006488:	f040 80f9 	bne.w	800667e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <HAL_I2C_Mem_Write+0x34>
 8006492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800649e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0ed      	b.n	8006680 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <HAL_I2C_Mem_Write+0x4e>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e0e6      	b.n	8006680 <HAL_I2C_Mem_Write+0x21c>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064ba:	f7fe fa0b 	bl	80048d4 <HAL_GetTick>
 80064be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	2319      	movs	r3, #25
 80064c6:	2201      	movs	r2, #1
 80064c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 fad1 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0d1      	b.n	8006680 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2221      	movs	r2, #33	; 0x21
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2240      	movs	r2, #64	; 0x40
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a3a      	ldr	r2, [r7, #32]
 80064f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006504:	88f8      	ldrh	r0, [r7, #6]
 8006506:	893a      	ldrh	r2, [r7, #8]
 8006508:	8979      	ldrh	r1, [r7, #10]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	4603      	mov	r3, r0
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f9e1 	bl	80068dc <I2C_RequestMemoryWrite>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e0a9      	b.n	8006680 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	2bff      	cmp	r3, #255	; 0xff
 8006534:	d90e      	bls.n	8006554 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	22ff      	movs	r2, #255	; 0xff
 800653a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006540:	b2da      	uxtb	r2, r3
 8006542:	8979      	ldrh	r1, [r7, #10]
 8006544:	2300      	movs	r3, #0
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fbb3 	bl	8006cb8 <I2C_TransferConfig>
 8006552:	e00f      	b.n	8006574 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006562:	b2da      	uxtb	r2, r3
 8006564:	8979      	ldrh	r1, [r7, #10]
 8006566:	2300      	movs	r3, #0
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 fba2 	bl	8006cb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 fabb 	bl	8006af4 <I2C_WaitOnTXISFlagUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e07b      	b.n	8006680 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	781a      	ldrb	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d034      	beq.n	800662c <HAL_I2C_Mem_Write+0x1c8>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d130      	bne.n	800662c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	2200      	movs	r2, #0
 80065d2:	2180      	movs	r1, #128	; 0x80
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 fa4d 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e04d      	b.n	8006680 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2bff      	cmp	r3, #255	; 0xff
 80065ec:	d90e      	bls.n	800660c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	22ff      	movs	r2, #255	; 0xff
 80065f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	8979      	ldrh	r1, [r7, #10]
 80065fc:	2300      	movs	r3, #0
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 fb57 	bl	8006cb8 <I2C_TransferConfig>
 800660a:	e00f      	b.n	800662c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661a:	b2da      	uxtb	r2, r3
 800661c:	8979      	ldrh	r1, [r7, #10]
 800661e:	2300      	movs	r3, #0
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fb46 	bl	8006cb8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d19e      	bne.n	8006574 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 fa9a 	bl	8006b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e01a      	b.n	8006680 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2220      	movs	r2, #32
 8006650:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6859      	ldr	r1, [r3, #4]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <HAL_I2C_Mem_Write+0x224>)
 800665e:	400b      	ands	r3, r1
 8006660:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2220      	movs	r2, #32
 8006666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e000      	b.n	8006680 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800667e:	2302      	movs	r3, #2
  }
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	fe00e800 	.word	0xfe00e800

0800668c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	4608      	mov	r0, r1
 8006696:	4611      	mov	r1, r2
 8006698:	461a      	mov	r2, r3
 800669a:	4603      	mov	r3, r0
 800669c:	817b      	strh	r3, [r7, #10]
 800669e:	460b      	mov	r3, r1
 80066a0:	813b      	strh	r3, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	f040 80fd 	bne.w	80068ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_I2C_Mem_Read+0x34>
 80066ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d105      	bne.n	80066cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e0f1      	b.n	80068b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_I2C_Mem_Read+0x4e>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e0ea      	b.n	80068b0 <HAL_I2C_Mem_Read+0x224>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066e2:	f7fe f8f7 	bl	80048d4 <HAL_GetTick>
 80066e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	2319      	movs	r3, #25
 80066ee:	2201      	movs	r2, #1
 80066f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f9bd 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0d5      	b.n	80068b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2222      	movs	r2, #34	; 0x22
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2240      	movs	r2, #64	; 0x40
 8006710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a3a      	ldr	r2, [r7, #32]
 800671e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800672c:	88f8      	ldrh	r0, [r7, #6]
 800672e:	893a      	ldrh	r2, [r7, #8]
 8006730:	8979      	ldrh	r1, [r7, #10]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	4603      	mov	r3, r0
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f921 	bl	8006984 <I2C_RequestMemoryRead>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e0ad      	b.n	80068b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006758:	b29b      	uxth	r3, r3
 800675a:	2bff      	cmp	r3, #255	; 0xff
 800675c:	d90e      	bls.n	800677c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	22ff      	movs	r2, #255	; 0xff
 8006762:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006768:	b2da      	uxtb	r2, r3
 800676a:	8979      	ldrh	r1, [r7, #10]
 800676c:	4b52      	ldr	r3, [pc, #328]	; (80068b8 <HAL_I2C_Mem_Read+0x22c>)
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fa9f 	bl	8006cb8 <I2C_TransferConfig>
 800677a:	e00f      	b.n	800679c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678a:	b2da      	uxtb	r2, r3
 800678c:	8979      	ldrh	r1, [r7, #10]
 800678e:	4b4a      	ldr	r3, [pc, #296]	; (80068b8 <HAL_I2C_Mem_Read+0x22c>)
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fa8e 	bl	8006cb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	2200      	movs	r2, #0
 80067a4:	2104      	movs	r1, #4
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f964 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e07c      	b.n	80068b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d034      	beq.n	800685c <HAL_I2C_Mem_Read+0x1d0>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d130      	bne.n	800685c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	2200      	movs	r2, #0
 8006802:	2180      	movs	r1, #128	; 0x80
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 f935 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e04d      	b.n	80068b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006818:	b29b      	uxth	r3, r3
 800681a:	2bff      	cmp	r3, #255	; 0xff
 800681c:	d90e      	bls.n	800683c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	22ff      	movs	r2, #255	; 0xff
 8006822:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006828:	b2da      	uxtb	r2, r3
 800682a:	8979      	ldrh	r1, [r7, #10]
 800682c:	2300      	movs	r3, #0
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 fa3f 	bl	8006cb8 <I2C_TransferConfig>
 800683a:	e00f      	b.n	800685c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684a:	b2da      	uxtb	r2, r3
 800684c:	8979      	ldrh	r1, [r7, #10]
 800684e:	2300      	movs	r3, #0
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fa2e 	bl	8006cb8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d19a      	bne.n	800679c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 f982 	bl	8006b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e01a      	b.n	80068b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2220      	movs	r2, #32
 8006880:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6859      	ldr	r1, [r3, #4]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <HAL_I2C_Mem_Read+0x230>)
 800688e:	400b      	ands	r3, r1
 8006890:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e000      	b.n	80068b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80068ae:	2302      	movs	r3, #2
  }
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	80002400 	.word	0x80002400
 80068bc:	fe00e800 	.word	0xfe00e800

080068c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ce:	b2db      	uxtb	r3, r3
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	4608      	mov	r0, r1
 80068e6:	4611      	mov	r1, r2
 80068e8:	461a      	mov	r2, r3
 80068ea:	4603      	mov	r3, r0
 80068ec:	817b      	strh	r3, [r7, #10]
 80068ee:	460b      	mov	r3, r1
 80068f0:	813b      	strh	r3, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	8979      	ldrh	r1, [r7, #10]
 80068fc:	4b20      	ldr	r3, [pc, #128]	; (8006980 <I2C_RequestMemoryWrite+0xa4>)
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 f9d7 	bl	8006cb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	69b9      	ldr	r1, [r7, #24]
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 f8f0 	bl	8006af4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e02c      	b.n	8006978 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800691e:	88fb      	ldrh	r3, [r7, #6]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d105      	bne.n	8006930 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006924:	893b      	ldrh	r3, [r7, #8]
 8006926:	b2da      	uxtb	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	629a      	str	r2, [r3, #40]	; 0x28
 800692e:	e015      	b.n	800695c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006930:	893b      	ldrh	r3, [r7, #8]
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	b29b      	uxth	r3, r3
 8006936:	b2da      	uxtb	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	69b9      	ldr	r1, [r7, #24]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f8d6 	bl	8006af4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e012      	b.n	8006978 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006952:	893b      	ldrh	r3, [r7, #8]
 8006954:	b2da      	uxtb	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2200      	movs	r2, #0
 8006964:	2180      	movs	r1, #128	; 0x80
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f884 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	80002000 	.word	0x80002000

08006984 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af02      	add	r7, sp, #8
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	4608      	mov	r0, r1
 800698e:	4611      	mov	r1, r2
 8006990:	461a      	mov	r2, r3
 8006992:	4603      	mov	r3, r0
 8006994:	817b      	strh	r3, [r7, #10]
 8006996:	460b      	mov	r3, r1
 8006998:	813b      	strh	r3, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	8979      	ldrh	r1, [r7, #10]
 80069a4:	4b20      	ldr	r3, [pc, #128]	; (8006a28 <I2C_RequestMemoryRead+0xa4>)
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	2300      	movs	r3, #0
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 f984 	bl	8006cb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069b0:	69fa      	ldr	r2, [r7, #28]
 80069b2:	69b9      	ldr	r1, [r7, #24]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f89d 	bl	8006af4 <I2C_WaitOnTXISFlagUntilTimeout>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e02c      	b.n	8006a1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069c4:	88fb      	ldrh	r3, [r7, #6]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d105      	bne.n	80069d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069ca:	893b      	ldrh	r3, [r7, #8]
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	629a      	str	r2, [r3, #40]	; 0x28
 80069d4:	e015      	b.n	8006a02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069d6:	893b      	ldrh	r3, [r7, #8]
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	b29b      	uxth	r3, r3
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	69b9      	ldr	r1, [r7, #24]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f883 	bl	8006af4 <I2C_WaitOnTXISFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e012      	b.n	8006a1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069f8:	893b      	ldrh	r3, [r7, #8]
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2140      	movs	r1, #64	; 0x40
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 f831 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	80002000 	.word	0x80002000

08006a2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d103      	bne.n	8006a4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2200      	movs	r2, #0
 8006a48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d007      	beq.n	8006a68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	619a      	str	r2, [r3, #24]
  }
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	4613      	mov	r3, r2
 8006a82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a84:	e022      	b.n	8006acc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8c:	d01e      	beq.n	8006acc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a8e:	f7fd ff21 	bl	80048d4 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d302      	bcc.n	8006aa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d113      	bne.n	8006acc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa8:	f043 0220 	orr.w	r2, r3, #32
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e00f      	b.n	8006aec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	bf0c      	ite	eq
 8006adc:	2301      	moveq	r3, #1
 8006ade:	2300      	movne	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d0cd      	beq.n	8006a86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b00:	e02c      	b.n	8006b5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 f870 	bl	8006bec <I2C_IsAcknowledgeFailed>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e02a      	b.n	8006b6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d01e      	beq.n	8006b5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b1e:	f7fd fed9 	bl	80048d4 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d302      	bcc.n	8006b34 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d113      	bne.n	8006b5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b38:	f043 0220 	orr.w	r2, r3, #32
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e007      	b.n	8006b6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d1cb      	bne.n	8006b02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b80:	e028      	b.n	8006bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f830 	bl	8006bec <I2C_IsAcknowledgeFailed>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e026      	b.n	8006be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b96:	f7fd fe9d 	bl	80048d4 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d302      	bcc.n	8006bac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d113      	bne.n	8006bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb0:	f043 0220 	orr.w	r2, r3, #32
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e007      	b.n	8006be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d1cf      	bne.n	8006b82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f003 0310 	and.w	r3, r3, #16
 8006c02:	2b10      	cmp	r3, #16
 8006c04:	d151      	bne.n	8006caa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c06:	e022      	b.n	8006c4e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0e:	d01e      	beq.n	8006c4e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c10:	f7fd fe60 	bl	80048d4 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d302      	bcc.n	8006c26 <I2C_IsAcknowledgeFailed+0x3a>
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d113      	bne.n	8006c4e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2a:	f043 0220 	orr.w	r2, r3, #32
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e02e      	b.n	8006cac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d1d5      	bne.n	8006c08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2210      	movs	r2, #16
 8006c62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f7ff fedd 	bl	8006a2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6859      	ldr	r1, [r3, #4]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <I2C_IsAcknowledgeFailed+0xc8>)
 8006c7e:	400b      	ands	r3, r1
 8006c80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c86:	f043 0204 	orr.w	r2, r3, #4
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	fe00e800 	.word	0xfe00e800

08006cb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	607b      	str	r3, [r7, #4]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	817b      	strh	r3, [r7, #10]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	0d5b      	lsrs	r3, r3, #21
 8006cd4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006cd8:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <I2C_TransferConfig+0x58>)
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	ea02 0103 	and.w	r1, r2, r3
 8006ce2:	897b      	ldrh	r3, [r7, #10]
 8006ce4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ce8:	7a7b      	ldrb	r3, [r7, #9]
 8006cea:	041b      	lsls	r3, r3, #16
 8006cec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006d02:	bf00      	nop
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	03ff63ff 	.word	0x03ff63ff

08006d14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	d138      	bne.n	8006d9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e032      	b.n	8006d9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2224      	movs	r2, #36	; 0x24
 8006d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0201 	bic.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6819      	ldr	r1, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0201 	orr.w	r2, r2, #1
 8006d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e000      	b.n	8006d9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d9c:	2302      	movs	r3, #2
  }
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d139      	bne.n	8006e34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e033      	b.n	8006e36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2224      	movs	r2, #36	; 0x24
 8006dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0201 	bic.w	r2, r2, #1
 8006dec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006dfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	021b      	lsls	r3, r3, #8
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0201 	orr.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	e000      	b.n	8006e36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e34:	2302      	movs	r3, #2
  }
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
	...

08006e44 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e0bf      	b.n	8006fd6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fd f8ce 	bl	800400c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006e86:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6999      	ldr	r1, [r3, #24]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e9c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6899      	ldr	r1, [r3, #8]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4b4a      	ldr	r3, [pc, #296]	; (8006fe0 <HAL_LTDC_Init+0x19c>)
 8006eb8:	400b      	ands	r3, r1
 8006eba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	041b      	lsls	r3, r3, #16
 8006ec2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6899      	ldr	r1, [r3, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68d9      	ldr	r1, [r3, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	4b3e      	ldr	r3, [pc, #248]	; (8006fe0 <HAL_LTDC_Init+0x19c>)
 8006ee6:	400b      	ands	r3, r1
 8006ee8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	041b      	lsls	r3, r3, #16
 8006ef0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68d9      	ldr	r1, [r3, #12]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1a      	ldr	r2, [r3, #32]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6919      	ldr	r1, [r3, #16]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4b33      	ldr	r3, [pc, #204]	; (8006fe0 <HAL_LTDC_Init+0x19c>)
 8006f14:	400b      	ands	r3, r1
 8006f16:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	041b      	lsls	r3, r3, #16
 8006f1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6919      	ldr	r1, [r3, #16]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6959      	ldr	r1, [r3, #20]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	4b27      	ldr	r3, [pc, #156]	; (8006fe0 <HAL_LTDC_Init+0x19c>)
 8006f42:	400b      	ands	r3, r1
 8006f44:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	041b      	lsls	r3, r3, #16
 8006f4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6959      	ldr	r1, [r3, #20]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006f74:	041b      	lsls	r3, r3, #16
 8006f76:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0206 	orr.w	r2, r2, #6
 8006fb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699a      	ldr	r2, [r3, #24]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	f000f800 	.word	0xf000f800

08006fe4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f003 0304 	and.w	r3, r3, #4
 8007002:	2b00      	cmp	r3, #0
 8007004:	d023      	beq.n	800704e <HAL_LTDC_IRQHandler+0x6a>
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f003 0304 	and.w	r3, r3, #4
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01e      	beq.n	800704e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0204 	bic.w	r2, r2, #4
 800701e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2204      	movs	r2, #4
 8007026:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800702e:	f043 0201 	orr.w	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2204      	movs	r2, #4
 800703c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f86f 	bl	800712c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d023      	beq.n	80070a0 <HAL_LTDC_IRQHandler+0xbc>
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d01e      	beq.n	80070a0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0202 	bic.w	r2, r2, #2
 8007070:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2202      	movs	r2, #2
 8007078:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007080:	f043 0202 	orr.w	r2, r3, #2
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2204      	movs	r2, #4
 800708e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f846 	bl	800712c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d01b      	beq.n	80070e2 <HAL_LTDC_IRQHandler+0xfe>
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d016      	beq.n	80070e2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2201      	movs	r2, #1
 80070ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f82f 	bl	8007140 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01b      	beq.n	8007124 <HAL_LTDC_IRQHandler+0x140>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 0308 	and.w	r3, r3, #8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d016      	beq.n	8007124 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0208 	bic.w	r2, r2, #8
 8007104:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2208      	movs	r2, #8
 800710c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f818 	bl	8007154 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007124:	bf00      	nop
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007168:	b5b0      	push	{r4, r5, r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800717a:	2b01      	cmp	r3, #1
 800717c:	d101      	bne.n	8007182 <HAL_LTDC_ConfigLayer+0x1a>
 800717e:	2302      	movs	r3, #2
 8007180:	e02c      	b.n	80071dc <HAL_LTDC_ConfigLayer+0x74>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2202      	movs	r2, #2
 800718e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2134      	movs	r1, #52	; 0x34
 8007198:	fb01 f303 	mul.w	r3, r1, r3
 800719c:	4413      	add	r3, r2
 800719e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	4614      	mov	r4, r2
 80071a6:	461d      	mov	r5, r3
 80071a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	68b9      	ldr	r1, [r7, #8]
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f81f 	bl	8007200 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2201      	movs	r2, #1
 80071c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bdb0      	pop	{r4, r5, r7, pc}

080071e4 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80071f2:	b2db      	uxtb	r3, r3
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007200:	b480      	push	{r7}
 8007202:	b089      	sub	sp, #36	; 0x24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	0c1b      	lsrs	r3, r3, #16
 8007218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800721c:	4413      	add	r3, r2
 800721e:	041b      	lsls	r3, r3, #16
 8007220:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	01db      	lsls	r3, r3, #7
 800722c:	4413      	add	r3, r2
 800722e:	3384      	adds	r3, #132	; 0x84
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	4611      	mov	r1, r2
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	01d2      	lsls	r2, r2, #7
 800723c:	440a      	add	r2, r1
 800723e:	3284      	adds	r2, #132	; 0x84
 8007240:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007244:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	0c1b      	lsrs	r3, r3, #16
 8007252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007256:	4413      	add	r3, r2
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4619      	mov	r1, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	01db      	lsls	r3, r3, #7
 8007264:	440b      	add	r3, r1
 8007266:	3384      	adds	r3, #132	; 0x84
 8007268:	4619      	mov	r1, r3
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4313      	orrs	r3, r2
 800726e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800727e:	4413      	add	r3, r2
 8007280:	041b      	lsls	r3, r3, #16
 8007282:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	01db      	lsls	r3, r3, #7
 800728e:	4413      	add	r3, r2
 8007290:	3384      	adds	r3, #132	; 0x84
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	6812      	ldr	r2, [r2, #0]
 8007298:	4611      	mov	r1, r2
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	01d2      	lsls	r2, r2, #7
 800729e:	440a      	add	r2, r1
 80072a0:	3284      	adds	r2, #132	; 0x84
 80072a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80072a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072b6:	4413      	add	r3, r2
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4619      	mov	r1, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	01db      	lsls	r3, r3, #7
 80072c4:	440b      	add	r3, r1
 80072c6:	3384      	adds	r3, #132	; 0x84
 80072c8:	4619      	mov	r1, r3
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	01db      	lsls	r3, r3, #7
 80072da:	4413      	add	r3, r2
 80072dc:	3384      	adds	r3, #132	; 0x84
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	6812      	ldr	r2, [r2, #0]
 80072e4:	4611      	mov	r1, r2
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	01d2      	lsls	r2, r2, #7
 80072ea:	440a      	add	r2, r1
 80072ec:	3284      	adds	r2, #132	; 0x84
 80072ee:	f023 0307 	bic.w	r3, r3, #7
 80072f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	01db      	lsls	r3, r3, #7
 80072fe:	4413      	add	r3, r2
 8007300:	3384      	adds	r3, #132	; 0x84
 8007302:	461a      	mov	r2, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800731a:	041b      	lsls	r3, r3, #16
 800731c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	061b      	lsls	r3, r3, #24
 8007324:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	01db      	lsls	r3, r3, #7
 8007330:	4413      	add	r3, r2
 8007332:	3384      	adds	r3, #132	; 0x84
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	01db      	lsls	r3, r3, #7
 8007340:	4413      	add	r3, r2
 8007342:	3384      	adds	r3, #132	; 0x84
 8007344:	461a      	mov	r2, r3
 8007346:	2300      	movs	r3, #0
 8007348:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007350:	461a      	mov	r2, r3
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	431a      	orrs	r2, r3
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	431a      	orrs	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4619      	mov	r1, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	01db      	lsls	r3, r3, #7
 8007364:	440b      	add	r3, r1
 8007366:	3384      	adds	r3, #132	; 0x84
 8007368:	4619      	mov	r1, r3
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	01db      	lsls	r3, r3, #7
 800737a:	4413      	add	r3, r2
 800737c:	3384      	adds	r3, #132	; 0x84
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	6812      	ldr	r2, [r2, #0]
 8007384:	4611      	mov	r1, r2
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	01d2      	lsls	r2, r2, #7
 800738a:	440a      	add	r2, r1
 800738c:	3284      	adds	r2, #132	; 0x84
 800738e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007392:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	01db      	lsls	r3, r3, #7
 800739e:	4413      	add	r3, r2
 80073a0:	3384      	adds	r3, #132	; 0x84
 80073a2:	461a      	mov	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	01db      	lsls	r3, r3, #7
 80073b4:	4413      	add	r3, r2
 80073b6:	3384      	adds	r3, #132	; 0x84
 80073b8:	69da      	ldr	r2, [r3, #28]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	01db      	lsls	r3, r3, #7
 80073c4:	440b      	add	r3, r1
 80073c6:	3384      	adds	r3, #132	; 0x84
 80073c8:	4619      	mov	r1, r3
 80073ca:	4b58      	ldr	r3, [pc, #352]	; (800752c <LTDC_SetConfig+0x32c>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	69da      	ldr	r2, [r3, #28]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	68f9      	ldr	r1, [r7, #12]
 80073da:	6809      	ldr	r1, [r1, #0]
 80073dc:	4608      	mov	r0, r1
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	01c9      	lsls	r1, r1, #7
 80073e2:	4401      	add	r1, r0
 80073e4:	3184      	adds	r1, #132	; 0x84
 80073e6:	4313      	orrs	r3, r2
 80073e8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	01db      	lsls	r3, r3, #7
 80073f4:	4413      	add	r3, r2
 80073f6:	3384      	adds	r3, #132	; 0x84
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	01db      	lsls	r3, r3, #7
 8007404:	4413      	add	r3, r2
 8007406:	3384      	adds	r3, #132	; 0x84
 8007408:	461a      	mov	r2, r3
 800740a:	2300      	movs	r3, #0
 800740c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	01db      	lsls	r3, r3, #7
 8007418:	4413      	add	r3, r2
 800741a:	3384      	adds	r3, #132	; 0x84
 800741c:	461a      	mov	r2, r3
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d102      	bne.n	8007432 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800742c:	2304      	movs	r3, #4
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	e01b      	b.n	800746a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d102      	bne.n	8007440 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800743a:	2303      	movs	r3, #3
 800743c:	61fb      	str	r3, [r7, #28]
 800743e:	e014      	b.n	800746a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2b04      	cmp	r3, #4
 8007446:	d00b      	beq.n	8007460 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800744c:	2b02      	cmp	r3, #2
 800744e:	d007      	beq.n	8007460 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007454:	2b03      	cmp	r3, #3
 8007456:	d003      	beq.n	8007460 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800745c:	2b07      	cmp	r3, #7
 800745e:	d102      	bne.n	8007466 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007460:	2302      	movs	r3, #2
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	e001      	b.n	800746a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007466:	2301      	movs	r3, #1
 8007468:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	01db      	lsls	r3, r3, #7
 8007474:	4413      	add	r3, r2
 8007476:	3384      	adds	r3, #132	; 0x84
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	6812      	ldr	r2, [r2, #0]
 800747e:	4611      	mov	r1, r2
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	01d2      	lsls	r2, r2, #7
 8007484:	440a      	add	r2, r1
 8007486:	3284      	adds	r2, #132	; 0x84
 8007488:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800748c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	fb02 f303 	mul.w	r3, r2, r3
 8007498:	041a      	lsls	r2, r3, #16
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	6859      	ldr	r1, [r3, #4]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	1acb      	subs	r3, r1, r3
 80074a4:	69f9      	ldr	r1, [r7, #28]
 80074a6:	fb01 f303 	mul.w	r3, r1, r3
 80074aa:	3303      	adds	r3, #3
 80074ac:	68f9      	ldr	r1, [r7, #12]
 80074ae:	6809      	ldr	r1, [r1, #0]
 80074b0:	4608      	mov	r0, r1
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	01c9      	lsls	r1, r1, #7
 80074b6:	4401      	add	r1, r0
 80074b8:	3184      	adds	r1, #132	; 0x84
 80074ba:	4313      	orrs	r3, r2
 80074bc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	01db      	lsls	r3, r3, #7
 80074c8:	4413      	add	r3, r2
 80074ca:	3384      	adds	r3, #132	; 0x84
 80074cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	01db      	lsls	r3, r3, #7
 80074d8:	440b      	add	r3, r1
 80074da:	3384      	adds	r3, #132	; 0x84
 80074dc:	4619      	mov	r1, r3
 80074de:	4b14      	ldr	r3, [pc, #80]	; (8007530 <LTDC_SetConfig+0x330>)
 80074e0:	4013      	ands	r3, r2
 80074e2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	01db      	lsls	r3, r3, #7
 80074ee:	4413      	add	r3, r2
 80074f0:	3384      	adds	r3, #132	; 0x84
 80074f2:	461a      	mov	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	01db      	lsls	r3, r3, #7
 8007504:	4413      	add	r3, r2
 8007506:	3384      	adds	r3, #132	; 0x84
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	6812      	ldr	r2, [r2, #0]
 800750e:	4611      	mov	r1, r2
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	01d2      	lsls	r2, r2, #7
 8007514:	440a      	add	r2, r1
 8007516:	3284      	adds	r2, #132	; 0x84
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	6013      	str	r3, [r2, #0]
}
 800751e:	bf00      	nop
 8007520:	3724      	adds	r7, #36	; 0x24
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	fffff8f8 	.word	0xfffff8f8
 8007530:	fffff800 	.word	0xfffff800

08007534 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007538:	4b05      	ldr	r3, [pc, #20]	; (8007550 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a04      	ldr	r2, [pc, #16]	; (8007550 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800753e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007542:	6013      	str	r3, [r2, #0]
}
 8007544:	bf00      	nop
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	40007000 	.word	0x40007000

08007554 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800755e:	4b23      	ldr	r3, [pc, #140]	; (80075ec <HAL_PWREx_EnableOverDrive+0x98>)
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	4a22      	ldr	r2, [pc, #136]	; (80075ec <HAL_PWREx_EnableOverDrive+0x98>)
 8007564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007568:	6413      	str	r3, [r2, #64]	; 0x40
 800756a:	4b20      	ldr	r3, [pc, #128]	; (80075ec <HAL_PWREx_EnableOverDrive+0x98>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007576:	4b1e      	ldr	r3, [pc, #120]	; (80075f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a1d      	ldr	r2, [pc, #116]	; (80075f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800757c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007580:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007582:	f7fd f9a7 	bl	80048d4 <HAL_GetTick>
 8007586:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007588:	e009      	b.n	800759e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800758a:	f7fd f9a3 	bl	80048d4 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007598:	d901      	bls.n	800759e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e022      	b.n	80075e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800759e:	4b14      	ldr	r3, [pc, #80]	; (80075f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075aa:	d1ee      	bne.n	800758a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80075ac:	4b10      	ldr	r3, [pc, #64]	; (80075f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0f      	ldr	r2, [pc, #60]	; (80075f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075b8:	f7fd f98c 	bl	80048d4 <HAL_GetTick>
 80075bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075be:	e009      	b.n	80075d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80075c0:	f7fd f988 	bl	80048d4 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075ce:	d901      	bls.n	80075d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e007      	b.n	80075e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075d4:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075e0:	d1ee      	bne.n	80075c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40023800 	.word	0x40023800
 80075f0:	40007000 	.word	0x40007000

080075f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80075fc:	2300      	movs	r3, #0
 80075fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e291      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 8087 	beq.w	8007726 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007618:	4b96      	ldr	r3, [pc, #600]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f003 030c 	and.w	r3, r3, #12
 8007620:	2b04      	cmp	r3, #4
 8007622:	d00c      	beq.n	800763e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007624:	4b93      	ldr	r3, [pc, #588]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f003 030c 	and.w	r3, r3, #12
 800762c:	2b08      	cmp	r3, #8
 800762e:	d112      	bne.n	8007656 <HAL_RCC_OscConfig+0x62>
 8007630:	4b90      	ldr	r3, [pc, #576]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800763c:	d10b      	bne.n	8007656 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800763e:	4b8d      	ldr	r3, [pc, #564]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d06c      	beq.n	8007724 <HAL_RCC_OscConfig+0x130>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d168      	bne.n	8007724 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e26b      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765e:	d106      	bne.n	800766e <HAL_RCC_OscConfig+0x7a>
 8007660:	4b84      	ldr	r3, [pc, #528]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a83      	ldr	r2, [pc, #524]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	e02e      	b.n	80076cc <HAL_RCC_OscConfig+0xd8>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10c      	bne.n	8007690 <HAL_RCC_OscConfig+0x9c>
 8007676:	4b7f      	ldr	r3, [pc, #508]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a7e      	ldr	r2, [pc, #504]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 800767c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	4b7c      	ldr	r3, [pc, #496]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a7b      	ldr	r2, [pc, #492]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	e01d      	b.n	80076cc <HAL_RCC_OscConfig+0xd8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007698:	d10c      	bne.n	80076b4 <HAL_RCC_OscConfig+0xc0>
 800769a:	4b76      	ldr	r3, [pc, #472]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a75      	ldr	r2, [pc, #468]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80076a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	4b73      	ldr	r3, [pc, #460]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a72      	ldr	r2, [pc, #456]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80076ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	e00b      	b.n	80076cc <HAL_RCC_OscConfig+0xd8>
 80076b4:	4b6f      	ldr	r3, [pc, #444]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a6e      	ldr	r2, [pc, #440]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80076ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	4b6c      	ldr	r3, [pc, #432]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a6b      	ldr	r2, [pc, #428]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80076c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d013      	beq.n	80076fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d4:	f7fd f8fe 	bl	80048d4 <HAL_GetTick>
 80076d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076dc:	f7fd f8fa 	bl	80048d4 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b64      	cmp	r3, #100	; 0x64
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e21f      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ee:	4b61      	ldr	r3, [pc, #388]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0f0      	beq.n	80076dc <HAL_RCC_OscConfig+0xe8>
 80076fa:	e014      	b.n	8007726 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076fc:	f7fd f8ea 	bl	80048d4 <HAL_GetTick>
 8007700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007702:	e008      	b.n	8007716 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007704:	f7fd f8e6 	bl	80048d4 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b64      	cmp	r3, #100	; 0x64
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e20b      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007716:	4b57      	ldr	r3, [pc, #348]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1f0      	bne.n	8007704 <HAL_RCC_OscConfig+0x110>
 8007722:	e000      	b.n	8007726 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d069      	beq.n	8007806 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007732:	4b50      	ldr	r3, [pc, #320]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 030c 	and.w	r3, r3, #12
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00b      	beq.n	8007756 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800773e:	4b4d      	ldr	r3, [pc, #308]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f003 030c 	and.w	r3, r3, #12
 8007746:	2b08      	cmp	r3, #8
 8007748:	d11c      	bne.n	8007784 <HAL_RCC_OscConfig+0x190>
 800774a:	4b4a      	ldr	r3, [pc, #296]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d116      	bne.n	8007784 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007756:	4b47      	ldr	r3, [pc, #284]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <HAL_RCC_OscConfig+0x17a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d001      	beq.n	800776e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e1df      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800776e:	4b41      	ldr	r3, [pc, #260]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	493d      	ldr	r1, [pc, #244]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 800777e:	4313      	orrs	r3, r2
 8007780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007782:	e040      	b.n	8007806 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d023      	beq.n	80077d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800778c:	4b39      	ldr	r3, [pc, #228]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a38      	ldr	r2, [pc, #224]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007792:	f043 0301 	orr.w	r3, r3, #1
 8007796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007798:	f7fd f89c 	bl	80048d4 <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800779e:	e008      	b.n	80077b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077a0:	f7fd f898 	bl	80048d4 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e1bd      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077b2:	4b30      	ldr	r3, [pc, #192]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0f0      	beq.n	80077a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077be:	4b2d      	ldr	r3, [pc, #180]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	4929      	ldr	r1, [pc, #164]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	600b      	str	r3, [r1, #0]
 80077d2:	e018      	b.n	8007806 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077d4:	4b27      	ldr	r3, [pc, #156]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a26      	ldr	r2, [pc, #152]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80077da:	f023 0301 	bic.w	r3, r3, #1
 80077de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e0:	f7fd f878 	bl	80048d4 <HAL_GetTick>
 80077e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077e6:	e008      	b.n	80077fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077e8:	f7fd f874 	bl	80048d4 <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d901      	bls.n	80077fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e199      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077fa:	4b1e      	ldr	r3, [pc, #120]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1f0      	bne.n	80077e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d038      	beq.n	8007884 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d019      	beq.n	800784e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800781a:	4b16      	ldr	r3, [pc, #88]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 800781c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800781e:	4a15      	ldr	r2, [pc, #84]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007820:	f043 0301 	orr.w	r3, r3, #1
 8007824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007826:	f7fd f855 	bl	80048d4 <HAL_GetTick>
 800782a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800782c:	e008      	b.n	8007840 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800782e:	f7fd f851 	bl	80048d4 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d901      	bls.n	8007840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e176      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007840:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0f0      	beq.n	800782e <HAL_RCC_OscConfig+0x23a>
 800784c:	e01a      	b.n	8007884 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800784e:	4b09      	ldr	r3, [pc, #36]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007852:	4a08      	ldr	r2, [pc, #32]	; (8007874 <HAL_RCC_OscConfig+0x280>)
 8007854:	f023 0301 	bic.w	r3, r3, #1
 8007858:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800785a:	f7fd f83b 	bl	80048d4 <HAL_GetTick>
 800785e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007860:	e00a      	b.n	8007878 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007862:	f7fd f837 	bl	80048d4 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d903      	bls.n	8007878 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e15c      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
 8007874:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007878:	4b91      	ldr	r3, [pc, #580]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 800787a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1ee      	bne.n	8007862 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 80a4 	beq.w	80079da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007892:	4b8b      	ldr	r3, [pc, #556]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10d      	bne.n	80078ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800789e:	4b88      	ldr	r3, [pc, #544]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	4a87      	ldr	r2, [pc, #540]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 80078a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a8:	6413      	str	r3, [r2, #64]	; 0x40
 80078aa:	4b85      	ldr	r3, [pc, #532]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078b2:	60bb      	str	r3, [r7, #8]
 80078b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078b6:	2301      	movs	r3, #1
 80078b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078ba:	4b82      	ldr	r3, [pc, #520]	; (8007ac4 <HAL_RCC_OscConfig+0x4d0>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d118      	bne.n	80078f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80078c6:	4b7f      	ldr	r3, [pc, #508]	; (8007ac4 <HAL_RCC_OscConfig+0x4d0>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a7e      	ldr	r2, [pc, #504]	; (8007ac4 <HAL_RCC_OscConfig+0x4d0>)
 80078cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078d2:	f7fc ffff 	bl	80048d4 <HAL_GetTick>
 80078d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078d8:	e008      	b.n	80078ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078da:	f7fc fffb 	bl	80048d4 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b64      	cmp	r3, #100	; 0x64
 80078e6:	d901      	bls.n	80078ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e120      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078ec:	4b75      	ldr	r3, [pc, #468]	; (8007ac4 <HAL_RCC_OscConfig+0x4d0>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0f0      	beq.n	80078da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d106      	bne.n	800790e <HAL_RCC_OscConfig+0x31a>
 8007900:	4b6f      	ldr	r3, [pc, #444]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007904:	4a6e      	ldr	r2, [pc, #440]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007906:	f043 0301 	orr.w	r3, r3, #1
 800790a:	6713      	str	r3, [r2, #112]	; 0x70
 800790c:	e02d      	b.n	800796a <HAL_RCC_OscConfig+0x376>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10c      	bne.n	8007930 <HAL_RCC_OscConfig+0x33c>
 8007916:	4b6a      	ldr	r3, [pc, #424]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791a:	4a69      	ldr	r2, [pc, #420]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 800791c:	f023 0301 	bic.w	r3, r3, #1
 8007920:	6713      	str	r3, [r2, #112]	; 0x70
 8007922:	4b67      	ldr	r3, [pc, #412]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007926:	4a66      	ldr	r2, [pc, #408]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007928:	f023 0304 	bic.w	r3, r3, #4
 800792c:	6713      	str	r3, [r2, #112]	; 0x70
 800792e:	e01c      	b.n	800796a <HAL_RCC_OscConfig+0x376>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	2b05      	cmp	r3, #5
 8007936:	d10c      	bne.n	8007952 <HAL_RCC_OscConfig+0x35e>
 8007938:	4b61      	ldr	r3, [pc, #388]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 800793a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793c:	4a60      	ldr	r2, [pc, #384]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 800793e:	f043 0304 	orr.w	r3, r3, #4
 8007942:	6713      	str	r3, [r2, #112]	; 0x70
 8007944:	4b5e      	ldr	r3, [pc, #376]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007948:	4a5d      	ldr	r2, [pc, #372]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 800794a:	f043 0301 	orr.w	r3, r3, #1
 800794e:	6713      	str	r3, [r2, #112]	; 0x70
 8007950:	e00b      	b.n	800796a <HAL_RCC_OscConfig+0x376>
 8007952:	4b5b      	ldr	r3, [pc, #364]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	4a5a      	ldr	r2, [pc, #360]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	6713      	str	r3, [r2, #112]	; 0x70
 800795e:	4b58      	ldr	r3, [pc, #352]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007962:	4a57      	ldr	r2, [pc, #348]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007964:	f023 0304 	bic.w	r3, r3, #4
 8007968:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d015      	beq.n	800799e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007972:	f7fc ffaf 	bl	80048d4 <HAL_GetTick>
 8007976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007978:	e00a      	b.n	8007990 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800797a:	f7fc ffab 	bl	80048d4 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	f241 3288 	movw	r2, #5000	; 0x1388
 8007988:	4293      	cmp	r3, r2
 800798a:	d901      	bls.n	8007990 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e0ce      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007990:	4b4b      	ldr	r3, [pc, #300]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0ee      	beq.n	800797a <HAL_RCC_OscConfig+0x386>
 800799c:	e014      	b.n	80079c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800799e:	f7fc ff99 	bl	80048d4 <HAL_GetTick>
 80079a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079a4:	e00a      	b.n	80079bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079a6:	f7fc ff95 	bl	80048d4 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d901      	bls.n	80079bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e0b8      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079bc:	4b40      	ldr	r3, [pc, #256]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 80079be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1ee      	bne.n	80079a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d105      	bne.n	80079da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ce:	4b3c      	ldr	r3, [pc, #240]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	4a3b      	ldr	r2, [pc, #236]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 80079d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 80a4 	beq.w	8007b2c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079e4:	4b36      	ldr	r3, [pc, #216]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f003 030c 	and.w	r3, r3, #12
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d06b      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d149      	bne.n	8007a8c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079f8:	4b31      	ldr	r3, [pc, #196]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a30      	ldr	r2, [pc, #192]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 80079fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a04:	f7fc ff66 	bl	80048d4 <HAL_GetTick>
 8007a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a0a:	e008      	b.n	8007a1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a0c:	f7fc ff62 	bl	80048d4 <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d901      	bls.n	8007a1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e087      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a1e:	4b28      	ldr	r3, [pc, #160]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1f0      	bne.n	8007a0c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69da      	ldr	r2, [r3, #28]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	431a      	orrs	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	019b      	lsls	r3, r3, #6
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	3b01      	subs	r3, #1
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	061b      	lsls	r3, r3, #24
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007a52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a56:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a58:	4b19      	ldr	r3, [pc, #100]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a18      	ldr	r2, [pc, #96]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a64:	f7fc ff36 	bl	80048d4 <HAL_GetTick>
 8007a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a6a:	e008      	b.n	8007a7e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a6c:	f7fc ff32 	bl	80048d4 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e057      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a7e:	4b10      	ldr	r3, [pc, #64]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0f0      	beq.n	8007a6c <HAL_RCC_OscConfig+0x478>
 8007a8a:	e04f      	b.n	8007b2c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a0b      	ldr	r2, [pc, #44]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a98:	f7fc ff1c 	bl	80048d4 <HAL_GetTick>
 8007a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa0:	f7fc ff18 	bl	80048d4 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d901      	bls.n	8007ab2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e03d      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ab2:	4b03      	ldr	r3, [pc, #12]	; (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1f0      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x4ac>
 8007abe:	e035      	b.n	8007b2c <HAL_RCC_OscConfig+0x538>
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007ac8:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <HAL_RCC_OscConfig+0x544>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d028      	beq.n	8007b28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d121      	bne.n	8007b28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d11a      	bne.n	8007b28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007af8:	4013      	ands	r3, r2
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007afe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d111      	bne.n	8007b28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0e:	085b      	lsrs	r3, r3, #1
 8007b10:	3b01      	subs	r3, #1
 8007b12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d107      	bne.n	8007b28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d001      	beq.n	8007b2c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e000      	b.n	8007b2e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40023800 	.word	0x40023800

08007b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e0d0      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b54:	4b6a      	ldr	r3, [pc, #424]	; (8007d00 <HAL_RCC_ClockConfig+0x1c4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 030f 	and.w	r3, r3, #15
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d910      	bls.n	8007b84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b62:	4b67      	ldr	r3, [pc, #412]	; (8007d00 <HAL_RCC_ClockConfig+0x1c4>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f023 020f 	bic.w	r2, r3, #15
 8007b6a:	4965      	ldr	r1, [pc, #404]	; (8007d00 <HAL_RCC_ClockConfig+0x1c4>)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b72:	4b63      	ldr	r3, [pc, #396]	; (8007d00 <HAL_RCC_ClockConfig+0x1c4>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 030f 	and.w	r3, r3, #15
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d001      	beq.n	8007b84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e0b8      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d020      	beq.n	8007bd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b9c:	4b59      	ldr	r3, [pc, #356]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	4a58      	ldr	r2, [pc, #352]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007ba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ba6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0308 	and.w	r3, r3, #8
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bb4:	4b53      	ldr	r3, [pc, #332]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	4a52      	ldr	r2, [pc, #328]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007bba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bc0:	4b50      	ldr	r3, [pc, #320]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	494d      	ldr	r1, [pc, #308]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d040      	beq.n	8007c60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d107      	bne.n	8007bf6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007be6:	4b47      	ldr	r3, [pc, #284]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d115      	bne.n	8007c1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e07f      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d107      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bfe:	4b41      	ldr	r3, [pc, #260]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d109      	bne.n	8007c1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e073      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c0e:	4b3d      	ldr	r3, [pc, #244]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e06b      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c1e:	4b39      	ldr	r3, [pc, #228]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f023 0203 	bic.w	r2, r3, #3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	4936      	ldr	r1, [pc, #216]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c30:	f7fc fe50 	bl	80048d4 <HAL_GetTick>
 8007c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c36:	e00a      	b.n	8007c4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c38:	f7fc fe4c 	bl	80048d4 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e053      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c4e:	4b2d      	ldr	r3, [pc, #180]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f003 020c 	and.w	r2, r3, #12
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d1eb      	bne.n	8007c38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c60:	4b27      	ldr	r3, [pc, #156]	; (8007d00 <HAL_RCC_ClockConfig+0x1c4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d210      	bcs.n	8007c90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c6e:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <HAL_RCC_ClockConfig+0x1c4>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f023 020f 	bic.w	r2, r3, #15
 8007c76:	4922      	ldr	r1, [pc, #136]	; (8007d00 <HAL_RCC_ClockConfig+0x1c4>)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c7e:	4b20      	ldr	r3, [pc, #128]	; (8007d00 <HAL_RCC_ClockConfig+0x1c4>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e032      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d008      	beq.n	8007cae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c9c:	4b19      	ldr	r3, [pc, #100]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	4916      	ldr	r1, [pc, #88]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0308 	and.w	r3, r3, #8
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d009      	beq.n	8007cce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007cba:	4b12      	ldr	r3, [pc, #72]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	490e      	ldr	r1, [pc, #56]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007cce:	f000 f821 	bl	8007d14 <HAL_RCC_GetSysClockFreq>
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	091b      	lsrs	r3, r3, #4
 8007cda:	f003 030f 	and.w	r3, r3, #15
 8007cde:	4a0a      	ldr	r2, [pc, #40]	; (8007d08 <HAL_RCC_ClockConfig+0x1cc>)
 8007ce0:	5cd3      	ldrb	r3, [r2, r3]
 8007ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8007ce6:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <HAL_RCC_ClockConfig+0x1d0>)
 8007ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007cea:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <HAL_RCC_ClockConfig+0x1d4>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fc fcf6 	bl	80046e0 <HAL_InitTick>

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	40023c00 	.word	0x40023c00
 8007d04:	40023800 	.word	0x40023800
 8007d08:	0800fc70 	.word	0x0800fc70
 8007d0c:	20000048 	.word	0x20000048
 8007d10:	2000004c 	.word	0x2000004c

08007d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	607b      	str	r3, [r7, #4]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
 8007d22:	2300      	movs	r3, #0
 8007d24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d2a:	4b50      	ldr	r3, [pc, #320]	; (8007e6c <HAL_RCC_GetSysClockFreq+0x158>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 030c 	and.w	r3, r3, #12
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d007      	beq.n	8007d46 <HAL_RCC_GetSysClockFreq+0x32>
 8007d36:	2b08      	cmp	r3, #8
 8007d38:	d008      	beq.n	8007d4c <HAL_RCC_GetSysClockFreq+0x38>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f040 808d 	bne.w	8007e5a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d40:	4b4b      	ldr	r3, [pc, #300]	; (8007e70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007d42:	60bb      	str	r3, [r7, #8]
      break;
 8007d44:	e08c      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d46:	4b4b      	ldr	r3, [pc, #300]	; (8007e74 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d48:	60bb      	str	r3, [r7, #8]
      break;
 8007d4a:	e089      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d4c:	4b47      	ldr	r3, [pc, #284]	; (8007e6c <HAL_RCC_GetSysClockFreq+0x158>)
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d54:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007d56:	4b45      	ldr	r3, [pc, #276]	; (8007e6c <HAL_RCC_GetSysClockFreq+0x158>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d023      	beq.n	8007daa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d62:	4b42      	ldr	r3, [pc, #264]	; (8007e6c <HAL_RCC_GetSysClockFreq+0x158>)
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	099b      	lsrs	r3, r3, #6
 8007d68:	f04f 0400 	mov.w	r4, #0
 8007d6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007d70:	f04f 0200 	mov.w	r2, #0
 8007d74:	ea03 0501 	and.w	r5, r3, r1
 8007d78:	ea04 0602 	and.w	r6, r4, r2
 8007d7c:	4a3d      	ldr	r2, [pc, #244]	; (8007e74 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d7e:	fb02 f106 	mul.w	r1, r2, r6
 8007d82:	2200      	movs	r2, #0
 8007d84:	fb02 f205 	mul.w	r2, r2, r5
 8007d88:	440a      	add	r2, r1
 8007d8a:	493a      	ldr	r1, [pc, #232]	; (8007e74 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d8c:	fba5 0101 	umull	r0, r1, r5, r1
 8007d90:	1853      	adds	r3, r2, r1
 8007d92:	4619      	mov	r1, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f04f 0400 	mov.w	r4, #0
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	4623      	mov	r3, r4
 8007d9e:	f7f8 fa37 	bl	8000210 <__aeabi_uldivmod>
 8007da2:	4603      	mov	r3, r0
 8007da4:	460c      	mov	r4, r1
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	e049      	b.n	8007e3e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007daa:	4b30      	ldr	r3, [pc, #192]	; (8007e6c <HAL_RCC_GetSysClockFreq+0x158>)
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	099b      	lsrs	r3, r3, #6
 8007db0:	f04f 0400 	mov.w	r4, #0
 8007db4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007db8:	f04f 0200 	mov.w	r2, #0
 8007dbc:	ea03 0501 	and.w	r5, r3, r1
 8007dc0:	ea04 0602 	and.w	r6, r4, r2
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	4632      	mov	r2, r6
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	f04f 0400 	mov.w	r4, #0
 8007dd0:	0154      	lsls	r4, r2, #5
 8007dd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007dd6:	014b      	lsls	r3, r1, #5
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4622      	mov	r2, r4
 8007ddc:	1b49      	subs	r1, r1, r5
 8007dde:	eb62 0206 	sbc.w	r2, r2, r6
 8007de2:	f04f 0300 	mov.w	r3, #0
 8007de6:	f04f 0400 	mov.w	r4, #0
 8007dea:	0194      	lsls	r4, r2, #6
 8007dec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007df0:	018b      	lsls	r3, r1, #6
 8007df2:	1a5b      	subs	r3, r3, r1
 8007df4:	eb64 0402 	sbc.w	r4, r4, r2
 8007df8:	f04f 0100 	mov.w	r1, #0
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	00e2      	lsls	r2, r4, #3
 8007e02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007e06:	00d9      	lsls	r1, r3, #3
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	195b      	adds	r3, r3, r5
 8007e0e:	eb44 0406 	adc.w	r4, r4, r6
 8007e12:	f04f 0100 	mov.w	r1, #0
 8007e16:	f04f 0200 	mov.w	r2, #0
 8007e1a:	02a2      	lsls	r2, r4, #10
 8007e1c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007e20:	0299      	lsls	r1, r3, #10
 8007e22:	460b      	mov	r3, r1
 8007e24:	4614      	mov	r4, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	4621      	mov	r1, r4
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f04f 0400 	mov.w	r4, #0
 8007e30:	461a      	mov	r2, r3
 8007e32:	4623      	mov	r3, r4
 8007e34:	f7f8 f9ec 	bl	8000210 <__aeabi_uldivmod>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <HAL_RCC_GetSysClockFreq+0x158>)
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	0c1b      	lsrs	r3, r3, #16
 8007e44:	f003 0303 	and.w	r3, r3, #3
 8007e48:	3301      	adds	r3, #1
 8007e4a:	005b      	lsls	r3, r3, #1
 8007e4c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e56:	60bb      	str	r3, [r7, #8]
      break;
 8007e58:	e002      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e5a:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007e5c:	60bb      	str	r3, [r7, #8]
      break;
 8007e5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e60:	68bb      	ldr	r3, [r7, #8]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	40023800 	.word	0x40023800
 8007e70:	00f42400 	.word	0x00f42400
 8007e74:	017d7840 	.word	0x017d7840

08007e78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e7c:	4b03      	ldr	r3, [pc, #12]	; (8007e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	20000048 	.word	0x20000048

08007e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e94:	f7ff fff0 	bl	8007e78 <HAL_RCC_GetHCLKFreq>
 8007e98:	4601      	mov	r1, r0
 8007e9a:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	0a9b      	lsrs	r3, r3, #10
 8007ea0:	f003 0307 	and.w	r3, r3, #7
 8007ea4:	4a03      	ldr	r2, [pc, #12]	; (8007eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ea6:	5cd3      	ldrb	r3, [r2, r3]
 8007ea8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	40023800 	.word	0x40023800
 8007eb4:	0800fc80 	.word	0x0800fc80

08007eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ebc:	f7ff ffdc 	bl	8007e78 <HAL_RCC_GetHCLKFreq>
 8007ec0:	4601      	mov	r1, r0
 8007ec2:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	0b5b      	lsrs	r3, r3, #13
 8007ec8:	f003 0307 	and.w	r3, r3, #7
 8007ecc:	4a03      	ldr	r2, [pc, #12]	; (8007edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ece:	5cd3      	ldrb	r3, [r2, r3]
 8007ed0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	40023800 	.word	0x40023800
 8007edc:	0800fc80 	.word	0x0800fc80

08007ee0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	220f      	movs	r2, #15
 8007eee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ef0:	4b12      	ldr	r3, [pc, #72]	; (8007f3c <HAL_RCC_GetClockConfig+0x5c>)
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f003 0203 	and.w	r2, r3, #3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007efc:	4b0f      	ldr	r3, [pc, #60]	; (8007f3c <HAL_RCC_GetClockConfig+0x5c>)
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007f08:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <HAL_RCC_GetClockConfig+0x5c>)
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007f14:	4b09      	ldr	r3, [pc, #36]	; (8007f3c <HAL_RCC_GetClockConfig+0x5c>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	08db      	lsrs	r3, r3, #3
 8007f1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f22:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <HAL_RCC_GetClockConfig+0x60>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 020f 	and.w	r2, r3, #15
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	601a      	str	r2, [r3, #0]
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	40023800 	.word	0x40023800
 8007f40:	40023c00 	.word	0x40023c00

08007f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d012      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f6c:	4b69      	ldr	r3, [pc, #420]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	4a68      	ldr	r2, [pc, #416]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007f76:	6093      	str	r3, [r2, #8]
 8007f78:	4b66      	ldr	r3, [pc, #408]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f80:	4964      	ldr	r1, [pc, #400]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d017      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f9e:	4b5d      	ldr	r3, [pc, #372]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fac:	4959      	ldr	r1, [pc, #356]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fbc:	d101      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d017      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007fda:	4b4e      	ldr	r3, [pc, #312]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fe0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe8:	494a      	ldr	r1, [pc, #296]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ff8:	d101      	bne.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008006:	2301      	movs	r3, #1
 8008008:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008016:	2301      	movs	r3, #1
 8008018:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 808b 	beq.w	800813e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008028:	4b3a      	ldr	r3, [pc, #232]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	4a39      	ldr	r2, [pc, #228]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800802e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008032:	6413      	str	r3, [r2, #64]	; 0x40
 8008034:	4b37      	ldr	r3, [pc, #220]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803c:	60bb      	str	r3, [r7, #8]
 800803e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008040:	4b35      	ldr	r3, [pc, #212]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a34      	ldr	r2, [pc, #208]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800804a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800804c:	f7fc fc42 	bl	80048d4 <HAL_GetTick>
 8008050:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008052:	e008      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008054:	f7fc fc3e 	bl	80048d4 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b64      	cmp	r3, #100	; 0x64
 8008060:	d901      	bls.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e355      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008066:	4b2c      	ldr	r3, [pc, #176]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0f0      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008072:	4b28      	ldr	r3, [pc, #160]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800807a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d035      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	429a      	cmp	r2, r3
 800808e:	d02e      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008090:	4b20      	ldr	r3, [pc, #128]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008098:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800809a:	4b1e      	ldr	r3, [pc, #120]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800809c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809e:	4a1d      	ldr	r2, [pc, #116]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080a6:	4b1b      	ldr	r3, [pc, #108]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080aa:	4a1a      	ldr	r2, [pc, #104]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80080b2:	4a18      	ldr	r2, [pc, #96]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80080b8:	4b16      	ldr	r3, [pc, #88]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d114      	bne.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c4:	f7fc fc06 	bl	80048d4 <HAL_GetTick>
 80080c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080ca:	e00a      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080cc:	f7fc fc02 	bl	80048d4 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080da:	4293      	cmp	r3, r2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e317      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080e2:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0ee      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080fa:	d111      	bne.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008108:	4b04      	ldr	r3, [pc, #16]	; (800811c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800810a:	400b      	ands	r3, r1
 800810c:	4901      	ldr	r1, [pc, #4]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800810e:	4313      	orrs	r3, r2
 8008110:	608b      	str	r3, [r1, #8]
 8008112:	e00b      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008114:	40023800 	.word	0x40023800
 8008118:	40007000 	.word	0x40007000
 800811c:	0ffffcff 	.word	0x0ffffcff
 8008120:	4bb0      	ldr	r3, [pc, #704]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	4aaf      	ldr	r2, [pc, #700]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008126:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800812a:	6093      	str	r3, [r2, #8]
 800812c:	4bad      	ldr	r3, [pc, #692]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800812e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008138:	49aa      	ldr	r1, [pc, #680]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800813a:	4313      	orrs	r3, r2
 800813c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0310 	and.w	r3, r3, #16
 8008146:	2b00      	cmp	r3, #0
 8008148:	d010      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800814a:	4ba6      	ldr	r3, [pc, #664]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800814c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008150:	4aa4      	ldr	r2, [pc, #656]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008156:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800815a:	4ba2      	ldr	r3, [pc, #648]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800815c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	499f      	ldr	r1, [pc, #636]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008166:	4313      	orrs	r3, r2
 8008168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008178:	4b9a      	ldr	r3, [pc, #616]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008186:	4997      	ldr	r1, [pc, #604]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008188:	4313      	orrs	r3, r2
 800818a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800819a:	4b92      	ldr	r3, [pc, #584]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800819c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081a8:	498e      	ldr	r1, [pc, #568]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081bc:	4b89      	ldr	r3, [pc, #548]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ca:	4986      	ldr	r1, [pc, #536]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081de:	4b81      	ldr	r3, [pc, #516]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ec:	497d      	ldr	r1, [pc, #500]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00a      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008200:	4b78      	ldr	r3, [pc, #480]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008206:	f023 0203 	bic.w	r2, r3, #3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820e:	4975      	ldr	r1, [pc, #468]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008210:	4313      	orrs	r3, r2
 8008212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00a      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008222:	4b70      	ldr	r3, [pc, #448]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008228:	f023 020c 	bic.w	r2, r3, #12
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008230:	496c      	ldr	r1, [pc, #432]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008232:	4313      	orrs	r3, r2
 8008234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00a      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008244:	4b67      	ldr	r3, [pc, #412]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800824a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008252:	4964      	ldr	r1, [pc, #400]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008254:	4313      	orrs	r3, r2
 8008256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00a      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008266:	4b5f      	ldr	r3, [pc, #380]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800826c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008274:	495b      	ldr	r1, [pc, #364]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008276:	4313      	orrs	r3, r2
 8008278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00a      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008288:	4b56      	ldr	r3, [pc, #344]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800828a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800828e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008296:	4953      	ldr	r1, [pc, #332]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008298:	4313      	orrs	r3, r2
 800829a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00a      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80082aa:	4b4e      	ldr	r3, [pc, #312]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b8:	494a      	ldr	r1, [pc, #296]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00a      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80082cc:	4b45      	ldr	r3, [pc, #276]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082da:	4942      	ldr	r1, [pc, #264]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80082ee:	4b3d      	ldr	r3, [pc, #244]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082fc:	4939      	ldr	r1, [pc, #228]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008310:	4b34      	ldr	r3, [pc, #208]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008316:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800831e:	4931      	ldr	r1, [pc, #196]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008320:	4313      	orrs	r3, r2
 8008322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d011      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008332:	4b2c      	ldr	r3, [pc, #176]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008338:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008340:	4928      	ldr	r1, [pc, #160]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008342:	4313      	orrs	r3, r2
 8008344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800834c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008350:	d101      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008352:	2301      	movs	r3, #1
 8008354:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008362:	2301      	movs	r3, #1
 8008364:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008372:	4b1c      	ldr	r3, [pc, #112]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008378:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008380:	4918      	ldr	r1, [pc, #96]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008382:	4313      	orrs	r3, r2
 8008384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00b      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008394:	4b13      	ldr	r3, [pc, #76]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800839a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083a4:	490f      	ldr	r1, [pc, #60]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d005      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083ba:	f040 80d8 	bne.w	800856e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80083be:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ca:	f7fc fa83 	bl	80048d4 <HAL_GetTick>
 80083ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083d0:	e00a      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80083d2:	f7fc fa7f 	bl	80048d4 <HAL_GetTick>
 80083d6:	4602      	mov	r2, r0
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	2b64      	cmp	r3, #100	; 0x64
 80083de:	d903      	bls.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e196      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80083e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083e8:	4b6c      	ldr	r3, [pc, #432]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1ee      	bne.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d021      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008404:	2b00      	cmp	r3, #0
 8008406:	d11d      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008408:	4b64      	ldr	r3, [pc, #400]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800840a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800840e:	0c1b      	lsrs	r3, r3, #16
 8008410:	f003 0303 	and.w	r3, r3, #3
 8008414:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008416:	4b61      	ldr	r3, [pc, #388]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800841c:	0e1b      	lsrs	r3, r3, #24
 800841e:	f003 030f 	and.w	r3, r3, #15
 8008422:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	019a      	lsls	r2, r3, #6
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	041b      	lsls	r3, r3, #16
 800842e:	431a      	orrs	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	061b      	lsls	r3, r3, #24
 8008434:	431a      	orrs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	071b      	lsls	r3, r3, #28
 800843c:	4957      	ldr	r1, [pc, #348]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d004      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008458:	d00a      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008462:	2b00      	cmp	r3, #0
 8008464:	d02e      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800846e:	d129      	bne.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008470:	4b4a      	ldr	r3, [pc, #296]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008476:	0c1b      	lsrs	r3, r3, #16
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800847e:	4b47      	ldr	r3, [pc, #284]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008484:	0f1b      	lsrs	r3, r3, #28
 8008486:	f003 0307 	and.w	r3, r3, #7
 800848a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	019a      	lsls	r2, r3, #6
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	041b      	lsls	r3, r3, #16
 8008496:	431a      	orrs	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	061b      	lsls	r3, r3, #24
 800849e:	431a      	orrs	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	071b      	lsls	r3, r3, #28
 80084a4:	493d      	ldr	r1, [pc, #244]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80084ac:	4b3b      	ldr	r3, [pc, #236]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b2:	f023 021f 	bic.w	r2, r3, #31
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	3b01      	subs	r3, #1
 80084bc:	4937      	ldr	r1, [pc, #220]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d01d      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80084d0:	4b32      	ldr	r3, [pc, #200]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d6:	0e1b      	lsrs	r3, r3, #24
 80084d8:	f003 030f 	and.w	r3, r3, #15
 80084dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80084de:	4b2f      	ldr	r3, [pc, #188]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e4:	0f1b      	lsrs	r3, r3, #28
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	019a      	lsls	r2, r3, #6
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	041b      	lsls	r3, r3, #16
 80084f8:	431a      	orrs	r2, r3
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	061b      	lsls	r3, r3, #24
 80084fe:	431a      	orrs	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	071b      	lsls	r3, r3, #28
 8008504:	4925      	ldr	r1, [pc, #148]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008506:	4313      	orrs	r3, r2
 8008508:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d011      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	019a      	lsls	r2, r3, #6
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	041b      	lsls	r3, r3, #16
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	061b      	lsls	r3, r3, #24
 800852c:	431a      	orrs	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	071b      	lsls	r3, r3, #28
 8008534:	4919      	ldr	r1, [pc, #100]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008536:	4313      	orrs	r3, r2
 8008538:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800853c:	4b17      	ldr	r3, [pc, #92]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a16      	ldr	r2, [pc, #88]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008542:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008548:	f7fc f9c4 	bl	80048d4 <HAL_GetTick>
 800854c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800854e:	e008      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008550:	f7fc f9c0 	bl	80048d4 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b64      	cmp	r3, #100	; 0x64
 800855c:	d901      	bls.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e0d7      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008562:	4b0e      	ldr	r3, [pc, #56]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0f0      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b01      	cmp	r3, #1
 8008572:	f040 80cd 	bne.w	8008710 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008576:	4b09      	ldr	r3, [pc, #36]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a08      	ldr	r2, [pc, #32]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800857c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008582:	f7fc f9a7 	bl	80048d4 <HAL_GetTick>
 8008586:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008588:	e00a      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800858a:	f7fc f9a3 	bl	80048d4 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	2b64      	cmp	r3, #100	; 0x64
 8008596:	d903      	bls.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e0ba      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800859c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80085a0:	4b5e      	ldr	r3, [pc, #376]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ac:	d0ed      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d009      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d02e      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d12a      	bne.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80085d6:	4b51      	ldr	r3, [pc, #324]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085dc:	0c1b      	lsrs	r3, r3, #16
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085e4:	4b4d      	ldr	r3, [pc, #308]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ea:	0f1b      	lsrs	r3, r3, #28
 80085ec:	f003 0307 	and.w	r3, r3, #7
 80085f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	019a      	lsls	r2, r3, #6
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	041b      	lsls	r3, r3, #16
 80085fc:	431a      	orrs	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	061b      	lsls	r3, r3, #24
 8008604:	431a      	orrs	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	071b      	lsls	r3, r3, #28
 800860a:	4944      	ldr	r1, [pc, #272]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800860c:	4313      	orrs	r3, r2
 800860e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008612:	4b42      	ldr	r3, [pc, #264]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008618:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008620:	3b01      	subs	r3, #1
 8008622:	021b      	lsls	r3, r3, #8
 8008624:	493d      	ldr	r1, [pc, #244]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d022      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800863c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008640:	d11d      	bne.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008642:	4b36      	ldr	r3, [pc, #216]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008648:	0e1b      	lsrs	r3, r3, #24
 800864a:	f003 030f 	and.w	r3, r3, #15
 800864e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008650:	4b32      	ldr	r3, [pc, #200]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008656:	0f1b      	lsrs	r3, r3, #28
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	019a      	lsls	r2, r3, #6
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	041b      	lsls	r3, r3, #16
 800866a:	431a      	orrs	r2, r3
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	061b      	lsls	r3, r3, #24
 8008670:	431a      	orrs	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	071b      	lsls	r3, r3, #28
 8008676:	4929      	ldr	r1, [pc, #164]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008678:	4313      	orrs	r3, r2
 800867a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	2b00      	cmp	r3, #0
 8008688:	d028      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800868a:	4b24      	ldr	r3, [pc, #144]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800868c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008690:	0e1b      	lsrs	r3, r3, #24
 8008692:	f003 030f 	and.w	r3, r3, #15
 8008696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008698:	4b20      	ldr	r3, [pc, #128]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800869a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800869e:	0c1b      	lsrs	r3, r3, #16
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	019a      	lsls	r2, r3, #6
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	041b      	lsls	r3, r3, #16
 80086b0:	431a      	orrs	r2, r3
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	061b      	lsls	r3, r3, #24
 80086b6:	431a      	orrs	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	071b      	lsls	r3, r3, #28
 80086be:	4917      	ldr	r1, [pc, #92]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80086c6:	4b15      	ldr	r3, [pc, #84]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	4911      	ldr	r1, [pc, #68]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80086dc:	4b0f      	ldr	r3, [pc, #60]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a0e      	ldr	r2, [pc, #56]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086e8:	f7fc f8f4 	bl	80048d4 <HAL_GetTick>
 80086ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80086ee:	e008      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80086f0:	f7fc f8f0 	bl	80048d4 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b64      	cmp	r3, #100	; 0x64
 80086fc:	d901      	bls.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e007      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008702:	4b06      	ldr	r3, [pc, #24]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800870a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800870e:	d1ef      	bne.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3720      	adds	r7, #32
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	40023800 	.word	0x40023800

08008720 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e06b      	b.n	800880a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	7f5b      	ldrb	r3, [r3, #29]
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d105      	bne.n	8008748 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7fb fd2a 	bl	800419c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	22ca      	movs	r2, #202	; 0xca
 8008754:	625a      	str	r2, [r3, #36]	; 0x24
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2253      	movs	r2, #83	; 0x53
 800875c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fb00 	bl	8008d64 <RTC_EnterInitMode>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d008      	beq.n	800877c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	22ff      	movs	r2, #255	; 0xff
 8008770:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2204      	movs	r2, #4
 8008776:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e046      	b.n	800880a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6899      	ldr	r1, [r3, #8]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	4b23      	ldr	r3, [pc, #140]	; (8008814 <HAL_RTC_Init+0xf4>)
 8008788:	400b      	ands	r3, r1
 800878a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6899      	ldr	r1, [r3, #8]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	431a      	orrs	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	68d2      	ldr	r2, [r2, #12]
 80087b2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6919      	ldr	r1, [r3, #16]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	041a      	lsls	r2, r3, #16
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087d6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 0208 	bic.w	r2, r2, #8
 80087e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	22ff      	movs	r2, #255	; 0xff
 8008800:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008808:	2300      	movs	r3, #0
  }
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	ff8fffbf 	.word	0xff8fffbf

08008818 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008818:	b590      	push	{r4, r7, lr}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	7f1b      	ldrb	r3, [r3, #28]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d101      	bne.n	8008834 <HAL_RTC_SetTime+0x1c>
 8008830:	2302      	movs	r3, #2
 8008832:	e0a8      	b.n	8008986 <HAL_RTC_SetTime+0x16e>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2202      	movs	r2, #2
 800883e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d126      	bne.n	8008894 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d102      	bne.n	800885a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2200      	movs	r2, #0
 8008858:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	4618      	mov	r0, r3
 8008860:	f000 faac 	bl	8008dbc <RTC_ByteToBcd2>
 8008864:	4603      	mov	r3, r0
 8008866:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	785b      	ldrb	r3, [r3, #1]
 800886c:	4618      	mov	r0, r3
 800886e:	f000 faa5 	bl	8008dbc <RTC_ByteToBcd2>
 8008872:	4603      	mov	r3, r0
 8008874:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008876:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	789b      	ldrb	r3, [r3, #2]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 fa9d 	bl	8008dbc <RTC_ByteToBcd2>
 8008882:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008884:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	7b1b      	ldrb	r3, [r3, #12]
 800888c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800888e:	4313      	orrs	r3, r2
 8008890:	617b      	str	r3, [r7, #20]
 8008892:	e018      	b.n	80088c6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d102      	bne.n	80088a8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2200      	movs	r2, #0
 80088a6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	785b      	ldrb	r3, [r3, #1]
 80088b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80088b4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80088ba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	7b1b      	ldrb	r3, [r3, #12]
 80088c0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80088c2:	4313      	orrs	r3, r2
 80088c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	22ca      	movs	r2, #202	; 0xca
 80088cc:	625a      	str	r2, [r3, #36]	; 0x24
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2253      	movs	r2, #83	; 0x53
 80088d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 fa44 	bl	8008d64 <RTC_EnterInitMode>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00b      	beq.n	80088fa <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	22ff      	movs	r2, #255	; 0xff
 80088e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2204      	movs	r2, #4
 80088ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e045      	b.n	8008986 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	6979      	ldr	r1, [r7, #20]
 8008900:	4b23      	ldr	r3, [pc, #140]	; (8008990 <HAL_RTC_SetTime+0x178>)
 8008902:	400b      	ands	r3, r1
 8008904:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008914:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6899      	ldr	r1, [r3, #8]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	431a      	orrs	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800893c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f003 0320 	and.w	r3, r3, #32
 8008948:	2b00      	cmp	r3, #0
 800894a:	d111      	bne.n	8008970 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f9e1 	bl	8008d14 <HAL_RTC_WaitForSynchro>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	22ff      	movs	r2, #255	; 0xff
 800895e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2204      	movs	r2, #4
 8008964:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e00a      	b.n	8008986 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	22ff      	movs	r2, #255	; 0xff
 8008976:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2201      	movs	r2, #1
 800897c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008984:	2300      	movs	r3, #0
  }
}
 8008986:	4618      	mov	r0, r3
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	bd90      	pop	{r4, r7, pc}
 800898e:	bf00      	nop
 8008990:	007f7f7f 	.word	0x007f7f7f

08008994 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008994:	b590      	push	{r4, r7, lr}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	7f1b      	ldrb	r3, [r3, #28]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d101      	bne.n	80089b0 <HAL_RTC_SetDate+0x1c>
 80089ac:	2302      	movs	r3, #2
 80089ae:	e092      	b.n	8008ad6 <HAL_RTC_SetDate+0x142>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2201      	movs	r2, #1
 80089b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2202      	movs	r2, #2
 80089ba:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10e      	bne.n	80089e0 <HAL_RTC_SetDate+0x4c>
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	785b      	ldrb	r3, [r3, #1]
 80089c6:	f003 0310 	and.w	r3, r3, #16
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d008      	beq.n	80089e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	785b      	ldrb	r3, [r3, #1]
 80089d2:	f023 0310 	bic.w	r3, r3, #16
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	330a      	adds	r3, #10
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d11c      	bne.n	8008a20 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	78db      	ldrb	r3, [r3, #3]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 f9e6 	bl	8008dbc <RTC_ByteToBcd2>
 80089f0:	4603      	mov	r3, r0
 80089f2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 f9df 	bl	8008dbc <RTC_ByteToBcd2>
 80089fe:	4603      	mov	r3, r0
 8008a00:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008a02:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	789b      	ldrb	r3, [r3, #2]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f9d7 	bl	8008dbc <RTC_ByteToBcd2>
 8008a0e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008a10:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e00e      	b.n	8008a3e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	78db      	ldrb	r3, [r3, #3]
 8008a24:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	785b      	ldrb	r3, [r3, #1]
 8008a2a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008a2c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008a32:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	22ca      	movs	r2, #202	; 0xca
 8008a44:	625a      	str	r2, [r3, #36]	; 0x24
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2253      	movs	r2, #83	; 0x53
 8008a4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 f988 	bl	8008d64 <RTC_EnterInitMode>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00b      	beq.n	8008a72 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	22ff      	movs	r2, #255	; 0xff
 8008a60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2204      	movs	r2, #4
 8008a66:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e031      	b.n	8008ad6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	6979      	ldr	r1, [r7, #20]
 8008a78:	4b19      	ldr	r3, [pc, #100]	; (8008ae0 <HAL_RTC_SetDate+0x14c>)
 8008a7a:	400b      	ands	r3, r1
 8008a7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a8c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d111      	bne.n	8008ac0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 f939 	bl	8008d14 <HAL_RTC_WaitForSynchro>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00b      	beq.n	8008ac0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	22ff      	movs	r2, #255	; 0xff
 8008aae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2204      	movs	r2, #4
 8008ab4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e00a      	b.n	8008ad6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	22ff      	movs	r2, #255	; 0xff
 8008ac6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2201      	movs	r2, #1
 8008acc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
  }
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd90      	pop	{r4, r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	00ffff3f 	.word	0x00ffff3f

08008ae4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008ae4:	b590      	push	{r4, r7, lr}
 8008ae6:	b089      	sub	sp, #36	; 0x24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008af4:	2300      	movs	r3, #0
 8008af6:	61fb      	str	r3, [r7, #28]
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	7f1b      	ldrb	r3, [r3, #28]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_RTC_SetAlarm+0x24>
 8008b04:	2302      	movs	r3, #2
 8008b06:	e101      	b.n	8008d0c <HAL_RTC_SetAlarm+0x228>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2202      	movs	r2, #2
 8008b12:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d137      	bne.n	8008b8a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d102      	bne.n	8008b2e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f942 	bl	8008dbc <RTC_ByteToBcd2>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	785b      	ldrb	r3, [r3, #1]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 f93b 	bl	8008dbc <RTC_ByteToBcd2>
 8008b46:	4603      	mov	r3, r0
 8008b48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008b4a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	789b      	ldrb	r3, [r3, #2]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 f933 	bl	8008dbc <RTC_ByteToBcd2>
 8008b56:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008b58:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	7b1b      	ldrb	r3, [r3, #12]
 8008b60:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008b62:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 f925 	bl	8008dbc <RTC_ByteToBcd2>
 8008b72:	4603      	mov	r3, r0
 8008b74:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008b76:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008b7e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008b84:	4313      	orrs	r3, r2
 8008b86:	61fb      	str	r3, [r7, #28]
 8008b88:	e023      	b.n	8008bd2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	785b      	ldrb	r3, [r3, #1]
 8008ba8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008baa:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008bb0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	7b1b      	ldrb	r3, [r3, #12]
 8008bb6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008bb8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008bc0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008bc2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008bc8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	22ca      	movs	r2, #202	; 0xca
 8008be4:	625a      	str	r2, [r3, #36]	; 0x24
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2253      	movs	r2, #83	; 0x53
 8008bec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf6:	d13f      	bne.n	8008c78 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689a      	ldr	r2, [r3, #8]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c06:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c16:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c18:	f7fb fe5c 	bl	80048d4 <HAL_GetTick>
 8008c1c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008c1e:	e013      	b.n	8008c48 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c20:	f7fb fe58 	bl	80048d4 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c2e:	d90b      	bls.n	8008c48 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	22ff      	movs	r2, #255	; 0xff
 8008c36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e061      	b.n	8008d0c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d0e4      	beq.n	8008c20 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	689a      	ldr	r2, [r3, #8]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c74:	609a      	str	r2, [r3, #8]
 8008c76:	e03e      	b.n	8008cf6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c86:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c96:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c98:	f7fb fe1c 	bl	80048d4 <HAL_GetTick>
 8008c9c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008c9e:	e013      	b.n	8008cc8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ca0:	f7fb fe18 	bl	80048d4 <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cae:	d90b      	bls.n	8008cc8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	22ff      	movs	r2, #255	; 0xff
 8008cb6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2203      	movs	r2, #3
 8008cbc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e021      	b.n	8008d0c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0e4      	beq.n	8008ca0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69fa      	ldr	r2, [r7, #28]
 8008cdc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cf4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	22ff      	movs	r2, #255	; 0xff
 8008cfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2201      	movs	r2, #1
 8008d02:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3724      	adds	r7, #36	; 0x24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd90      	pop	{r4, r7, pc}

08008d14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d2e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d30:	f7fb fdd0 	bl	80048d4 <HAL_GetTick>
 8008d34:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d36:	e009      	b.n	8008d4c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d38:	f7fb fdcc 	bl	80048d4 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d46:	d901      	bls.n	8008d4c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e007      	b.n	8008d5c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	f003 0320 	and.w	r3, r3, #32
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0ee      	beq.n	8008d38 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d119      	bne.n	8008db2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f04f 32ff 	mov.w	r2, #4294967295
 8008d86:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d88:	f7fb fda4 	bl	80048d4 <HAL_GetTick>
 8008d8c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008d8e:	e009      	b.n	8008da4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d90:	f7fb fda0 	bl	80048d4 <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d9e:	d901      	bls.n	8008da4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e007      	b.n	8008db4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0ee      	beq.n	8008d90 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008dca:	e005      	b.n	8008dd8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	3b0a      	subs	r3, #10
 8008dd6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008dd8:	79fb      	ldrb	r3, [r7, #7]
 8008dda:	2b09      	cmp	r3, #9
 8008ddc:	d8f6      	bhi.n	8008dcc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	b2db      	uxtb	r3, r3
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	7f1b      	ldrb	r3, [r3, #28]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d101      	bne.n	8008e14 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e03e      	b.n	8008e92 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2201      	movs	r2, #1
 8008e18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689a      	ldr	r2, [r3, #8]
 8008e26:	4b1e      	ldr	r3, [pc, #120]	; (8008ea0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008e28:	4013      	ands	r3, r2
 8008e2a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	22ca      	movs	r2, #202	; 0xca
 8008e3a:	625a      	str	r2, [r3, #36]	; 0x24
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2253      	movs	r2, #83	; 0x53
 8008e42:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f022 0206 	bic.w	r2, r2, #6
 8008e52:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689a      	ldr	r2, [r3, #8]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e7a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	22ff      	movs	r2, #255	; 0xff
 8008e82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2201      	movs	r2, #1
 8008e88:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	371c      	adds	r7, #28
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	fffff7f7 	.word	0xfffff7f7

08008ea4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e025      	b.n	8008f04 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d106      	bne.n	8008ed2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7fb fbfd 	bl	80046cc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f002 fa11 	bl	800b30c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	f002 fa7b 	bl	800b3f0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d101      	bne.n	8008f28 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008f24:	2302      	movs	r3, #2
 8008f26:	e018      	b.n	8008f5a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f002 fad9 	bl	800b4f0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d104      	bne.n	8008f50 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2205      	movs	r2, #5
 8008f4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008f4e:	e003      	b.n	8008f58 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d101      	bne.n	8008f7c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e00e      	b.n	8008f9a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f002 fad1 	bl	800b532 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e084      	b.n	80090be <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d106      	bne.n	8008fd4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7fb f8fe 	bl	80041d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ff4:	d902      	bls.n	8008ffc <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	e002      	b.n	8009002 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009000:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800900a:	d007      	beq.n	800901c <HAL_SPI_Init+0x7a>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009014:	d002      	beq.n	800901c <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10b      	bne.n	800903c <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800902c:	d903      	bls.n	8009036 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2202      	movs	r2, #2
 8009032:	631a      	str	r2, [r3, #48]	; 0x30
 8009034:	e002      	b.n	800903c <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	431a      	orrs	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	431a      	orrs	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	431a      	orrs	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800905a:	431a      	orrs	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	431a      	orrs	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	ea42 0103 	orr.w	r1, r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	430a      	orrs	r2, r1
 8009074:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	0c1b      	lsrs	r3, r3, #16
 800907c:	f003 0204 	and.w	r2, r3, #4
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	431a      	orrs	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908a:	431a      	orrs	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	ea42 0103 	orr.w	r1, r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	430a      	orrs	r2, r1
 800909c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69da      	ldr	r2, [r3, #28]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e01d      	b.n	8009114 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d106      	bne.n	80090f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7fb f8e1 	bl	80042b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2202      	movs	r2, #2
 80090f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	3304      	adds	r3, #4
 8009102:	4619      	mov	r1, r3
 8009104:	4610      	mov	r0, r2
 8009106:	f000 fbc3 	bl	8009890 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f042 0201 	orr.w	r2, r2, #1
 8009132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689a      	ldr	r2, [r3, #8]
 800913a:	4b0c      	ldr	r3, [pc, #48]	; (800916c <HAL_TIM_Base_Start_IT+0x50>)
 800913c:	4013      	ands	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b06      	cmp	r3, #6
 8009144:	d00b      	beq.n	800915e <HAL_TIM_Base_Start_IT+0x42>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800914c:	d007      	beq.n	800915e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f042 0201 	orr.w	r2, r2, #1
 800915c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	00010007 	.word	0x00010007

08009170 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e01d      	b.n	80091be <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d106      	bne.n	800919c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f815 	bl	80091c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3304      	adds	r3, #4
 80091ac:	4619      	mov	r1, r3
 80091ae:	4610      	mov	r0, r2
 80091b0:	f000 fb6e 	bl	8009890 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80091ce:	bf00      	nop
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	f003 0302 	and.w	r3, r3, #2
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d122      	bne.n	8009236 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d11b      	bne.n	8009236 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f06f 0202 	mvn.w	r2, #2
 8009206:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	f003 0303 	and.w	r3, r3, #3
 8009218:	2b00      	cmp	r3, #0
 800921a:	d003      	beq.n	8009224 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fb19 	bl	8009854 <HAL_TIM_IC_CaptureCallback>
 8009222:	e005      	b.n	8009230 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fb0b 	bl	8009840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fb1c 	bl	8009868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	f003 0304 	and.w	r3, r3, #4
 8009240:	2b04      	cmp	r3, #4
 8009242:	d122      	bne.n	800928a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f003 0304 	and.w	r3, r3, #4
 800924e:	2b04      	cmp	r3, #4
 8009250:	d11b      	bne.n	800928a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f06f 0204 	mvn.w	r2, #4
 800925a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800926c:	2b00      	cmp	r3, #0
 800926e:	d003      	beq.n	8009278 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 faef 	bl	8009854 <HAL_TIM_IC_CaptureCallback>
 8009276:	e005      	b.n	8009284 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fae1 	bl	8009840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 faf2 	bl	8009868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	f003 0308 	and.w	r3, r3, #8
 8009294:	2b08      	cmp	r3, #8
 8009296:	d122      	bne.n	80092de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	f003 0308 	and.w	r3, r3, #8
 80092a2:	2b08      	cmp	r3, #8
 80092a4:	d11b      	bne.n	80092de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f06f 0208 	mvn.w	r2, #8
 80092ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2204      	movs	r2, #4
 80092b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fac5 	bl	8009854 <HAL_TIM_IC_CaptureCallback>
 80092ca:	e005      	b.n	80092d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fab7 	bl	8009840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fac8 	bl	8009868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	f003 0310 	and.w	r3, r3, #16
 80092e8:	2b10      	cmp	r3, #16
 80092ea:	d122      	bne.n	8009332 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f003 0310 	and.w	r3, r3, #16
 80092f6:	2b10      	cmp	r3, #16
 80092f8:	d11b      	bne.n	8009332 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f06f 0210 	mvn.w	r2, #16
 8009302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2208      	movs	r2, #8
 8009308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	69db      	ldr	r3, [r3, #28]
 8009310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009314:	2b00      	cmp	r3, #0
 8009316:	d003      	beq.n	8009320 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fa9b 	bl	8009854 <HAL_TIM_IC_CaptureCallback>
 800931e:	e005      	b.n	800932c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fa8d 	bl	8009840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa9e 	bl	8009868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	2b01      	cmp	r3, #1
 800933e:	d10e      	bne.n	800935e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b01      	cmp	r3, #1
 800934c:	d107      	bne.n	800935e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f06f 0201 	mvn.w	r2, #1
 8009356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7f8 ff0b 	bl	8002174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009368:	2b80      	cmp	r3, #128	; 0x80
 800936a:	d10e      	bne.n	800938a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009376:	2b80      	cmp	r3, #128	; 0x80
 8009378:	d107      	bne.n	800938a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 ffb9 	bl	800a2fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009398:	d10e      	bne.n	80093b8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a4:	2b80      	cmp	r3, #128	; 0x80
 80093a6:	d107      	bne.n	80093b8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80093b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 ffac 	bl	800a310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c2:	2b40      	cmp	r3, #64	; 0x40
 80093c4:	d10e      	bne.n	80093e4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d0:	2b40      	cmp	r3, #64	; 0x40
 80093d2:	d107      	bne.n	80093e4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fa4c 	bl	800987c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	f003 0320 	and.w	r3, r3, #32
 80093ee:	2b20      	cmp	r3, #32
 80093f0:	d10e      	bne.n	8009410 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f003 0320 	and.w	r3, r3, #32
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	d107      	bne.n	8009410 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f06f 0220 	mvn.w	r2, #32
 8009408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 ff6c 	bl	800a2e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800942a:	2b01      	cmp	r3, #1
 800942c:	d101      	bne.n	8009432 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800942e:	2302      	movs	r3, #2
 8009430:	e105      	b.n	800963e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2201      	movs	r2, #1
 8009436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2202      	movs	r2, #2
 800943e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b14      	cmp	r3, #20
 8009446:	f200 80f0 	bhi.w	800962a <HAL_TIM_PWM_ConfigChannel+0x212>
 800944a:	a201      	add	r2, pc, #4	; (adr r2, 8009450 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800944c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009450:	080094a5 	.word	0x080094a5
 8009454:	0800962b 	.word	0x0800962b
 8009458:	0800962b 	.word	0x0800962b
 800945c:	0800962b 	.word	0x0800962b
 8009460:	080094e5 	.word	0x080094e5
 8009464:	0800962b 	.word	0x0800962b
 8009468:	0800962b 	.word	0x0800962b
 800946c:	0800962b 	.word	0x0800962b
 8009470:	08009527 	.word	0x08009527
 8009474:	0800962b 	.word	0x0800962b
 8009478:	0800962b 	.word	0x0800962b
 800947c:	0800962b 	.word	0x0800962b
 8009480:	08009567 	.word	0x08009567
 8009484:	0800962b 	.word	0x0800962b
 8009488:	0800962b 	.word	0x0800962b
 800948c:	0800962b 	.word	0x0800962b
 8009490:	080095a9 	.word	0x080095a9
 8009494:	0800962b 	.word	0x0800962b
 8009498:	0800962b 	.word	0x0800962b
 800949c:	0800962b 	.word	0x0800962b
 80094a0:	080095e9 	.word	0x080095e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68b9      	ldr	r1, [r7, #8]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fa90 	bl	80099d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699a      	ldr	r2, [r3, #24]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f042 0208 	orr.w	r2, r2, #8
 80094be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f022 0204 	bic.w	r2, r2, #4
 80094ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6999      	ldr	r1, [r3, #24]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	691a      	ldr	r2, [r3, #16]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	619a      	str	r2, [r3, #24]
      break;
 80094e2:	e0a3      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68b9      	ldr	r1, [r7, #8]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fae2 	bl	8009ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699a      	ldr	r2, [r3, #24]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699a      	ldr	r2, [r3, #24]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800950e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6999      	ldr	r1, [r3, #24]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	021a      	lsls	r2, r3, #8
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	619a      	str	r2, [r3, #24]
      break;
 8009524:	e082      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	4618      	mov	r0, r3
 800952e:	f000 fb39 	bl	8009ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	69da      	ldr	r2, [r3, #28]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f042 0208 	orr.w	r2, r2, #8
 8009540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69da      	ldr	r2, [r3, #28]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f022 0204 	bic.w	r2, r2, #4
 8009550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69d9      	ldr	r1, [r3, #28]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	691a      	ldr	r2, [r3, #16]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	61da      	str	r2, [r3, #28]
      break;
 8009564:	e062      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68b9      	ldr	r1, [r7, #8]
 800956c:	4618      	mov	r0, r3
 800956e:	f000 fb8f 	bl	8009c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69da      	ldr	r2, [r3, #28]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69da      	ldr	r2, [r3, #28]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69d9      	ldr	r1, [r3, #28]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	021a      	lsls	r2, r3, #8
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	61da      	str	r2, [r3, #28]
      break;
 80095a6:	e041      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68b9      	ldr	r1, [r7, #8]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 fbc6 	bl	8009d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f042 0208 	orr.w	r2, r2, #8
 80095c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f022 0204 	bic.w	r2, r2, #4
 80095d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	691a      	ldr	r2, [r3, #16]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80095e6:	e021      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fbf8 	bl	8009de4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	021a      	lsls	r2, r3, #8
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	430a      	orrs	r2, r1
 8009626:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009628:	e000      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800962a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop

08009648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009658:	2b01      	cmp	r3, #1
 800965a:	d101      	bne.n	8009660 <HAL_TIM_ConfigClockSource+0x18>
 800965c:	2302      	movs	r3, #2
 800965e:	e0a6      	b.n	80097ae <HAL_TIM_ConfigClockSource+0x166>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2202      	movs	r2, #2
 800966c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	4b4f      	ldr	r3, [pc, #316]	; (80097b8 <HAL_TIM_ConfigClockSource+0x170>)
 800967c:	4013      	ands	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009686:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b40      	cmp	r3, #64	; 0x40
 8009696:	d067      	beq.n	8009768 <HAL_TIM_ConfigClockSource+0x120>
 8009698:	2b40      	cmp	r3, #64	; 0x40
 800969a:	d80b      	bhi.n	80096b4 <HAL_TIM_ConfigClockSource+0x6c>
 800969c:	2b10      	cmp	r3, #16
 800969e:	d073      	beq.n	8009788 <HAL_TIM_ConfigClockSource+0x140>
 80096a0:	2b10      	cmp	r3, #16
 80096a2:	d802      	bhi.n	80096aa <HAL_TIM_ConfigClockSource+0x62>
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d06f      	beq.n	8009788 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80096a8:	e078      	b.n	800979c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80096aa:	2b20      	cmp	r3, #32
 80096ac:	d06c      	beq.n	8009788 <HAL_TIM_ConfigClockSource+0x140>
 80096ae:	2b30      	cmp	r3, #48	; 0x30
 80096b0:	d06a      	beq.n	8009788 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80096b2:	e073      	b.n	800979c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80096b4:	2b70      	cmp	r3, #112	; 0x70
 80096b6:	d00d      	beq.n	80096d4 <HAL_TIM_ConfigClockSource+0x8c>
 80096b8:	2b70      	cmp	r3, #112	; 0x70
 80096ba:	d804      	bhi.n	80096c6 <HAL_TIM_ConfigClockSource+0x7e>
 80096bc:	2b50      	cmp	r3, #80	; 0x50
 80096be:	d033      	beq.n	8009728 <HAL_TIM_ConfigClockSource+0xe0>
 80096c0:	2b60      	cmp	r3, #96	; 0x60
 80096c2:	d041      	beq.n	8009748 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80096c4:	e06a      	b.n	800979c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80096c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ca:	d066      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x152>
 80096cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d0:	d017      	beq.n	8009702 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80096d2:	e063      	b.n	800979c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	6899      	ldr	r1, [r3, #8]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	685a      	ldr	r2, [r3, #4]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	f000 fcd4 	bl	800a090 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80096f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	609a      	str	r2, [r3, #8]
      break;
 8009700:	e04c      	b.n	800979c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	6899      	ldr	r1, [r3, #8]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f000 fcbd 	bl	800a090 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009724:	609a      	str	r2, [r3, #8]
      break;
 8009726:	e039      	b.n	800979c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	6859      	ldr	r1, [r3, #4]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	461a      	mov	r2, r3
 8009736:	f000 fc31 	bl	8009f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2150      	movs	r1, #80	; 0x50
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fc8a 	bl	800a05a <TIM_ITRx_SetConfig>
      break;
 8009746:	e029      	b.n	800979c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	6859      	ldr	r1, [r3, #4]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	461a      	mov	r2, r3
 8009756:	f000 fc50 	bl	8009ffa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2160      	movs	r1, #96	; 0x60
 8009760:	4618      	mov	r0, r3
 8009762:	f000 fc7a 	bl	800a05a <TIM_ITRx_SetConfig>
      break;
 8009766:	e019      	b.n	800979c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	6859      	ldr	r1, [r3, #4]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	461a      	mov	r2, r3
 8009776:	f000 fc11 	bl	8009f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2140      	movs	r1, #64	; 0x40
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fc6a 	bl	800a05a <TIM_ITRx_SetConfig>
      break;
 8009786:	e009      	b.n	800979c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4619      	mov	r1, r3
 8009792:	4610      	mov	r0, r2
 8009794:	f000 fc61 	bl	800a05a <TIM_ITRx_SetConfig>
      break;
 8009798:	e000      	b.n	800979c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800979a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	fffeff88 	.word	0xfffeff88

080097bc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d101      	bne.n	80097d4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80097d0:	2302      	movs	r3, #2
 80097d2:	e031      	b.n	8009838 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2202      	movs	r2, #2
 80097e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fb50 	bl	8009e8c <TIM_SlaveTimer_SetConfig>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d009      	beq.n	8009806 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e018      	b.n	8009838 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68da      	ldr	r2, [r3, #12]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009814:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009824:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a40      	ldr	r2, [pc, #256]	; (80099a4 <TIM_Base_SetConfig+0x114>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d013      	beq.n	80098d0 <TIM_Base_SetConfig+0x40>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ae:	d00f      	beq.n	80098d0 <TIM_Base_SetConfig+0x40>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a3d      	ldr	r2, [pc, #244]	; (80099a8 <TIM_Base_SetConfig+0x118>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d00b      	beq.n	80098d0 <TIM_Base_SetConfig+0x40>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a3c      	ldr	r2, [pc, #240]	; (80099ac <TIM_Base_SetConfig+0x11c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d007      	beq.n	80098d0 <TIM_Base_SetConfig+0x40>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a3b      	ldr	r2, [pc, #236]	; (80099b0 <TIM_Base_SetConfig+0x120>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d003      	beq.n	80098d0 <TIM_Base_SetConfig+0x40>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a3a      	ldr	r2, [pc, #232]	; (80099b4 <TIM_Base_SetConfig+0x124>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d108      	bne.n	80098e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4313      	orrs	r3, r2
 80098e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a2f      	ldr	r2, [pc, #188]	; (80099a4 <TIM_Base_SetConfig+0x114>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d02b      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f0:	d027      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a2c      	ldr	r2, [pc, #176]	; (80099a8 <TIM_Base_SetConfig+0x118>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d023      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a2b      	ldr	r2, [pc, #172]	; (80099ac <TIM_Base_SetConfig+0x11c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d01f      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a2a      	ldr	r2, [pc, #168]	; (80099b0 <TIM_Base_SetConfig+0x120>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d01b      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a29      	ldr	r2, [pc, #164]	; (80099b4 <TIM_Base_SetConfig+0x124>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d017      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a28      	ldr	r2, [pc, #160]	; (80099b8 <TIM_Base_SetConfig+0x128>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d013      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a27      	ldr	r2, [pc, #156]	; (80099bc <TIM_Base_SetConfig+0x12c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d00f      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a26      	ldr	r2, [pc, #152]	; (80099c0 <TIM_Base_SetConfig+0x130>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d00b      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a25      	ldr	r2, [pc, #148]	; (80099c4 <TIM_Base_SetConfig+0x134>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d007      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a24      	ldr	r2, [pc, #144]	; (80099c8 <TIM_Base_SetConfig+0x138>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d003      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a23      	ldr	r2, [pc, #140]	; (80099cc <TIM_Base_SetConfig+0x13c>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d108      	bne.n	8009954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	4313      	orrs	r3, r2
 8009952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	4313      	orrs	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a0a      	ldr	r2, [pc, #40]	; (80099a4 <TIM_Base_SetConfig+0x114>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d003      	beq.n	8009988 <TIM_Base_SetConfig+0xf8>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a0c      	ldr	r2, [pc, #48]	; (80099b4 <TIM_Base_SetConfig+0x124>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d103      	bne.n	8009990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	691a      	ldr	r2, [r3, #16]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	615a      	str	r2, [r3, #20]
}
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	40010000 	.word	0x40010000
 80099a8:	40000400 	.word	0x40000400
 80099ac:	40000800 	.word	0x40000800
 80099b0:	40000c00 	.word	0x40000c00
 80099b4:	40010400 	.word	0x40010400
 80099b8:	40014000 	.word	0x40014000
 80099bc:	40014400 	.word	0x40014400
 80099c0:	40014800 	.word	0x40014800
 80099c4:	40001800 	.word	0x40001800
 80099c8:	40001c00 	.word	0x40001c00
 80099cc:	40002000 	.word	0x40002000

080099d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	f023 0201 	bic.w	r2, r3, #1
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	4b2b      	ldr	r3, [pc, #172]	; (8009aa8 <TIM_OC1_SetConfig+0xd8>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f023 0303 	bic.w	r3, r3, #3
 8009a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	f023 0302 	bic.w	r3, r3, #2
 8009a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a21      	ldr	r2, [pc, #132]	; (8009aac <TIM_OC1_SetConfig+0xdc>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d003      	beq.n	8009a34 <TIM_OC1_SetConfig+0x64>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a20      	ldr	r2, [pc, #128]	; (8009ab0 <TIM_OC1_SetConfig+0xe0>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d10c      	bne.n	8009a4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f023 0308 	bic.w	r3, r3, #8
 8009a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f023 0304 	bic.w	r3, r3, #4
 8009a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a16      	ldr	r2, [pc, #88]	; (8009aac <TIM_OC1_SetConfig+0xdc>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d003      	beq.n	8009a5e <TIM_OC1_SetConfig+0x8e>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a15      	ldr	r2, [pc, #84]	; (8009ab0 <TIM_OC1_SetConfig+0xe0>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d111      	bne.n	8009a82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	685a      	ldr	r2, [r3, #4]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	621a      	str	r2, [r3, #32]
}
 8009a9c:	bf00      	nop
 8009a9e:	371c      	adds	r7, #28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	fffeff8f 	.word	0xfffeff8f
 8009aac:	40010000 	.word	0x40010000
 8009ab0:	40010400 	.word	0x40010400

08009ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	f023 0210 	bic.w	r2, r3, #16
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4b2e      	ldr	r3, [pc, #184]	; (8009b98 <TIM_OC2_SetConfig+0xe4>)
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	021b      	lsls	r3, r3, #8
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f023 0320 	bic.w	r3, r3, #32
 8009afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	011b      	lsls	r3, r3, #4
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a23      	ldr	r2, [pc, #140]	; (8009b9c <TIM_OC2_SetConfig+0xe8>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d003      	beq.n	8009b1c <TIM_OC2_SetConfig+0x68>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a22      	ldr	r2, [pc, #136]	; (8009ba0 <TIM_OC2_SetConfig+0xec>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d10d      	bne.n	8009b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a18      	ldr	r2, [pc, #96]	; (8009b9c <TIM_OC2_SetConfig+0xe8>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d003      	beq.n	8009b48 <TIM_OC2_SetConfig+0x94>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a17      	ldr	r2, [pc, #92]	; (8009ba0 <TIM_OC2_SetConfig+0xec>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d113      	bne.n	8009b70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	621a      	str	r2, [r3, #32]
}
 8009b8a:	bf00      	nop
 8009b8c:	371c      	adds	r7, #28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	feff8fff 	.word	0xfeff8fff
 8009b9c:	40010000 	.word	0x40010000
 8009ba0:	40010400 	.word	0x40010400

08009ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	4b2d      	ldr	r3, [pc, #180]	; (8009c84 <TIM_OC3_SetConfig+0xe0>)
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f023 0303 	bic.w	r3, r3, #3
 8009bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	021b      	lsls	r3, r3, #8
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a22      	ldr	r2, [pc, #136]	; (8009c88 <TIM_OC3_SetConfig+0xe4>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d003      	beq.n	8009c0a <TIM_OC3_SetConfig+0x66>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a21      	ldr	r2, [pc, #132]	; (8009c8c <TIM_OC3_SetConfig+0xe8>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d10d      	bne.n	8009c26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a17      	ldr	r2, [pc, #92]	; (8009c88 <TIM_OC3_SetConfig+0xe4>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d003      	beq.n	8009c36 <TIM_OC3_SetConfig+0x92>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a16      	ldr	r2, [pc, #88]	; (8009c8c <TIM_OC3_SetConfig+0xe8>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d113      	bne.n	8009c5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	011b      	lsls	r3, r3, #4
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	011b      	lsls	r3, r3, #4
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	621a      	str	r2, [r3, #32]
}
 8009c78:	bf00      	nop
 8009c7a:	371c      	adds	r7, #28
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	fffeff8f 	.word	0xfffeff8f
 8009c88:	40010000 	.word	0x40010000
 8009c8c:	40010400 	.word	0x40010400

08009c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b087      	sub	sp, #28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4b1e      	ldr	r3, [pc, #120]	; (8009d34 <TIM_OC4_SetConfig+0xa4>)
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	021b      	lsls	r3, r3, #8
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	031b      	lsls	r3, r3, #12
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a13      	ldr	r2, [pc, #76]	; (8009d38 <TIM_OC4_SetConfig+0xa8>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d003      	beq.n	8009cf8 <TIM_OC4_SetConfig+0x68>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a12      	ldr	r2, [pc, #72]	; (8009d3c <TIM_OC4_SetConfig+0xac>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d109      	bne.n	8009d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	019b      	lsls	r3, r3, #6
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	621a      	str	r2, [r3, #32]
}
 8009d26:	bf00      	nop
 8009d28:	371c      	adds	r7, #28
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	feff8fff 	.word	0xfeff8fff
 8009d38:	40010000 	.word	0x40010000
 8009d3c:	40010400 	.word	0x40010400

08009d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b087      	sub	sp, #28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	4b1b      	ldr	r3, [pc, #108]	; (8009dd8 <TIM_OC5_SetConfig+0x98>)
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	041b      	lsls	r3, r3, #16
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a12      	ldr	r2, [pc, #72]	; (8009ddc <TIM_OC5_SetConfig+0x9c>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d003      	beq.n	8009d9e <TIM_OC5_SetConfig+0x5e>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a11      	ldr	r2, [pc, #68]	; (8009de0 <TIM_OC5_SetConfig+0xa0>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d109      	bne.n	8009db2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009da4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	021b      	lsls	r3, r3, #8
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	621a      	str	r2, [r3, #32]
}
 8009dcc:	bf00      	nop
 8009dce:	371c      	adds	r7, #28
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	fffeff8f 	.word	0xfffeff8f
 8009ddc:	40010000 	.word	0x40010000
 8009de0:	40010400 	.word	0x40010400

08009de4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	4b1c      	ldr	r3, [pc, #112]	; (8009e80 <TIM_OC6_SetConfig+0x9c>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	021b      	lsls	r3, r3, #8
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	051b      	lsls	r3, r3, #20
 8009e2e:	693a      	ldr	r2, [r7, #16]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a13      	ldr	r2, [pc, #76]	; (8009e84 <TIM_OC6_SetConfig+0xa0>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d003      	beq.n	8009e44 <TIM_OC6_SetConfig+0x60>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a12      	ldr	r2, [pc, #72]	; (8009e88 <TIM_OC6_SetConfig+0xa4>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d109      	bne.n	8009e58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	029b      	lsls	r3, r3, #10
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	621a      	str	r2, [r3, #32]
}
 8009e72:	bf00      	nop
 8009e74:	371c      	adds	r7, #28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	feff8fff 	.word	0xfeff8fff
 8009e84:	40010000 	.word	0x40010000
 8009e88:	40010400 	.word	0x40010400

08009e8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	4b39      	ldr	r3, [pc, #228]	; (8009f98 <TIM_SlaveTimer_SetConfig+0x10c>)
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	2b30      	cmp	r3, #48	; 0x30
 8009ed0:	d05c      	beq.n	8009f8c <TIM_SlaveTimer_SetConfig+0x100>
 8009ed2:	2b30      	cmp	r3, #48	; 0x30
 8009ed4:	d806      	bhi.n	8009ee4 <TIM_SlaveTimer_SetConfig+0x58>
 8009ed6:	2b10      	cmp	r3, #16
 8009ed8:	d058      	beq.n	8009f8c <TIM_SlaveTimer_SetConfig+0x100>
 8009eda:	2b20      	cmp	r3, #32
 8009edc:	d056      	beq.n	8009f8c <TIM_SlaveTimer_SetConfig+0x100>
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d054      	beq.n	8009f8c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8009ee2:	e054      	b.n	8009f8e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009ee4:	2b50      	cmp	r3, #80	; 0x50
 8009ee6:	d03d      	beq.n	8009f64 <TIM_SlaveTimer_SetConfig+0xd8>
 8009ee8:	2b50      	cmp	r3, #80	; 0x50
 8009eea:	d802      	bhi.n	8009ef2 <TIM_SlaveTimer_SetConfig+0x66>
 8009eec:	2b40      	cmp	r3, #64	; 0x40
 8009eee:	d010      	beq.n	8009f12 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8009ef0:	e04d      	b.n	8009f8e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009ef2:	2b60      	cmp	r3, #96	; 0x60
 8009ef4:	d040      	beq.n	8009f78 <TIM_SlaveTimer_SetConfig+0xec>
 8009ef6:	2b70      	cmp	r3, #112	; 0x70
 8009ef8:	d000      	beq.n	8009efc <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8009efa:	e048      	b.n	8009f8e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	68d9      	ldr	r1, [r3, #12]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	689a      	ldr	r2, [r3, #8]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	f000 f8c0 	bl	800a090 <TIM_ETR_SetConfig>
      break;
 8009f10:	e03d      	b.n	8009f8e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b05      	cmp	r3, #5
 8009f18:	d101      	bne.n	8009f1e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e038      	b.n	8009f90 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6a1b      	ldr	r3, [r3, #32]
 8009f24:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6a1a      	ldr	r2, [r3, #32]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f022 0201 	bic.w	r2, r2, #1
 8009f34:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f44:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	011b      	lsls	r3, r3, #4
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	621a      	str	r2, [r3, #32]
      break;
 8009f62:	e014      	b.n	8009f8e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6818      	ldr	r0, [r3, #0]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	6899      	ldr	r1, [r3, #8]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	461a      	mov	r2, r3
 8009f72:	f000 f813 	bl	8009f9c <TIM_TI1_ConfigInputStage>
      break;
 8009f76:	e00a      	b.n	8009f8e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6818      	ldr	r0, [r3, #0]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	6899      	ldr	r1, [r3, #8]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	461a      	mov	r2, r3
 8009f86:	f000 f838 	bl	8009ffa <TIM_TI2_ConfigInputStage>
      break;
 8009f8a:	e000      	b.n	8009f8e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8009f8c:	bf00      	nop
  }
  return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	fffefff8 	.word	0xfffefff8

08009f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b087      	sub	sp, #28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	f023 0201 	bic.w	r2, r3, #1
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	699b      	ldr	r3, [r3, #24]
 8009fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	011b      	lsls	r3, r3, #4
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f023 030a 	bic.w	r3, r3, #10
 8009fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	697a      	ldr	r2, [r7, #20]
 8009fec:	621a      	str	r2, [r3, #32]
}
 8009fee:	bf00      	nop
 8009ff0:	371c      	adds	r7, #28
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b087      	sub	sp, #28
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	60f8      	str	r0, [r7, #12]
 800a002:	60b9      	str	r1, [r7, #8]
 800a004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	f023 0210 	bic.w	r2, r3, #16
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	031b      	lsls	r3, r3, #12
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a036:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	4313      	orrs	r3, r2
 800a040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	693a      	ldr	r2, [r7, #16]
 800a04c:	621a      	str	r2, [r3, #32]
}
 800a04e:	bf00      	nop
 800a050:	371c      	adds	r7, #28
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b085      	sub	sp, #20
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	4313      	orrs	r3, r2
 800a078:	f043 0307 	orr.w	r3, r3, #7
 800a07c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	609a      	str	r2, [r3, #8]
}
 800a084:	bf00      	nop
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a090:	b480      	push	{r7}
 800a092:	b087      	sub	sp, #28
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
 800a09c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	021a      	lsls	r2, r3, #8
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	697a      	ldr	r2, [r7, #20]
 800a0c2:	609a      	str	r2, [r3, #8]
}
 800a0c4:	bf00      	nop
 800a0c6:	371c      	adds	r7, #28
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d101      	bne.n	800a0e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0e4:	2302      	movs	r3, #2
 800a0e6:	e06d      	b.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a30      	ldr	r2, [pc, #192]	; (800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d004      	beq.n	800a11c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a2f      	ldr	r2, [pc, #188]	; (800a1d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d108      	bne.n	800a12e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a122:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a20      	ldr	r2, [pc, #128]	; (800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d022      	beq.n	800a198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a15a:	d01d      	beq.n	800a198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a1d      	ldr	r2, [pc, #116]	; (800a1d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d018      	beq.n	800a198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a1c      	ldr	r2, [pc, #112]	; (800a1dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d013      	beq.n	800a198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a1a      	ldr	r2, [pc, #104]	; (800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d00e      	beq.n	800a198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a15      	ldr	r2, [pc, #84]	; (800a1d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d009      	beq.n	800a198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a16      	ldr	r2, [pc, #88]	; (800a1e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d004      	beq.n	800a198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a15      	ldr	r2, [pc, #84]	; (800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d10c      	bne.n	800a1b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a19e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	40010000 	.word	0x40010000
 800a1d4:	40010400 	.word	0x40010400
 800a1d8:	40000400 	.word	0x40000400
 800a1dc:	40000800 	.word	0x40000800
 800a1e0:	40000c00 	.word	0x40000c00
 800a1e4:	40014000 	.word	0x40014000
 800a1e8:	40001800 	.word	0x40001800

0800a1ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a200:	2b01      	cmp	r3, #1
 800a202:	d101      	bne.n	800a208 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a204:	2302      	movs	r3, #2
 800a206:	e065      	b.n	800a2d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	4313      	orrs	r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	4313      	orrs	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4313      	orrs	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	4313      	orrs	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	4313      	orrs	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26e:	4313      	orrs	r3, r2
 800a270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	041b      	lsls	r3, r3, #16
 800a27e:	4313      	orrs	r3, r2
 800a280:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a16      	ldr	r2, [pc, #88]	; (800a2e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d004      	beq.n	800a296 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a14      	ldr	r2, [pc, #80]	; (800a2e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d115      	bne.n	800a2c2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	051b      	lsls	r3, r3, #20
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	69db      	ldr	r3, [r3, #28]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	40010000 	.word	0x40010000
 800a2e4:	40010400 	.word	0x40010400

0800a2e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d101      	bne.n	800a336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e040      	b.n	800a3b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d106      	bne.n	800a34c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7fa f85a 	bl	8004400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2224      	movs	r2, #36	; 0x24
 800a350:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f022 0201 	bic.w	r2, r2, #1
 800a360:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fa70 	bl	800a848 <UART_SetConfig>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d101      	bne.n	800a372 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e022      	b.n	800a3b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fd0e 	bl	800ad9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a38e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	689a      	ldr	r2, [r3, #8]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a39e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f042 0201 	orr.w	r2, r2, #1
 800a3ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fd95 	bl	800aee0 <UART_CheckIdleState>
 800a3b6:	4603      	mov	r3, r0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3d2:	2b20      	cmp	r3, #32
 800a3d4:	d144      	bne.n	800a460 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <HAL_UART_Transmit_IT+0x22>
 800a3dc:	88fb      	ldrh	r3, [r7, #6]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e03d      	b.n	800a462 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d101      	bne.n	800a3f4 <HAL_UART_Transmit_IT+0x34>
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	e036      	b.n	800a462 <HAL_UART_Transmit_IT+0xa2>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	88fa      	ldrh	r2, [r7, #6]
 800a406:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	88fa      	ldrh	r2, [r7, #6]
 800a40e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2221      	movs	r2, #33	; 0x21
 800a422:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a42c:	d107      	bne.n	800a43e <HAL_UART_Transmit_IT+0x7e>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d103      	bne.n	800a43e <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4a0d      	ldr	r2, [pc, #52]	; (800a470 <HAL_UART_Transmit_IT+0xb0>)
 800a43a:	665a      	str	r2, [r3, #100]	; 0x64
 800a43c:	e002      	b.n	800a444 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4a0c      	ldr	r2, [pc, #48]	; (800a474 <HAL_UART_Transmit_IT+0xb4>)
 800a442:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a45a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a45c:	2300      	movs	r3, #0
 800a45e:	e000      	b.n	800a462 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800a460:	2302      	movs	r3, #2
  }
}
 800a462:	4618      	mov	r0, r3
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	0800b113 	.word	0x0800b113
 800a474:	0800b0a1 	.word	0x0800b0a1

0800a478 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	4613      	mov	r3, r2
 800a484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a48a:	2b20      	cmp	r3, #32
 800a48c:	f040 808a 	bne.w	800a5a4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <HAL_UART_Receive_IT+0x24>
 800a496:	88fb      	ldrh	r3, [r7, #6]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e082      	b.n	800a5a6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d101      	bne.n	800a4ae <HAL_UART_Receive_IT+0x36>
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	e07b      	b.n	800a5a6 <HAL_UART_Receive_IT+0x12e>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	88fa      	ldrh	r2, [r7, #6]
 800a4c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	88fa      	ldrh	r2, [r7, #6]
 800a4c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4da:	d10e      	bne.n	800a4fa <HAL_UART_Receive_IT+0x82>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d105      	bne.n	800a4f0 <HAL_UART_Receive_IT+0x78>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a4ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4ee:	e02d      	b.n	800a54c <HAL_UART_Receive_IT+0xd4>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	22ff      	movs	r2, #255	; 0xff
 800a4f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4f8:	e028      	b.n	800a54c <HAL_UART_Receive_IT+0xd4>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10d      	bne.n	800a51e <HAL_UART_Receive_IT+0xa6>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d104      	bne.n	800a514 <HAL_UART_Receive_IT+0x9c>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	22ff      	movs	r2, #255	; 0xff
 800a50e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a512:	e01b      	b.n	800a54c <HAL_UART_Receive_IT+0xd4>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	227f      	movs	r2, #127	; 0x7f
 800a518:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a51c:	e016      	b.n	800a54c <HAL_UART_Receive_IT+0xd4>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a526:	d10d      	bne.n	800a544 <HAL_UART_Receive_IT+0xcc>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d104      	bne.n	800a53a <HAL_UART_Receive_IT+0xc2>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	227f      	movs	r2, #127	; 0x7f
 800a534:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a538:	e008      	b.n	800a54c <HAL_UART_Receive_IT+0xd4>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	223f      	movs	r2, #63	; 0x3f
 800a53e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a542:	e003      	b.n	800a54c <HAL_UART_Receive_IT+0xd4>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2222      	movs	r2, #34	; 0x22
 800a556:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689a      	ldr	r2, [r3, #8]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f042 0201 	orr.w	r2, r2, #1
 800a566:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a570:	d107      	bne.n	800a582 <HAL_UART_Receive_IT+0x10a>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d103      	bne.n	800a582 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	4a0d      	ldr	r2, [pc, #52]	; (800a5b4 <HAL_UART_Receive_IT+0x13c>)
 800a57e:	661a      	str	r2, [r3, #96]	; 0x60
 800a580:	e002      	b.n	800a588 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	4a0c      	ldr	r2, [pc, #48]	; (800a5b8 <HAL_UART_Receive_IT+0x140>)
 800a586:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a59e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	e000      	b.n	800a5a6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a5a4:	2302      	movs	r3, #2
  }
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	0800b267 	.word	0x0800b267
 800a5b8:	0800b1c1 	.word	0x0800b1c1

0800a5bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	69db      	ldr	r3, [r3, #28]
 800a5ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a5dc:	69fa      	ldr	r2, [r7, #28]
 800a5de:	f640 030f 	movw	r3, #2063	; 0x80f
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d113      	bne.n	800a614 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	f003 0320 	and.w	r3, r3, #32
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00e      	beq.n	800a614 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	f003 0320 	and.w	r3, r3, #32
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d009      	beq.n	800a614 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 8100 	beq.w	800a80a <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	4798      	blx	r3
      }
      return;
 800a612:	e0fa      	b.n	800a80a <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 80d5 	beq.w	800a7c6 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	2b00      	cmp	r3, #0
 800a624:	d105      	bne.n	800a632 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 80ca 	beq.w	800a7c6 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00e      	beq.n	800a65a <HAL_UART_IRQHandler+0x9e>
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a642:	2b00      	cmp	r3, #0
 800a644:	d009      	beq.n	800a65a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2201      	movs	r2, #1
 800a64c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a652:	f043 0201 	orr.w	r2, r3, #1
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	f003 0302 	and.w	r3, r3, #2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00e      	beq.n	800a682 <HAL_UART_IRQHandler+0xc6>
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d009      	beq.n	800a682 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2202      	movs	r2, #2
 800a674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a67a:	f043 0204 	orr.w	r2, r3, #4
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	f003 0304 	and.w	r3, r3, #4
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00e      	beq.n	800a6aa <HAL_UART_IRQHandler+0xee>
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	2b00      	cmp	r3, #0
 800a694:	d009      	beq.n	800a6aa <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2204      	movs	r2, #4
 800a69c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6a2:	f043 0202 	orr.w	r2, r3, #2
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	f003 0308 	and.w	r3, r3, #8
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d013      	beq.n	800a6dc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	f003 0320 	and.w	r3, r3, #32
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d104      	bne.n	800a6c8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d009      	beq.n	800a6dc <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2208      	movs	r2, #8
 800a6ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6d4:	f043 0208 	orr.w	r2, r3, #8
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00f      	beq.n	800a706 <HAL_UART_IRQHandler+0x14a>
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00a      	beq.n	800a706 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6fe:	f043 0220 	orr.w	r2, r3, #32
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d07f      	beq.n	800a80e <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	f003 0320 	and.w	r3, r3, #32
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00c      	beq.n	800a732 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	f003 0320 	and.w	r3, r3, #32
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d007      	beq.n	800a732 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a726:	2b00      	cmp	r3, #0
 800a728:	d003      	beq.n	800a732 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a736:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a742:	2b40      	cmp	r3, #64	; 0x40
 800a744:	d004      	beq.n	800a750 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d031      	beq.n	800a7b4 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fc6f 	bl	800b034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a760:	2b40      	cmp	r3, #64	; 0x40
 800a762:	d123      	bne.n	800a7ac <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	689a      	ldr	r2, [r3, #8]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a772:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d013      	beq.n	800a7a4 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a780:	4a26      	ldr	r2, [pc, #152]	; (800a81c <HAL_UART_IRQHandler+0x260>)
 800a782:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fa ff67 	bl	800565c <HAL_DMA_Abort_IT>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d016      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a79e:	4610      	mov	r0, r2
 800a7a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7a2:	e00e      	b.n	800a7c2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f845 	bl	800a834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7aa:	e00a      	b.n	800a7c2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f841 	bl	800a834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b2:	e006      	b.n	800a7c2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f83d 	bl	800a834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a7c0:	e025      	b.n	800a80e <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c2:	bf00      	nop
    return;
 800a7c4:	e023      	b.n	800a80e <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00d      	beq.n	800a7ec <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d008      	beq.n	800a7ec <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d017      	beq.n	800a812 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
    }
    return;
 800a7ea:	e012      	b.n	800a812 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00e      	beq.n	800a814 <HAL_UART_IRQHandler+0x258>
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d009      	beq.n	800a814 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fcc4 	bl	800b18e <UART_EndTransmit_IT>
    return;
 800a806:	bf00      	nop
 800a808:	e004      	b.n	800a814 <HAL_UART_IRQHandler+0x258>
      return;
 800a80a:	bf00      	nop
 800a80c:	e002      	b.n	800a814 <HAL_UART_IRQHandler+0x258>
    return;
 800a80e:	bf00      	nop
 800a810:	e000      	b.n	800a814 <HAL_UART_IRQHandler+0x258>
    return;
 800a812:	bf00      	nop
  }

}
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	0800b075 	.word	0x0800b075

0800a820 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a850:	2300      	movs	r3, #0
 800a852:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	689a      	ldr	r2, [r3, #8]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	431a      	orrs	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	431a      	orrs	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	4bb1      	ldr	r3, [pc, #708]	; (800ab3c <UART_SetConfig+0x2f4>)
 800a878:	4013      	ands	r3, r2
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	6812      	ldr	r2, [r2, #0]
 800a87e:	6939      	ldr	r1, [r7, #16]
 800a880:	430b      	orrs	r3, r1
 800a882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a1b      	ldr	r3, [r3, #32]
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	430a      	orrs	r2, r1
 800a8bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a9f      	ldr	r2, [pc, #636]	; (800ab40 <UART_SetConfig+0x2f8>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d121      	bne.n	800a90c <UART_SetConfig+0xc4>
 800a8c8:	4b9e      	ldr	r3, [pc, #632]	; (800ab44 <UART_SetConfig+0x2fc>)
 800a8ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8ce:	f003 0303 	and.w	r3, r3, #3
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d816      	bhi.n	800a904 <UART_SetConfig+0xbc>
 800a8d6:	a201      	add	r2, pc, #4	; (adr r2, 800a8dc <UART_SetConfig+0x94>)
 800a8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8dc:	0800a8ed 	.word	0x0800a8ed
 800a8e0:	0800a8f9 	.word	0x0800a8f9
 800a8e4:	0800a8f3 	.word	0x0800a8f3
 800a8e8:	0800a8ff 	.word	0x0800a8ff
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	77fb      	strb	r3, [r7, #31]
 800a8f0:	e151      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	77fb      	strb	r3, [r7, #31]
 800a8f6:	e14e      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a8f8:	2304      	movs	r3, #4
 800a8fa:	77fb      	strb	r3, [r7, #31]
 800a8fc:	e14b      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a8fe:	2308      	movs	r3, #8
 800a900:	77fb      	strb	r3, [r7, #31]
 800a902:	e148      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a904:	2310      	movs	r3, #16
 800a906:	77fb      	strb	r3, [r7, #31]
 800a908:	bf00      	nop
 800a90a:	e144      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a8d      	ldr	r2, [pc, #564]	; (800ab48 <UART_SetConfig+0x300>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d134      	bne.n	800a980 <UART_SetConfig+0x138>
 800a916:	4b8b      	ldr	r3, [pc, #556]	; (800ab44 <UART_SetConfig+0x2fc>)
 800a918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a91c:	f003 030c 	and.w	r3, r3, #12
 800a920:	2b0c      	cmp	r3, #12
 800a922:	d829      	bhi.n	800a978 <UART_SetConfig+0x130>
 800a924:	a201      	add	r2, pc, #4	; (adr r2, 800a92c <UART_SetConfig+0xe4>)
 800a926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92a:	bf00      	nop
 800a92c:	0800a961 	.word	0x0800a961
 800a930:	0800a979 	.word	0x0800a979
 800a934:	0800a979 	.word	0x0800a979
 800a938:	0800a979 	.word	0x0800a979
 800a93c:	0800a96d 	.word	0x0800a96d
 800a940:	0800a979 	.word	0x0800a979
 800a944:	0800a979 	.word	0x0800a979
 800a948:	0800a979 	.word	0x0800a979
 800a94c:	0800a967 	.word	0x0800a967
 800a950:	0800a979 	.word	0x0800a979
 800a954:	0800a979 	.word	0x0800a979
 800a958:	0800a979 	.word	0x0800a979
 800a95c:	0800a973 	.word	0x0800a973
 800a960:	2300      	movs	r3, #0
 800a962:	77fb      	strb	r3, [r7, #31]
 800a964:	e117      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a966:	2302      	movs	r3, #2
 800a968:	77fb      	strb	r3, [r7, #31]
 800a96a:	e114      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a96c:	2304      	movs	r3, #4
 800a96e:	77fb      	strb	r3, [r7, #31]
 800a970:	e111      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a972:	2308      	movs	r3, #8
 800a974:	77fb      	strb	r3, [r7, #31]
 800a976:	e10e      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a978:	2310      	movs	r3, #16
 800a97a:	77fb      	strb	r3, [r7, #31]
 800a97c:	bf00      	nop
 800a97e:	e10a      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a71      	ldr	r2, [pc, #452]	; (800ab4c <UART_SetConfig+0x304>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d120      	bne.n	800a9cc <UART_SetConfig+0x184>
 800a98a:	4b6e      	ldr	r3, [pc, #440]	; (800ab44 <UART_SetConfig+0x2fc>)
 800a98c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a990:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a994:	2b10      	cmp	r3, #16
 800a996:	d00f      	beq.n	800a9b8 <UART_SetConfig+0x170>
 800a998:	2b10      	cmp	r3, #16
 800a99a:	d802      	bhi.n	800a9a2 <UART_SetConfig+0x15a>
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d005      	beq.n	800a9ac <UART_SetConfig+0x164>
 800a9a0:	e010      	b.n	800a9c4 <UART_SetConfig+0x17c>
 800a9a2:	2b20      	cmp	r3, #32
 800a9a4:	d005      	beq.n	800a9b2 <UART_SetConfig+0x16a>
 800a9a6:	2b30      	cmp	r3, #48	; 0x30
 800a9a8:	d009      	beq.n	800a9be <UART_SetConfig+0x176>
 800a9aa:	e00b      	b.n	800a9c4 <UART_SetConfig+0x17c>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	77fb      	strb	r3, [r7, #31]
 800a9b0:	e0f1      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	77fb      	strb	r3, [r7, #31]
 800a9b6:	e0ee      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a9b8:	2304      	movs	r3, #4
 800a9ba:	77fb      	strb	r3, [r7, #31]
 800a9bc:	e0eb      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a9be:	2308      	movs	r3, #8
 800a9c0:	77fb      	strb	r3, [r7, #31]
 800a9c2:	e0e8      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a9c4:	2310      	movs	r3, #16
 800a9c6:	77fb      	strb	r3, [r7, #31]
 800a9c8:	bf00      	nop
 800a9ca:	e0e4      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a5f      	ldr	r2, [pc, #380]	; (800ab50 <UART_SetConfig+0x308>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d120      	bne.n	800aa18 <UART_SetConfig+0x1d0>
 800a9d6:	4b5b      	ldr	r3, [pc, #364]	; (800ab44 <UART_SetConfig+0x2fc>)
 800a9d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a9e0:	2b40      	cmp	r3, #64	; 0x40
 800a9e2:	d00f      	beq.n	800aa04 <UART_SetConfig+0x1bc>
 800a9e4:	2b40      	cmp	r3, #64	; 0x40
 800a9e6:	d802      	bhi.n	800a9ee <UART_SetConfig+0x1a6>
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d005      	beq.n	800a9f8 <UART_SetConfig+0x1b0>
 800a9ec:	e010      	b.n	800aa10 <UART_SetConfig+0x1c8>
 800a9ee:	2b80      	cmp	r3, #128	; 0x80
 800a9f0:	d005      	beq.n	800a9fe <UART_SetConfig+0x1b6>
 800a9f2:	2bc0      	cmp	r3, #192	; 0xc0
 800a9f4:	d009      	beq.n	800aa0a <UART_SetConfig+0x1c2>
 800a9f6:	e00b      	b.n	800aa10 <UART_SetConfig+0x1c8>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	77fb      	strb	r3, [r7, #31]
 800a9fc:	e0cb      	b.n	800ab96 <UART_SetConfig+0x34e>
 800a9fe:	2302      	movs	r3, #2
 800aa00:	77fb      	strb	r3, [r7, #31]
 800aa02:	e0c8      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aa04:	2304      	movs	r3, #4
 800aa06:	77fb      	strb	r3, [r7, #31]
 800aa08:	e0c5      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aa0a:	2308      	movs	r3, #8
 800aa0c:	77fb      	strb	r3, [r7, #31]
 800aa0e:	e0c2      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aa10:	2310      	movs	r3, #16
 800aa12:	77fb      	strb	r3, [r7, #31]
 800aa14:	bf00      	nop
 800aa16:	e0be      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a4d      	ldr	r2, [pc, #308]	; (800ab54 <UART_SetConfig+0x30c>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d124      	bne.n	800aa6c <UART_SetConfig+0x224>
 800aa22:	4b48      	ldr	r3, [pc, #288]	; (800ab44 <UART_SetConfig+0x2fc>)
 800aa24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa30:	d012      	beq.n	800aa58 <UART_SetConfig+0x210>
 800aa32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa36:	d802      	bhi.n	800aa3e <UART_SetConfig+0x1f6>
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d007      	beq.n	800aa4c <UART_SetConfig+0x204>
 800aa3c:	e012      	b.n	800aa64 <UART_SetConfig+0x21c>
 800aa3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa42:	d006      	beq.n	800aa52 <UART_SetConfig+0x20a>
 800aa44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa48:	d009      	beq.n	800aa5e <UART_SetConfig+0x216>
 800aa4a:	e00b      	b.n	800aa64 <UART_SetConfig+0x21c>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	77fb      	strb	r3, [r7, #31]
 800aa50:	e0a1      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aa52:	2302      	movs	r3, #2
 800aa54:	77fb      	strb	r3, [r7, #31]
 800aa56:	e09e      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aa58:	2304      	movs	r3, #4
 800aa5a:	77fb      	strb	r3, [r7, #31]
 800aa5c:	e09b      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aa5e:	2308      	movs	r3, #8
 800aa60:	77fb      	strb	r3, [r7, #31]
 800aa62:	e098      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aa64:	2310      	movs	r3, #16
 800aa66:	77fb      	strb	r3, [r7, #31]
 800aa68:	bf00      	nop
 800aa6a:	e094      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a39      	ldr	r2, [pc, #228]	; (800ab58 <UART_SetConfig+0x310>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d124      	bne.n	800aac0 <UART_SetConfig+0x278>
 800aa76:	4b33      	ldr	r3, [pc, #204]	; (800ab44 <UART_SetConfig+0x2fc>)
 800aa78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa84:	d012      	beq.n	800aaac <UART_SetConfig+0x264>
 800aa86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa8a:	d802      	bhi.n	800aa92 <UART_SetConfig+0x24a>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d007      	beq.n	800aaa0 <UART_SetConfig+0x258>
 800aa90:	e012      	b.n	800aab8 <UART_SetConfig+0x270>
 800aa92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa96:	d006      	beq.n	800aaa6 <UART_SetConfig+0x25e>
 800aa98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa9c:	d009      	beq.n	800aab2 <UART_SetConfig+0x26a>
 800aa9e:	e00b      	b.n	800aab8 <UART_SetConfig+0x270>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	77fb      	strb	r3, [r7, #31]
 800aaa4:	e077      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	77fb      	strb	r3, [r7, #31]
 800aaaa:	e074      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aaac:	2304      	movs	r3, #4
 800aaae:	77fb      	strb	r3, [r7, #31]
 800aab0:	e071      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aab2:	2308      	movs	r3, #8
 800aab4:	77fb      	strb	r3, [r7, #31]
 800aab6:	e06e      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aab8:	2310      	movs	r3, #16
 800aaba:	77fb      	strb	r3, [r7, #31]
 800aabc:	bf00      	nop
 800aabe:	e06a      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a25      	ldr	r2, [pc, #148]	; (800ab5c <UART_SetConfig+0x314>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d124      	bne.n	800ab14 <UART_SetConfig+0x2cc>
 800aaca:	4b1e      	ldr	r3, [pc, #120]	; (800ab44 <UART_SetConfig+0x2fc>)
 800aacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad8:	d012      	beq.n	800ab00 <UART_SetConfig+0x2b8>
 800aada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aade:	d802      	bhi.n	800aae6 <UART_SetConfig+0x29e>
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d007      	beq.n	800aaf4 <UART_SetConfig+0x2ac>
 800aae4:	e012      	b.n	800ab0c <UART_SetConfig+0x2c4>
 800aae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaea:	d006      	beq.n	800aafa <UART_SetConfig+0x2b2>
 800aaec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aaf0:	d009      	beq.n	800ab06 <UART_SetConfig+0x2be>
 800aaf2:	e00b      	b.n	800ab0c <UART_SetConfig+0x2c4>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	77fb      	strb	r3, [r7, #31]
 800aaf8:	e04d      	b.n	800ab96 <UART_SetConfig+0x34e>
 800aafa:	2302      	movs	r3, #2
 800aafc:	77fb      	strb	r3, [r7, #31]
 800aafe:	e04a      	b.n	800ab96 <UART_SetConfig+0x34e>
 800ab00:	2304      	movs	r3, #4
 800ab02:	77fb      	strb	r3, [r7, #31]
 800ab04:	e047      	b.n	800ab96 <UART_SetConfig+0x34e>
 800ab06:	2308      	movs	r3, #8
 800ab08:	77fb      	strb	r3, [r7, #31]
 800ab0a:	e044      	b.n	800ab96 <UART_SetConfig+0x34e>
 800ab0c:	2310      	movs	r3, #16
 800ab0e:	77fb      	strb	r3, [r7, #31]
 800ab10:	bf00      	nop
 800ab12:	e040      	b.n	800ab96 <UART_SetConfig+0x34e>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a11      	ldr	r2, [pc, #68]	; (800ab60 <UART_SetConfig+0x318>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d139      	bne.n	800ab92 <UART_SetConfig+0x34a>
 800ab1e:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <UART_SetConfig+0x2fc>)
 800ab20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ab28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab2c:	d027      	beq.n	800ab7e <UART_SetConfig+0x336>
 800ab2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab32:	d817      	bhi.n	800ab64 <UART_SetConfig+0x31c>
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d01c      	beq.n	800ab72 <UART_SetConfig+0x32a>
 800ab38:	e027      	b.n	800ab8a <UART_SetConfig+0x342>
 800ab3a:	bf00      	nop
 800ab3c:	efff69f3 	.word	0xefff69f3
 800ab40:	40011000 	.word	0x40011000
 800ab44:	40023800 	.word	0x40023800
 800ab48:	40004400 	.word	0x40004400
 800ab4c:	40004800 	.word	0x40004800
 800ab50:	40004c00 	.word	0x40004c00
 800ab54:	40005000 	.word	0x40005000
 800ab58:	40011400 	.word	0x40011400
 800ab5c:	40007800 	.word	0x40007800
 800ab60:	40007c00 	.word	0x40007c00
 800ab64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab68:	d006      	beq.n	800ab78 <UART_SetConfig+0x330>
 800ab6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ab6e:	d009      	beq.n	800ab84 <UART_SetConfig+0x33c>
 800ab70:	e00b      	b.n	800ab8a <UART_SetConfig+0x342>
 800ab72:	2300      	movs	r3, #0
 800ab74:	77fb      	strb	r3, [r7, #31]
 800ab76:	e00e      	b.n	800ab96 <UART_SetConfig+0x34e>
 800ab78:	2302      	movs	r3, #2
 800ab7a:	77fb      	strb	r3, [r7, #31]
 800ab7c:	e00b      	b.n	800ab96 <UART_SetConfig+0x34e>
 800ab7e:	2304      	movs	r3, #4
 800ab80:	77fb      	strb	r3, [r7, #31]
 800ab82:	e008      	b.n	800ab96 <UART_SetConfig+0x34e>
 800ab84:	2308      	movs	r3, #8
 800ab86:	77fb      	strb	r3, [r7, #31]
 800ab88:	e005      	b.n	800ab96 <UART_SetConfig+0x34e>
 800ab8a:	2310      	movs	r3, #16
 800ab8c:	77fb      	strb	r3, [r7, #31]
 800ab8e:	bf00      	nop
 800ab90:	e001      	b.n	800ab96 <UART_SetConfig+0x34e>
 800ab92:	2310      	movs	r3, #16
 800ab94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab9e:	d17f      	bne.n	800aca0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800aba0:	7ffb      	ldrb	r3, [r7, #31]
 800aba2:	2b08      	cmp	r3, #8
 800aba4:	d85c      	bhi.n	800ac60 <UART_SetConfig+0x418>
 800aba6:	a201      	add	r2, pc, #4	; (adr r2, 800abac <UART_SetConfig+0x364>)
 800aba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abac:	0800abd1 	.word	0x0800abd1
 800abb0:	0800abf1 	.word	0x0800abf1
 800abb4:	0800ac11 	.word	0x0800ac11
 800abb8:	0800ac61 	.word	0x0800ac61
 800abbc:	0800ac29 	.word	0x0800ac29
 800abc0:	0800ac61 	.word	0x0800ac61
 800abc4:	0800ac61 	.word	0x0800ac61
 800abc8:	0800ac61 	.word	0x0800ac61
 800abcc:	0800ac49 	.word	0x0800ac49
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abd0:	f7fd f95e 	bl	8007e90 <HAL_RCC_GetPCLK1Freq>
 800abd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	005a      	lsls	r2, r3, #1
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	085b      	lsrs	r3, r3, #1
 800abe0:	441a      	add	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abea:	b29b      	uxth	r3, r3
 800abec:	61bb      	str	r3, [r7, #24]
        break;
 800abee:	e03a      	b.n	800ac66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abf0:	f7fd f962 	bl	8007eb8 <HAL_RCC_GetPCLK2Freq>
 800abf4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	005a      	lsls	r2, r3, #1
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	085b      	lsrs	r3, r3, #1
 800ac00:	441a      	add	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	61bb      	str	r3, [r7, #24]
        break;
 800ac0e:	e02a      	b.n	800ac66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	085a      	lsrs	r2, r3, #1
 800ac16:	4b5f      	ldr	r3, [pc, #380]	; (800ad94 <UART_SetConfig+0x54c>)
 800ac18:	4413      	add	r3, r2
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	6852      	ldr	r2, [r2, #4]
 800ac1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	61bb      	str	r3, [r7, #24]
        break;
 800ac26:	e01e      	b.n	800ac66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac28:	f7fd f874 	bl	8007d14 <HAL_RCC_GetSysClockFreq>
 800ac2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	005a      	lsls	r2, r3, #1
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	085b      	lsrs	r3, r3, #1
 800ac38:	441a      	add	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	61bb      	str	r3, [r7, #24]
        break;
 800ac46:	e00e      	b.n	800ac66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	085b      	lsrs	r3, r3, #1
 800ac4e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	61bb      	str	r3, [r7, #24]
        break;
 800ac5e:	e002      	b.n	800ac66 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	75fb      	strb	r3, [r7, #23]
        break;
 800ac64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	2b0f      	cmp	r3, #15
 800ac6a:	d916      	bls.n	800ac9a <UART_SetConfig+0x452>
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac72:	d212      	bcs.n	800ac9a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	f023 030f 	bic.w	r3, r3, #15
 800ac7c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	085b      	lsrs	r3, r3, #1
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	f003 0307 	and.w	r3, r3, #7
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	897b      	ldrh	r3, [r7, #10]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	897a      	ldrh	r2, [r7, #10]
 800ac96:	60da      	str	r2, [r3, #12]
 800ac98:	e070      	b.n	800ad7c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	75fb      	strb	r3, [r7, #23]
 800ac9e:	e06d      	b.n	800ad7c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800aca0:	7ffb      	ldrb	r3, [r7, #31]
 800aca2:	2b08      	cmp	r3, #8
 800aca4:	d859      	bhi.n	800ad5a <UART_SetConfig+0x512>
 800aca6:	a201      	add	r2, pc, #4	; (adr r2, 800acac <UART_SetConfig+0x464>)
 800aca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acac:	0800acd1 	.word	0x0800acd1
 800acb0:	0800acef 	.word	0x0800acef
 800acb4:	0800ad0d 	.word	0x0800ad0d
 800acb8:	0800ad5b 	.word	0x0800ad5b
 800acbc:	0800ad25 	.word	0x0800ad25
 800acc0:	0800ad5b 	.word	0x0800ad5b
 800acc4:	0800ad5b 	.word	0x0800ad5b
 800acc8:	0800ad5b 	.word	0x0800ad5b
 800accc:	0800ad43 	.word	0x0800ad43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acd0:	f7fd f8de 	bl	8007e90 <HAL_RCC_GetPCLK1Freq>
 800acd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	085a      	lsrs	r2, r3, #1
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	441a      	add	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ace8:	b29b      	uxth	r3, r3
 800acea:	61bb      	str	r3, [r7, #24]
        break;
 800acec:	e038      	b.n	800ad60 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acee:	f7fd f8e3 	bl	8007eb8 <HAL_RCC_GetPCLK2Freq>
 800acf2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	085a      	lsrs	r2, r3, #1
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	441a      	add	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	61bb      	str	r3, [r7, #24]
        break;
 800ad0a:	e029      	b.n	800ad60 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	085a      	lsrs	r2, r3, #1
 800ad12:	4b21      	ldr	r3, [pc, #132]	; (800ad98 <UART_SetConfig+0x550>)
 800ad14:	4413      	add	r3, r2
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	6852      	ldr	r2, [r2, #4]
 800ad1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	61bb      	str	r3, [r7, #24]
        break;
 800ad22:	e01d      	b.n	800ad60 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad24:	f7fc fff6 	bl	8007d14 <HAL_RCC_GetSysClockFreq>
 800ad28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	085a      	lsrs	r2, r3, #1
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	441a      	add	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	61bb      	str	r3, [r7, #24]
        break;
 800ad40:	e00e      	b.n	800ad60 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	085b      	lsrs	r3, r3, #1
 800ad48:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	61bb      	str	r3, [r7, #24]
        break;
 800ad58:	e002      	b.n	800ad60 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	75fb      	strb	r3, [r7, #23]
        break;
 800ad5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	2b0f      	cmp	r3, #15
 800ad64:	d908      	bls.n	800ad78 <UART_SetConfig+0x530>
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad6c:	d204      	bcs.n	800ad78 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	69ba      	ldr	r2, [r7, #24]
 800ad74:	60da      	str	r2, [r3, #12]
 800ad76:	e001      	b.n	800ad7c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ad88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3720      	adds	r7, #32
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	01e84800 	.word	0x01e84800
 800ad98:	00f42400 	.word	0x00f42400

0800ad9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada8:	f003 0301 	and.w	r3, r3, #1
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00a      	beq.n	800adc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	430a      	orrs	r2, r1
 800adc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00a      	beq.n	800ade8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	430a      	orrs	r2, r1
 800ade6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adec:	f003 0304 	and.w	r3, r3, #4
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00a      	beq.n	800ae0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	430a      	orrs	r2, r1
 800ae08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0e:	f003 0308 	and.w	r3, r3, #8
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00a      	beq.n	800ae2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	430a      	orrs	r2, r1
 800ae2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae30:	f003 0310 	and.w	r3, r3, #16
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00a      	beq.n	800ae4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	430a      	orrs	r2, r1
 800ae4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae52:	f003 0320 	and.w	r3, r3, #32
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	430a      	orrs	r2, r1
 800ae6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d01a      	beq.n	800aeb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae9a:	d10a      	bne.n	800aeb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00a      	beq.n	800aed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	430a      	orrs	r2, r1
 800aed2:	605a      	str	r2, [r3, #4]
  }
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af02      	add	r7, sp, #8
 800aee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aeee:	f7f9 fcf1 	bl	80048d4 <HAL_GetTick>
 800aef2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0308 	and.w	r3, r3, #8
 800aefe:	2b08      	cmp	r3, #8
 800af00:	d10e      	bne.n	800af20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f814 	bl	800af3e <UART_WaitOnFlagUntilTimeout>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d001      	beq.n	800af20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af1c:	2303      	movs	r3, #3
 800af1e:	e00a      	b.n	800af36 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2220      	movs	r2, #32
 800af24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2220      	movs	r2, #32
 800af2a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b084      	sub	sp, #16
 800af42:	af00      	add	r7, sp, #0
 800af44:	60f8      	str	r0, [r7, #12]
 800af46:	60b9      	str	r1, [r7, #8]
 800af48:	603b      	str	r3, [r7, #0]
 800af4a:	4613      	mov	r3, r2
 800af4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af4e:	e05d      	b.n	800b00c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af56:	d059      	beq.n	800b00c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af58:	f7f9 fcbc 	bl	80048d4 <HAL_GetTick>
 800af5c:	4602      	mov	r2, r0
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	69ba      	ldr	r2, [r7, #24]
 800af64:	429a      	cmp	r2, r3
 800af66:	d302      	bcc.n	800af6e <UART_WaitOnFlagUntilTimeout+0x30>
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d11b      	bne.n	800afa6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af7c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	689a      	ldr	r2, [r3, #8]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f022 0201 	bic.w	r2, r2, #1
 800af8c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2220      	movs	r2, #32
 800af92:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2220      	movs	r2, #32
 800af98:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800afa2:	2303      	movs	r3, #3
 800afa4:	e042      	b.n	800b02c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0304 	and.w	r3, r3, #4
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d02b      	beq.n	800b00c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afc2:	d123      	bne.n	800b00c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afcc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800afdc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	689a      	ldr	r2, [r3, #8]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f022 0201 	bic.w	r2, r2, #1
 800afec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2220      	movs	r2, #32
 800aff2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2220      	movs	r2, #32
 800aff8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2220      	movs	r2, #32
 800affe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b008:	2303      	movs	r3, #3
 800b00a:	e00f      	b.n	800b02c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	69da      	ldr	r2, [r3, #28]
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	4013      	ands	r3, r2
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	429a      	cmp	r2, r3
 800b01a:	bf0c      	ite	eq
 800b01c:	2301      	moveq	r3, #1
 800b01e:	2300      	movne	r3, #0
 800b020:	b2db      	uxtb	r3, r3
 800b022:	461a      	mov	r2, r3
 800b024:	79fb      	ldrb	r3, [r7, #7]
 800b026:	429a      	cmp	r2, r3
 800b028:	d092      	beq.n	800af50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b04a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689a      	ldr	r2, [r3, #8]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f022 0201 	bic.w	r2, r2, #1
 800b05a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2220      	movs	r2, #32
 800b060:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b080:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2200      	movs	r2, #0
 800b086:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f7ff fbce 	bl	800a834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b098:	bf00      	nop
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0ac:	2b21      	cmp	r3, #33	; 0x21
 800b0ae:	d12a      	bne.n	800b106 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d110      	bne.n	800b0de <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0ca:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0da:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b0dc:	e013      	b.n	800b106 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0e2:	781a      	ldrb	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b106:	bf00      	nop
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b112:	b480      	push	{r7}
 800b114:	b085      	sub	sp, #20
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b11e:	2b21      	cmp	r3, #33	; 0x21
 800b120:	d12f      	bne.n	800b182 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b128:	b29b      	uxth	r3, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d110      	bne.n	800b150 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b13c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b14c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b14e:	e018      	b.n	800b182 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b154:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b164:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b16a:	1c9a      	adds	r2, r3, #2
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b176:	b29b      	uxth	r3, r3
 800b178:	3b01      	subs	r3, #1
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b182:	bf00      	nop
 800b184:	3714      	adds	r7, #20
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b082      	sub	sp, #8
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1a4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2220      	movs	r2, #32
 800b1aa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7ff fb34 	bl	800a820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1b8:	bf00      	nop
 800b1ba:	3708      	adds	r7, #8
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1ce:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1d4:	2b22      	cmp	r3, #34	; 0x22
 800b1d6:	d13a      	bne.n	800b24e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1de:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b1e0:	89bb      	ldrh	r3, [r7, #12]
 800b1e2:	b2d9      	uxtb	r1, r3
 800b1e4:	89fb      	ldrh	r3, [r7, #14]
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ec:	400a      	ands	r2, r1
 800b1ee:	b2d2      	uxtb	r2, r2
 800b1f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f6:	1c5a      	adds	r2, r3, #1
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b202:	b29b      	uxth	r3, r3
 800b204:	3b01      	subs	r3, #1
 800b206:	b29a      	uxth	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b214:	b29b      	uxth	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d121      	bne.n	800b25e <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b228:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	689a      	ldr	r2, [r3, #8]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f022 0201 	bic.w	r2, r2, #1
 800b238:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2220      	movs	r2, #32
 800b23e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7f6 fcd2 	bl	8001bf0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b24c:	e007      	b.n	800b25e <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	699a      	ldr	r2, [r3, #24]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f042 0208 	orr.w	r2, r2, #8
 800b25c:	619a      	str	r2, [r3, #24]
}
 800b25e:	bf00      	nop
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b084      	sub	sp, #16
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b274:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b27a:	2b22      	cmp	r3, #34	; 0x22
 800b27c:	d13a      	bne.n	800b2f4 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b284:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b28c:	89ba      	ldrh	r2, [r7, #12]
 800b28e:	89fb      	ldrh	r3, [r7, #14]
 800b290:	4013      	ands	r3, r2
 800b292:	b29a      	uxth	r2, r3
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b29c:	1c9a      	adds	r2, r3, #2
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d121      	bne.n	800b304 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b2ce:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	689a      	ldr	r2, [r3, #8]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f022 0201 	bic.w	r2, r2, #1
 800b2de:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7f6 fc7f 	bl	8001bf0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2f2:	e007      	b.n	800b304 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	699a      	ldr	r2, [r3, #24]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f042 0208 	orr.w	r2, r2, #8
 800b302:	619a      	str	r2, [r3, #24]
}
 800b304:	bf00      	nop
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b316:	2300      	movs	r3, #0
 800b318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d027      	beq.n	800b376 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	4b2f      	ldr	r3, [pc, #188]	; (800b3ec <FMC_SDRAM_Init+0xe0>)
 800b330:	4013      	ands	r3, r2
 800b332:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b33c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b342:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b348:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b34e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b354:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b35a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b360:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b366:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	e032      	b.n	800b3dc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b382:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b38c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b392:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4313      	orrs	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	4b12      	ldr	r3, [pc, #72]	; (800b3ec <FMC_SDRAM_Init+0xe0>)
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3b0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b3b6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b3bc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b3c2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b3c8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3ca:	68ba      	ldr	r2, [r7, #8]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	ffff8000 	.word	0xffff8000

0800b3f0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d02e      	beq.n	800b468 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b416:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	3b01      	subs	r3, #1
 800b424:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b426:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b430:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	3b01      	subs	r3, #1
 800b438:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b43a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	3b01      	subs	r3, #1
 800b442:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b444:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b44e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	3b01      	subs	r3, #1
 800b456:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b458:	4313      	orrs	r3, r2
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	609a      	str	r2, [r3, #8]
 800b466:	e039      	b.n	800b4dc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	4b1e      	ldr	r3, [pc, #120]	; (800b4ec <FMC_SDRAM_Timing_Init+0xfc>)
 800b472:	4013      	ands	r3, r2
 800b474:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	3b01      	subs	r3, #1
 800b47c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	3b01      	subs	r3, #1
 800b484:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b486:	4313      	orrs	r3, r2
 800b488:	697a      	ldr	r2, [r7, #20]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b49a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4aa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b4b4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b4be:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	693a      	ldr	r2, [r7, #16]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	693a      	ldr	r2, [r7, #16]
 800b4da:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	371c      	adds	r7, #28
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	ff0f0fff 	.word	0xff0f0fff

0800b4f0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b087      	sub	sp, #28
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b508:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	3b01      	subs	r3, #1
 800b510:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b512:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b51a:	4313      	orrs	r3, r2
 800b51c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	371c      	adds	r7, #28
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b532:	b480      	push	{r7}
 800b534:	b083      	sub	sp, #12
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	695a      	ldr	r2, [r3, #20]
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	005b      	lsls	r3, r3, #1
 800b544:	431a      	orrs	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	4603      	mov	r3, r0
 800b560:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b562:	2300      	movs	r3, #0
 800b564:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b56a:	2b84      	cmp	r3, #132	; 0x84
 800b56c:	d005      	beq.n	800b57a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b56e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	4413      	add	r3, r2
 800b576:	3303      	adds	r3, #3
 800b578:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b57a:	68fb      	ldr	r3, [r7, #12]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b58c:	f001 f8ec 	bl	800c768 <vTaskStartScheduler>
  
  return osOK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	bd80      	pop	{r7, pc}

0800b596 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b596:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b598:	b089      	sub	sp, #36	; 0x24
 800b59a:	af04      	add	r7, sp, #16
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d020      	beq.n	800b5ea <osThreadCreate+0x54>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	699b      	ldr	r3, [r3, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d01c      	beq.n	800b5ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	685c      	ldr	r4, [r3, #4]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681d      	ldr	r5, [r3, #0]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	691e      	ldr	r6, [r3, #16]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7ff ffc8 	bl	800b558 <makeFreeRtosPriority>
 800b5c8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5d2:	9202      	str	r2, [sp, #8]
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	9100      	str	r1, [sp, #0]
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	4632      	mov	r2, r6
 800b5dc:	4629      	mov	r1, r5
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 fdd6 	bl	800c190 <xTaskCreateStatic>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	e01c      	b.n	800b624 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	685c      	ldr	r4, [r3, #4]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5f6:	b29e      	uxth	r6, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff ffaa 	bl	800b558 <makeFreeRtosPriority>
 800b604:	4602      	mov	r2, r0
 800b606:	f107 030c 	add.w	r3, r7, #12
 800b60a:	9301      	str	r3, [sp, #4]
 800b60c:	9200      	str	r2, [sp, #0]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	4632      	mov	r2, r6
 800b612:	4629      	mov	r1, r5
 800b614:	4620      	mov	r0, r4
 800b616:	f000 fe1b 	bl	800c250 <xTaskCreate>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d001      	beq.n	800b624 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b620:	2300      	movs	r3, #0
 800b622:	e000      	b.n	800b626 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b624:	68fb      	ldr	r3, [r7, #12]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3714      	adds	r7, #20
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b62e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b084      	sub	sp, #16
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d001      	beq.n	800b644 <osDelay+0x16>
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	e000      	b.n	800b646 <osDelay+0x18>
 800b644:	2301      	movs	r3, #1
 800b646:	4618      	mov	r0, r3
 800b648:	f000 ffc4 	bl	800c5d4 <vTaskDelay>
  
  return osOK;
 800b64c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b082      	sub	sp, #8
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d007      	beq.n	800b676 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	4619      	mov	r1, r3
 800b66c:	2001      	movs	r0, #1
 800b66e:	f000 fa60 	bl	800bb32 <xQueueCreateMutexStatic>
 800b672:	4603      	mov	r3, r0
 800b674:	e003      	b.n	800b67e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b676:	2001      	movs	r0, #1
 800b678:	f000 fa43 	bl	800bb02 <xQueueCreateMutex>
 800b67c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b686:	b590      	push	{r4, r7, lr}
 800b688:	b085      	sub	sp, #20
 800b68a:	af02      	add	r7, sp, #8
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d012      	beq.n	800b6be <osMessageCreate+0x38>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00e      	beq.n	800b6be <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6818      	ldr	r0, [r3, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6859      	ldr	r1, [r3, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	689a      	ldr	r2, [r3, #8]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	68dc      	ldr	r4, [r3, #12]
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	4623      	mov	r3, r4
 800b6b6:	f000 f92d 	bl	800b914 <xQueueGenericCreateStatic>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	e008      	b.n	800b6d0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6818      	ldr	r0, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	f000 f9a0 	bl	800ba0e <xQueueGenericCreate>
 800b6ce:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd90      	pop	{r4, r7, pc}

0800b6d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f103 0208 	add.w	r2, r3, #8
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f103 0208 	add.w	r2, r3, #8
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f103 0208 	add.w	r2, r3, #8
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b726:	bf00      	nop
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b732:	b480      	push	{r7}
 800b734:	b085      	sub	sp, #20
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	689a      	ldr	r2, [r3, #8]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	601a      	str	r2, [r3, #0]
}
 800b76e:	bf00      	nop
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b77a:	b480      	push	{r7}
 800b77c:	b085      	sub	sp, #20
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b790:	d103      	bne.n	800b79a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	60fb      	str	r3, [r7, #12]
 800b798:	e00c      	b.n	800b7b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	3308      	adds	r3, #8
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	e002      	b.n	800b7a8 <vListInsert+0x2e>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d2f6      	bcs.n	800b7a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	685a      	ldr	r2, [r3, #4]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	601a      	str	r2, [r3, #0]
}
 800b7e0:	bf00      	nop
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	6892      	ldr	r2, [r2, #8]
 800b802:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	6852      	ldr	r2, [r2, #4]
 800b80c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	429a      	cmp	r2, r3
 800b816:	d103      	bne.n	800b820 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689a      	ldr	r2, [r3, #8]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	1e5a      	subs	r2, r3, #1
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d10b      	bne.n	800b86c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b858:	b672      	cpsid	i
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	b662      	cpsie	i
 800b868:	60bb      	str	r3, [r7, #8]
 800b86a:	e7fe      	b.n	800b86a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800b86c:	f001 ff04 	bl	800d678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b878:	68f9      	ldr	r1, [r7, #12]
 800b87a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b87c:	fb01 f303 	mul.w	r3, r1, r3
 800b880:	441a      	add	r2, r3
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b89c:	3b01      	subs	r3, #1
 800b89e:	68f9      	ldr	r1, [r7, #12]
 800b8a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8a2:	fb01 f303 	mul.w	r3, r1, r3
 800b8a6:	441a      	add	r2, r3
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	22ff      	movs	r2, #255	; 0xff
 800b8b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	22ff      	movs	r2, #255	; 0xff
 800b8b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d114      	bne.n	800b8ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d01a      	beq.n	800b900 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3310      	adds	r3, #16
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f001 f9ca 	bl	800cc68 <xTaskRemoveFromEventList>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d012      	beq.n	800b900 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b8da:	4b0d      	ldr	r3, [pc, #52]	; (800b910 <xQueueGenericReset+0xd0>)
 800b8dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e0:	601a      	str	r2, [r3, #0]
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	e009      	b.n	800b900 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	3310      	adds	r3, #16
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff fef1 	bl	800b6d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	3324      	adds	r3, #36	; 0x24
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7ff feec 	bl	800b6d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b900:	f001 feec 	bl	800d6dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b904:	2301      	movs	r3, #1
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	e000ed04 	.word	0xe000ed04

0800b914 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08e      	sub	sp, #56	; 0x38
 800b918:	af02      	add	r7, sp, #8
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
 800b920:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10b      	bne.n	800b940 <xQueueGenericCreateStatic+0x2c>
 800b928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92c:	b672      	cpsid	i
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	b662      	cpsie	i
 800b93c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b93e:	e7fe      	b.n	800b93e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d10b      	bne.n	800b95e <xQueueGenericCreateStatic+0x4a>
 800b946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94a:	b672      	cpsid	i
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	b662      	cpsie	i
 800b95a:	627b      	str	r3, [r7, #36]	; 0x24
 800b95c:	e7fe      	b.n	800b95c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <xQueueGenericCreateStatic+0x56>
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <xQueueGenericCreateStatic+0x5a>
 800b96a:	2301      	movs	r3, #1
 800b96c:	e000      	b.n	800b970 <xQueueGenericCreateStatic+0x5c>
 800b96e:	2300      	movs	r3, #0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10b      	bne.n	800b98c <xQueueGenericCreateStatic+0x78>
 800b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b978:	b672      	cpsid	i
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	b662      	cpsie	i
 800b988:	623b      	str	r3, [r7, #32]
 800b98a:	e7fe      	b.n	800b98a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d102      	bne.n	800b998 <xQueueGenericCreateStatic+0x84>
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d101      	bne.n	800b99c <xQueueGenericCreateStatic+0x88>
 800b998:	2301      	movs	r3, #1
 800b99a:	e000      	b.n	800b99e <xQueueGenericCreateStatic+0x8a>
 800b99c:	2300      	movs	r3, #0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d10b      	bne.n	800b9ba <xQueueGenericCreateStatic+0xa6>
 800b9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a6:	b672      	cpsid	i
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	b662      	cpsie	i
 800b9b6:	61fb      	str	r3, [r7, #28]
 800b9b8:	e7fe      	b.n	800b9b8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b9ba:	2348      	movs	r3, #72	; 0x48
 800b9bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	2b48      	cmp	r3, #72	; 0x48
 800b9c2:	d00b      	beq.n	800b9dc <xQueueGenericCreateStatic+0xc8>
 800b9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c8:	b672      	cpsid	i
 800b9ca:	f383 8811 	msr	BASEPRI, r3
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f3bf 8f4f 	dsb	sy
 800b9d6:	b662      	cpsie	i
 800b9d8:	61bb      	str	r3, [r7, #24]
 800b9da:	e7fe      	b.n	800b9da <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00d      	beq.n	800ba04 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	68b9      	ldr	r1, [r7, #8]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 f846 	bl	800ba90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3730      	adds	r7, #48	; 0x30
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b08a      	sub	sp, #40	; 0x28
 800ba12:	af02      	add	r7, sp, #8
 800ba14:	60f8      	str	r0, [r7, #12]
 800ba16:	60b9      	str	r1, [r7, #8]
 800ba18:	4613      	mov	r3, r2
 800ba1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10b      	bne.n	800ba3a <xQueueGenericCreate+0x2c>
 800ba22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba26:	b672      	cpsid	i
 800ba28:	f383 8811 	msr	BASEPRI, r3
 800ba2c:	f3bf 8f6f 	isb	sy
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	b662      	cpsie	i
 800ba36:	613b      	str	r3, [r7, #16]
 800ba38:	e7fe      	b.n	800ba38 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d102      	bne.n	800ba46 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ba40:	2300      	movs	r3, #0
 800ba42:	61fb      	str	r3, [r7, #28]
 800ba44:	e004      	b.n	800ba50 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	fb02 f303 	mul.w	r3, r2, r3
 800ba4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	3348      	adds	r3, #72	; 0x48
 800ba54:	4618      	mov	r0, r3
 800ba56:	f001 feef 	bl	800d838 <pvPortMalloc>
 800ba5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d011      	beq.n	800ba86 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	3348      	adds	r3, #72	; 0x48
 800ba6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba74:	79fa      	ldrb	r2, [r7, #7]
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	697a      	ldr	r2, [r7, #20]
 800ba7e:	68b9      	ldr	r1, [r7, #8]
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f000 f805 	bl	800ba90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba86:	69bb      	ldr	r3, [r7, #24]
	}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3720      	adds	r7, #32
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
 800ba9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d103      	bne.n	800baac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	69ba      	ldr	r2, [r7, #24]
 800baa8:	601a      	str	r2, [r3, #0]
 800baaa:	e002      	b.n	800bab2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800babe:	2101      	movs	r1, #1
 800bac0:	69b8      	ldr	r0, [r7, #24]
 800bac2:	f7ff febd 	bl	800b840 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bac6:	bf00      	nop
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b082      	sub	sp, #8
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d00e      	beq.n	800bafa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800baee:	2300      	movs	r3, #0
 800baf0:	2200      	movs	r2, #0
 800baf2:	2100      	movs	r1, #0
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 f837 	bl	800bb68 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bafa:	bf00      	nop
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b086      	sub	sp, #24
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	4603      	mov	r3, r0
 800bb0a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	617b      	str	r3, [r7, #20]
 800bb10:	2300      	movs	r3, #0
 800bb12:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	461a      	mov	r2, r3
 800bb18:	6939      	ldr	r1, [r7, #16]
 800bb1a:	6978      	ldr	r0, [r7, #20]
 800bb1c:	f7ff ff77 	bl	800ba0e <xQueueGenericCreate>
 800bb20:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f7ff ffd3 	bl	800bace <prvInitialiseMutex>

		return xNewQueue;
 800bb28:	68fb      	ldr	r3, [r7, #12]
	}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3718      	adds	r7, #24
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b088      	sub	sp, #32
 800bb36:	af02      	add	r7, sp, #8
 800bb38:	4603      	mov	r3, r0
 800bb3a:	6039      	str	r1, [r7, #0]
 800bb3c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	617b      	str	r3, [r7, #20]
 800bb42:	2300      	movs	r3, #0
 800bb44:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bb46:	79fb      	ldrb	r3, [r7, #7]
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	6939      	ldr	r1, [r7, #16]
 800bb50:	6978      	ldr	r0, [r7, #20]
 800bb52:	f7ff fedf 	bl	800b914 <xQueueGenericCreateStatic>
 800bb56:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f7ff ffb8 	bl	800bace <prvInitialiseMutex>

		return xNewQueue;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
	}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b08e      	sub	sp, #56	; 0x38
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
 800bb74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb76:	2300      	movs	r3, #0
 800bb78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10b      	bne.n	800bb9c <xQueueGenericSend+0x34>
 800bb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb88:	b672      	cpsid	i
 800bb8a:	f383 8811 	msr	BASEPRI, r3
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f3bf 8f4f 	dsb	sy
 800bb96:	b662      	cpsie	i
 800bb98:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb9a:	e7fe      	b.n	800bb9a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d103      	bne.n	800bbaa <xQueueGenericSend+0x42>
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <xQueueGenericSend+0x46>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e000      	b.n	800bbb0 <xQueueGenericSend+0x48>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d10b      	bne.n	800bbcc <xQueueGenericSend+0x64>
 800bbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb8:	b672      	cpsid	i
 800bbba:	f383 8811 	msr	BASEPRI, r3
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f3bf 8f4f 	dsb	sy
 800bbc6:	b662      	cpsie	i
 800bbc8:	627b      	str	r3, [r7, #36]	; 0x24
 800bbca:	e7fe      	b.n	800bbca <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	d103      	bne.n	800bbda <xQueueGenericSend+0x72>
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d101      	bne.n	800bbde <xQueueGenericSend+0x76>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e000      	b.n	800bbe0 <xQueueGenericSend+0x78>
 800bbde:	2300      	movs	r3, #0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10b      	bne.n	800bbfc <xQueueGenericSend+0x94>
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	b672      	cpsid	i
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	b662      	cpsie	i
 800bbf8:	623b      	str	r3, [r7, #32]
 800bbfa:	e7fe      	b.n	800bbfa <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbfc:	f001 f9f4 	bl	800cfe8 <xTaskGetSchedulerState>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d102      	bne.n	800bc0c <xQueueGenericSend+0xa4>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <xQueueGenericSend+0xa8>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e000      	b.n	800bc12 <xQueueGenericSend+0xaa>
 800bc10:	2300      	movs	r3, #0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10b      	bne.n	800bc2e <xQueueGenericSend+0xc6>
 800bc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1a:	b672      	cpsid	i
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	b662      	cpsie	i
 800bc2a:	61fb      	str	r3, [r7, #28]
 800bc2c:	e7fe      	b.n	800bc2c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc2e:	f001 fd23 	bl	800d678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d302      	bcc.n	800bc44 <xQueueGenericSend+0xdc>
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d129      	bne.n	800bc98 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc44:	683a      	ldr	r2, [r7, #0]
 800bc46:	68b9      	ldr	r1, [r7, #8]
 800bc48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc4a:	f000 f9b7 	bl	800bfbc <prvCopyDataToQueue>
 800bc4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d010      	beq.n	800bc7a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5a:	3324      	adds	r3, #36	; 0x24
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f001 f803 	bl	800cc68 <xTaskRemoveFromEventList>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d013      	beq.n	800bc90 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc68:	4b3f      	ldr	r3, [pc, #252]	; (800bd68 <xQueueGenericSend+0x200>)
 800bc6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	e00a      	b.n	800bc90 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d007      	beq.n	800bc90 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc80:	4b39      	ldr	r3, [pc, #228]	; (800bd68 <xQueueGenericSend+0x200>)
 800bc82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc86:	601a      	str	r2, [r3, #0]
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc90:	f001 fd24 	bl	800d6dc <vPortExitCritical>
				return pdPASS;
 800bc94:	2301      	movs	r3, #1
 800bc96:	e063      	b.n	800bd60 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d103      	bne.n	800bca6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc9e:	f001 fd1d 	bl	800d6dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bca2:	2300      	movs	r3, #0
 800bca4:	e05c      	b.n	800bd60 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d106      	bne.n	800bcba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcac:	f107 0314 	add.w	r3, r7, #20
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f001 f83d 	bl	800cd30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcba:	f001 fd0f 	bl	800d6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcbe:	f000 fdb5 	bl	800c82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcc2:	f001 fcd9 	bl	800d678 <vPortEnterCritical>
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bccc:	b25b      	sxtb	r3, r3
 800bcce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd2:	d103      	bne.n	800bcdc <xQueueGenericSend+0x174>
 800bcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bce2:	b25b      	sxtb	r3, r3
 800bce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce8:	d103      	bne.n	800bcf2 <xQueueGenericSend+0x18a>
 800bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcf2:	f001 fcf3 	bl	800d6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcf6:	1d3a      	adds	r2, r7, #4
 800bcf8:	f107 0314 	add.w	r3, r7, #20
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f001 f82c 	bl	800cd5c <xTaskCheckForTimeOut>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d124      	bne.n	800bd54 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd0c:	f000 fa28 	bl	800c160 <prvIsQueueFull>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d018      	beq.n	800bd48 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	3310      	adds	r3, #16
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f000 ff7c 	bl	800cc1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd26:	f000 f9b3 	bl	800c090 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd2a:	f000 fd8d 	bl	800c848 <xTaskResumeAll>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f47f af7c 	bne.w	800bc2e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bd36:	4b0c      	ldr	r3, [pc, #48]	; (800bd68 <xQueueGenericSend+0x200>)
 800bd38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	e772      	b.n	800bc2e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd4a:	f000 f9a1 	bl	800c090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd4e:	f000 fd7b 	bl	800c848 <xTaskResumeAll>
 800bd52:	e76c      	b.n	800bc2e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd56:	f000 f99b 	bl	800c090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd5a:	f000 fd75 	bl	800c848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3738      	adds	r7, #56	; 0x38
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	e000ed04 	.word	0xe000ed04

0800bd6c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b08e      	sub	sp, #56	; 0x38
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd76:	2300      	movs	r3, #0
 800bd78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10b      	bne.n	800bda0 <xQueueSemaphoreTake+0x34>
 800bd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8c:	b672      	cpsid	i
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	b662      	cpsie	i
 800bd9c:	623b      	str	r3, [r7, #32]
 800bd9e:	e7fe      	b.n	800bd9e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00b      	beq.n	800bdc0 <xQueueSemaphoreTake+0x54>
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	b672      	cpsid	i
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	b662      	cpsie	i
 800bdbc:	61fb      	str	r3, [r7, #28]
 800bdbe:	e7fe      	b.n	800bdbe <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdc0:	f001 f912 	bl	800cfe8 <xTaskGetSchedulerState>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d102      	bne.n	800bdd0 <xQueueSemaphoreTake+0x64>
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d101      	bne.n	800bdd4 <xQueueSemaphoreTake+0x68>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e000      	b.n	800bdd6 <xQueueSemaphoreTake+0x6a>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10b      	bne.n	800bdf2 <xQueueSemaphoreTake+0x86>
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	b672      	cpsid	i
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	b662      	cpsie	i
 800bdee:	61bb      	str	r3, [r7, #24]
 800bdf0:	e7fe      	b.n	800bdf0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdf2:	f001 fc41 	bl	800d678 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d024      	beq.n	800be4c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	1e5a      	subs	r2, r3, #1
 800be06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be08:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d104      	bne.n	800be1c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800be12:	f001 faab 	bl	800d36c <pvTaskIncrementMutexHeldCount>
 800be16:	4602      	mov	r2, r0
 800be18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00f      	beq.n	800be44 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	3310      	adds	r3, #16
 800be28:	4618      	mov	r0, r3
 800be2a:	f000 ff1d 	bl	800cc68 <xTaskRemoveFromEventList>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be34:	4b54      	ldr	r3, [pc, #336]	; (800bf88 <xQueueSemaphoreTake+0x21c>)
 800be36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be3a:	601a      	str	r2, [r3, #0]
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be44:	f001 fc4a 	bl	800d6dc <vPortExitCritical>
				return pdPASS;
 800be48:	2301      	movs	r3, #1
 800be4a:	e098      	b.n	800bf7e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d112      	bne.n	800be78 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <xQueueSemaphoreTake+0x104>
 800be58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5c:	b672      	cpsid	i
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	b662      	cpsie	i
 800be6c:	617b      	str	r3, [r7, #20]
 800be6e:	e7fe      	b.n	800be6e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800be70:	f001 fc34 	bl	800d6dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be74:	2300      	movs	r3, #0
 800be76:	e082      	b.n	800bf7e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d106      	bne.n	800be8c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be7e:	f107 030c 	add.w	r3, r7, #12
 800be82:	4618      	mov	r0, r3
 800be84:	f000 ff54 	bl	800cd30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be88:	2301      	movs	r3, #1
 800be8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be8c:	f001 fc26 	bl	800d6dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be90:	f000 fccc 	bl	800c82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be94:	f001 fbf0 	bl	800d678 <vPortEnterCritical>
 800be98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be9e:	b25b      	sxtb	r3, r3
 800bea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea4:	d103      	bne.n	800beae <xQueueSemaphoreTake+0x142>
 800bea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800beae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800beb4:	b25b      	sxtb	r3, r3
 800beb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beba:	d103      	bne.n	800bec4 <xQueueSemaphoreTake+0x158>
 800bebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebe:	2200      	movs	r2, #0
 800bec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bec4:	f001 fc0a 	bl	800d6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bec8:	463a      	mov	r2, r7
 800beca:	f107 030c 	add.w	r3, r7, #12
 800bece:	4611      	mov	r1, r2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 ff43 	bl	800cd5c <xTaskCheckForTimeOut>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d132      	bne.n	800bf42 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bedc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bede:	f000 f929 	bl	800c134 <prvIsQueueEmpty>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d026      	beq.n	800bf36 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d109      	bne.n	800bf04 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bef0:	f001 fbc2 	bl	800d678 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	4618      	mov	r0, r3
 800befa:	f001 f893 	bl	800d024 <xTaskPriorityInherit>
 800befe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bf00:	f001 fbec 	bl	800d6dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf06:	3324      	adds	r3, #36	; 0x24
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	4611      	mov	r1, r2
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f000 fe85 	bl	800cc1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf14:	f000 f8bc 	bl	800c090 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf18:	f000 fc96 	bl	800c848 <xTaskResumeAll>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f47f af67 	bne.w	800bdf2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bf24:	4b18      	ldr	r3, [pc, #96]	; (800bf88 <xQueueSemaphoreTake+0x21c>)
 800bf26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf2a:	601a      	str	r2, [r3, #0]
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	e75d      	b.n	800bdf2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bf36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf38:	f000 f8aa 	bl	800c090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf3c:	f000 fc84 	bl	800c848 <xTaskResumeAll>
 800bf40:	e757      	b.n	800bdf2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bf42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf44:	f000 f8a4 	bl	800c090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf48:	f000 fc7e 	bl	800c848 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf4e:	f000 f8f1 	bl	800c134 <prvIsQueueEmpty>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f43f af4c 	beq.w	800bdf2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00d      	beq.n	800bf7c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800bf60:	f001 fb8a 	bl	800d678 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bf64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf66:	f000 f811 	bl	800bf8c <prvGetDisinheritPriorityAfterTimeout>
 800bf6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf72:	4618      	mov	r0, r3
 800bf74:	f001 f95e 	bl	800d234 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bf78:	f001 fbb0 	bl	800d6dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3738      	adds	r7, #56	; 0x38
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	e000ed04 	.word	0xe000ed04

0800bf8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d006      	beq.n	800bfaa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f1c3 0307 	rsb	r3, r3, #7
 800bfa6:	60fb      	str	r3, [r7, #12]
 800bfa8:	e001      	b.n	800bfae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bfae:	68fb      	ldr	r3, [r7, #12]
	}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3714      	adds	r7, #20
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10d      	bne.n	800bff6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d14d      	bne.n	800c07e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f001 f89c 	bl	800d124 <xTaskPriorityDisinherit>
 800bfec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	609a      	str	r2, [r3, #8]
 800bff4:	e043      	b.n	800c07e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d119      	bne.n	800c030 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6858      	ldr	r0, [r3, #4]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c004:	461a      	mov	r2, r3
 800c006:	68b9      	ldr	r1, [r7, #8]
 800c008:	f001 fe1e 	bl	800dc48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c014:	441a      	add	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	685a      	ldr	r2, [r3, #4]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	429a      	cmp	r2, r3
 800c024:	d32b      	bcc.n	800c07e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	605a      	str	r2, [r3, #4]
 800c02e:	e026      	b.n	800c07e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	68d8      	ldr	r0, [r3, #12]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c038:	461a      	mov	r2, r3
 800c03a:	68b9      	ldr	r1, [r7, #8]
 800c03c:	f001 fe04 	bl	800dc48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	68da      	ldr	r2, [r3, #12]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c048:	425b      	negs	r3, r3
 800c04a:	441a      	add	r2, r3
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	68da      	ldr	r2, [r3, #12]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d207      	bcs.n	800c06c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	689a      	ldr	r2, [r3, #8]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c064:	425b      	negs	r3, r3
 800c066:	441a      	add	r2, r3
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b02      	cmp	r3, #2
 800c070:	d105      	bne.n	800c07e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c086:	697b      	ldr	r3, [r7, #20]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3718      	adds	r7, #24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c098:	f001 faee 	bl	800d678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0a4:	e011      	b.n	800c0ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d012      	beq.n	800c0d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	3324      	adds	r3, #36	; 0x24
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 fdd8 	bl	800cc68 <xTaskRemoveFromEventList>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c0be:	f000 feb1 	bl	800ce24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	dce9      	bgt.n	800c0a6 <prvUnlockQueue+0x16>
 800c0d2:	e000      	b.n	800c0d6 <prvUnlockQueue+0x46>
					break;
 800c0d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	22ff      	movs	r2, #255	; 0xff
 800c0da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c0de:	f001 fafd 	bl	800d6dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c0e2:	f001 fac9 	bl	800d678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0ee:	e011      	b.n	800c114 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d012      	beq.n	800c11e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	3310      	adds	r3, #16
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 fdb3 	bl	800cc68 <xTaskRemoveFromEventList>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c108:	f000 fe8c 	bl	800ce24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c10c:	7bbb      	ldrb	r3, [r7, #14]
 800c10e:	3b01      	subs	r3, #1
 800c110:	b2db      	uxtb	r3, r3
 800c112:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	dce9      	bgt.n	800c0f0 <prvUnlockQueue+0x60>
 800c11c:	e000      	b.n	800c120 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c11e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	22ff      	movs	r2, #255	; 0xff
 800c124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c128:	f001 fad8 	bl	800d6dc <vPortExitCritical>
}
 800c12c:	bf00      	nop
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c13c:	f001 fa9c 	bl	800d678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c144:	2b00      	cmp	r3, #0
 800c146:	d102      	bne.n	800c14e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c148:	2301      	movs	r3, #1
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	e001      	b.n	800c152 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c14e:	2300      	movs	r3, #0
 800c150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c152:	f001 fac3 	bl	800d6dc <vPortExitCritical>

	return xReturn;
 800c156:	68fb      	ldr	r3, [r7, #12]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c168:	f001 fa86 	bl	800d678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c174:	429a      	cmp	r2, r3
 800c176:	d102      	bne.n	800c17e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c178:	2301      	movs	r3, #1
 800c17a:	60fb      	str	r3, [r7, #12]
 800c17c:	e001      	b.n	800c182 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c17e:	2300      	movs	r3, #0
 800c180:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c182:	f001 faab 	bl	800d6dc <vPortExitCritical>

	return xReturn;
 800c186:	68fb      	ldr	r3, [r7, #12]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c190:	b580      	push	{r7, lr}
 800c192:	b08e      	sub	sp, #56	; 0x38
 800c194:	af04      	add	r7, sp, #16
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10b      	bne.n	800c1bc <xTaskCreateStatic+0x2c>
 800c1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a8:	b672      	cpsid	i
 800c1aa:	f383 8811 	msr	BASEPRI, r3
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	b662      	cpsie	i
 800c1b8:	623b      	str	r3, [r7, #32]
 800c1ba:	e7fe      	b.n	800c1ba <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800c1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10b      	bne.n	800c1da <xTaskCreateStatic+0x4a>
 800c1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c6:	b672      	cpsid	i
 800c1c8:	f383 8811 	msr	BASEPRI, r3
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	b662      	cpsie	i
 800c1d6:	61fb      	str	r3, [r7, #28]
 800c1d8:	e7fe      	b.n	800c1d8 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c1da:	2358      	movs	r3, #88	; 0x58
 800c1dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	2b58      	cmp	r3, #88	; 0x58
 800c1e2:	d00b      	beq.n	800c1fc <xTaskCreateStatic+0x6c>
 800c1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e8:	b672      	cpsid	i
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	b662      	cpsie	i
 800c1f8:	61bb      	str	r3, [r7, #24]
 800c1fa:	e7fe      	b.n	800c1fa <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c1fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c200:	2b00      	cmp	r3, #0
 800c202:	d01e      	beq.n	800c242 <xTaskCreateStatic+0xb2>
 800c204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c206:	2b00      	cmp	r3, #0
 800c208:	d01b      	beq.n	800c242 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c212:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c216:	2202      	movs	r2, #2
 800c218:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c21c:	2300      	movs	r3, #0
 800c21e:	9303      	str	r3, [sp, #12]
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	9302      	str	r3, [sp, #8]
 800c224:	f107 0314 	add.w	r3, r7, #20
 800c228:	9301      	str	r3, [sp, #4]
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	68b9      	ldr	r1, [r7, #8]
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f000 f850 	bl	800c2da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c23a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c23c:	f000 f8e0 	bl	800c400 <prvAddNewTaskToReadyList>
 800c240:	e001      	b.n	800c246 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c242:	2300      	movs	r3, #0
 800c244:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c246:	697b      	ldr	r3, [r7, #20]
	}
 800c248:	4618      	mov	r0, r3
 800c24a:	3728      	adds	r7, #40	; 0x28
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c250:	b580      	push	{r7, lr}
 800c252:	b08c      	sub	sp, #48	; 0x30
 800c254:	af04      	add	r7, sp, #16
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	603b      	str	r3, [r7, #0]
 800c25c:	4613      	mov	r3, r2
 800c25e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c260:	88fb      	ldrh	r3, [r7, #6]
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	4618      	mov	r0, r3
 800c266:	f001 fae7 	bl	800d838 <pvPortMalloc>
 800c26a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00e      	beq.n	800c290 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c272:	2058      	movs	r0, #88	; 0x58
 800c274:	f001 fae0 	bl	800d838 <pvPortMalloc>
 800c278:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d003      	beq.n	800c288 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	697a      	ldr	r2, [r7, #20]
 800c284:	631a      	str	r2, [r3, #48]	; 0x30
 800c286:	e005      	b.n	800c294 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c288:	6978      	ldr	r0, [r7, #20]
 800c28a:	f001 fba1 	bl	800d9d0 <vPortFree>
 800c28e:	e001      	b.n	800c294 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c290:	2300      	movs	r3, #0
 800c292:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d017      	beq.n	800c2ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	2200      	movs	r2, #0
 800c29e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c2a2:	88fa      	ldrh	r2, [r7, #6]
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	9303      	str	r3, [sp, #12]
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	9302      	str	r3, [sp, #8]
 800c2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	68b9      	ldr	r1, [r7, #8]
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f000 f80e 	bl	800c2da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2be:	69f8      	ldr	r0, [r7, #28]
 800c2c0:	f000 f89e 	bl	800c400 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	61bb      	str	r3, [r7, #24]
 800c2c8:	e002      	b.n	800c2d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c2d0:	69bb      	ldr	r3, [r7, #24]
	}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3720      	adds	r7, #32
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b088      	sub	sp, #32
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	60f8      	str	r0, [r7, #12]
 800c2e2:	60b9      	str	r1, [r7, #8]
 800c2e4:	607a      	str	r2, [r7, #4]
 800c2e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	21a5      	movs	r1, #165	; 0xa5
 800c2f4:	f001 fcb3 	bl	800dc5e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2fc:	6879      	ldr	r1, [r7, #4]
 800c2fe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c302:	440b      	add	r3, r1
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4413      	add	r3, r2
 800c308:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	f023 0307 	bic.w	r3, r3, #7
 800c310:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	f003 0307 	and.w	r3, r3, #7
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00b      	beq.n	800c334 <prvInitialiseNewTask+0x5a>
 800c31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c320:	b672      	cpsid	i
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	b662      	cpsie	i
 800c330:	617b      	str	r3, [r7, #20]
 800c332:	e7fe      	b.n	800c332 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d01f      	beq.n	800c37a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c33a:	2300      	movs	r3, #0
 800c33c:	61fb      	str	r3, [r7, #28]
 800c33e:	e012      	b.n	800c366 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	4413      	add	r3, r2
 800c346:	7819      	ldrb	r1, [r3, #0]
 800c348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	4413      	add	r3, r2
 800c34e:	3334      	adds	r3, #52	; 0x34
 800c350:	460a      	mov	r2, r1
 800c352:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	4413      	add	r3, r2
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d006      	beq.n	800c36e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	3301      	adds	r3, #1
 800c364:	61fb      	str	r3, [r7, #28]
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	2b0f      	cmp	r3, #15
 800c36a:	d9e9      	bls.n	800c340 <prvInitialiseNewTask+0x66>
 800c36c:	e000      	b.n	800c370 <prvInitialiseNewTask+0x96>
			{
				break;
 800c36e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	2200      	movs	r2, #0
 800c374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c378:	e003      	b.n	800c382 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	2200      	movs	r2, #0
 800c37e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	2b06      	cmp	r3, #6
 800c386:	d901      	bls.n	800c38c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c388:	2306      	movs	r3, #6
 800c38a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c390:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c396:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39a:	2200      	movs	r2, #0
 800c39c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7ff f9b8 	bl	800b718 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3aa:	3318      	adds	r3, #24
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7ff f9b3 	bl	800b718 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ba:	f1c3 0207 	rsb	r2, r3, #7
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	68f9      	ldr	r1, [r7, #12]
 800c3e0:	69b8      	ldr	r0, [r7, #24]
 800c3e2:	f001 f83d 	bl	800d460 <pxPortInitialiseStack>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d002      	beq.n	800c3f8 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3f8:	bf00      	nop
 800c3fa:	3720      	adds	r7, #32
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c408:	f001 f936 	bl	800d678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c40c:	4b2a      	ldr	r3, [pc, #168]	; (800c4b8 <prvAddNewTaskToReadyList+0xb8>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	3301      	adds	r3, #1
 800c412:	4a29      	ldr	r2, [pc, #164]	; (800c4b8 <prvAddNewTaskToReadyList+0xb8>)
 800c414:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c416:	4b29      	ldr	r3, [pc, #164]	; (800c4bc <prvAddNewTaskToReadyList+0xbc>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d109      	bne.n	800c432 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c41e:	4a27      	ldr	r2, [pc, #156]	; (800c4bc <prvAddNewTaskToReadyList+0xbc>)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c424:	4b24      	ldr	r3, [pc, #144]	; (800c4b8 <prvAddNewTaskToReadyList+0xb8>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d110      	bne.n	800c44e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c42c:	f000 fd20 	bl	800ce70 <prvInitialiseTaskLists>
 800c430:	e00d      	b.n	800c44e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c432:	4b23      	ldr	r3, [pc, #140]	; (800c4c0 <prvAddNewTaskToReadyList+0xc0>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d109      	bne.n	800c44e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c43a:	4b20      	ldr	r3, [pc, #128]	; (800c4bc <prvAddNewTaskToReadyList+0xbc>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c444:	429a      	cmp	r2, r3
 800c446:	d802      	bhi.n	800c44e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c448:	4a1c      	ldr	r2, [pc, #112]	; (800c4bc <prvAddNewTaskToReadyList+0xbc>)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c44e:	4b1d      	ldr	r3, [pc, #116]	; (800c4c4 <prvAddNewTaskToReadyList+0xc4>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	3301      	adds	r3, #1
 800c454:	4a1b      	ldr	r2, [pc, #108]	; (800c4c4 <prvAddNewTaskToReadyList+0xc4>)
 800c456:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45c:	2201      	movs	r2, #1
 800c45e:	409a      	lsls	r2, r3
 800c460:	4b19      	ldr	r3, [pc, #100]	; (800c4c8 <prvAddNewTaskToReadyList+0xc8>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4313      	orrs	r3, r2
 800c466:	4a18      	ldr	r2, [pc, #96]	; (800c4c8 <prvAddNewTaskToReadyList+0xc8>)
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46e:	4613      	mov	r3, r2
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4a15      	ldr	r2, [pc, #84]	; (800c4cc <prvAddNewTaskToReadyList+0xcc>)
 800c478:	441a      	add	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	3304      	adds	r3, #4
 800c47e:	4619      	mov	r1, r3
 800c480:	4610      	mov	r0, r2
 800c482:	f7ff f956 	bl	800b732 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c486:	f001 f929 	bl	800d6dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c48a:	4b0d      	ldr	r3, [pc, #52]	; (800c4c0 <prvAddNewTaskToReadyList+0xc0>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00e      	beq.n	800c4b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c492:	4b0a      	ldr	r3, [pc, #40]	; (800c4bc <prvAddNewTaskToReadyList+0xbc>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d207      	bcs.n	800c4b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4a0:	4b0b      	ldr	r3, [pc, #44]	; (800c4d0 <prvAddNewTaskToReadyList+0xd0>)
 800c4a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a6:	601a      	str	r2, [r3, #0]
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4b0:	bf00      	nop
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	2000059c 	.word	0x2000059c
 800c4bc:	2000049c 	.word	0x2000049c
 800c4c0:	200005a8 	.word	0x200005a8
 800c4c4:	200005b8 	.word	0x200005b8
 800c4c8:	200005a4 	.word	0x200005a4
 800c4cc:	200004a0 	.word	0x200004a0
 800c4d0:	e000ed04 	.word	0xe000ed04

0800c4d4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b08a      	sub	sp, #40	; 0x28
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10b      	bne.n	800c500 <vTaskDelayUntil+0x2c>
 800c4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ec:	b672      	cpsid	i
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	b662      	cpsie	i
 800c4fc:	617b      	str	r3, [r7, #20]
 800c4fe:	e7fe      	b.n	800c4fe <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d10b      	bne.n	800c51e <vTaskDelayUntil+0x4a>
 800c506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50a:	b672      	cpsid	i
 800c50c:	f383 8811 	msr	BASEPRI, r3
 800c510:	f3bf 8f6f 	isb	sy
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	b662      	cpsie	i
 800c51a:	613b      	str	r3, [r7, #16]
 800c51c:	e7fe      	b.n	800c51c <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800c51e:	4b2a      	ldr	r3, [pc, #168]	; (800c5c8 <vTaskDelayUntil+0xf4>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00b      	beq.n	800c53e <vTaskDelayUntil+0x6a>
 800c526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52a:	b672      	cpsid	i
 800c52c:	f383 8811 	msr	BASEPRI, r3
 800c530:	f3bf 8f6f 	isb	sy
 800c534:	f3bf 8f4f 	dsb	sy
 800c538:	b662      	cpsie	i
 800c53a:	60fb      	str	r3, [r7, #12]
 800c53c:	e7fe      	b.n	800c53c <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800c53e:	f000 f975 	bl	800c82c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c542:	4b22      	ldr	r3, [pc, #136]	; (800c5cc <vTaskDelayUntil+0xf8>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	4413      	add	r3, r2
 800c550:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	6a3a      	ldr	r2, [r7, #32]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d20b      	bcs.n	800c574 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	69fa      	ldr	r2, [r7, #28]
 800c562:	429a      	cmp	r2, r3
 800c564:	d211      	bcs.n	800c58a <vTaskDelayUntil+0xb6>
 800c566:	69fa      	ldr	r2, [r7, #28]
 800c568:	6a3b      	ldr	r3, [r7, #32]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d90d      	bls.n	800c58a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c56e:	2301      	movs	r3, #1
 800c570:	627b      	str	r3, [r7, #36]	; 0x24
 800c572:	e00a      	b.n	800c58a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	69fa      	ldr	r2, [r7, #28]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d303      	bcc.n	800c586 <vTaskDelayUntil+0xb2>
 800c57e:	69fa      	ldr	r2, [r7, #28]
 800c580:	6a3b      	ldr	r3, [r7, #32]
 800c582:	429a      	cmp	r2, r3
 800c584:	d901      	bls.n	800c58a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c586:	2301      	movs	r3, #1
 800c588:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	69fa      	ldr	r2, [r7, #28]
 800c58e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c592:	2b00      	cmp	r3, #0
 800c594:	d006      	beq.n	800c5a4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c596:	69fa      	ldr	r2, [r7, #28]
 800c598:	6a3b      	ldr	r3, [r7, #32]
 800c59a:	1ad3      	subs	r3, r2, r3
 800c59c:	2100      	movs	r1, #0
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f000 fef8 	bl	800d394 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c5a4:	f000 f950 	bl	800c848 <xTaskResumeAll>
 800c5a8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d107      	bne.n	800c5c0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800c5b0:	4b07      	ldr	r3, [pc, #28]	; (800c5d0 <vTaskDelayUntil+0xfc>)
 800c5b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b6:	601a      	str	r2, [r3, #0]
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5c0:	bf00      	nop
 800c5c2:	3728      	adds	r7, #40	; 0x28
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	200005c4 	.word	0x200005c4
 800c5cc:	200005a0 	.word	0x200005a0
 800c5d0:	e000ed04 	.word	0xe000ed04

0800c5d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d018      	beq.n	800c618 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c5e6:	4b14      	ldr	r3, [pc, #80]	; (800c638 <vTaskDelay+0x64>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00b      	beq.n	800c606 <vTaskDelay+0x32>
 800c5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f2:	b672      	cpsid	i
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	b662      	cpsie	i
 800c602:	60bb      	str	r3, [r7, #8]
 800c604:	e7fe      	b.n	800c604 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800c606:	f000 f911 	bl	800c82c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c60a:	2100      	movs	r1, #0
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 fec1 	bl	800d394 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c612:	f000 f919 	bl	800c848 <xTaskResumeAll>
 800c616:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d107      	bne.n	800c62e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c61e:	4b07      	ldr	r3, [pc, #28]	; (800c63c <vTaskDelay+0x68>)
 800c620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c624:	601a      	str	r2, [r3, #0]
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c62e:	bf00      	nop
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	200005c4 	.word	0x200005c4
 800c63c:	e000ed04 	.word	0xe000ed04

0800c640 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c648:	f001 f816 	bl	800d678 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d102      	bne.n	800c658 <vTaskSuspend+0x18>
 800c652:	4b3d      	ldr	r3, [pc, #244]	; (800c748 <vTaskSuspend+0x108>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	e000      	b.n	800c65a <vTaskSuspend+0x1a>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	3304      	adds	r3, #4
 800c660:	4618      	mov	r0, r3
 800c662:	f7ff f8c3 	bl	800b7ec <uxListRemove>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d115      	bne.n	800c698 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c670:	4936      	ldr	r1, [pc, #216]	; (800c74c <vTaskSuspend+0x10c>)
 800c672:	4613      	mov	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4413      	add	r3, r2
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	440b      	add	r3, r1
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10a      	bne.n	800c698 <vTaskSuspend+0x58>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c686:	2201      	movs	r2, #1
 800c688:	fa02 f303 	lsl.w	r3, r2, r3
 800c68c:	43da      	mvns	r2, r3
 800c68e:	4b30      	ldr	r3, [pc, #192]	; (800c750 <vTaskSuspend+0x110>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4013      	ands	r3, r2
 800c694:	4a2e      	ldr	r2, [pc, #184]	; (800c750 <vTaskSuspend+0x110>)
 800c696:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d004      	beq.n	800c6aa <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	3318      	adds	r3, #24
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7ff f8a1 	bl	800b7ec <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	3304      	adds	r3, #4
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	4828      	ldr	r0, [pc, #160]	; (800c754 <vTaskSuspend+0x114>)
 800c6b2:	f7ff f83e 	bl	800b732 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d103      	bne.n	800c6ca <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c6ca:	f001 f807 	bl	800d6dc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c6ce:	4b22      	ldr	r3, [pc, #136]	; (800c758 <vTaskSuspend+0x118>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d005      	beq.n	800c6e2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c6d6:	f000 ffcf 	bl	800d678 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c6da:	f000 fc65 	bl	800cfa8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c6de:	f000 fffd 	bl	800d6dc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c6e2:	4b19      	ldr	r3, [pc, #100]	; (800c748 <vTaskSuspend+0x108>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d128      	bne.n	800c73e <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800c6ec:	4b1a      	ldr	r3, [pc, #104]	; (800c758 <vTaskSuspend+0x118>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d018      	beq.n	800c726 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c6f4:	4b19      	ldr	r3, [pc, #100]	; (800c75c <vTaskSuspend+0x11c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00b      	beq.n	800c714 <vTaskSuspend+0xd4>
 800c6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c700:	b672      	cpsid	i
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	b662      	cpsie	i
 800c710:	60bb      	str	r3, [r7, #8]
 800c712:	e7fe      	b.n	800c712 <vTaskSuspend+0xd2>
				portYIELD_WITHIN_API();
 800c714:	4b12      	ldr	r3, [pc, #72]	; (800c760 <vTaskSuspend+0x120>)
 800c716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c71a:	601a      	str	r2, [r3, #0]
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c724:	e00b      	b.n	800c73e <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c726:	4b0b      	ldr	r3, [pc, #44]	; (800c754 <vTaskSuspend+0x114>)
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	4b0e      	ldr	r3, [pc, #56]	; (800c764 <vTaskSuspend+0x124>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d103      	bne.n	800c73a <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800c732:	4b05      	ldr	r3, [pc, #20]	; (800c748 <vTaskSuspend+0x108>)
 800c734:	2200      	movs	r2, #0
 800c736:	601a      	str	r2, [r3, #0]
	}
 800c738:	e001      	b.n	800c73e <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800c73a:	f000 f9ed 	bl	800cb18 <vTaskSwitchContext>
	}
 800c73e:	bf00      	nop
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	2000049c 	.word	0x2000049c
 800c74c:	200004a0 	.word	0x200004a0
 800c750:	200005a4 	.word	0x200005a4
 800c754:	20000588 	.word	0x20000588
 800c758:	200005a8 	.word	0x200005a8
 800c75c:	200005c4 	.word	0x200005c4
 800c760:	e000ed04 	.word	0xe000ed04
 800c764:	2000059c 	.word	0x2000059c

0800c768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b08a      	sub	sp, #40	; 0x28
 800c76c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c76e:	2300      	movs	r3, #0
 800c770:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c772:	2300      	movs	r3, #0
 800c774:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c776:	463a      	mov	r2, r7
 800c778:	1d39      	adds	r1, r7, #4
 800c77a:	f107 0308 	add.w	r3, r7, #8
 800c77e:	4618      	mov	r0, r3
 800c780:	f7f3 fee0 	bl	8000544 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	9202      	str	r2, [sp, #8]
 800c78c:	9301      	str	r3, [sp, #4]
 800c78e:	2300      	movs	r3, #0
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	2300      	movs	r3, #0
 800c794:	460a      	mov	r2, r1
 800c796:	491f      	ldr	r1, [pc, #124]	; (800c814 <vTaskStartScheduler+0xac>)
 800c798:	481f      	ldr	r0, [pc, #124]	; (800c818 <vTaskStartScheduler+0xb0>)
 800c79a:	f7ff fcf9 	bl	800c190 <xTaskCreateStatic>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	4b1e      	ldr	r3, [pc, #120]	; (800c81c <vTaskStartScheduler+0xb4>)
 800c7a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c7a4:	4b1d      	ldr	r3, [pc, #116]	; (800c81c <vTaskStartScheduler+0xb4>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	617b      	str	r3, [r7, #20]
 800c7b0:	e001      	b.n	800c7b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d117      	bne.n	800c7ec <vTaskStartScheduler+0x84>
 800c7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c0:	b672      	cpsid	i
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	b662      	cpsie	i
 800c7d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c7d2:	4b13      	ldr	r3, [pc, #76]	; (800c820 <vTaskStartScheduler+0xb8>)
 800c7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c7da:	4b12      	ldr	r3, [pc, #72]	; (800c824 <vTaskStartScheduler+0xbc>)
 800c7dc:	2201      	movs	r2, #1
 800c7de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c7e0:	4b11      	ldr	r3, [pc, #68]	; (800c828 <vTaskStartScheduler+0xc0>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c7e6:	f000 fecb 	bl	800d580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c7ea:	e00f      	b.n	800c80c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f2:	d10b      	bne.n	800c80c <vTaskStartScheduler+0xa4>
 800c7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f8:	b672      	cpsid	i
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	b662      	cpsie	i
 800c808:	60fb      	str	r3, [r7, #12]
 800c80a:	e7fe      	b.n	800c80a <vTaskStartScheduler+0xa2>
}
 800c80c:	bf00      	nop
 800c80e:	3718      	adds	r7, #24
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	0800dd3c 	.word	0x0800dd3c
 800c818:	0800ce3d 	.word	0x0800ce3d
 800c81c:	200005c0 	.word	0x200005c0
 800c820:	200005bc 	.word	0x200005bc
 800c824:	200005a8 	.word	0x200005a8
 800c828:	200005a0 	.word	0x200005a0

0800c82c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c82c:	b480      	push	{r7}
 800c82e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c830:	4b04      	ldr	r3, [pc, #16]	; (800c844 <vTaskSuspendAll+0x18>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	3301      	adds	r3, #1
 800c836:	4a03      	ldr	r2, [pc, #12]	; (800c844 <vTaskSuspendAll+0x18>)
 800c838:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c83a:	bf00      	nop
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr
 800c844:	200005c4 	.word	0x200005c4

0800c848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c84e:	2300      	movs	r3, #0
 800c850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c852:	2300      	movs	r3, #0
 800c854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c856:	4b42      	ldr	r3, [pc, #264]	; (800c960 <xTaskResumeAll+0x118>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d10b      	bne.n	800c876 <xTaskResumeAll+0x2e>
 800c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c862:	b672      	cpsid	i
 800c864:	f383 8811 	msr	BASEPRI, r3
 800c868:	f3bf 8f6f 	isb	sy
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	b662      	cpsie	i
 800c872:	603b      	str	r3, [r7, #0]
 800c874:	e7fe      	b.n	800c874 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c876:	f000 feff 	bl	800d678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c87a:	4b39      	ldr	r3, [pc, #228]	; (800c960 <xTaskResumeAll+0x118>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	3b01      	subs	r3, #1
 800c880:	4a37      	ldr	r2, [pc, #220]	; (800c960 <xTaskResumeAll+0x118>)
 800c882:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c884:	4b36      	ldr	r3, [pc, #216]	; (800c960 <xTaskResumeAll+0x118>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d161      	bne.n	800c950 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c88c:	4b35      	ldr	r3, [pc, #212]	; (800c964 <xTaskResumeAll+0x11c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d05d      	beq.n	800c950 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c894:	e02e      	b.n	800c8f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c896:	4b34      	ldr	r3, [pc, #208]	; (800c968 <xTaskResumeAll+0x120>)
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	3318      	adds	r3, #24
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe ffa2 	bl	800b7ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fe ff9d 	bl	800b7ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	409a      	lsls	r2, r3
 800c8ba:	4b2c      	ldr	r3, [pc, #176]	; (800c96c <xTaskResumeAll+0x124>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	4a2a      	ldr	r2, [pc, #168]	; (800c96c <xTaskResumeAll+0x124>)
 800c8c2:	6013      	str	r3, [r2, #0]
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4413      	add	r3, r2
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4a27      	ldr	r2, [pc, #156]	; (800c970 <xTaskResumeAll+0x128>)
 800c8d2:	441a      	add	r2, r3
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	3304      	adds	r3, #4
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4610      	mov	r0, r2
 800c8dc:	f7fe ff29 	bl	800b732 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e4:	4b23      	ldr	r3, [pc, #140]	; (800c974 <xTaskResumeAll+0x12c>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d302      	bcc.n	800c8f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c8ee:	4b22      	ldr	r3, [pc, #136]	; (800c978 <xTaskResumeAll+0x130>)
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8f4:	4b1c      	ldr	r3, [pc, #112]	; (800c968 <xTaskResumeAll+0x120>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1cc      	bne.n	800c896 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c902:	f000 fb51 	bl	800cfa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c906:	4b1d      	ldr	r3, [pc, #116]	; (800c97c <xTaskResumeAll+0x134>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d010      	beq.n	800c934 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c912:	f000 f847 	bl	800c9a4 <xTaskIncrementTick>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c91c:	4b16      	ldr	r3, [pc, #88]	; (800c978 <xTaskResumeAll+0x130>)
 800c91e:	2201      	movs	r2, #1
 800c920:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	3b01      	subs	r3, #1
 800c926:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1f1      	bne.n	800c912 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800c92e:	4b13      	ldr	r3, [pc, #76]	; (800c97c <xTaskResumeAll+0x134>)
 800c930:	2200      	movs	r2, #0
 800c932:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c934:	4b10      	ldr	r3, [pc, #64]	; (800c978 <xTaskResumeAll+0x130>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d009      	beq.n	800c950 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c93c:	2301      	movs	r3, #1
 800c93e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c940:	4b0f      	ldr	r3, [pc, #60]	; (800c980 <xTaskResumeAll+0x138>)
 800c942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c946:	601a      	str	r2, [r3, #0]
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c950:	f000 fec4 	bl	800d6dc <vPortExitCritical>

	return xAlreadyYielded;
 800c954:	68bb      	ldr	r3, [r7, #8]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	200005c4 	.word	0x200005c4
 800c964:	2000059c 	.word	0x2000059c
 800c968:	2000055c 	.word	0x2000055c
 800c96c:	200005a4 	.word	0x200005a4
 800c970:	200004a0 	.word	0x200004a0
 800c974:	2000049c 	.word	0x2000049c
 800c978:	200005b0 	.word	0x200005b0
 800c97c:	200005ac 	.word	0x200005ac
 800c980:	e000ed04 	.word	0xe000ed04

0800c984 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c98a:	4b05      	ldr	r3, [pc, #20]	; (800c9a0 <xTaskGetTickCount+0x1c>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c990:	687b      	ldr	r3, [r7, #4]
}
 800c992:	4618      	mov	r0, r3
 800c994:	370c      	adds	r7, #12
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop
 800c9a0:	200005a0 	.word	0x200005a0

0800c9a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9ae:	4b4f      	ldr	r3, [pc, #316]	; (800caec <xTaskIncrementTick+0x148>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f040 8089 	bne.w	800caca <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c9b8:	4b4d      	ldr	r3, [pc, #308]	; (800caf0 <xTaskIncrementTick+0x14c>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c9c0:	4a4b      	ldr	r2, [pc, #300]	; (800caf0 <xTaskIncrementTick+0x14c>)
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d121      	bne.n	800ca10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c9cc:	4b49      	ldr	r3, [pc, #292]	; (800caf4 <xTaskIncrementTick+0x150>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d00b      	beq.n	800c9ee <xTaskIncrementTick+0x4a>
 800c9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9da:	b672      	cpsid	i
 800c9dc:	f383 8811 	msr	BASEPRI, r3
 800c9e0:	f3bf 8f6f 	isb	sy
 800c9e4:	f3bf 8f4f 	dsb	sy
 800c9e8:	b662      	cpsie	i
 800c9ea:	603b      	str	r3, [r7, #0]
 800c9ec:	e7fe      	b.n	800c9ec <xTaskIncrementTick+0x48>
 800c9ee:	4b41      	ldr	r3, [pc, #260]	; (800caf4 <xTaskIncrementTick+0x150>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	60fb      	str	r3, [r7, #12]
 800c9f4:	4b40      	ldr	r3, [pc, #256]	; (800caf8 <xTaskIncrementTick+0x154>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a3e      	ldr	r2, [pc, #248]	; (800caf4 <xTaskIncrementTick+0x150>)
 800c9fa:	6013      	str	r3, [r2, #0]
 800c9fc:	4a3e      	ldr	r2, [pc, #248]	; (800caf8 <xTaskIncrementTick+0x154>)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6013      	str	r3, [r2, #0]
 800ca02:	4b3e      	ldr	r3, [pc, #248]	; (800cafc <xTaskIncrementTick+0x158>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	3301      	adds	r3, #1
 800ca08:	4a3c      	ldr	r2, [pc, #240]	; (800cafc <xTaskIncrementTick+0x158>)
 800ca0a:	6013      	str	r3, [r2, #0]
 800ca0c:	f000 facc 	bl	800cfa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca10:	4b3b      	ldr	r3, [pc, #236]	; (800cb00 <xTaskIncrementTick+0x15c>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	693a      	ldr	r2, [r7, #16]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d348      	bcc.n	800caac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca1a:	4b36      	ldr	r3, [pc, #216]	; (800caf4 <xTaskIncrementTick+0x150>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d104      	bne.n	800ca2e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca24:	4b36      	ldr	r3, [pc, #216]	; (800cb00 <xTaskIncrementTick+0x15c>)
 800ca26:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2a:	601a      	str	r2, [r3, #0]
					break;
 800ca2c:	e03e      	b.n	800caac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca2e:	4b31      	ldr	r3, [pc, #196]	; (800caf4 <xTaskIncrementTick+0x150>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	68db      	ldr	r3, [r3, #12]
 800ca36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d203      	bcs.n	800ca4e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca46:	4a2e      	ldr	r2, [pc, #184]	; (800cb00 <xTaskIncrementTick+0x15c>)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca4c:	e02e      	b.n	800caac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	3304      	adds	r3, #4
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fe feca 	bl	800b7ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d004      	beq.n	800ca6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	3318      	adds	r3, #24
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fe fec1 	bl	800b7ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6e:	2201      	movs	r2, #1
 800ca70:	409a      	lsls	r2, r3
 800ca72:	4b24      	ldr	r3, [pc, #144]	; (800cb04 <xTaskIncrementTick+0x160>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4313      	orrs	r3, r2
 800ca78:	4a22      	ldr	r2, [pc, #136]	; (800cb04 <xTaskIncrementTick+0x160>)
 800ca7a:	6013      	str	r3, [r2, #0]
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca80:	4613      	mov	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4413      	add	r3, r2
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	4a1f      	ldr	r2, [pc, #124]	; (800cb08 <xTaskIncrementTick+0x164>)
 800ca8a:	441a      	add	r2, r3
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	3304      	adds	r3, #4
 800ca90:	4619      	mov	r1, r3
 800ca92:	4610      	mov	r0, r2
 800ca94:	f7fe fe4d 	bl	800b732 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9c:	4b1b      	ldr	r3, [pc, #108]	; (800cb0c <xTaskIncrementTick+0x168>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d3b9      	bcc.n	800ca1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800caa6:	2301      	movs	r3, #1
 800caa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800caaa:	e7b6      	b.n	800ca1a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800caac:	4b17      	ldr	r3, [pc, #92]	; (800cb0c <xTaskIncrementTick+0x168>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab2:	4915      	ldr	r1, [pc, #84]	; (800cb08 <xTaskIncrementTick+0x164>)
 800cab4:	4613      	mov	r3, r2
 800cab6:	009b      	lsls	r3, r3, #2
 800cab8:	4413      	add	r3, r2
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	440b      	add	r3, r1
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d907      	bls.n	800cad4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800cac4:	2301      	movs	r3, #1
 800cac6:	617b      	str	r3, [r7, #20]
 800cac8:	e004      	b.n	800cad4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800caca:	4b11      	ldr	r3, [pc, #68]	; (800cb10 <xTaskIncrementTick+0x16c>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	3301      	adds	r3, #1
 800cad0:	4a0f      	ldr	r2, [pc, #60]	; (800cb10 <xTaskIncrementTick+0x16c>)
 800cad2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cad4:	4b0f      	ldr	r3, [pc, #60]	; (800cb14 <xTaskIncrementTick+0x170>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800cadc:	2301      	movs	r3, #1
 800cade:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cae0:	697b      	ldr	r3, [r7, #20]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3718      	adds	r7, #24
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	200005c4 	.word	0x200005c4
 800caf0:	200005a0 	.word	0x200005a0
 800caf4:	20000554 	.word	0x20000554
 800caf8:	20000558 	.word	0x20000558
 800cafc:	200005b4 	.word	0x200005b4
 800cb00:	200005bc 	.word	0x200005bc
 800cb04:	200005a4 	.word	0x200005a4
 800cb08:	200004a0 	.word	0x200004a0
 800cb0c:	2000049c 	.word	0x2000049c
 800cb10:	200005ac 	.word	0x200005ac
 800cb14:	200005b0 	.word	0x200005b0

0800cb18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b088      	sub	sp, #32
 800cb1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb1e:	4b3a      	ldr	r3, [pc, #232]	; (800cc08 <vTaskSwitchContext+0xf0>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d003      	beq.n	800cb2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cb26:	4b39      	ldr	r3, [pc, #228]	; (800cc0c <vTaskSwitchContext+0xf4>)
 800cb28:	2201      	movs	r2, #1
 800cb2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cb2c:	e067      	b.n	800cbfe <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800cb2e:	4b37      	ldr	r3, [pc, #220]	; (800cc0c <vTaskSwitchContext+0xf4>)
 800cb30:	2200      	movs	r2, #0
 800cb32:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cb34:	4b36      	ldr	r3, [pc, #216]	; (800cc10 <vTaskSwitchContext+0xf8>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb3a:	61fb      	str	r3, [r7, #28]
 800cb3c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cb40:	61bb      	str	r3, [r7, #24]
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	69ba      	ldr	r2, [r7, #24]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d111      	bne.n	800cb70 <vTaskSwitchContext+0x58>
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	3304      	adds	r3, #4
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	69ba      	ldr	r2, [r7, #24]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d10b      	bne.n	800cb70 <vTaskSwitchContext+0x58>
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	69ba      	ldr	r2, [r7, #24]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d105      	bne.n	800cb70 <vTaskSwitchContext+0x58>
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	330c      	adds	r3, #12
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	69ba      	ldr	r2, [r7, #24]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d008      	beq.n	800cb82 <vTaskSwitchContext+0x6a>
 800cb70:	4b27      	ldr	r3, [pc, #156]	; (800cc10 <vTaskSwitchContext+0xf8>)
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	4b26      	ldr	r3, [pc, #152]	; (800cc10 <vTaskSwitchContext+0xf8>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3334      	adds	r3, #52	; 0x34
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	f7f3 fcce 	bl	800051e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb82:	4b24      	ldr	r3, [pc, #144]	; (800cc14 <vTaskSwitchContext+0xfc>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	fab3 f383 	clz	r3, r3
 800cb8e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cb90:	7afb      	ldrb	r3, [r7, #11]
 800cb92:	f1c3 031f 	rsb	r3, r3, #31
 800cb96:	617b      	str	r3, [r7, #20]
 800cb98:	491f      	ldr	r1, [pc, #124]	; (800cc18 <vTaskSwitchContext+0x100>)
 800cb9a:	697a      	ldr	r2, [r7, #20]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	440b      	add	r3, r1
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10b      	bne.n	800cbc4 <vTaskSwitchContext+0xac>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	b672      	cpsid	i
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	b662      	cpsie	i
 800cbc0:	607b      	str	r3, [r7, #4]
 800cbc2:	e7fe      	b.n	800cbc2 <vTaskSwitchContext+0xaa>
 800cbc4:	697a      	ldr	r2, [r7, #20]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4a12      	ldr	r2, [pc, #72]	; (800cc18 <vTaskSwitchContext+0x100>)
 800cbd0:	4413      	add	r3, r2
 800cbd2:	613b      	str	r3, [r7, #16]
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	685a      	ldr	r2, [r3, #4]
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	605a      	str	r2, [r3, #4]
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	3308      	adds	r3, #8
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d104      	bne.n	800cbf4 <vTaskSwitchContext+0xdc>
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	685a      	ldr	r2, [r3, #4]
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	605a      	str	r2, [r3, #4]
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	4a05      	ldr	r2, [pc, #20]	; (800cc10 <vTaskSwitchContext+0xf8>)
 800cbfc:	6013      	str	r3, [r2, #0]
}
 800cbfe:	bf00      	nop
 800cc00:	3720      	adds	r7, #32
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	200005c4 	.word	0x200005c4
 800cc0c:	200005b0 	.word	0x200005b0
 800cc10:	2000049c 	.word	0x2000049c
 800cc14:	200005a4 	.word	0x200005a4
 800cc18:	200004a0 	.word	0x200004a0

0800cc1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10b      	bne.n	800cc44 <vTaskPlaceOnEventList+0x28>
 800cc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc30:	b672      	cpsid	i
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	b662      	cpsie	i
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	e7fe      	b.n	800cc42 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc44:	4b07      	ldr	r3, [pc, #28]	; (800cc64 <vTaskPlaceOnEventList+0x48>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	3318      	adds	r3, #24
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7fe fd94 	bl	800b77a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc52:	2101      	movs	r1, #1
 800cc54:	6838      	ldr	r0, [r7, #0]
 800cc56:	f000 fb9d 	bl	800d394 <prvAddCurrentTaskToDelayedList>
}
 800cc5a:	bf00      	nop
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	2000049c 	.word	0x2000049c

0800cc68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d10b      	bne.n	800cc96 <xTaskRemoveFromEventList+0x2e>
 800cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc82:	b672      	cpsid	i
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	b662      	cpsie	i
 800cc92:	60fb      	str	r3, [r7, #12]
 800cc94:	e7fe      	b.n	800cc94 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	3318      	adds	r3, #24
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fe fda6 	bl	800b7ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cca0:	4b1d      	ldr	r3, [pc, #116]	; (800cd18 <xTaskRemoveFromEventList+0xb0>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d11c      	bne.n	800cce2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	3304      	adds	r3, #4
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fe fd9d 	bl	800b7ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	409a      	lsls	r2, r3
 800ccba:	4b18      	ldr	r3, [pc, #96]	; (800cd1c <xTaskRemoveFromEventList+0xb4>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	4a16      	ldr	r2, [pc, #88]	; (800cd1c <xTaskRemoveFromEventList+0xb4>)
 800ccc2:	6013      	str	r3, [r2, #0]
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccc8:	4613      	mov	r3, r2
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	4413      	add	r3, r2
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	4a13      	ldr	r2, [pc, #76]	; (800cd20 <xTaskRemoveFromEventList+0xb8>)
 800ccd2:	441a      	add	r2, r3
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	3304      	adds	r3, #4
 800ccd8:	4619      	mov	r1, r3
 800ccda:	4610      	mov	r0, r2
 800ccdc:	f7fe fd29 	bl	800b732 <vListInsertEnd>
 800cce0:	e005      	b.n	800ccee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	3318      	adds	r3, #24
 800cce6:	4619      	mov	r1, r3
 800cce8:	480e      	ldr	r0, [pc, #56]	; (800cd24 <xTaskRemoveFromEventList+0xbc>)
 800ccea:	f7fe fd22 	bl	800b732 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf2:	4b0d      	ldr	r3, [pc, #52]	; (800cd28 <xTaskRemoveFromEventList+0xc0>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d905      	bls.n	800cd08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cd00:	4b0a      	ldr	r3, [pc, #40]	; (800cd2c <xTaskRemoveFromEventList+0xc4>)
 800cd02:	2201      	movs	r2, #1
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	e001      	b.n	800cd0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cd0c:	697b      	ldr	r3, [r7, #20]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3718      	adds	r7, #24
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	200005c4 	.word	0x200005c4
 800cd1c:	200005a4 	.word	0x200005a4
 800cd20:	200004a0 	.word	0x200004a0
 800cd24:	2000055c 	.word	0x2000055c
 800cd28:	2000049c 	.word	0x2000049c
 800cd2c:	200005b0 	.word	0x200005b0

0800cd30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd38:	4b06      	ldr	r3, [pc, #24]	; (800cd54 <vTaskInternalSetTimeOutState+0x24>)
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd40:	4b05      	ldr	r3, [pc, #20]	; (800cd58 <vTaskInternalSetTimeOutState+0x28>)
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	605a      	str	r2, [r3, #4]
}
 800cd48:	bf00      	nop
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr
 800cd54:	200005b4 	.word	0x200005b4
 800cd58:	200005a0 	.word	0x200005a0

0800cd5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b088      	sub	sp, #32
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10b      	bne.n	800cd84 <xTaskCheckForTimeOut+0x28>
 800cd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd70:	b672      	cpsid	i
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	b662      	cpsie	i
 800cd80:	613b      	str	r3, [r7, #16]
 800cd82:	e7fe      	b.n	800cd82 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10b      	bne.n	800cda2 <xTaskCheckForTimeOut+0x46>
 800cd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8e:	b672      	cpsid	i
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	b662      	cpsie	i
 800cd9e:	60fb      	str	r3, [r7, #12]
 800cda0:	e7fe      	b.n	800cda0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800cda2:	f000 fc69 	bl	800d678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cda6:	4b1d      	ldr	r3, [pc, #116]	; (800ce1c <xTaskCheckForTimeOut+0xc0>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	69ba      	ldr	r2, [r7, #24]
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdbe:	d102      	bne.n	800cdc6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	61fb      	str	r3, [r7, #28]
 800cdc4:	e023      	b.n	800ce0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	4b15      	ldr	r3, [pc, #84]	; (800ce20 <xTaskCheckForTimeOut+0xc4>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d007      	beq.n	800cde2 <xTaskCheckForTimeOut+0x86>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	69ba      	ldr	r2, [r7, #24]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d302      	bcc.n	800cde2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cddc:	2301      	movs	r3, #1
 800cdde:	61fb      	str	r3, [r7, #28]
 800cde0:	e015      	b.n	800ce0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	697a      	ldr	r2, [r7, #20]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d20b      	bcs.n	800ce04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	1ad2      	subs	r2, r2, r3
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7ff ff99 	bl	800cd30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	61fb      	str	r3, [r7, #28]
 800ce02:	e004      	b.n	800ce0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2200      	movs	r2, #0
 800ce08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ce0e:	f000 fc65 	bl	800d6dc <vPortExitCritical>

	return xReturn;
 800ce12:	69fb      	ldr	r3, [r7, #28]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3720      	adds	r7, #32
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	200005a0 	.word	0x200005a0
 800ce20:	200005b4 	.word	0x200005b4

0800ce24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce24:	b480      	push	{r7}
 800ce26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce28:	4b03      	ldr	r3, [pc, #12]	; (800ce38 <vTaskMissedYield+0x14>)
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	601a      	str	r2, [r3, #0]
}
 800ce2e:	bf00      	nop
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr
 800ce38:	200005b0 	.word	0x200005b0

0800ce3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce44:	f000 f854 	bl	800cef0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce48:	4b07      	ldr	r3, [pc, #28]	; (800ce68 <prvIdleTask+0x2c>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d907      	bls.n	800ce60 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ce50:	4b06      	ldr	r3, [pc, #24]	; (800ce6c <prvIdleTask+0x30>)
 800ce52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce56:	601a      	str	r2, [r3, #0]
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ce60:	f7f3 fb56 	bl	8000510 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ce64:	e7ee      	b.n	800ce44 <prvIdleTask+0x8>
 800ce66:	bf00      	nop
 800ce68:	200004a0 	.word	0x200004a0
 800ce6c:	e000ed04 	.word	0xe000ed04

0800ce70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce76:	2300      	movs	r3, #0
 800ce78:	607b      	str	r3, [r7, #4]
 800ce7a:	e00c      	b.n	800ce96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	4413      	add	r3, r2
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4a12      	ldr	r2, [pc, #72]	; (800ced0 <prvInitialiseTaskLists+0x60>)
 800ce88:	4413      	add	r3, r2
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fe fc24 	bl	800b6d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	3301      	adds	r3, #1
 800ce94:	607b      	str	r3, [r7, #4]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b06      	cmp	r3, #6
 800ce9a:	d9ef      	bls.n	800ce7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce9c:	480d      	ldr	r0, [pc, #52]	; (800ced4 <prvInitialiseTaskLists+0x64>)
 800ce9e:	f7fe fc1b 	bl	800b6d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cea2:	480d      	ldr	r0, [pc, #52]	; (800ced8 <prvInitialiseTaskLists+0x68>)
 800cea4:	f7fe fc18 	bl	800b6d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cea8:	480c      	ldr	r0, [pc, #48]	; (800cedc <prvInitialiseTaskLists+0x6c>)
 800ceaa:	f7fe fc15 	bl	800b6d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ceae:	480c      	ldr	r0, [pc, #48]	; (800cee0 <prvInitialiseTaskLists+0x70>)
 800ceb0:	f7fe fc12 	bl	800b6d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ceb4:	480b      	ldr	r0, [pc, #44]	; (800cee4 <prvInitialiseTaskLists+0x74>)
 800ceb6:	f7fe fc0f 	bl	800b6d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ceba:	4b0b      	ldr	r3, [pc, #44]	; (800cee8 <prvInitialiseTaskLists+0x78>)
 800cebc:	4a05      	ldr	r2, [pc, #20]	; (800ced4 <prvInitialiseTaskLists+0x64>)
 800cebe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cec0:	4b0a      	ldr	r3, [pc, #40]	; (800ceec <prvInitialiseTaskLists+0x7c>)
 800cec2:	4a05      	ldr	r2, [pc, #20]	; (800ced8 <prvInitialiseTaskLists+0x68>)
 800cec4:	601a      	str	r2, [r3, #0]
}
 800cec6:	bf00      	nop
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	200004a0 	.word	0x200004a0
 800ced4:	2000052c 	.word	0x2000052c
 800ced8:	20000540 	.word	0x20000540
 800cedc:	2000055c 	.word	0x2000055c
 800cee0:	20000570 	.word	0x20000570
 800cee4:	20000588 	.word	0x20000588
 800cee8:	20000554 	.word	0x20000554
 800ceec:	20000558 	.word	0x20000558

0800cef0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cef6:	e019      	b.n	800cf2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cef8:	f000 fbbe 	bl	800d678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cefc:	4b0f      	ldr	r3, [pc, #60]	; (800cf3c <prvCheckTasksWaitingTermination+0x4c>)
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	3304      	adds	r3, #4
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fe fc6f 	bl	800b7ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf0e:	4b0c      	ldr	r3, [pc, #48]	; (800cf40 <prvCheckTasksWaitingTermination+0x50>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3b01      	subs	r3, #1
 800cf14:	4a0a      	ldr	r2, [pc, #40]	; (800cf40 <prvCheckTasksWaitingTermination+0x50>)
 800cf16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf18:	4b0a      	ldr	r3, [pc, #40]	; (800cf44 <prvCheckTasksWaitingTermination+0x54>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	4a09      	ldr	r2, [pc, #36]	; (800cf44 <prvCheckTasksWaitingTermination+0x54>)
 800cf20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf22:	f000 fbdb 	bl	800d6dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f80e 	bl	800cf48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf2c:	4b05      	ldr	r3, [pc, #20]	; (800cf44 <prvCheckTasksWaitingTermination+0x54>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1e1      	bne.n	800cef8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf34:	bf00      	nop
 800cf36:	3708      	adds	r7, #8
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	20000570 	.word	0x20000570
 800cf40:	2000059c 	.word	0x2000059c
 800cf44:	20000584 	.word	0x20000584

0800cf48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d108      	bne.n	800cf6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 fd36 	bl	800d9d0 <vPortFree>
				vPortFree( pxTCB );
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fd33 	bl	800d9d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf6a:	e019      	b.n	800cfa0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d103      	bne.n	800cf7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fd2a 	bl	800d9d0 <vPortFree>
	}
 800cf7c:	e010      	b.n	800cfa0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cf84:	2b02      	cmp	r3, #2
 800cf86:	d00b      	beq.n	800cfa0 <prvDeleteTCB+0x58>
 800cf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8c:	b672      	cpsid	i
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	b662      	cpsie	i
 800cf9c:	60fb      	str	r3, [r7, #12]
 800cf9e:	e7fe      	b.n	800cf9e <prvDeleteTCB+0x56>
	}
 800cfa0:	bf00      	nop
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfae:	4b0c      	ldr	r3, [pc, #48]	; (800cfe0 <prvResetNextTaskUnblockTime+0x38>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d104      	bne.n	800cfc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cfb8:	4b0a      	ldr	r3, [pc, #40]	; (800cfe4 <prvResetNextTaskUnblockTime+0x3c>)
 800cfba:	f04f 32ff 	mov.w	r2, #4294967295
 800cfbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cfc0:	e008      	b.n	800cfd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfc2:	4b07      	ldr	r3, [pc, #28]	; (800cfe0 <prvResetNextTaskUnblockTime+0x38>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	4a04      	ldr	r2, [pc, #16]	; (800cfe4 <prvResetNextTaskUnblockTime+0x3c>)
 800cfd2:	6013      	str	r3, [r2, #0]
}
 800cfd4:	bf00      	nop
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	20000554 	.word	0x20000554
 800cfe4:	200005bc 	.word	0x200005bc

0800cfe8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cfee:	4b0b      	ldr	r3, [pc, #44]	; (800d01c <xTaskGetSchedulerState+0x34>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d102      	bne.n	800cffc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cff6:	2301      	movs	r3, #1
 800cff8:	607b      	str	r3, [r7, #4]
 800cffa:	e008      	b.n	800d00e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cffc:	4b08      	ldr	r3, [pc, #32]	; (800d020 <xTaskGetSchedulerState+0x38>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d102      	bne.n	800d00a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d004:	2302      	movs	r3, #2
 800d006:	607b      	str	r3, [r7, #4]
 800d008:	e001      	b.n	800d00e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d00a:	2300      	movs	r3, #0
 800d00c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d00e:	687b      	ldr	r3, [r7, #4]
	}
 800d010:	4618      	mov	r0, r3
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	200005a8 	.word	0x200005a8
 800d020:	200005c4 	.word	0x200005c4

0800d024 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d030:	2300      	movs	r3, #0
 800d032:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d069      	beq.n	800d10e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d03e:	4b36      	ldr	r3, [pc, #216]	; (800d118 <xTaskPriorityInherit+0xf4>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d044:	429a      	cmp	r2, r3
 800d046:	d259      	bcs.n	800d0fc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	699b      	ldr	r3, [r3, #24]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	db06      	blt.n	800d05e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d050:	4b31      	ldr	r3, [pc, #196]	; (800d118 <xTaskPriorityInherit+0xf4>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d056:	f1c3 0207 	rsb	r2, r3, #7
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	6959      	ldr	r1, [r3, #20]
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d066:	4613      	mov	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4413      	add	r3, r2
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	4a2b      	ldr	r2, [pc, #172]	; (800d11c <xTaskPriorityInherit+0xf8>)
 800d070:	4413      	add	r3, r2
 800d072:	4299      	cmp	r1, r3
 800d074:	d13a      	bne.n	800d0ec <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	3304      	adds	r3, #4
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7fe fbb6 	bl	800b7ec <uxListRemove>
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d115      	bne.n	800d0b2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d08a:	4924      	ldr	r1, [pc, #144]	; (800d11c <xTaskPriorityInherit+0xf8>)
 800d08c:	4613      	mov	r3, r2
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	4413      	add	r3, r2
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	440b      	add	r3, r1
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10a      	bne.n	800d0b2 <xTaskPriorityInherit+0x8e>
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d0a6:	43da      	mvns	r2, r3
 800d0a8:	4b1d      	ldr	r3, [pc, #116]	; (800d120 <xTaskPriorityInherit+0xfc>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4013      	ands	r3, r2
 800d0ae:	4a1c      	ldr	r2, [pc, #112]	; (800d120 <xTaskPriorityInherit+0xfc>)
 800d0b0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d0b2:	4b19      	ldr	r3, [pc, #100]	; (800d118 <xTaskPriorityInherit+0xf4>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	409a      	lsls	r2, r3
 800d0c4:	4b16      	ldr	r3, [pc, #88]	; (800d120 <xTaskPriorityInherit+0xfc>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	4a15      	ldr	r2, [pc, #84]	; (800d120 <xTaskPriorityInherit+0xfc>)
 800d0cc:	6013      	str	r3, [r2, #0]
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	4a10      	ldr	r2, [pc, #64]	; (800d11c <xTaskPriorityInherit+0xf8>)
 800d0dc:	441a      	add	r2, r3
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	3304      	adds	r3, #4
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	f7fe fb24 	bl	800b732 <vListInsertEnd>
 800d0ea:	e004      	b.n	800d0f6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d0ec:	4b0a      	ldr	r3, [pc, #40]	; (800d118 <xTaskPriorityInherit+0xf4>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	60fb      	str	r3, [r7, #12]
 800d0fa:	e008      	b.n	800d10e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d100:	4b05      	ldr	r3, [pc, #20]	; (800d118 <xTaskPriorityInherit+0xf4>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d106:	429a      	cmp	r2, r3
 800d108:	d201      	bcs.n	800d10e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d10a:	2301      	movs	r3, #1
 800d10c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d10e:	68fb      	ldr	r3, [r7, #12]
	}
 800d110:	4618      	mov	r0, r3
 800d112:	3710      	adds	r7, #16
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	2000049c 	.word	0x2000049c
 800d11c:	200004a0 	.word	0x200004a0
 800d120:	200005a4 	.word	0x200005a4

0800d124 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d124:	b580      	push	{r7, lr}
 800d126:	b086      	sub	sp, #24
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d130:	2300      	movs	r3, #0
 800d132:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d070      	beq.n	800d21c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d13a:	4b3b      	ldr	r3, [pc, #236]	; (800d228 <xTaskPriorityDisinherit+0x104>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	693a      	ldr	r2, [r7, #16]
 800d140:	429a      	cmp	r2, r3
 800d142:	d00b      	beq.n	800d15c <xTaskPriorityDisinherit+0x38>
 800d144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d148:	b672      	cpsid	i
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	b662      	cpsie	i
 800d158:	60fb      	str	r3, [r7, #12]
 800d15a:	e7fe      	b.n	800d15a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10b      	bne.n	800d17c <xTaskPriorityDisinherit+0x58>
 800d164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d168:	b672      	cpsid	i
 800d16a:	f383 8811 	msr	BASEPRI, r3
 800d16e:	f3bf 8f6f 	isb	sy
 800d172:	f3bf 8f4f 	dsb	sy
 800d176:	b662      	cpsie	i
 800d178:	60bb      	str	r3, [r7, #8]
 800d17a:	e7fe      	b.n	800d17a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d180:	1e5a      	subs	r2, r3, #1
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d18e:	429a      	cmp	r2, r3
 800d190:	d044      	beq.n	800d21c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d196:	2b00      	cmp	r3, #0
 800d198:	d140      	bne.n	800d21c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	3304      	adds	r3, #4
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fe fb24 	bl	800b7ec <uxListRemove>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d115      	bne.n	800d1d6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ae:	491f      	ldr	r1, [pc, #124]	; (800d22c <xTaskPriorityDisinherit+0x108>)
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	4413      	add	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	440b      	add	r3, r1
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10a      	bne.n	800d1d6 <xTaskPriorityDisinherit+0xb2>
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ca:	43da      	mvns	r2, r3
 800d1cc:	4b18      	ldr	r3, [pc, #96]	; (800d230 <xTaskPriorityDisinherit+0x10c>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	4a17      	ldr	r2, [pc, #92]	; (800d230 <xTaskPriorityDisinherit+0x10c>)
 800d1d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e2:	f1c3 0207 	rsb	r2, r3, #7
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	409a      	lsls	r2, r3
 800d1f2:	4b0f      	ldr	r3, [pc, #60]	; (800d230 <xTaskPriorityDisinherit+0x10c>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	4a0d      	ldr	r2, [pc, #52]	; (800d230 <xTaskPriorityDisinherit+0x10c>)
 800d1fa:	6013      	str	r3, [r2, #0]
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d200:	4613      	mov	r3, r2
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	4413      	add	r3, r2
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	4a08      	ldr	r2, [pc, #32]	; (800d22c <xTaskPriorityDisinherit+0x108>)
 800d20a:	441a      	add	r2, r3
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	3304      	adds	r3, #4
 800d210:	4619      	mov	r1, r3
 800d212:	4610      	mov	r0, r2
 800d214:	f7fe fa8d 	bl	800b732 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d218:	2301      	movs	r3, #1
 800d21a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d21c:	697b      	ldr	r3, [r7, #20]
	}
 800d21e:	4618      	mov	r0, r3
 800d220:	3718      	adds	r7, #24
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	2000049c 	.word	0x2000049c
 800d22c:	200004a0 	.word	0x200004a0
 800d230:	200005a4 	.word	0x200005a4

0800d234 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d234:	b580      	push	{r7, lr}
 800d236:	b088      	sub	sp, #32
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d242:	2301      	movs	r3, #1
 800d244:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 8085 	beq.w	800d358 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10b      	bne.n	800d26e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800d256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25a:	b672      	cpsid	i
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	b662      	cpsie	i
 800d26a:	60fb      	str	r3, [r7, #12]
 800d26c:	e7fe      	b.n	800d26c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d272:	683a      	ldr	r2, [r7, #0]
 800d274:	429a      	cmp	r2, r3
 800d276:	d902      	bls.n	800d27e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	61fb      	str	r3, [r7, #28]
 800d27c:	e002      	b.n	800d284 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d282:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d288:	69fa      	ldr	r2, [r7, #28]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d064      	beq.n	800d358 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	429a      	cmp	r2, r3
 800d296:	d15f      	bne.n	800d358 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d298:	4b31      	ldr	r3, [pc, #196]	; (800d360 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	69ba      	ldr	r2, [r7, #24]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d10b      	bne.n	800d2ba <vTaskPriorityDisinheritAfterTimeout+0x86>
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	b672      	cpsid	i
 800d2a8:	f383 8811 	msr	BASEPRI, r3
 800d2ac:	f3bf 8f6f 	isb	sy
 800d2b0:	f3bf 8f4f 	dsb	sy
 800d2b4:	b662      	cpsie	i
 800d2b6:	60bb      	str	r3, [r7, #8]
 800d2b8:	e7fe      	b.n	800d2b8 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d2ba:	69bb      	ldr	r3, [r7, #24]
 800d2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2be:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	69fa      	ldr	r2, [r7, #28]
 800d2c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	699b      	ldr	r3, [r3, #24]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	db04      	blt.n	800d2d8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	f1c3 0207 	rsb	r2, r3, #7
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	6959      	ldr	r1, [r3, #20]
 800d2dc:	693a      	ldr	r2, [r7, #16]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4413      	add	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4a1f      	ldr	r2, [pc, #124]	; (800d364 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d2e8:	4413      	add	r3, r2
 800d2ea:	4299      	cmp	r1, r3
 800d2ec:	d134      	bne.n	800d358 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	3304      	adds	r3, #4
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fe fa7a 	bl	800b7ec <uxListRemove>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d115      	bne.n	800d32a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d302:	4918      	ldr	r1, [pc, #96]	; (800d364 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d304:	4613      	mov	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	440b      	add	r3, r1
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d10a      	bne.n	800d32a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d318:	2201      	movs	r2, #1
 800d31a:	fa02 f303 	lsl.w	r3, r2, r3
 800d31e:	43da      	mvns	r2, r3
 800d320:	4b11      	ldr	r3, [pc, #68]	; (800d368 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4013      	ands	r3, r2
 800d326:	4a10      	ldr	r2, [pc, #64]	; (800d368 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d328:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32e:	2201      	movs	r2, #1
 800d330:	409a      	lsls	r2, r3
 800d332:	4b0d      	ldr	r3, [pc, #52]	; (800d368 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4313      	orrs	r3, r2
 800d338:	4a0b      	ldr	r2, [pc, #44]	; (800d368 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d33a:	6013      	str	r3, [r2, #0]
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d340:	4613      	mov	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	4413      	add	r3, r2
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	4a06      	ldr	r2, [pc, #24]	; (800d364 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d34a:	441a      	add	r2, r3
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	3304      	adds	r3, #4
 800d350:	4619      	mov	r1, r3
 800d352:	4610      	mov	r0, r2
 800d354:	f7fe f9ed 	bl	800b732 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d358:	bf00      	nop
 800d35a:	3720      	adds	r7, #32
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	2000049c 	.word	0x2000049c
 800d364:	200004a0 	.word	0x200004a0
 800d368:	200005a4 	.word	0x200005a4

0800d36c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d36c:	b480      	push	{r7}
 800d36e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d370:	4b07      	ldr	r3, [pc, #28]	; (800d390 <pvTaskIncrementMutexHeldCount+0x24>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d004      	beq.n	800d382 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d378:	4b05      	ldr	r3, [pc, #20]	; (800d390 <pvTaskIncrementMutexHeldCount+0x24>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d37e:	3201      	adds	r2, #1
 800d380:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d382:	4b03      	ldr	r3, [pc, #12]	; (800d390 <pvTaskIncrementMutexHeldCount+0x24>)
 800d384:	681b      	ldr	r3, [r3, #0]
	}
 800d386:	4618      	mov	r0, r3
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr
 800d390:	2000049c 	.word	0x2000049c

0800d394 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d39e:	4b29      	ldr	r3, [pc, #164]	; (800d444 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3a4:	4b28      	ldr	r3, [pc, #160]	; (800d448 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fe fa1e 	bl	800b7ec <uxListRemove>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10b      	bne.n	800d3ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d3b6:	4b24      	ldr	r3, [pc, #144]	; (800d448 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3bc:	2201      	movs	r2, #1
 800d3be:	fa02 f303 	lsl.w	r3, r2, r3
 800d3c2:	43da      	mvns	r2, r3
 800d3c4:	4b21      	ldr	r3, [pc, #132]	; (800d44c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4013      	ands	r3, r2
 800d3ca:	4a20      	ldr	r2, [pc, #128]	; (800d44c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d4:	d10a      	bne.n	800d3ec <prvAddCurrentTaskToDelayedList+0x58>
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d007      	beq.n	800d3ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3dc:	4b1a      	ldr	r3, [pc, #104]	; (800d448 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3304      	adds	r3, #4
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	481a      	ldr	r0, [pc, #104]	; (800d450 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d3e6:	f7fe f9a4 	bl	800b732 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d3ea:	e026      	b.n	800d43a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d3f4:	4b14      	ldr	r3, [pc, #80]	; (800d448 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	68ba      	ldr	r2, [r7, #8]
 800d3fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	429a      	cmp	r2, r3
 800d402:	d209      	bcs.n	800d418 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d404:	4b13      	ldr	r3, [pc, #76]	; (800d454 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	4b0f      	ldr	r3, [pc, #60]	; (800d448 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3304      	adds	r3, #4
 800d40e:	4619      	mov	r1, r3
 800d410:	4610      	mov	r0, r2
 800d412:	f7fe f9b2 	bl	800b77a <vListInsert>
}
 800d416:	e010      	b.n	800d43a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d418:	4b0f      	ldr	r3, [pc, #60]	; (800d458 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	4b0a      	ldr	r3, [pc, #40]	; (800d448 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3304      	adds	r3, #4
 800d422:	4619      	mov	r1, r3
 800d424:	4610      	mov	r0, r2
 800d426:	f7fe f9a8 	bl	800b77a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d42a:	4b0c      	ldr	r3, [pc, #48]	; (800d45c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	68ba      	ldr	r2, [r7, #8]
 800d430:	429a      	cmp	r2, r3
 800d432:	d202      	bcs.n	800d43a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d434:	4a09      	ldr	r2, [pc, #36]	; (800d45c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	6013      	str	r3, [r2, #0]
}
 800d43a:	bf00      	nop
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	200005a0 	.word	0x200005a0
 800d448:	2000049c 	.word	0x2000049c
 800d44c:	200005a4 	.word	0x200005a4
 800d450:	20000588 	.word	0x20000588
 800d454:	20000558 	.word	0x20000558
 800d458:	20000554 	.word	0x20000554
 800d45c:	200005bc 	.word	0x200005bc

0800d460 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	3b04      	subs	r3, #4
 800d470:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d478:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	3b04      	subs	r3, #4
 800d47e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	f023 0201 	bic.w	r2, r3, #1
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	3b04      	subs	r3, #4
 800d48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d490:	4a0c      	ldr	r2, [pc, #48]	; (800d4c4 <pxPortInitialiseStack+0x64>)
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	3b14      	subs	r3, #20
 800d49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	3b04      	subs	r3, #4
 800d4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f06f 0202 	mvn.w	r2, #2
 800d4ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3b20      	subs	r3, #32
 800d4b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3714      	adds	r7, #20
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr
 800d4c4:	0800d4c9 	.word	0x0800d4c9

0800d4c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b085      	sub	sp, #20
 800d4cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d4d2:	4b13      	ldr	r3, [pc, #76]	; (800d520 <prvTaskExitError+0x58>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4da:	d00b      	beq.n	800d4f4 <prvTaskExitError+0x2c>
 800d4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e0:	b672      	cpsid	i
 800d4e2:	f383 8811 	msr	BASEPRI, r3
 800d4e6:	f3bf 8f6f 	isb	sy
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	b662      	cpsie	i
 800d4f0:	60fb      	str	r3, [r7, #12]
 800d4f2:	e7fe      	b.n	800d4f2 <prvTaskExitError+0x2a>
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	b672      	cpsid	i
 800d4fa:	f383 8811 	msr	BASEPRI, r3
 800d4fe:	f3bf 8f6f 	isb	sy
 800d502:	f3bf 8f4f 	dsb	sy
 800d506:	b662      	cpsie	i
 800d508:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d50a:	bf00      	nop
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d0fc      	beq.n	800d50c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d512:	bf00      	nop
 800d514:	3714      	adds	r7, #20
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	20000054 	.word	0x20000054
	...

0800d530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d530:	4b07      	ldr	r3, [pc, #28]	; (800d550 <pxCurrentTCBConst2>)
 800d532:	6819      	ldr	r1, [r3, #0]
 800d534:	6808      	ldr	r0, [r1, #0]
 800d536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53a:	f380 8809 	msr	PSP, r0
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f04f 0000 	mov.w	r0, #0
 800d546:	f380 8811 	msr	BASEPRI, r0
 800d54a:	4770      	bx	lr
 800d54c:	f3af 8000 	nop.w

0800d550 <pxCurrentTCBConst2>:
 800d550:	2000049c 	.word	0x2000049c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d554:	bf00      	nop
 800d556:	bf00      	nop

0800d558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d558:	4808      	ldr	r0, [pc, #32]	; (800d57c <prvPortStartFirstTask+0x24>)
 800d55a:	6800      	ldr	r0, [r0, #0]
 800d55c:	6800      	ldr	r0, [r0, #0]
 800d55e:	f380 8808 	msr	MSP, r0
 800d562:	f04f 0000 	mov.w	r0, #0
 800d566:	f380 8814 	msr	CONTROL, r0
 800d56a:	b662      	cpsie	i
 800d56c:	b661      	cpsie	f
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	f3bf 8f6f 	isb	sy
 800d576:	df00      	svc	0
 800d578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d57a:	bf00      	nop
 800d57c:	e000ed08 	.word	0xe000ed08

0800d580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d586:	4b36      	ldr	r3, [pc, #216]	; (800d660 <xPortStartScheduler+0xe0>)
 800d588:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	22ff      	movs	r2, #255	; 0xff
 800d596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d5a0:	78fb      	ldrb	r3, [r7, #3]
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	4b2e      	ldr	r3, [pc, #184]	; (800d664 <xPortStartScheduler+0xe4>)
 800d5ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d5ae:	4b2e      	ldr	r3, [pc, #184]	; (800d668 <xPortStartScheduler+0xe8>)
 800d5b0:	2207      	movs	r2, #7
 800d5b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5b4:	e009      	b.n	800d5ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d5b6:	4b2c      	ldr	r3, [pc, #176]	; (800d668 <xPortStartScheduler+0xe8>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	4a2a      	ldr	r2, [pc, #168]	; (800d668 <xPortStartScheduler+0xe8>)
 800d5be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d5c0:	78fb      	ldrb	r3, [r7, #3]
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5ca:	78fb      	ldrb	r3, [r7, #3]
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5d2:	2b80      	cmp	r3, #128	; 0x80
 800d5d4:	d0ef      	beq.n	800d5b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d5d6:	4b24      	ldr	r3, [pc, #144]	; (800d668 <xPortStartScheduler+0xe8>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f1c3 0307 	rsb	r3, r3, #7
 800d5de:	2b04      	cmp	r3, #4
 800d5e0:	d00b      	beq.n	800d5fa <xPortStartScheduler+0x7a>
 800d5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e6:	b672      	cpsid	i
 800d5e8:	f383 8811 	msr	BASEPRI, r3
 800d5ec:	f3bf 8f6f 	isb	sy
 800d5f0:	f3bf 8f4f 	dsb	sy
 800d5f4:	b662      	cpsie	i
 800d5f6:	60bb      	str	r3, [r7, #8]
 800d5f8:	e7fe      	b.n	800d5f8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d5fa:	4b1b      	ldr	r3, [pc, #108]	; (800d668 <xPortStartScheduler+0xe8>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	021b      	lsls	r3, r3, #8
 800d600:	4a19      	ldr	r2, [pc, #100]	; (800d668 <xPortStartScheduler+0xe8>)
 800d602:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d604:	4b18      	ldr	r3, [pc, #96]	; (800d668 <xPortStartScheduler+0xe8>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d60c:	4a16      	ldr	r2, [pc, #88]	; (800d668 <xPortStartScheduler+0xe8>)
 800d60e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	b2da      	uxtb	r2, r3
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d618:	4b14      	ldr	r3, [pc, #80]	; (800d66c <xPortStartScheduler+0xec>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a13      	ldr	r2, [pc, #76]	; (800d66c <xPortStartScheduler+0xec>)
 800d61e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d622:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d624:	4b11      	ldr	r3, [pc, #68]	; (800d66c <xPortStartScheduler+0xec>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a10      	ldr	r2, [pc, #64]	; (800d66c <xPortStartScheduler+0xec>)
 800d62a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d62e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d630:	f000 f8d4 	bl	800d7dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d634:	4b0e      	ldr	r3, [pc, #56]	; (800d670 <xPortStartScheduler+0xf0>)
 800d636:	2200      	movs	r2, #0
 800d638:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d63a:	f000 f8f3 	bl	800d824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d63e:	4b0d      	ldr	r3, [pc, #52]	; (800d674 <xPortStartScheduler+0xf4>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a0c      	ldr	r2, [pc, #48]	; (800d674 <xPortStartScheduler+0xf4>)
 800d644:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d648:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d64a:	f7ff ff85 	bl	800d558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d64e:	f7ff fa63 	bl	800cb18 <vTaskSwitchContext>
	prvTaskExitError();
 800d652:	f7ff ff39 	bl	800d4c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	e000e400 	.word	0xe000e400
 800d664:	200005c8 	.word	0x200005c8
 800d668:	200005cc 	.word	0x200005cc
 800d66c:	e000ed20 	.word	0xe000ed20
 800d670:	20000054 	.word	0x20000054
 800d674:	e000ef34 	.word	0xe000ef34

0800d678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	b672      	cpsid	i
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	b662      	cpsie	i
 800d692:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d694:	4b0f      	ldr	r3, [pc, #60]	; (800d6d4 <vPortEnterCritical+0x5c>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3301      	adds	r3, #1
 800d69a:	4a0e      	ldr	r2, [pc, #56]	; (800d6d4 <vPortEnterCritical+0x5c>)
 800d69c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d69e:	4b0d      	ldr	r3, [pc, #52]	; (800d6d4 <vPortEnterCritical+0x5c>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d110      	bne.n	800d6c8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d6a6:	4b0c      	ldr	r3, [pc, #48]	; (800d6d8 <vPortEnterCritical+0x60>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00b      	beq.n	800d6c8 <vPortEnterCritical+0x50>
 800d6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b4:	b672      	cpsid	i
 800d6b6:	f383 8811 	msr	BASEPRI, r3
 800d6ba:	f3bf 8f6f 	isb	sy
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	b662      	cpsie	i
 800d6c4:	603b      	str	r3, [r7, #0]
 800d6c6:	e7fe      	b.n	800d6c6 <vPortEnterCritical+0x4e>
	}
}
 800d6c8:	bf00      	nop
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr
 800d6d4:	20000054 	.word	0x20000054
 800d6d8:	e000ed04 	.word	0xe000ed04

0800d6dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d6e2:	4b12      	ldr	r3, [pc, #72]	; (800d72c <vPortExitCritical+0x50>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10b      	bne.n	800d702 <vPortExitCritical+0x26>
 800d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ee:	b672      	cpsid	i
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	b662      	cpsie	i
 800d6fe:	607b      	str	r3, [r7, #4]
 800d700:	e7fe      	b.n	800d700 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800d702:	4b0a      	ldr	r3, [pc, #40]	; (800d72c <vPortExitCritical+0x50>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	3b01      	subs	r3, #1
 800d708:	4a08      	ldr	r2, [pc, #32]	; (800d72c <vPortExitCritical+0x50>)
 800d70a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d70c:	4b07      	ldr	r3, [pc, #28]	; (800d72c <vPortExitCritical+0x50>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d104      	bne.n	800d71e <vPortExitCritical+0x42>
 800d714:	2300      	movs	r3, #0
 800d716:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d71e:	bf00      	nop
 800d720:	370c      	adds	r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	20000054 	.word	0x20000054

0800d730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d730:	f3ef 8009 	mrs	r0, PSP
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	4b15      	ldr	r3, [pc, #84]	; (800d790 <pxCurrentTCBConst>)
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	f01e 0f10 	tst.w	lr, #16
 800d740:	bf08      	it	eq
 800d742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d74a:	6010      	str	r0, [r2, #0]
 800d74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d750:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d754:	b672      	cpsid	i
 800d756:	f380 8811 	msr	BASEPRI, r0
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	b662      	cpsie	i
 800d764:	f7ff f9d8 	bl	800cb18 <vTaskSwitchContext>
 800d768:	f04f 0000 	mov.w	r0, #0
 800d76c:	f380 8811 	msr	BASEPRI, r0
 800d770:	bc09      	pop	{r0, r3}
 800d772:	6819      	ldr	r1, [r3, #0]
 800d774:	6808      	ldr	r0, [r1, #0]
 800d776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77a:	f01e 0f10 	tst.w	lr, #16
 800d77e:	bf08      	it	eq
 800d780:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d784:	f380 8809 	msr	PSP, r0
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop

0800d790 <pxCurrentTCBConst>:
 800d790:	2000049c 	.word	0x2000049c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d794:	bf00      	nop
 800d796:	bf00      	nop

0800d798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	b672      	cpsid	i
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	b662      	cpsie	i
 800d7b2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d7b4:	f7ff f8f6 	bl	800c9a4 <xTaskIncrementTick>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d003      	beq.n	800d7c6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d7be:	4b06      	ldr	r3, [pc, #24]	; (800d7d8 <SysTick_Handler+0x40>)
 800d7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d7d0:	bf00      	nop
 800d7d2:	3708      	adds	r7, #8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	e000ed04 	.word	0xe000ed04

0800d7dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d7dc:	b480      	push	{r7}
 800d7de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d7e0:	4b0b      	ldr	r3, [pc, #44]	; (800d810 <vPortSetupTimerInterrupt+0x34>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d7e6:	4b0b      	ldr	r3, [pc, #44]	; (800d814 <vPortSetupTimerInterrupt+0x38>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d7ec:	4b0a      	ldr	r3, [pc, #40]	; (800d818 <vPortSetupTimerInterrupt+0x3c>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a0a      	ldr	r2, [pc, #40]	; (800d81c <vPortSetupTimerInterrupt+0x40>)
 800d7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7f6:	099b      	lsrs	r3, r3, #6
 800d7f8:	4a09      	ldr	r2, [pc, #36]	; (800d820 <vPortSetupTimerInterrupt+0x44>)
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d7fe:	4b04      	ldr	r3, [pc, #16]	; (800d810 <vPortSetupTimerInterrupt+0x34>)
 800d800:	2207      	movs	r2, #7
 800d802:	601a      	str	r2, [r3, #0]
}
 800d804:	bf00      	nop
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop
 800d810:	e000e010 	.word	0xe000e010
 800d814:	e000e018 	.word	0xe000e018
 800d818:	20000048 	.word	0x20000048
 800d81c:	10624dd3 	.word	0x10624dd3
 800d820:	e000e014 	.word	0xe000e014

0800d824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d834 <vPortEnableVFP+0x10>
 800d828:	6801      	ldr	r1, [r0, #0]
 800d82a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d82e:	6001      	str	r1, [r0, #0]
 800d830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d832:	bf00      	nop
 800d834:	e000ed88 	.word	0xe000ed88

0800d838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b08a      	sub	sp, #40	; 0x28
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d840:	2300      	movs	r3, #0
 800d842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d844:	f7fe fff2 	bl	800c82c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d848:	4b5c      	ldr	r3, [pc, #368]	; (800d9bc <pvPortMalloc+0x184>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d101      	bne.n	800d854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d850:	f000 f91a 	bl	800da88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d854:	4b5a      	ldr	r3, [pc, #360]	; (800d9c0 <pvPortMalloc+0x188>)
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	4013      	ands	r3, r2
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f040 8090 	bne.w	800d982 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d01e      	beq.n	800d8a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d868:	2208      	movs	r2, #8
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	4413      	add	r3, r2
 800d86e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f003 0307 	and.w	r3, r3, #7
 800d876:	2b00      	cmp	r3, #0
 800d878:	d015      	beq.n	800d8a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f023 0307 	bic.w	r3, r3, #7
 800d880:	3308      	adds	r3, #8
 800d882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f003 0307 	and.w	r3, r3, #7
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00b      	beq.n	800d8a6 <pvPortMalloc+0x6e>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	b672      	cpsid	i
 800d894:	f383 8811 	msr	BASEPRI, r3
 800d898:	f3bf 8f6f 	isb	sy
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	b662      	cpsie	i
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	e7fe      	b.n	800d8a4 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d06a      	beq.n	800d982 <pvPortMalloc+0x14a>
 800d8ac:	4b45      	ldr	r3, [pc, #276]	; (800d9c4 <pvPortMalloc+0x18c>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d865      	bhi.n	800d982 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d8b6:	4b44      	ldr	r3, [pc, #272]	; (800d9c8 <pvPortMalloc+0x190>)
 800d8b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d8ba:	4b43      	ldr	r3, [pc, #268]	; (800d9c8 <pvPortMalloc+0x190>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d8c0:	e004      	b.n	800d8cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d903      	bls.n	800d8de <pvPortMalloc+0xa6>
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1f1      	bne.n	800d8c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d8de:	4b37      	ldr	r3, [pc, #220]	; (800d9bc <pvPortMalloc+0x184>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d04c      	beq.n	800d982 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2208      	movs	r2, #8
 800d8ee:	4413      	add	r3, r2
 800d8f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	6a3b      	ldr	r3, [r7, #32]
 800d8f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fc:	685a      	ldr	r2, [r3, #4]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	1ad2      	subs	r2, r2, r3
 800d902:	2308      	movs	r3, #8
 800d904:	005b      	lsls	r3, r3, #1
 800d906:	429a      	cmp	r2, r3
 800d908:	d920      	bls.n	800d94c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d90a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4413      	add	r3, r2
 800d910:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	f003 0307 	and.w	r3, r3, #7
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d00b      	beq.n	800d934 <pvPortMalloc+0xfc>
 800d91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d920:	b672      	cpsid	i
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	b662      	cpsie	i
 800d930:	613b      	str	r3, [r7, #16]
 800d932:	e7fe      	b.n	800d932 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	685a      	ldr	r2, [r3, #4]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	1ad2      	subs	r2, r2, r3
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d946:	69b8      	ldr	r0, [r7, #24]
 800d948:	f000 f900 	bl	800db4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d94c:	4b1d      	ldr	r3, [pc, #116]	; (800d9c4 <pvPortMalloc+0x18c>)
 800d94e:	681a      	ldr	r2, [r3, #0]
 800d950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	1ad3      	subs	r3, r2, r3
 800d956:	4a1b      	ldr	r2, [pc, #108]	; (800d9c4 <pvPortMalloc+0x18c>)
 800d958:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d95a:	4b1a      	ldr	r3, [pc, #104]	; (800d9c4 <pvPortMalloc+0x18c>)
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	4b1b      	ldr	r3, [pc, #108]	; (800d9cc <pvPortMalloc+0x194>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	429a      	cmp	r2, r3
 800d964:	d203      	bcs.n	800d96e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d966:	4b17      	ldr	r3, [pc, #92]	; (800d9c4 <pvPortMalloc+0x18c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a18      	ldr	r2, [pc, #96]	; (800d9cc <pvPortMalloc+0x194>)
 800d96c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d970:	685a      	ldr	r2, [r3, #4]
 800d972:	4b13      	ldr	r3, [pc, #76]	; (800d9c0 <pvPortMalloc+0x188>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	431a      	orrs	r2, r3
 800d978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97e:	2200      	movs	r2, #0
 800d980:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d982:	f7fe ff61 	bl	800c848 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d101      	bne.n	800d990 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d98c:	f7f2 fdd2 	bl	8000534 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	f003 0307 	and.w	r3, r3, #7
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00b      	beq.n	800d9b2 <pvPortMalloc+0x17a>
 800d99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99e:	b672      	cpsid	i
 800d9a0:	f383 8811 	msr	BASEPRI, r3
 800d9a4:	f3bf 8f6f 	isb	sy
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	b662      	cpsie	i
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	e7fe      	b.n	800d9b0 <pvPortMalloc+0x178>
	return pvReturn;
 800d9b2:	69fb      	ldr	r3, [r7, #28]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3728      	adds	r7, #40	; 0x28
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	200085d8 	.word	0x200085d8
 800d9c0:	200085e4 	.word	0x200085e4
 800d9c4:	200085dc 	.word	0x200085dc
 800d9c8:	200085d0 	.word	0x200085d0
 800d9cc:	200085e0 	.word	0x200085e0

0800d9d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d04a      	beq.n	800da78 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d9e2:	2308      	movs	r3, #8
 800d9e4:	425b      	negs	r3, r3
 800d9e6:	697a      	ldr	r2, [r7, #20]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	685a      	ldr	r2, [r3, #4]
 800d9f4:	4b22      	ldr	r3, [pc, #136]	; (800da80 <vPortFree+0xb0>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4013      	ands	r3, r2
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d10b      	bne.n	800da16 <vPortFree+0x46>
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	b672      	cpsid	i
 800da04:	f383 8811 	msr	BASEPRI, r3
 800da08:	f3bf 8f6f 	isb	sy
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	b662      	cpsie	i
 800da12:	60fb      	str	r3, [r7, #12]
 800da14:	e7fe      	b.n	800da14 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00b      	beq.n	800da36 <vPortFree+0x66>
 800da1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da22:	b672      	cpsid	i
 800da24:	f383 8811 	msr	BASEPRI, r3
 800da28:	f3bf 8f6f 	isb	sy
 800da2c:	f3bf 8f4f 	dsb	sy
 800da30:	b662      	cpsie	i
 800da32:	60bb      	str	r3, [r7, #8]
 800da34:	e7fe      	b.n	800da34 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	685a      	ldr	r2, [r3, #4]
 800da3a:	4b11      	ldr	r3, [pc, #68]	; (800da80 <vPortFree+0xb0>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4013      	ands	r3, r2
 800da40:	2b00      	cmp	r3, #0
 800da42:	d019      	beq.n	800da78 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d115      	bne.n	800da78 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	685a      	ldr	r2, [r3, #4]
 800da50:	4b0b      	ldr	r3, [pc, #44]	; (800da80 <vPortFree+0xb0>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	43db      	mvns	r3, r3
 800da56:	401a      	ands	r2, r3
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800da5c:	f7fe fee6 	bl	800c82c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	685a      	ldr	r2, [r3, #4]
 800da64:	4b07      	ldr	r3, [pc, #28]	; (800da84 <vPortFree+0xb4>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4413      	add	r3, r2
 800da6a:	4a06      	ldr	r2, [pc, #24]	; (800da84 <vPortFree+0xb4>)
 800da6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800da6e:	6938      	ldr	r0, [r7, #16]
 800da70:	f000 f86c 	bl	800db4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800da74:	f7fe fee8 	bl	800c848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800da78:	bf00      	nop
 800da7a:	3718      	adds	r7, #24
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	200085e4 	.word	0x200085e4
 800da84:	200085dc 	.word	0x200085dc

0800da88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da88:	b480      	push	{r7}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da94:	4b27      	ldr	r3, [pc, #156]	; (800db34 <prvHeapInit+0xac>)
 800da96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f003 0307 	and.w	r3, r3, #7
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00c      	beq.n	800dabc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	3307      	adds	r3, #7
 800daa6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f023 0307 	bic.w	r3, r3, #7
 800daae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	1ad3      	subs	r3, r2, r3
 800dab6:	4a1f      	ldr	r2, [pc, #124]	; (800db34 <prvHeapInit+0xac>)
 800dab8:	4413      	add	r3, r2
 800daba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dac0:	4a1d      	ldr	r2, [pc, #116]	; (800db38 <prvHeapInit+0xb0>)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dac6:	4b1c      	ldr	r3, [pc, #112]	; (800db38 <prvHeapInit+0xb0>)
 800dac8:	2200      	movs	r2, #0
 800daca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	4413      	add	r3, r2
 800dad2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dad4:	2208      	movs	r2, #8
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	1a9b      	subs	r3, r3, r2
 800dada:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f023 0307 	bic.w	r3, r3, #7
 800dae2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	4a15      	ldr	r2, [pc, #84]	; (800db3c <prvHeapInit+0xb4>)
 800dae8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800daea:	4b14      	ldr	r3, [pc, #80]	; (800db3c <prvHeapInit+0xb4>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2200      	movs	r2, #0
 800daf0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800daf2:	4b12      	ldr	r3, [pc, #72]	; (800db3c <prvHeapInit+0xb4>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2200      	movs	r2, #0
 800daf8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	1ad2      	subs	r2, r2, r3
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db08:	4b0c      	ldr	r3, [pc, #48]	; (800db3c <prvHeapInit+0xb4>)
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	4a0a      	ldr	r2, [pc, #40]	; (800db40 <prvHeapInit+0xb8>)
 800db16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	4a09      	ldr	r2, [pc, #36]	; (800db44 <prvHeapInit+0xbc>)
 800db1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800db20:	4b09      	ldr	r3, [pc, #36]	; (800db48 <prvHeapInit+0xc0>)
 800db22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800db26:	601a      	str	r2, [r3, #0]
}
 800db28:	bf00      	nop
 800db2a:	3714      	adds	r7, #20
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr
 800db34:	200005d0 	.word	0x200005d0
 800db38:	200085d0 	.word	0x200085d0
 800db3c:	200085d8 	.word	0x200085d8
 800db40:	200085e0 	.word	0x200085e0
 800db44:	200085dc 	.word	0x200085dc
 800db48:	200085e4 	.word	0x200085e4

0800db4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db4c:	b480      	push	{r7}
 800db4e:	b085      	sub	sp, #20
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db54:	4b28      	ldr	r3, [pc, #160]	; (800dbf8 <prvInsertBlockIntoFreeList+0xac>)
 800db56:	60fb      	str	r3, [r7, #12]
 800db58:	e002      	b.n	800db60 <prvInsertBlockIntoFreeList+0x14>
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	60fb      	str	r3, [r7, #12]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	429a      	cmp	r2, r3
 800db68:	d8f7      	bhi.n	800db5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	68ba      	ldr	r2, [r7, #8]
 800db74:	4413      	add	r3, r2
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d108      	bne.n	800db8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	685a      	ldr	r2, [r3, #4]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	441a      	add	r2, r3
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	68ba      	ldr	r2, [r7, #8]
 800db98:	441a      	add	r2, r3
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d118      	bne.n	800dbd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	4b15      	ldr	r3, [pc, #84]	; (800dbfc <prvInsertBlockIntoFreeList+0xb0>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d00d      	beq.n	800dbca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	685a      	ldr	r2, [r3, #4]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	441a      	add	r2, r3
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	601a      	str	r2, [r3, #0]
 800dbc8:	e008      	b.n	800dbdc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dbca:	4b0c      	ldr	r3, [pc, #48]	; (800dbfc <prvInsertBlockIntoFreeList+0xb0>)
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	601a      	str	r2, [r3, #0]
 800dbd2:	e003      	b.n	800dbdc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d002      	beq.n	800dbea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbea:	bf00      	nop
 800dbec:	3714      	adds	r7, #20
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf4:	4770      	bx	lr
 800dbf6:	bf00      	nop
 800dbf8:	200085d0 	.word	0x200085d0
 800dbfc:	200085d8 	.word	0x200085d8

0800dc00 <__libc_init_array>:
 800dc00:	b570      	push	{r4, r5, r6, lr}
 800dc02:	4e0d      	ldr	r6, [pc, #52]	; (800dc38 <__libc_init_array+0x38>)
 800dc04:	4c0d      	ldr	r4, [pc, #52]	; (800dc3c <__libc_init_array+0x3c>)
 800dc06:	1ba4      	subs	r4, r4, r6
 800dc08:	10a4      	asrs	r4, r4, #2
 800dc0a:	2500      	movs	r5, #0
 800dc0c:	42a5      	cmp	r5, r4
 800dc0e:	d109      	bne.n	800dc24 <__libc_init_array+0x24>
 800dc10:	4e0b      	ldr	r6, [pc, #44]	; (800dc40 <__libc_init_array+0x40>)
 800dc12:	4c0c      	ldr	r4, [pc, #48]	; (800dc44 <__libc_init_array+0x44>)
 800dc14:	f000 f82c 	bl	800dc70 <_init>
 800dc18:	1ba4      	subs	r4, r4, r6
 800dc1a:	10a4      	asrs	r4, r4, #2
 800dc1c:	2500      	movs	r5, #0
 800dc1e:	42a5      	cmp	r5, r4
 800dc20:	d105      	bne.n	800dc2e <__libc_init_array+0x2e>
 800dc22:	bd70      	pop	{r4, r5, r6, pc}
 800dc24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dc28:	4798      	blx	r3
 800dc2a:	3501      	adds	r5, #1
 800dc2c:	e7ee      	b.n	800dc0c <__libc_init_array+0xc>
 800dc2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dc32:	4798      	blx	r3
 800dc34:	3501      	adds	r5, #1
 800dc36:	e7f2      	b.n	800dc1e <__libc_init_array+0x1e>
 800dc38:	0800fc98 	.word	0x0800fc98
 800dc3c:	0800fc98 	.word	0x0800fc98
 800dc40:	0800fc98 	.word	0x0800fc98
 800dc44:	0800fc9c 	.word	0x0800fc9c

0800dc48 <memcpy>:
 800dc48:	b510      	push	{r4, lr}
 800dc4a:	1e43      	subs	r3, r0, #1
 800dc4c:	440a      	add	r2, r1
 800dc4e:	4291      	cmp	r1, r2
 800dc50:	d100      	bne.n	800dc54 <memcpy+0xc>
 800dc52:	bd10      	pop	{r4, pc}
 800dc54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc5c:	e7f7      	b.n	800dc4e <memcpy+0x6>

0800dc5e <memset>:
 800dc5e:	4402      	add	r2, r0
 800dc60:	4603      	mov	r3, r0
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d100      	bne.n	800dc68 <memset+0xa>
 800dc66:	4770      	bx	lr
 800dc68:	f803 1b01 	strb.w	r1, [r3], #1
 800dc6c:	e7f9      	b.n	800dc62 <memset+0x4>
	...

0800dc70 <_init>:
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	bf00      	nop
 800dc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc76:	bc08      	pop	{r3}
 800dc78:	469e      	mov	lr, r3
 800dc7a:	4770      	bx	lr

0800dc7c <_fini>:
 800dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7e:	bf00      	nop
 800dc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc82:	bc08      	pop	{r3}
 800dc84:	469e      	mov	lr, r3
 800dc86:	4770      	bx	lr

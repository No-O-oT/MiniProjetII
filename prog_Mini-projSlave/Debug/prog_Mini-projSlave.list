
prog_Mini-projSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002008  0800dd7c  0800dd7c  0001dd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd84  0800fd84  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd84  0800fd84  0001fd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd8c  0800fd8c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd8c  0800fd8c  0001fd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd90  0800fd90  0001fd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800fd94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c7c  20000058  0800fdec  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008cd4  0800fdec  00028cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e42e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ac2  00000000  00000000  0004e4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025d0  00000000  00000000  00053f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002348  00000000  00000000  00056548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dfb0  00000000  00000000  00058890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a1e2  00000000  00000000  00086840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114863  00000000  00000000  000b0a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c5285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a028  00000000  00000000  001c52d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000058 	.word	0x20000058
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dd64 	.word	0x0800dd64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000005c 	.word	0x2000005c
 800020c:	0800dd64 	.word	0x0800dd64

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4a07      	ldr	r2, [pc, #28]	; (8000568 <vApplicationGetIdleTaskMemory+0x2c>)
 800054c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <vApplicationGetIdleTaskMemory+0x30>)
 8000552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000074 	.word	0x20000074
 800056c:	200000cc 	.word	0x200000cc

08000570 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800057a:	20c8      	movs	r0, #200	; 0xc8
 800057c:	f001 ffd2 	bl	8002524 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000580:	f000 f9b4 	bl	80008ec <ft5336_I2C_InitializeIfRequired>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	4603      	mov	r3, r0
 80005aa:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005b4:	2300      	movs	r3, #0
 80005b6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005b8:	f000 f998 	bl	80008ec <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e010      	b.n	80005e4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	21a8      	movs	r1, #168	; 0xa8
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 ff8d 	bl	80024e8 <TS_IO_Read>
 80005ce:	4603      	mov	r3, r0
 80005d0:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80005d2:	7b7b      	ldrb	r3, [r7, #13]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b51      	cmp	r3, #81	; 0x51
 80005d8:	d101      	bne.n	80005de <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3301      	adds	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d802      	bhi.n	80005f0 <ft5336_ReadID+0x4e>
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0e8      	beq.n	80005c2 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005f0:	7b7b      	ldrb	r3, [r7, #13]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	b29b      	uxth	r3, r3
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f97e 	bl	800090c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f932 	bl	800087c <ft5336_TS_DisableIT>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2102      	movs	r1, #2
 8000634:	4618      	mov	r0, r3
 8000636:	f001 ff57 	bl	80024e8 <TS_IO_Read>
 800063a:	4603      	mov	r3, r0
 800063c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	b2db      	uxtb	r3, r3
 8000648:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b05      	cmp	r3, #5
 8000650:	d901      	bls.n	8000656 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <ft5336_TS_DetectTouch+0x50>)
 800065c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <ft5336_TS_DetectTouch+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	b2db      	uxtb	r3, r3
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200002cc 	.word	0x200002cc

08000674 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000696:	4b6d      	ldr	r3, [pc, #436]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 8000698:	789a      	ldrb	r2, [r3, #2]
 800069a:	4b6c      	ldr	r3, [pc, #432]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 800069c:	785b      	ldrb	r3, [r3, #1]
 800069e:	429a      	cmp	r2, r3
 80006a0:	f080 80cf 	bcs.w	8000842 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006a4:	4b69      	ldr	r3, [pc, #420]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	2b09      	cmp	r3, #9
 80006aa:	d871      	bhi.n	8000790 <ft5336_TS_GetXY+0x11c>
 80006ac:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <ft5336_TS_GetXY+0x40>)
 80006ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b2:	bf00      	nop
 80006b4:	080006dd 	.word	0x080006dd
 80006b8:	080006ef 	.word	0x080006ef
 80006bc:	08000701 	.word	0x08000701
 80006c0:	08000713 	.word	0x08000713
 80006c4:	08000725 	.word	0x08000725
 80006c8:	08000737 	.word	0x08000737
 80006cc:	08000749 	.word	0x08000749
 80006d0:	0800075b 	.word	0x0800075b
 80006d4:	0800076d 	.word	0x0800076d
 80006d8:	0800077f 	.word	0x0800077f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006dc:	2304      	movs	r3, #4
 80006de:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006e0:	2303      	movs	r3, #3
 80006e2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006e4:	2306      	movs	r3, #6
 80006e6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006e8:	2305      	movs	r3, #5
 80006ea:	753b      	strb	r3, [r7, #20]
      break;
 80006ec:	e051      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ee:	230a      	movs	r3, #10
 80006f0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006f2:	2309      	movs	r3, #9
 80006f4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006f6:	230c      	movs	r3, #12
 80006f8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006fa:	230b      	movs	r3, #11
 80006fc:	753b      	strb	r3, [r7, #20]
      break;
 80006fe:	e048      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000700:	2310      	movs	r3, #16
 8000702:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000704:	230f      	movs	r3, #15
 8000706:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000708:	2312      	movs	r3, #18
 800070a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800070c:	2311      	movs	r3, #17
 800070e:	753b      	strb	r3, [r7, #20]
      break;
 8000710:	e03f      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000712:	2316      	movs	r3, #22
 8000714:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000716:	2315      	movs	r3, #21
 8000718:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800071a:	2318      	movs	r3, #24
 800071c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800071e:	2317      	movs	r3, #23
 8000720:	753b      	strb	r3, [r7, #20]
      break;
 8000722:	e036      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000724:	231c      	movs	r3, #28
 8000726:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000728:	231b      	movs	r3, #27
 800072a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800072c:	231e      	movs	r3, #30
 800072e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000730:	231d      	movs	r3, #29
 8000732:	753b      	strb	r3, [r7, #20]
      break;
 8000734:	e02d      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000736:	2322      	movs	r3, #34	; 0x22
 8000738:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800073a:	2321      	movs	r3, #33	; 0x21
 800073c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800073e:	2324      	movs	r3, #36	; 0x24
 8000740:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000742:	2323      	movs	r3, #35	; 0x23
 8000744:	753b      	strb	r3, [r7, #20]
      break;
 8000746:	e024      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000748:	2328      	movs	r3, #40	; 0x28
 800074a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800074c:	2327      	movs	r3, #39	; 0x27
 800074e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000750:	232a      	movs	r3, #42	; 0x2a
 8000752:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000754:	2329      	movs	r3, #41	; 0x29
 8000756:	753b      	strb	r3, [r7, #20]
      break;
 8000758:	e01b      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800075a:	232e      	movs	r3, #46	; 0x2e
 800075c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800075e:	232d      	movs	r3, #45	; 0x2d
 8000760:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000762:	2330      	movs	r3, #48	; 0x30
 8000764:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000766:	232f      	movs	r3, #47	; 0x2f
 8000768:	753b      	strb	r3, [r7, #20]
      break;
 800076a:	e012      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800076c:	2334      	movs	r3, #52	; 0x34
 800076e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000770:	2333      	movs	r3, #51	; 0x33
 8000772:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000774:	2336      	movs	r3, #54	; 0x36
 8000776:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000778:	2335      	movs	r3, #53	; 0x35
 800077a:	753b      	strb	r3, [r7, #20]
      break;
 800077c:	e009      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800077e:	233a      	movs	r3, #58	; 0x3a
 8000780:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000782:	2339      	movs	r3, #57	; 0x39
 8000784:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000786:	233c      	movs	r3, #60	; 0x3c
 8000788:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800078a:	233b      	movs	r3, #59	; 0x3b
 800078c:	753b      	strb	r3, [r7, #20]
      break;
 800078e:	e000      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000790:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	7dfa      	ldrb	r2, [r7, #23]
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fea4 	bl	80024e8 <TS_IO_Read>
 80007a0:	4603      	mov	r3, r0
 80007a2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007ac:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ae:	89fb      	ldrh	r3, [r7, #14]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	7dba      	ldrb	r2, [r7, #22]
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fe96 	bl	80024e8 <TS_IO_Read>
 80007bc:	4603      	mov	r3, r0
 80007be:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007c0:	7cfb      	ldrb	r3, [r7, #19]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007da:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007de:	881a      	ldrh	r2, [r3, #0]
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007e4:	89fb      	ldrh	r3, [r7, #14]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	7d7a      	ldrb	r2, [r7, #21]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fe7b 	bl	80024e8 <TS_IO_Read>
 80007f2:	4603      	mov	r3, r0
 80007f4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007f6:	7cfb      	ldrb	r3, [r7, #19]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007fe:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	7d3a      	ldrb	r2, [r7, #20]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fe6d 	bl	80024e8 <TS_IO_Read>
 800080e:	4603      	mov	r3, r0
 8000810:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000812:	7cfb      	ldrb	r3, [r7, #19]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b21b      	sxth	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	b21b      	sxth	r3, r3
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 800082c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 8000830:	881a      	ldrh	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 8000838:	789b      	ldrb	r3, [r3, #2]
 800083a:	3301      	adds	r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b03      	ldr	r3, [pc, #12]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 8000840:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200002cc 	.word	0x200002cc
 8000850:	200002d0 	.word	0x200002d0

08000854 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	7bfa      	ldrb	r2, [r7, #15]
 800086c:	21a4      	movs	r1, #164	; 0xa4
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fe20 	bl	80024b4 <TS_IO_Write>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	21a4      	movs	r1, #164	; 0xa4
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fe0c 	bl	80024b4 <TS_IO_Write>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80008da:	781b      	ldrb	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	200002cc 	.word	0x200002cc

080008ec <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80008f0:	f7ff fff0 	bl	80008d4 <ft5336_Get_I2C_InitializedStatus>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d104      	bne.n	8000904 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80008fa:	f001 fdd1 	bl	80024a0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80008fe:	4b02      	ldr	r3, [pc, #8]	; (8000908 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
  }
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200002cc 	.word	0x200002cc

0800090c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b5b0      	push	{r4, r5, r7, lr}
 800092a:	b0a2      	sub	sp, #136	; 0x88
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f003 ffd8 	bl	80048e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f8e7 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f000 ff59 	bl	80017ec <MX_GPIO_Init>
  MX_I2C1_Init();
 800093a:	f000 fa93 	bl	8000e64 <MX_I2C1_Init>
  MX_I2C3_Init();
 800093e:	f000 fad1 	bl	8000ee4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000942:	f000 fb0f 	bl	8000f64 <MX_LTDC_Init>
  MX_RTC_Init();
 8000946:	f000 fb8f 	bl	8001068 <MX_RTC_Init>
  MX_SPI2_Init();
 800094a:	f000 fc33 	bl	80011b4 <MX_SPI2_Init>
  MX_TIM1_Init();
 800094e:	f000 fc6f 	bl	8001230 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000952:	f000 fcc1 	bl	80012d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000956:	f000 fd0d 	bl	8001374 <MX_TIM3_Init>
  MX_TIM5_Init();
 800095a:	f000 fd71 	bl	8001440 <MX_TIM5_Init>
  MX_TIM8_Init();
 800095e:	f000 fdbd 	bl	80014dc <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000962:	f000 fe95 	bl	8001690 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000966:	f000 fec3 	bl	80016f0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800096a:	f000 f97b 	bl	8000c64 <MX_ADC1_Init>
  MX_DAC_Init();
 800096e:	f000 fa1d 	bl	8000dac <MX_DAC_Init>
  MX_UART7_Init();
 8000972:	f000 fe5d 	bl	8001630 <MX_UART7_Init>
  MX_FMC_Init();
 8000976:	f000 feeb 	bl	8001750 <MX_FMC_Init>
  MX_DMA2D_Init();
 800097a:	f000 fa41 	bl	8000e00 <MX_DMA2D_Init>
  MX_ADC3_Init();
 800097e:	f000 f9c3 	bl	8000d08 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000982:	f001 fddb 	bl	800253c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000986:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800098a:	2000      	movs	r0, #0
 800098c:	f001 fe6e 	bl	800266c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000990:	f001 fe44 	bl	800261c <BSP_LCD_GetXSize>
 8000994:	4604      	mov	r4, r0
 8000996:	f001 fe55 	bl	8002644 <BSP_LCD_GetYSize>
 800099a:	4603      	mov	r3, r0
 800099c:	fb03 f304 	mul.w	r3, r3, r4
 80009a0:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4619      	mov	r1, r3
 80009a8:	2001      	movs	r0, #1
 80009aa:	f001 fe5f 	bl	800266c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80009ae:	f002 fcd5 	bl	800335c <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f001 feba 	bl	800272c <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80009b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009bc:	f001 ff28 	bl	8002810 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 80009c0:	4842      	ldr	r0, [pc, #264]	; (8000acc <main+0x1a4>)
 80009c2:	f001 fef5 	bl	80027b0 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80009c6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ca:	f001 febf 	bl	800274c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80009ce:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009d2:	f001 fed3 	bl	800277c <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80009d6:	f001 fe21 	bl	800261c <BSP_LCD_GetXSize>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29c      	uxth	r4, r3
 80009de:	f001 fe31 	bl	8002644 <BSP_LCD_GetYSize>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4619      	mov	r1, r3
 80009e8:	4620      	mov	r0, r4
 80009ea:	f003 f945 	bl	8003c78 <BSP_TS_Init>
	HAL_UART_Receive_IT(&huart7,rxbuffer,6);
 80009ee:	2206      	movs	r2, #6
 80009f0:	4937      	ldr	r1, [pc, #220]	; (8000ad0 <main+0x1a8>)
 80009f2:	4838      	ldr	r0, [pc, #224]	; (8000ad4 <main+0x1ac>)
 80009f4:	f009 fd88 	bl	800a508 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex_LCD */
  osMutexDef(myMutex_LCD);
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  myMutex_LCDHandle = osMutexCreate(osMutex(myMutex_LCD));
 8000a04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f00a fe6c 	bl	800b6e6 <osMutexCreate>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a31      	ldr	r2, [pc, #196]	; (8000ad8 <main+0x1b0>)
 8000a12:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 1, uint8_t);
 8000a14:	4b31      	ldr	r3, [pc, #196]	; (8000adc <main+0x1b4>)
 8000a16:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 8000a20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00a fe75 	bl	800b716 <osMessageCreate>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <main+0x1b8>)
 8000a30:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000a32:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <main+0x1bc>)
 8000a34:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a38:	461d      	mov	r5, r3
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00a fdea 	bl	800b626 <osThreadCreate>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <main+0x1c0>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* definition and creation of RRacket */
  osThreadDef(RRacket, StartRRacket, osPriorityAboveNormal, 0, 1024);
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <main+0x1c4>)
 8000a5a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a5e:	461d      	mov	r5, r3
 8000a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RRacketHandle = osThreadCreate(osThread(RRacket), NULL);
 8000a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00a fdd7 	bl	800b626 <osThreadCreate>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <main+0x1c8>)
 8000a7c:	6013      	str	r3, [r2, #0]

  /* definition and creation of BallDisplay */
  osThreadDef(BallDisplay, StartBall, osPriorityHigh, 0, 1024);
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <main+0x1cc>)
 8000a80:	f107 041c 	add.w	r4, r7, #28
 8000a84:	461d      	mov	r5, r3
 8000a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BallDisplayHandle = osThreadCreate(osThread(BallDisplay), NULL);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00a fdc4 	bl	800b626 <osThreadCreate>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <main+0x1d0>)
 8000aa2:	6013      	str	r3, [r2, #0]

  /* definition and creation of BgChanger */
  osThreadDef(BgChanger, StartBgChanger, osPriorityBelowNormal, 0, 1024);
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <main+0x1d4>)
 8000aa6:	463c      	mov	r4, r7
 8000aa8:	461d      	mov	r5, r3
 8000aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BgChangerHandle = osThreadCreate(osThread(BgChanger), NULL);
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a fdb3 	bl	800b626 <osThreadCreate>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <main+0x1d8>)
 8000ac4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ac6:	f00a fda7 	bl	800b618 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000aca:	e7fe      	b.n	8000aca <main+0x1a2>
 8000acc:	2000003c 	.word	0x2000003c
 8000ad0:	20008ba0 	.word	0x20008ba0
 8000ad4:	2000869c 	.word	0x2000869c
 8000ad8:	20008b9c 	.word	0x20008b9c
 8000adc:	0800dda8 	.word	0x0800dda8
 8000ae0:	20008bb0 	.word	0x20008bb0
 8000ae4:	0800ddb8 	.word	0x0800ddb8
 8000ae8:	200085e8 	.word	0x200085e8
 8000aec:	0800ddd4 	.word	0x0800ddd4
 8000af0:	20008a18 	.word	0x20008a18
 8000af4:	0800ddf0 	.word	0x0800ddf0
 8000af8:	20008bac 	.word	0x20008bac
 8000afc:	0800de0c 	.word	0x0800de0c
 8000b00:	20008960 	.word	0x20008960

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0b4      	sub	sp, #208	; 0xd0
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b0e:	2230      	movs	r2, #48	; 0x30
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f00d f91e 	bl	800dd54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	2284      	movs	r2, #132	; 0x84
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00d f90f 	bl	800dd54 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b36:	f006 fd2d 	bl	8007594 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b47      	ldr	r3, [pc, #284]	; (8000c58 <SystemClock_Config+0x154>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a46      	ldr	r2, [pc, #280]	; (8000c58 <SystemClock_Config+0x154>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b44      	ldr	r3, [pc, #272]	; (8000c58 <SystemClock_Config+0x154>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b52:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <SystemClock_Config+0x158>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a41      	ldr	r2, [pc, #260]	; (8000c5c <SystemClock_Config+0x158>)
 8000b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	4b3f      	ldr	r3, [pc, #252]	; (8000c5c <SystemClock_Config+0x158>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b6a:	2309      	movs	r3, #9
 8000b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b8c:	2319      	movs	r3, #25
 8000b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000b92:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ba0:	2309      	movs	r3, #9
 8000ba2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 fd52 	bl	8007654 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bb6:	f001 fb17 	bl	80021e8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bba:	f006 fcfb 	bl	80075b4 <HAL_PWREx_EnableOverDrive>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bc4:	f001 fb10 	bl	80021e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc8:	230f      	movs	r3, #15
 8000bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bee:	2106      	movs	r1, #6
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f006 ffd3 	bl	8007b9c <HAL_RCC_ClockConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000bfc:	f001 faf4 	bl	80021e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <SystemClock_Config+0x15c>)
 8000c02:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c08:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c12:	2303      	movs	r3, #3
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c26:	2300      	movs	r3, #0
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f007 f9b4 	bl	8007fac <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000c4a:	f001 facd 	bl	80021e8 <Error_Handler>
  }
}
 8000c4e:	bf00      	nop
 8000c50:	37d0      	adds	r7, #208	; 0xd0
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40007000 	.word	0x40007000
 8000c60:	00015868 	.word	0x00015868

08000c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <MX_ADC1_Init+0x9c>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <MX_ADC1_Init+0xa0>)
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cc6:	f003 fe5d 	bl	8004984 <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cd0:	f001 fa8a 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ce6:	f003 ffe3 	bl	8004cb0 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cf0:	f001 fa7a 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200088d0 	.word	0x200088d0
 8000d00:	40012000 	.word	0x40012000
 8000d04:	0f000001 	.word	0x0f000001

08000d08 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0e:	463b      	mov	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d1c:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <MX_ADC3_Init+0x9c>)
 8000d1e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d26:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <MX_ADC3_Init+0xa0>)
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d6a:	f003 fe0b 	bl	8004984 <HAL_ADC_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d74:	f001 fa38 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d8a:	f003 ff91 	bl	8004cb0 <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000d94:	f001 fa28 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20008918 	.word	0x20008918
 8000da4:	40012200 	.word	0x40012200
 8000da8:	0f000001 	.word	0x0f000001

08000dac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_DAC_Init+0x4c>)
 8000dbc:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <MX_DAC_Init+0x50>)
 8000dbe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_DAC_Init+0x4c>)
 8000dc2:	f004 fa9b 	bl	80052fc <HAL_DAC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000dcc:	f001 fa0c 	bl	80021e8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_DAC_Init+0x4c>)
 8000de0:	f004 fb02 	bl	80053e8 <HAL_DAC_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000dea:	f001 f9fd 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200089e4 	.word	0x200089e4
 8000dfc:	40007400 	.word	0x40007400

08000e00 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e06:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <MX_DMA2D_Init+0x60>)
 8000e08:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e36:	f004 fd0f 	bl	8005858 <HAL_DMA2D_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000e40:	f001 f9d2 	bl	80021e8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e44:	2101      	movs	r1, #1
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e48:	f004 fe64 	bl	8005b14 <HAL_DMA2D_ConfigLayer>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000e52:	f001 f9c9 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20008ae8 	.word	0x20008ae8
 8000e60:	4002b000 	.word	0x4002b000

08000e64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_I2C1_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000ea0:	f005 fa50 	bl	8006344 <HAL_I2C_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eaa:	f001 f99d 	bl	80021e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000eb2:	f005 ff5f 	bl	8006d74 <HAL_I2CEx_ConfigAnalogFilter>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ebc:	f001 f994 	bl	80021e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000ec4:	f005 ffa1 	bl	8006e0a <HAL_I2CEx_ConfigDigitalFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f001 f98b 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000875c 	.word	0x2000875c
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	00c0eaff 	.word	0x00c0eaff

08000ee4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000eea:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <MX_I2C3_Init+0x78>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <MX_I2C3_Init+0x7c>)
 8000ef2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f20:	f005 fa10 	bl	8006344 <HAL_I2C_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f2a:	f001 f95d 	bl	80021e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f32:	f005 ff1f 	bl	8006d74 <HAL_I2CEx_ConfigAnalogFilter>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f001 f954 	bl	80021e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f44:	f005 ff61 	bl	8006e0a <HAL_I2CEx_ConfigDigitalFilter>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f001 f94b 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200085ec 	.word	0x200085ec
 8000f5c:	40005c00 	.word	0x40005c00
 8000f60:	00c0eaff 	.word	0x00c0eaff

08000f64 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	; 0x38
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2234      	movs	r2, #52	; 0x34
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f00c feef 	bl	800dd54 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f78:	4a3a      	ldr	r2, [pc, #232]	; (8001064 <MX_LTDC_Init+0x100>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f7c:	4b38      	ldr	r3, [pc, #224]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f88:	4b35      	ldr	r3, [pc, #212]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f8e:	4b34      	ldr	r3, [pc, #208]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000f94:	4b32      	ldr	r3, [pc, #200]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f96:	2228      	movs	r2, #40	; 0x28
 8000f98:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f9c:	2209      	movs	r2, #9
 8000f9e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fa2:	2235      	movs	r2, #53	; 0x35
 8000fa4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fa8:	220b      	movs	r2, #11
 8000faa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fae:	f240 2215 	movw	r2, #533	; 0x215
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fb6:	f240 121b 	movw	r2, #283	; 0x11b
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fbe:	f240 2235 	movw	r2, #565	; 0x235
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fc6:	f240 121d 	movw	r2, #285	; 0x11d
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fe4:	481e      	ldr	r0, [pc, #120]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fe6:	f005 ff5d 	bl	8006ea4 <HAL_LTDC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ff0:	f001 f8fa 	bl	80021e8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ff8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ffc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001002:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001006:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001008:	2302      	movs	r3, #2
 800100a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800100c:	23ff      	movs	r3, #255	; 0xff
 800100e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001014:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001018:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800101a:	2307      	movs	r3, #7
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800101e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001024:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800102a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_LTDC_Init+0xfc>)
 800104a:	f006 f8bd 	bl	80071c8 <HAL_LTDC_ConfigLayer>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001054:	f001 f8c8 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3738      	adds	r7, #56	; 0x38
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20008828 	.word	0x20008828
 8001064:	40016800 	.word	0x40016800

08001068 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b092      	sub	sp, #72	; 0x48
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800106e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001084:	463b      	mov	r3, r7
 8001086:	222c      	movs	r2, #44	; 0x2c
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f00c fe62 	bl	800dd54 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001090:	4b46      	ldr	r3, [pc, #280]	; (80011ac <MX_RTC_Init+0x144>)
 8001092:	4a47      	ldr	r2, [pc, #284]	; (80011b0 <MX_RTC_Init+0x148>)
 8001094:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001096:	4b45      	ldr	r3, [pc, #276]	; (80011ac <MX_RTC_Init+0x144>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800109c:	4b43      	ldr	r3, [pc, #268]	; (80011ac <MX_RTC_Init+0x144>)
 800109e:	227f      	movs	r2, #127	; 0x7f
 80010a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010a2:	4b42      	ldr	r3, [pc, #264]	; (80011ac <MX_RTC_Init+0x144>)
 80010a4:	22ff      	movs	r2, #255	; 0xff
 80010a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010a8:	4b40      	ldr	r3, [pc, #256]	; (80011ac <MX_RTC_Init+0x144>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ae:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <MX_RTC_Init+0x144>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <MX_RTC_Init+0x144>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010ba:	483c      	ldr	r0, [pc, #240]	; (80011ac <MX_RTC_Init+0x144>)
 80010bc:	f007 fb64 	bl	8008788 <HAL_RTC_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80010c6:	f001 f88f 	bl	80021e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	2201      	movs	r2, #1
 80010ea:	4619      	mov	r1, r3
 80010ec:	482f      	ldr	r0, [pc, #188]	; (80011ac <MX_RTC_Init+0x144>)
 80010ee:	f007 fbc7 	bl	8008880 <HAL_RTC_SetTime>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80010f8:	f001 f876 	bl	80021e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010fc:	2301      	movs	r3, #1
 80010fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001102:	2301      	movs	r3, #1
 8001104:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001108:	2301      	movs	r3, #1
 800110a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	4823      	ldr	r0, [pc, #140]	; (80011ac <MX_RTC_Init+0x144>)
 800111e:	f007 fc6d 	bl	80089fc <HAL_RTC_SetDate>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001128:	f001 f85e 	bl	80021e8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800112c:	2300      	movs	r3, #0
 800112e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001130:	2300      	movs	r3, #0
 8001132:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001134:	2300      	movs	r3, #0
 8001136:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001150:	2301      	movs	r3, #1
 8001152:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	2201      	movs	r2, #1
 8001160:	4619      	mov	r1, r3
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <MX_RTC_Init+0x144>)
 8001164:	f007 fcf2 	bl	8008b4c <HAL_RTC_SetAlarm>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800116e:	f001 f83b 	bl	80021e8 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <MX_RTC_Init+0x144>)
 8001180:	f007 fce4 	bl	8008b4c <HAL_RTC_SetAlarm>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800118a:	f001 f82d 	bl	80021e8 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800118e:	2202      	movs	r2, #2
 8001190:	2100      	movs	r1, #0
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_RTC_Init+0x144>)
 8001194:	f007 fe64 	bl	8008e60 <HAL_RTCEx_SetTimeStamp>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800119e:	f001 f823 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3748      	adds	r7, #72	; 0x48
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200089f8 	.word	0x200089f8
 80011b0:	40002800 	.word	0x40002800

080011b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_SPI2_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <MX_SPI2_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_SPI2_Init+0x74>)
 80011c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_SPI2_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_SPI2_Init+0x74>)
 80011ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_SPI2_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_SPI2_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_SPI2_Init+0x74>)
 80011e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_SPI2_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_SPI2_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_SPI2_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_SPI2_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_SPI2_Init+0x74>)
 8001202:	2207      	movs	r2, #7
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_SPI2_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_SPI2_Init+0x74>)
 800120e:	2208      	movs	r2, #8
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_SPI2_Init+0x74>)
 8001214:	f007 fef9 	bl	800900a <HAL_SPI_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800121e:	f000 ffe3 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20008638 	.word	0x20008638
 800122c:	40003800 	.word	0x40003800

08001230 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001250:	4a20      	ldr	r2, [pc, #128]	; (80012d4 <MX_TIM1_Init+0xa4>)
 8001252:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_TIM1_Init+0xa0>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001266:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM1_Init+0xa0>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800127a:	4815      	ldr	r0, [pc, #84]	; (80012d0 <MX_TIM1_Init+0xa0>)
 800127c:	f007 ff57 	bl	800912e <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001286:	f000 ffaf 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	480e      	ldr	r0, [pc, #56]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001298:	f008 fa0a 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012a2:	f000 ffa1 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_TIM1_Init+0xa0>)
 80012b8:	f008 ff52 	bl	800a160 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012c2:	f000 ff91 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20008a1c 	.word	0x20008a1c
 80012d4:	40010000 	.word	0x40010000

080012d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_TIM2_Init+0x98>)
 80012f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM2_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM2_Init+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_TIM2_Init+0x98>)
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_TIM2_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM2_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_TIM2_Init+0x98>)
 8001320:	f007 ff05 	bl	800912e <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800132a:	f000 ff5d 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_TIM2_Init+0x98>)
 800133c:	f008 f9b8 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001346:	f000 ff4f 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_TIM2_Init+0x98>)
 8001358:	f008 ff02 	bl	800a160 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001362:	f000 ff41 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20008b28 	.word	0x20008b28

08001374 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013a2:	4b25      	ldr	r3, [pc, #148]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013a4:	4a25      	ldr	r2, [pc, #148]	; (800143c <MX_TIM3_Init+0xc8>)
 80013a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013c8:	481b      	ldr	r0, [pc, #108]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013ca:	f007 feb0 	bl	800912e <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80013d4:	f000 ff08 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	4619      	mov	r1, r3
 80013e4:	4814      	ldr	r0, [pc, #80]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013e6:	f008 f963 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80013f0:	f000 fefa 	bl	80021e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4619      	mov	r1, r3
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_TIM3_Init+0xc4>)
 8001404:	f008 fa1a 	bl	800983c <HAL_TIM_SlaveConfigSynchro>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800140e:	f000 feeb 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_TIM3_Init+0xc4>)
 8001420:	f008 fe9e 	bl	800a160 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800142a:	f000 fedd 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3730      	adds	r7, #48	; 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200087e8 	.word	0x200087e8
 800143c:	40000400 	.word	0x40000400

08001440 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001460:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <MX_TIM5_Init+0x98>)
 8001462:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_TIM5_Init+0x94>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001472:	f04f 32ff 	mov.w	r2, #4294967295
 8001476:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_TIM5_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001484:	4813      	ldr	r0, [pc, #76]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001486:	f007 fe52 	bl	800912e <HAL_TIM_Base_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001490:	f000 feaa 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001498:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	4619      	mov	r1, r3
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <MX_TIM5_Init+0x94>)
 80014a2:	f008 f905 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80014ac:	f000 fe9c 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_TIM5_Init+0x94>)
 80014be:	f008 fe4f 	bl	800a160 <HAL_TIMEx_MasterConfigSynchronization>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80014c8:	f000 fe8e 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200087a8 	.word	0x200087a8
 80014d8:	40000c00 	.word	0x40000c00

080014dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09a      	sub	sp, #104	; 0x68
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]
 800150e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	222c      	movs	r2, #44	; 0x2c
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f00c fc1c 	bl	800dd54 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800151c:	4b42      	ldr	r3, [pc, #264]	; (8001628 <MX_TIM8_Init+0x14c>)
 800151e:	4a43      	ldr	r2, [pc, #268]	; (800162c <MX_TIM8_Init+0x150>)
 8001520:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <MX_TIM8_Init+0x14c>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800152e:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001534:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800153c:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <MX_TIM8_Init+0x14c>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001548:	4837      	ldr	r0, [pc, #220]	; (8001628 <MX_TIM8_Init+0x14c>)
 800154a:	f007 fdf0 	bl	800912e <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 fe48 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800155e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001562:	4619      	mov	r1, r3
 8001564:	4830      	ldr	r0, [pc, #192]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001566:	f008 f8a3 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001570:	f000 fe3a 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001574:	482c      	ldr	r0, [pc, #176]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001576:	f007 fe2f 	bl	80091d8 <HAL_TIM_PWM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001580:	f000 fe32 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001590:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001594:	4619      	mov	r1, r3
 8001596:	4824      	ldr	r0, [pc, #144]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001598:	f008 fde2 	bl	800a160 <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80015a2:	f000 fe21 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	; 0x60
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ae:	2300      	movs	r3, #0
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c2:	220c      	movs	r2, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <MX_TIM8_Init+0x14c>)
 80015c8:	f007 ff5a 	bl	8009480 <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80015d2:	f000 fe09 	bl	80021e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4807      	ldr	r0, [pc, #28]	; (8001628 <MX_TIM8_Init+0x14c>)
 800160c:	f008 fe36 	bl	800a27c <HAL_TIMEx_ConfigBreakDeadTime>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001616:	f000 fde7 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <MX_TIM8_Init+0x14c>)
 800161c:	f002 fee0 	bl	80043e0 <HAL_TIM_MspPostInit>

}
 8001620:	bf00      	nop
 8001622:	3768      	adds	r7, #104	; 0x68
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000871c 	.word	0x2000871c
 800162c:	40010400 	.word	0x40010400

08001630 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_UART7_Init+0x58>)
 8001636:	4a15      	ldr	r2, [pc, #84]	; (800168c <MX_UART7_Init+0x5c>)
 8001638:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <MX_UART7_Init+0x58>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_UART7_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_UART7_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_UART7_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_UART7_Init+0x58>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_UART7_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_UART7_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_UART7_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_UART7_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_UART7_Init+0x58>)
 8001674:	f008 fe9e 	bl	800a3b4 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800167e:	f000 fdb3 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000869c 	.word	0x2000869c
 800168c:	40007800 	.word	0x40007800

08001690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 8001696:	4a15      	ldr	r2, [pc, #84]	; (80016ec <MX_USART1_UART_Init+0x5c>)
 8001698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016d4:	f008 fe6e 	bl	800a3b4 <HAL_UART_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016de:	f000 fd83 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20008964 	.word	0x20008964
 80016ec:	40011000 	.word	0x40011000

080016f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_USART6_UART_Init+0x58>)
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <MX_USART6_UART_Init+0x5c>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_USART6_UART_Init+0x58>)
 80016fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001700:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_USART6_UART_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART6_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART6_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001734:	f008 fe3e 	bl	800a3b4 <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 fd53 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20008a68 	.word	0x20008a68
 800174c:	40011400 	.word	0x40011400

08001750 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
 8001764:	615a      	str	r2, [r3, #20]
 8001766:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <MX_FMC_Init+0x94>)
 800176a:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <MX_FMC_Init+0x98>)
 800176c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_FMC_Init+0x94>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_FMC_Init+0x94>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_FMC_Init+0x94>)
 800177c:	2204      	movs	r2, #4
 800177e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_FMC_Init+0x94>)
 8001782:	2210      	movs	r2, #16
 8001784:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <MX_FMC_Init+0x94>)
 8001788:	2240      	movs	r2, #64	; 0x40
 800178a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <MX_FMC_Init+0x94>)
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_FMC_Init+0x94>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <MX_FMC_Init+0x94>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_FMC_Init+0x94>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_FMC_Init+0x94>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80017aa:	2310      	movs	r3, #16
 80017ac:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80017ae:	2310      	movs	r3, #16
 80017b0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80017b2:	2310      	movs	r3, #16
 80017b4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80017b6:	2310      	movs	r3, #16
 80017b8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80017ba:	2310      	movs	r3, #16
 80017bc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80017be:	2310      	movs	r3, #16
 80017c0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80017c2:	2310      	movs	r3, #16
 80017c4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <MX_FMC_Init+0x94>)
 80017cc:	f007 fb9e 	bl	8008f0c <HAL_SDRAM_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80017d6:	f000 fd07 	bl	80021e8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017da:	bf00      	nop
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20008b68 	.word	0x20008b68
 80017e8:	a0000140 	.word	0xa0000140

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b090      	sub	sp, #64	; 0x40
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001802:	4bb0      	ldr	r3, [pc, #704]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4aaf      	ldr	r2, [pc, #700]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4bad      	ldr	r3, [pc, #692]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
 8001818:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4baa      	ldr	r3, [pc, #680]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4aa9      	ldr	r2, [pc, #676]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4ba7      	ldr	r3, [pc, #668]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	4ba4      	ldr	r3, [pc, #656]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4aa3      	ldr	r2, [pc, #652]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4ba1      	ldr	r3, [pc, #644]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800184a:	4b9e      	ldr	r3, [pc, #632]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a9d      	ldr	r2, [pc, #628]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b9b      	ldr	r3, [pc, #620]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001862:	4b98      	ldr	r3, [pc, #608]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a97      	ldr	r2, [pc, #604]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b95      	ldr	r3, [pc, #596]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	4b92      	ldr	r3, [pc, #584]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a91      	ldr	r2, [pc, #580]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b8f      	ldr	r3, [pc, #572]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001892:	4b8c      	ldr	r3, [pc, #560]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a8b      	ldr	r2, [pc, #556]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018aa:	4b86      	ldr	r3, [pc, #536]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a85      	ldr	r2, [pc, #532]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b83      	ldr	r3, [pc, #524]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b7d      	ldr	r3, [pc, #500]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018da:	4b7a      	ldr	r3, [pc, #488]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a79      	ldr	r2, [pc, #484]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b77      	ldr	r3, [pc, #476]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f2:	4b74      	ldr	r3, [pc, #464]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a73      	ldr	r2, [pc, #460]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b71      	ldr	r3, [pc, #452]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2110      	movs	r1, #16
 800190e:	486e      	ldr	r0, [pc, #440]	; (8001ac8 <MX_GPIO_Init+0x2dc>)
 8001910:	f004 fcfe 	bl	8006310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	2160      	movs	r1, #96	; 0x60
 8001918:	486c      	ldr	r0, [pc, #432]	; (8001acc <MX_GPIO_Init+0x2e0>)
 800191a:	f004 fcf9 	bl	8006310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	2120      	movs	r1, #32
 8001922:	486b      	ldr	r0, [pc, #428]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001924:	f004 fcf4 	bl	8006310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2108      	movs	r1, #8
 800192c:	4868      	ldr	r0, [pc, #416]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 800192e:	f004 fcef 	bl	8006310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2108      	movs	r1, #8
 8001936:	4867      	ldr	r0, [pc, #412]	; (8001ad4 <MX_GPIO_Init+0x2e8>)
 8001938:	f004 fcea 	bl	8006310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	2108      	movs	r1, #8
 8001940:	4865      	ldr	r0, [pc, #404]	; (8001ad8 <MX_GPIO_Init+0x2ec>)
 8001942:	f004 fce5 	bl	8006310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194c:	4861      	ldr	r0, [pc, #388]	; (8001ad4 <MX_GPIO_Init+0x2e8>)
 800194e:	f004 fcdf 	bl	8006310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001952:	2200      	movs	r2, #0
 8001954:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001958:	4860      	ldr	r0, [pc, #384]	; (8001adc <MX_GPIO_Init+0x2f0>)
 800195a:	f004 fcd9 	bl	8006310 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2108      	movs	r1, #8
 8001962:	485f      	ldr	r0, [pc, #380]	; (8001ae0 <MX_GPIO_Init+0x2f4>)
 8001964:	f004 fcd4 	bl	8006310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001968:	2308      	movs	r3, #8
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196c:	2300      	movs	r3, #0
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001978:	4619      	mov	r1, r3
 800197a:	4854      	ldr	r0, [pc, #336]	; (8001acc <MX_GPIO_Init+0x2e0>)
 800197c:	f004 f9f8 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001980:	f643 0323 	movw	r3, #14371	; 0x3823
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001992:	230a      	movs	r3, #10
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199a:	4619      	mov	r1, r3
 800199c:	484a      	ldr	r0, [pc, #296]	; (8001ac8 <MX_GPIO_Init+0x2dc>)
 800199e:	f004 f9e7 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80019a2:	2310      	movs	r3, #16
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b6:	4619      	mov	r1, r3
 80019b8:	4843      	ldr	r0, [pc, #268]	; (8001ac8 <MX_GPIO_Init+0x2dc>)
 80019ba:	f004 f9d9 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 80019be:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d0:	4619      	mov	r1, r3
 80019d2:	4844      	ldr	r0, [pc, #272]	; (8001ae4 <MX_GPIO_Init+0x2f8>)
 80019d4:	f004 f9cc 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80019d8:	2360      	movs	r3, #96	; 0x60
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4837      	ldr	r0, [pc, #220]	; (8001acc <MX_GPIO_Init+0x2e0>)
 80019f0:	f004 f9be 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fa:	2300      	movs	r3, #0
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a06:	4619      	mov	r1, r3
 8001a08:	4837      	ldr	r0, [pc, #220]	; (8001ae8 <MX_GPIO_Init+0x2fc>)
 8001a0a:	f004 f9b1 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a0e:	2340      	movs	r3, #64	; 0x40
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a12:	4b36      	ldr	r3, [pc, #216]	; (8001aec <MX_GPIO_Init+0x300>)
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	482b      	ldr	r0, [pc, #172]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001a22:	f004 f9a5 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001a26:	2328      	movs	r3, #40	; 0x28
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4824      	ldr	r0, [pc, #144]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001a3e:	f004 f997 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001a42:	f241 0308 	movw	r3, #4104	; 0x1008
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	481e      	ldr	r0, [pc, #120]	; (8001ad4 <MX_GPIO_Init+0x2e8>)
 8001a5c:	f004 f988 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a72:	4619      	mov	r1, r3
 8001a74:	481e      	ldr	r0, [pc, #120]	; (8001af0 <MX_GPIO_Init+0x304>)
 8001a76:	f004 f97b 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <MX_GPIO_Init+0x2ec>)
 8001a92:	f004 f96d 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a96:	2310      	movs	r3, #16
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001aaa:	f004 f961 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001aae:	f248 0304 	movw	r3, #32772	; 0x8004
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	e017      	b.n	8001af4 <MX_GPIO_Init+0x308>
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40022800 	.word	0x40022800
 8001adc:	40021c00 	.word	0x40021c00
 8001ae0:	40021800 	.word	0x40021800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40022400 	.word	0x40022400
 8001aec:	10120000 	.word	0x10120000
 8001af0:	40020800 	.word	0x40020800
 8001af4:	4836      	ldr	r0, [pc, #216]	; (8001bd0 <MX_GPIO_Init+0x3e4>)
 8001af6:	f004 f93b 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001afa:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b10:	4619      	mov	r1, r3
 8001b12:	482f      	ldr	r0, [pc, #188]	; (8001bd0 <MX_GPIO_Init+0x3e4>)
 8001b14:	f004 f92c 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <MX_GPIO_Init+0x3e8>)
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	482a      	ldr	r0, [pc, #168]	; (8001bd8 <MX_GPIO_Init+0x3ec>)
 8001b2e:	f004 f91f 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b32:	2310      	movs	r3, #16
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b42:	230a      	movs	r3, #10
 8001b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4820      	ldr	r0, [pc, #128]	; (8001bd0 <MX_GPIO_Init+0x3e4>)
 8001b4e:	f004 f90f 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001b52:	2384      	movs	r3, #132	; 0x84
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	481d      	ldr	r0, [pc, #116]	; (8001bdc <MX_GPIO_Init+0x3f0>)
 8001b66:	f004 f903 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b82:	4619      	mov	r1, r3
 8001b84:	4816      	ldr	r0, [pc, #88]	; (8001be0 <MX_GPIO_Init+0x3f4>)
 8001b86:	f004 f8f3 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480e      	ldr	r0, [pc, #56]	; (8001bdc <MX_GPIO_Init+0x3f0>)
 8001ba2:	f004 f8e5 	bl	8005d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001ba6:	2328      	movs	r3, #40	; 0x28
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bb6:	230a      	movs	r3, #10
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4808      	ldr	r0, [pc, #32]	; (8001be4 <MX_GPIO_Init+0x3f8>)
 8001bc2:	f004 f8d5 	bl	8005d70 <HAL_GPIO_Init>

}
 8001bc6:	bf00      	nop
 8001bc8:	3740      	adds	r7, #64	; 0x40
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021c00 	.word	0x40021c00
 8001bd4:	10120000 	.word	0x10120000
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020000 	.word	0x40020000

08001be8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	uint16_t x_ballemaster;
	//Réception du rayon de la balle, des coordonnées de la balle, du drapeau de perte
	r_balle = rxbuffer[0];
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <HAL_UART_RxCpltCallback+0xc8>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <HAL_UART_RxCpltCallback+0xcc>)
 8001bf8:	801a      	strh	r2, [r3, #0]
	x_ballemaster = (((uint16_t)rxbuffer[1] << 8) | rxbuffer[2]);
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_UART_RxCpltCallback+0xc8>)
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_UART_RxCpltCallback+0xc8>)
 8001c04:	789b      	ldrb	r3, [r3, #2]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	81fb      	strh	r3, [r7, #14]
	y_balle = (((uint16_t)rxbuffer[3] << 8) | rxbuffer[4]);
 8001c0e:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_UART_RxCpltCallback+0xc8>)
 8001c10:	78db      	ldrb	r3, [r3, #3]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <HAL_UART_RxCpltCallback+0xc8>)
 8001c18:	791b      	ldrb	r3, [r3, #4]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_UART_RxCpltCallback+0xd0>)
 8001c24:	801a      	strh	r2, [r3, #0]
	lost = 0;//rxbuffer[5];
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_UART_RxCpltCallback+0xd4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]

	//Offset et cadrage des coordonées de la raquette droite
	x_balle = x_ballemaster-480;
 8001c2c:	89fb      	ldrh	r3, [r7, #14]
 8001c2e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_UART_RxCpltCallback+0xd8>)
 8001c38:	801a      	strh	r2, [r3, #0]
	r_balle = 8; //Forçage temporaire
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	801a      	strh	r2, [r3, #0]
	if(x_balle > 479 - r_balle) x_balle = 479 - r_balle;
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_UART_RxCpltCallback+0xd8>)
 8001c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f240 13df 	movw	r3, #479	; 0x1df
 8001c52:	1a5b      	subs	r3, r3, r1
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dd08      	ble.n	8001c6a <HAL_UART_RxCpltCallback+0x82>
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c5a:	881a      	ldrh	r2, [r3, #0]
 8001c5c:	f240 13df 	movw	r3, #479	; 0x1df
 8001c60:	1a9b      	subs	r3, r3, r2
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_UART_RxCpltCallback+0xd8>)
 8001c68:	801a      	strh	r2, [r3, #0]
	if(y_balle < r_balle) y_balle=r_balle;
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_UART_RxCpltCallback+0xd0>)
 8001c6c:	881a      	ldrh	r2, [r3, #0]
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d203      	bcs.n	8001c7e <HAL_UART_RxCpltCallback+0x96>
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c78:	881a      	ldrh	r2, [r3, #0]
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_UART_RxCpltCallback+0xd0>)
 8001c7c:	801a      	strh	r2, [r3, #0]
	if(y_balle > 272 - r_balle) y_balle = 272 - r_balle;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_UART_RxCpltCallback+0xd0>)
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	f5c3 7388 	rsb	r3, r3, #272	; 0x110
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dd06      	ble.n	8001c9e <HAL_UART_RxCpltCallback+0xb6>
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	f5c3 7388 	rsb	r3, r3, #272	; 0x110
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_UART_RxCpltCallback+0xd0>)
 8001c9c:	801a      	strh	r2, [r3, #0]

	//Attente d'une nouvelle réception sur interruption
	HAL_UART_Receive_IT(&huart7, rxbuffer, 6);
 8001c9e:	2206      	movs	r2, #6
 8001ca0:	4903      	ldr	r1, [pc, #12]	; (8001cb0 <HAL_UART_RxCpltCallback+0xc8>)
 8001ca2:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <HAL_UART_RxCpltCallback+0xdc>)
 8001ca4:	f008 fc30 	bl	800a508 <HAL_UART_Receive_IT>

}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20008ba0 	.word	0x20008ba0
 8001cb4:	20000030 	.word	0x20000030
 8001cb8:	2000002e 	.word	0x2000002e
 8001cbc:	200002d2 	.word	0x200002d2
 8001cc0:	2000002c 	.word	0x2000002c
 8001cc4:	2000869c 	.word	0x2000869c

08001cc8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(200);
 8001cd0:	20c8      	movs	r0, #200	; 0xc8
 8001cd2:	f009 fcf4 	bl	800b6be <osDelay>
 8001cd6:	e7fb      	b.n	8001cd0 <StartDefaultTask+0x8>

08001cd8 <StartRRacket>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRRacket */
void StartRRacket(void const * argument)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRRacket */

	//Initialisation des variables pour le joystick
	int32_t joystick_h, joystick_v;
	joystick_h = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
	joystick_v = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]

	//Initialisation du stockage des coordonnées de la raquette droite
	int16_t x_RRacket_hold =479-50-width_rackets/2;
 8001ce8:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001cec:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t y_RRacket_hold = 136-height_rackets/2;
 8001cee:	2374      	movs	r3, #116	; 0x74
 8001cf0:	84bb      	strh	r3, [r7, #36]	; 0x24

	//Initialisation du CAN du joystick (ADC_CHANNEL_8)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4871      	ldr	r0, [pc, #452]	; (8001ed4 <StartRRacket+0x1fc>)
 8001d10:	f002 ffce 	bl	8004cb0 <HAL_ADC_ConfigChannel>

	/* Infinite loop */
	for(;;){
		//Capture des valeurs des joysticks sur ADC_CHANNEL_8
		sConfig.Channel = ADC_CHANNEL_8;
 8001d14:	2308      	movs	r3, #8
 8001d16:	60fb      	str	r3, [r7, #12]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	486d      	ldr	r0, [pc, #436]	; (8001ed4 <StartRRacket+0x1fc>)
 8001d20:	f002 ffc6 	bl	8004cb0 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001d24:	486b      	ldr	r0, [pc, #428]	; (8001ed4 <StartRRacket+0x1fc>)
 8001d26:	f002 fe71 	bl	8004a0c <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001d2a:	bf00      	nop
 8001d2c:	2164      	movs	r1, #100	; 0x64
 8001d2e:	4869      	ldr	r0, [pc, #420]	; (8001ed4 <StartRRacket+0x1fc>)
 8001d30:	f002 ff2c 	bl	8004b8c <HAL_ADC_PollForConversion>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f8      	bne.n	8001d2c <StartRRacket+0x54>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001d3a:	4866      	ldr	r0, [pc, #408]	; (8001ed4 <StartRRacket+0x1fc>)
 8001d3c:	f002 ffaa 	bl	8004c94 <HAL_ADC_GetValue>
 8001d40:	4603      	mov	r3, r0
 8001d42:	61fb      	str	r3, [r7, #28]
		HAL_ADC_Start(&hadc1);
 8001d44:	4864      	ldr	r0, [pc, #400]	; (8001ed8 <StartRRacket+0x200>)
 8001d46:	f002 fe61 	bl	8004a0c <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001d4a:	bf00      	nop
 8001d4c:	2164      	movs	r1, #100	; 0x64
 8001d4e:	4862      	ldr	r0, [pc, #392]	; (8001ed8 <StartRRacket+0x200>)
 8001d50:	f002 ff1c 	bl	8004b8c <HAL_ADC_PollForConversion>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f8      	bne.n	8001d4c <StartRRacket+0x74>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001d5a:	485f      	ldr	r0, [pc, #380]	; (8001ed8 <StartRRacket+0x200>)
 8001d5c:	f002 ff9a 	bl	8004c94 <HAL_ADC_GetValue>
 8001d60:	4603      	mov	r3, r0
 8001d62:	623b      	str	r3, [r7, #32]

		//Actualisation des coordonnées de la raquette droite, le joystick
		//horizontal nécessite une corrcetion pour ne pas dériver
		x_RRacket -= (joystick_h - 2018)/100;
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	f2a3 73e2 	subw	r3, r3, #2018	; 0x7e2
 8001d6a:	4a5c      	ldr	r2, [pc, #368]	; (8001edc <StartRRacket+0x204>)
 8001d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d70:	1152      	asrs	r2, r2, #5
 8001d72:	17db      	asrs	r3, r3, #31
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <StartRRacket+0x208>)
 8001d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	4b56      	ldr	r3, [pc, #344]	; (8001ee0 <StartRRacket+0x208>)
 8001d88:	801a      	strh	r2, [r3, #0]
		y_RRacket -= (joystick_v - 2080)/150;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001d90:	4a54      	ldr	r2, [pc, #336]	; (8001ee4 <StartRRacket+0x20c>)
 8001d92:	fb82 1203 	smull	r1, r2, r2, r3
 8001d96:	1112      	asrs	r2, r2, #4
 8001d98:	17db      	asrs	r3, r3, #31
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	4b52      	ldr	r3, [pc, #328]	; (8001ee8 <StartRRacket+0x210>)
 8001da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	4b4e      	ldr	r3, [pc, #312]	; (8001ee8 <StartRRacket+0x210>)
 8001dae:	801a      	strh	r2, [r3, #0]

		// Cadrage des coordonnées RRacket
		if (x_RRacket <= 240) x_RRacket = 240;
 8001db0:	4b4b      	ldr	r3, [pc, #300]	; (8001ee0 <StartRRacket+0x208>)
 8001db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db6:	2bf0      	cmp	r3, #240	; 0xf0
 8001db8:	dc02      	bgt.n	8001dc0 <StartRRacket+0xe8>
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <StartRRacket+0x208>)
 8001dbc:	22f0      	movs	r2, #240	; 0xf0
 8001dbe:	801a      	strh	r2, [r3, #0]
		if (x_RRacket >= 479 - width_rackets) x_RRacket = 479 - width_rackets;
 8001dc0:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <StartRRacket+0x208>)
 8001dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc6:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8001dca:	dd03      	ble.n	8001dd4 <StartRRacket+0xfc>
 8001dcc:	4b44      	ldr	r3, [pc, #272]	; (8001ee0 <StartRRacket+0x208>)
 8001dce:	f240 12d7 	movw	r2, #471	; 0x1d7
 8001dd2:	801a      	strh	r2, [r3, #0]
		if (y_RRacket <= 0) y_RRacket = 0;
 8001dd4:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <StartRRacket+0x210>)
 8001dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	dc02      	bgt.n	8001de4 <StartRRacket+0x10c>
 8001dde:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <StartRRacket+0x210>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	801a      	strh	r2, [r3, #0]
		if (y_RRacket + height_rackets >= 272) y_RRacket = 272 - height_rackets;
 8001de4:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <StartRRacket+0x210>)
 8001de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dea:	2be7      	cmp	r3, #231	; 0xe7
 8001dec:	dd02      	ble.n	8001df4 <StartRRacket+0x11c>
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <StartRRacket+0x210>)
 8001df0:	22e8      	movs	r2, #232	; 0xe8
 8001df2:	801a      	strh	r2, [r3, #0]

		//Tracé de RRacket
		//Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001df4:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <StartRRacket+0x214>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f00a f807 	bl	800be10 <xQueueSemaphoreTake>

		//Effaçage du précedent rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <StartRRacket+0x218>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <StartRRacket+0x138>
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	e001      	b.n	8001e14 <StartRRacket+0x13c>
 8001e10:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fc99 	bl	800274c <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_RRacket_hold, y_RRacket_hold, width_rackets,
 8001e1a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001e1c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001e1e:	2328      	movs	r3, #40	; 0x28
 8001e20:	2208      	movs	r2, #8
 8001e22:	f001 f89d 	bl	8002f60 <BSP_LCD_FillRect>
				height_rackets);

		//Création du nouveau rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001e26:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <StartRRacket+0x218>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d102      	bne.n	8001e34 <StartRRacket+0x15c>
 8001e2e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001e32:	e001      	b.n	8001e38 <StartRRacket+0x160>
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fc87 	bl	800274c <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_RRacket, y_RRacket, width_rackets, height_rackets);
 8001e3e:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <StartRRacket+0x208>)
 8001e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e44:	b298      	uxth	r0, r3
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <StartRRacket+0x210>)
 8001e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4c:	b299      	uxth	r1, r3
 8001e4e:	2328      	movs	r3, #40	; 0x28
 8001e50:	2208      	movs	r2, #8
 8001e52:	f001 f885 	bl	8002f60 <BSP_LCD_FillRect>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <StartRRacket+0x214>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	f009 fed0 	bl	800bc04 <xQueueGenericSend>

		if((x_RRacket!=x_RRacket_hold) || (y_RRacket!=y_RRacket_hold)){
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <StartRRacket+0x208>)
 8001e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d106      	bne.n	8001e80 <StartRRacket+0x1a8>
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <StartRRacket+0x210>)
 8001e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e78:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d01e      	beq.n	8001ebe <StartRRacket+0x1e6>
			//Si la raquette a bougé, on envoie les nouvelles coordonnées par liaison série
			txbuffer[0]=(x_RRacket & 0xFF00) >> 8;
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <StartRRacket+0x208>)
 8001e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e86:	121b      	asrs	r3, r3, #8
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <StartRRacket+0x21c>)
 8001e8c:	701a      	strb	r2, [r3, #0]
			txbuffer[1]= x_RRacket & 0x00FF;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <StartRRacket+0x208>)
 8001e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <StartRRacket+0x21c>)
 8001e98:	705a      	strb	r2, [r3, #1]
			txbuffer[2]=(y_RRacket & 0xFF00) >> 8;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <StartRRacket+0x210>)
 8001e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea0:	121b      	asrs	r3, r3, #8
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <StartRRacket+0x21c>)
 8001ea6:	709a      	strb	r2, [r3, #2]
			txbuffer[3]=y_RRacket & 0x00FF;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <StartRRacket+0x210>)
 8001eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <StartRRacket+0x21c>)
 8001eb2:	70da      	strb	r2, [r3, #3]

			HAL_UART_Transmit_IT(&huart7,txbuffer,4);
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	490f      	ldr	r1, [pc, #60]	; (8001ef4 <StartRRacket+0x21c>)
 8001eb8:	480f      	ldr	r0, [pc, #60]	; (8001ef8 <StartRRacket+0x220>)
 8001eba:	f008 fac9 	bl	800a450 <HAL_UART_Transmit_IT>
		}


		//Stockage des dernières coordonnées de la raquette droite
		x_RRacket_hold = x_RRacket;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <StartRRacket+0x208>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	84fb      	strh	r3, [r7, #38]	; 0x26
		y_RRacket_hold = y_RRacket;
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <StartRRacket+0x210>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	84bb      	strh	r3, [r7, #36]	; 0x24
		osDelay(100);
 8001eca:	2064      	movs	r0, #100	; 0x64
 8001ecc:	f009 fbf7 	bl	800b6be <osDelay>
		sConfig.Channel = ADC_CHANNEL_8;
 8001ed0:	e720      	b.n	8001d14 <StartRRacket+0x3c>
 8001ed2:	bf00      	nop
 8001ed4:	20008918 	.word	0x20008918
 8001ed8:	200088d0 	.word	0x200088d0
 8001edc:	51eb851f 	.word	0x51eb851f
 8001ee0:	20000028 	.word	0x20000028
 8001ee4:	1b4e81b5 	.word	0x1b4e81b5
 8001ee8:	2000002a 	.word	0x2000002a
 8001eec:	20008b9c 	.word	0x20008b9c
 8001ef0:	20000032 	.word	0x20000032
 8001ef4:	20008a5c 	.word	0x20008a5c
 8001ef8:	2000869c 	.word	0x2000869c

08001efc <StartBall>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBall */
void StartBall(void const * argument)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b092      	sub	sp, #72	; 0x48
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBall */

	//Initialisation de la régularité de lancement de la tache
	TickType_t xFrequency=15;
 8001f04:	230f      	movs	r3, #15
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8001f08:	f00a fd9c 	bl	800ca44 <xTaskGetTickCount>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Initialisation des anciennes coordonnées de la balle
	int16_t x_balle_hold = 8;
 8001f10:	2308      	movs	r3, #8
 8001f12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t y_balle_hold = 136;
 8001f16:	2388      	movs	r3, #136	; 0x88
 8001f18:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  /* Infinite loop */
  for(;;)
  {

	  if(lost == 1){
 8001f1c:	4b65      	ldr	r3, [pc, #404]	; (80020b4 <StartBall+0x1b8>)
 8001f1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d116      	bne.n	8001f54 <StartBall+0x58>
		  //Si la balle touche le bord gauche de l'écran, on a perdu
		  //Capture de la ressource
		  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001f26:	4b64      	ldr	r3, [pc, #400]	; (80020b8 <StartBall+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f009 ff6e 	bl	800be10 <xQueueSemaphoreTake>

		  //Affichage du message de perte sous le chronomètre
		  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Perdu");
 8001f34:	4961      	ldr	r1, [pc, #388]	; (80020bc <StartBall+0x1c0>)
 8001f36:	2002      	movs	r0, #2
 8001f38:	f000 fd9e 	bl	8002a78 <BSP_LCD_DisplayStringAtLine>

		  //Libération de la ressource
		  xSemaphoreGive(myMutex_LCDHandle);
 8001f3c:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <StartBall+0x1bc>)
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	2300      	movs	r3, #0
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	f009 fe5d 	bl	800bc04 <xQueueGenericSend>

		  //Mise en pause du déplacement de la balle
		  vTaskSuspend(BallDisplayHandle);
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	; (80020c0 <StartBall+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f00a fbd4 	bl	800c6fc <vTaskSuspend>
	  }



	  //Capture de la ressource
	  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001f54:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <StartBall+0x1bc>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f009 ff57 	bl	800be10 <xQueueSemaphoreTake>

	  //Effaçage des anciens dessins
	  if(x_balle_hold >= 0){
 8001f62:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db15      	blt.n	8001f96 <StartBall+0x9a>
		  //Effaçage de l'ancienne balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001f6a:	4b56      	ldr	r3, [pc, #344]	; (80020c4 <StartBall+0x1c8>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <StartBall+0x7c>
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e001      	b.n	8001f7c <StartBall+0x80>
 8001f78:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fbe5 	bl	800274c <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle_hold, y_balle_hold, r_balle);
 8001f82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f86:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8001f8a:	4a4f      	ldr	r2, [pc, #316]	; (80020c8 <StartBall+0x1cc>)
 8001f8c:	8812      	ldrh	r2, [r2, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 f860 	bl	8003054 <BSP_LCD_FillCircle>
 8001f94:	e02c      	b.n	8001ff0 <StartBall+0xf4>
	  }
	  else{
		  //Effaçage de l'ancien triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001f96:	4b4b      	ldr	r3, [pc, #300]	; (80020c4 <StartBall+0x1c8>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <StartBall+0xa8>
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e001      	b.n	8001fa8 <StartBall+0xac>
 8001fa4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fbcf 	bl	800274c <BSP_LCD_SetTextColor>
		  Point Point1 = {6,y_balle_hold+3};
 8001fae:	2306      	movs	r3, #6
 8001fb0:	873b      	strh	r3, [r7, #56]	; 0x38
 8001fb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001fb6:	3303      	adds	r3, #3
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	877b      	strh	r3, [r7, #58]	; 0x3a
		  Point Point2 = {0,y_balle_hold};
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001fc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001fc6:	86fb      	strh	r3, [r7, #54]	; 0x36
		  Point Point3 = {6,y_balle_hold-3};
 8001fc8:	2306      	movs	r3, #6
 8001fca:	863b      	strh	r3, [r7, #48]	; 0x30
 8001fcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	867b      	strh	r3, [r7, #50]	; 0x32

		  Point Points[3] = {Point1, Point2, Point3};
 8001fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
 8001fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
		  BSP_LCD_FillPolygon(Points,3);
 8001fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe8:	2103      	movs	r1, #3
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 f8d2 	bl	8003194 <BSP_LCD_FillPolygon>
	  }

	  //Affichage des nouveaux dessins
	  if(x_balle >= 0){
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <StartBall+0x1d0>)
 8001ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db17      	blt.n	800202a <StartBall+0x12e>
		  //Affichage de la nouvelle balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001ffa:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <StartBall+0x1c8>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <StartBall+0x10c>
 8002002:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002006:	e001      	b.n	800200c <StartBall+0x110>
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fb9d 	bl	800274c <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle, y_balle, r_balle);
 8002012:	4b2e      	ldr	r3, [pc, #184]	; (80020cc <StartBall+0x1d0>)
 8002014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002018:	b29b      	uxth	r3, r3
 800201a:	4a2d      	ldr	r2, [pc, #180]	; (80020d0 <StartBall+0x1d4>)
 800201c:	8811      	ldrh	r1, [r2, #0]
 800201e:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <StartBall+0x1cc>)
 8002020:	8812      	ldrh	r2, [r2, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f001 f816 	bl	8003054 <BSP_LCD_FillCircle>
 8002028:	e02d      	b.n	8002086 <StartBall+0x18a>
	  }
	  else{
		  //Affichage du nouveau triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <StartBall+0x1c8>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <StartBall+0x13c>
 8002032:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002036:	e001      	b.n	800203c <StartBall+0x140>
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fb85 	bl	800274c <BSP_LCD_SetTextColor>
		  Point Point1 = {6,y_balle+3};
 8002042:	2306      	movs	r3, #6
 8002044:	843b      	strh	r3, [r7, #32]
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <StartBall+0x1d4>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	3303      	adds	r3, #3
 800204c:	b29b      	uxth	r3, r3
 800204e:	b21b      	sxth	r3, r3
 8002050:	847b      	strh	r3, [r7, #34]	; 0x22
		  Point Point2 = {0,y_balle};
 8002052:	2300      	movs	r3, #0
 8002054:	83bb      	strh	r3, [r7, #28]
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <StartBall+0x1d4>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	b21b      	sxth	r3, r3
 800205c:	83fb      	strh	r3, [r7, #30]
		  Point Point3 = {6,y_balle-3};
 800205e:	2306      	movs	r3, #6
 8002060:	833b      	strh	r3, [r7, #24]
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <StartBall+0x1d4>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	3b03      	subs	r3, #3
 8002068:	b29b      	uxth	r3, r3
 800206a:	b21b      	sxth	r3, r3
 800206c:	837b      	strh	r3, [r7, #26]

		  Point Points[3] = {Point1, Point2, Point3};
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	617b      	str	r3, [r7, #20]
		  BSP_LCD_FillPolygon(Points,3);
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	2103      	movs	r1, #3
 8002080:	4618      	mov	r0, r3
 8002082:	f001 f887 	bl	8003194 <BSP_LCD_FillPolygon>
	  }

	  //Libération de la ressource
	 xSemaphoreGive(myMutex_LCDHandle);
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <StartBall+0x1bc>)
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	2300      	movs	r3, #0
 800208c:	2200      	movs	r2, #0
 800208e:	2100      	movs	r1, #0
 8002090:	f009 fdb8 	bl	800bc04 <xQueueGenericSend>

	 //Stockage du dernier emplacement de dessin
	 x_balle_hold=x_balle;
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <StartBall+0x1d0>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	 y_balle_hold=y_balle;
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <StartBall+0x1d4>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	 vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80020a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020aa:	4618      	mov	r0, r3
 80020ac:	f00a fa6c 	bl	800c588 <vTaskDelayUntil>
	  if(lost == 1){
 80020b0:	e734      	b.n	8001f1c <StartBall+0x20>
 80020b2:	bf00      	nop
 80020b4:	200002d2 	.word	0x200002d2
 80020b8:	20008b9c 	.word	0x20008b9c
 80020bc:	0800de28 	.word	0x0800de28
 80020c0:	20008bac 	.word	0x20008bac
 80020c4:	20000032 	.word	0x20000032
 80020c8:	20000030 	.word	0x20000030
 80020cc:	2000002c 	.word	0x2000002c
 80020d0:	2000002e 	.word	0x2000002e

080020d4 <StartBgChanger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBgChanger */
void StartBgChanger(void const * argument)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBgChanger */
	//Initialisation de l'état de BP1 et de l'état
	uint8_t BP1=1;
 80020dc:	2301      	movs	r3, #1
 80020de:	73bb      	strb	r3, [r7, #14]
	uint8_t state=0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  //Lecture de l'état du BP1
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 80020e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e8:	4833      	ldr	r0, [pc, #204]	; (80021b8 <StartBgChanger+0xe4>)
 80020ea:	f004 f8f9 	bl	80062e0 <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	73bb      	strb	r3, [r7, #14]

	  //Machine à états
	  switch(state){
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d052      	beq.n	800219e <StartBgChanger+0xca>
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	dc59      	bgt.n	80021b0 <StartBgChanger+0xdc>
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <StartBgChanger+0x32>
 8002100:	2b01      	cmp	r3, #1
 8002102:	d006      	beq.n	8002112 <StartBgChanger+0x3e>
 8002104:	e054      	b.n	80021b0 <StartBgChanger+0xdc>
		  case 0:
			  //Attente d'un changement d'état (d'un appui sur BP1)
			  if(!BP1) state = 1;
 8002106:	7bbb      	ldrb	r3, [r7, #14]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d14e      	bne.n	80021aa <StartBgChanger+0xd6>
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
			  break;
 8002110:	e04b      	b.n	80021aa <StartBgChanger+0xd6>
		  case 1:
			  //Changement de la couleur
			  couleur = !couleur;
 8002112:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <StartBgChanger+0xe8>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	bf0c      	ite	eq
 800211a:	2301      	moveq	r3, #1
 800211c:	2300      	movne	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	4b26      	ldr	r3, [pc, #152]	; (80021bc <StartBgChanger+0xe8>)
 8002124:	701a      	strb	r2, [r3, #0]
			  if(couleur==0){
 8002126:	4b25      	ldr	r3, [pc, #148]	; (80021bc <StartBgChanger+0xe8>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d11a      	bne.n	8002164 <StartBgChanger+0x90>
				  //Capture de la ressource
				  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <StartBgChanger+0xec>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f04f 31ff 	mov.w	r1, #4294967295
 8002136:	4618      	mov	r0, r3
 8002138:	f009 fe6a 	bl	800be10 <xQueueSemaphoreTake>

				  //Nettoyage et recoloration du LCD en noir sur fond blanc
				  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f000 fb66 	bl	8002810 <BSP_LCD_Clear>
				  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002144:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002148:	f000 fb00 	bl	800274c <BSP_LCD_SetTextColor>
				  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f000 fb14 	bl	800277c <BSP_LCD_SetBackColor>

				  //Libération de la ressource
				  xSemaphoreGive(myMutex_LCDHandle);
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <StartBgChanger+0xec>)
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	2300      	movs	r3, #0
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	f009 fd51 	bl	800bc04 <xQueueGenericSend>
 8002162:	e019      	b.n	8002198 <StartBgChanger+0xc4>
			  }
			  else{
				  //Capture de la ressource
				  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <StartBgChanger+0xec>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	4618      	mov	r0, r3
 800216e:	f009 fe4f 	bl	800be10 <xQueueSemaphoreTake>

				  //Nettoyage et recoloration du LCD en blanc sur fond noir
				  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8002172:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002176:	f000 fb4b 	bl	8002810 <BSP_LCD_Clear>
				  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800217a:	f04f 30ff 	mov.w	r0, #4294967295
 800217e:	f000 fae5 	bl	800274c <BSP_LCD_SetTextColor>
				  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002182:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002186:	f000 faf9 	bl	800277c <BSP_LCD_SetBackColor>

				  //Libération de la ressource
				  xSemaphoreGive(myMutex_LCDHandle);
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <StartBgChanger+0xec>)
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	2300      	movs	r3, #0
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	f009 fd36 	bl	800bc04 <xQueueGenericSend>
			  }

			  //Changement d'état
			  state = 2;
 8002198:	2302      	movs	r3, #2
 800219a:	73fb      	strb	r3, [r7, #15]
			  break;
 800219c:	e008      	b.n	80021b0 <StartBgChanger+0xdc>
		  case 2:
			  //Attente d'un changement d'état (relachement du bouton BP1)
			  if(BP1) state = 0;
 800219e:	7bbb      	ldrb	r3, [r7, #14]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <StartBgChanger+0xda>
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]
			  break;
 80021a8:	e001      	b.n	80021ae <StartBgChanger+0xda>
			  break;
 80021aa:	bf00      	nop
 80021ac:	e000      	b.n	80021b0 <StartBgChanger+0xdc>
			  break;
 80021ae:	bf00      	nop
	  }
  osDelay(50);
 80021b0:	2032      	movs	r0, #50	; 0x32
 80021b2:	f009 fa84 	bl	800b6be <osDelay>
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 80021b6:	e795      	b.n	80020e4 <StartBgChanger+0x10>
 80021b8:	40020000 	.word	0x40020000
 80021bc:	20000032 	.word	0x20000032
 80021c0:	20008b9c 	.word	0x20008b9c

080021c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021d6:	f002 fb91 	bl	80048fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40001000 	.word	0x40001000

080021e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ec:	b672      	cpsid	i
}
 80021ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021f0:	e7fe      	b.n	80021f0 <Error_Handler+0x8>
	...

080021f4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a51      	ldr	r2, [pc, #324]	; (8002344 <I2Cx_MspInit+0x150>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d14d      	bne.n	80022a0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002204:	4b50      	ldr	r3, [pc, #320]	; (8002348 <I2Cx_MspInit+0x154>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	4a4f      	ldr	r2, [pc, #316]	; (8002348 <I2Cx_MspInit+0x154>)
 800220a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220e:	6313      	str	r3, [r2, #48]	; 0x30
 8002210:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <I2Cx_MspInit+0x154>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002220:	2312      	movs	r3, #18
 8002222:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002228:	2302      	movs	r3, #2
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800222c:	2304      	movs	r3, #4
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	4845      	ldr	r0, [pc, #276]	; (800234c <I2Cx_MspInit+0x158>)
 8002238:	f003 fd9a 	bl	8005d70 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800223c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	4619      	mov	r1, r3
 8002248:	4840      	ldr	r0, [pc, #256]	; (800234c <I2Cx_MspInit+0x158>)
 800224a:	f003 fd91 	bl	8005d70 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800224e:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <I2Cx_MspInit+0x154>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a3d      	ldr	r2, [pc, #244]	; (8002348 <I2Cx_MspInit+0x154>)
 8002254:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <I2Cx_MspInit+0x154>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002266:	4b38      	ldr	r3, [pc, #224]	; (8002348 <I2Cx_MspInit+0x154>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a37      	ldr	r2, [pc, #220]	; (8002348 <I2Cx_MspInit+0x154>)
 800226c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002270:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002272:	4b35      	ldr	r3, [pc, #212]	; (8002348 <I2Cx_MspInit+0x154>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4a34      	ldr	r2, [pc, #208]	; (8002348 <I2Cx_MspInit+0x154>)
 8002278:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800227c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	210f      	movs	r1, #15
 8002282:	2048      	movs	r0, #72	; 0x48
 8002284:	f003 f810 	bl	80052a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002288:	2048      	movs	r0, #72	; 0x48
 800228a:	f003 f829 	bl	80052e0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	210f      	movs	r1, #15
 8002292:	2049      	movs	r0, #73	; 0x49
 8002294:	f003 f808 	bl	80052a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002298:	2049      	movs	r0, #73	; 0x49
 800229a:	f003 f821 	bl	80052e0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800229e:	e04d      	b.n	800233c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022a0:	4b29      	ldr	r3, [pc, #164]	; (8002348 <I2Cx_MspInit+0x154>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	4a28      	ldr	r2, [pc, #160]	; (8002348 <I2Cx_MspInit+0x154>)
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	6313      	str	r3, [r2, #48]	; 0x30
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <I2Cx_MspInit+0x154>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80022b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022bc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80022be:	2312      	movs	r3, #18
 80022c0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80022c6:	2302      	movs	r3, #2
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80022ca:	2304      	movs	r3, #4
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022ce:	f107 031c 	add.w	r3, r7, #28
 80022d2:	4619      	mov	r1, r3
 80022d4:	481e      	ldr	r0, [pc, #120]	; (8002350 <I2Cx_MspInit+0x15c>)
 80022d6:	f003 fd4b 	bl	8005d70 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80022da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4619      	mov	r1, r3
 80022e6:	481a      	ldr	r0, [pc, #104]	; (8002350 <I2Cx_MspInit+0x15c>)
 80022e8:	f003 fd42 	bl	8005d70 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80022ec:	4b16      	ldr	r3, [pc, #88]	; (8002348 <I2Cx_MspInit+0x154>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a15      	ldr	r2, [pc, #84]	; (8002348 <I2Cx_MspInit+0x154>)
 80022f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022f6:	6413      	str	r3, [r2, #64]	; 0x40
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <I2Cx_MspInit+0x154>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002304:	4b10      	ldr	r3, [pc, #64]	; (8002348 <I2Cx_MspInit+0x154>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <I2Cx_MspInit+0x154>)
 800230a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800230e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <I2Cx_MspInit+0x154>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <I2Cx_MspInit+0x154>)
 8002316:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800231a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	210f      	movs	r1, #15
 8002320:	201f      	movs	r0, #31
 8002322:	f002 ffc1 	bl	80052a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002326:	201f      	movs	r0, #31
 8002328:	f002 ffda 	bl	80052e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	210f      	movs	r1, #15
 8002330:	2020      	movs	r0, #32
 8002332:	f002 ffb9 	bl	80052a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002336:	2020      	movs	r0, #32
 8002338:	f002 ffd2 	bl	80052e0 <HAL_NVIC_EnableIRQ>
}
 800233c:	bf00      	nop
 800233e:	3730      	adds	r7, #48	; 0x30
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200002d4 	.word	0x200002d4
 8002348:	40023800 	.word	0x40023800
 800234c:	40021c00 	.word	0x40021c00
 8002350:	40020400 	.word	0x40020400

08002354 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f004 fadf 	bl	8006920 <HAL_I2C_GetState>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d125      	bne.n	80023b4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a14      	ldr	r2, [pc, #80]	; (80023bc <I2Cx_Init+0x68>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d103      	bne.n	8002378 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <I2Cx_Init+0x6c>)
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e002      	b.n	800237e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <I2Cx_Init+0x70>)
 800237c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <I2Cx_Init+0x74>)
 8002382:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff23 	bl	80021f4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f003 ffc8 	bl	8006344 <HAL_I2C_Init>
  }
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200002d4 	.word	0x200002d4
 80023c0:	40005c00 	.word	0x40005c00
 80023c4:	40005400 	.word	0x40005400
 80023c8:	40912732 	.word	0x40912732

080023cc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af04      	add	r7, sp, #16
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	461a      	mov	r2, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	72fb      	strb	r3, [r7, #11]
 80023de:	460b      	mov	r3, r1
 80023e0:	813b      	strh	r3, [r7, #8]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80023ea:	7afb      	ldrb	r3, [r7, #11]
 80023ec:	b299      	uxth	r1, r3
 80023ee:	88f8      	ldrh	r0, [r7, #6]
 80023f0:	893a      	ldrh	r2, [r7, #8]
 80023f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f6:	9302      	str	r3, [sp, #8]
 80023f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	4603      	mov	r3, r0
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f004 f972 	bl	80066ec <HAL_I2C_Mem_Read>
 8002408:	4603      	mov	r3, r0
 800240a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002412:	7afb      	ldrb	r3, [r7, #11]
 8002414:	4619      	mov	r1, r3
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f832 	bl	8002480 <I2Cx_Error>
  }
  return status;    
 800241c:	7dfb      	ldrb	r3, [r7, #23]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b08a      	sub	sp, #40	; 0x28
 800242a:	af04      	add	r7, sp, #16
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	4608      	mov	r0, r1
 8002430:	4611      	mov	r1, r2
 8002432:	461a      	mov	r2, r3
 8002434:	4603      	mov	r3, r0
 8002436:	72fb      	strb	r3, [r7, #11]
 8002438:	460b      	mov	r3, r1
 800243a:	813b      	strh	r3, [r7, #8]
 800243c:	4613      	mov	r3, r2
 800243e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002444:	7afb      	ldrb	r3, [r7, #11]
 8002446:	b299      	uxth	r1, r3
 8002448:	88f8      	ldrh	r0, [r7, #6]
 800244a:	893a      	ldrh	r2, [r7, #8]
 800244c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002450:	9302      	str	r3, [sp, #8]
 8002452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	4603      	mov	r3, r0
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f004 f831 	bl	80064c4 <HAL_I2C_Mem_Write>
 8002462:	4603      	mov	r3, r0
 8002464:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002466:	7dfb      	ldrb	r3, [r7, #23]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800246c:	7afb      	ldrb	r3, [r7, #11]
 800246e:	4619      	mov	r1, r3
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f805 	bl	8002480 <I2Cx_Error>
  }
  return status;
 8002476:	7dfb      	ldrb	r3, [r7, #23]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f003 ffe9 	bl	8006464 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ff5e 	bl	8002354 <I2Cx_Init>
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <TS_IO_Init+0x10>)
 80024a6:	f7ff ff55 	bl	8002354 <I2Cx_Init>
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200002d4 	.word	0x200002d4

080024b4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
 80024be:	460b      	mov	r3, r1
 80024c0:	71bb      	strb	r3, [r7, #6]
 80024c2:	4613      	mov	r3, r2
 80024c4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80024c6:	79bb      	ldrb	r3, [r7, #6]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	79f9      	ldrb	r1, [r7, #7]
 80024cc:	2301      	movs	r3, #1
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	1d7b      	adds	r3, r7, #5
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2301      	movs	r3, #1
 80024d6:	4803      	ldr	r0, [pc, #12]	; (80024e4 <TS_IO_Write+0x30>)
 80024d8:	f7ff ffa5 	bl	8002426 <I2Cx_WriteMultiple>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200002d4 	.word	0x200002d4

080024e8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	4603      	mov	r3, r0
 80024f0:	460a      	mov	r2, r1
 80024f2:	71fb      	strb	r3, [r7, #7]
 80024f4:	4613      	mov	r3, r2
 80024f6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80024fc:	79bb      	ldrb	r3, [r7, #6]
 80024fe:	b29a      	uxth	r2, r3
 8002500:	79f9      	ldrb	r1, [r7, #7]
 8002502:	2301      	movs	r3, #1
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	f107 030f 	add.w	r3, r7, #15
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2301      	movs	r3, #1
 800250e:	4804      	ldr	r0, [pc, #16]	; (8002520 <TS_IO_Read+0x38>)
 8002510:	f7ff ff5c 	bl	80023cc <I2Cx_ReadMultiple>

  return read_value;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200002d4 	.word	0x200002d4

08002524 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f002 fa05 	bl	800493c <HAL_Delay>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002540:	4b31      	ldr	r3, [pc, #196]	; (8002608 <BSP_LCD_Init+0xcc>)
 8002542:	2228      	movs	r2, #40	; 0x28
 8002544:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <BSP_LCD_Init+0xcc>)
 8002548:	2209      	movs	r2, #9
 800254a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800254c:	4b2e      	ldr	r3, [pc, #184]	; (8002608 <BSP_LCD_Init+0xcc>)
 800254e:	2235      	movs	r2, #53	; 0x35
 8002550:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002552:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <BSP_LCD_Init+0xcc>)
 8002554:	220b      	movs	r2, #11
 8002556:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <BSP_LCD_Init+0xcc>)
 800255a:	f240 121b 	movw	r2, #283	; 0x11b
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002560:	4b29      	ldr	r3, [pc, #164]	; (8002608 <BSP_LCD_Init+0xcc>)
 8002562:	f240 2215 	movw	r2, #533	; 0x215
 8002566:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <BSP_LCD_Init+0xcc>)
 800256a:	f240 121d 	movw	r2, #285	; 0x11d
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <BSP_LCD_Init+0xcc>)
 8002572:	f240 2235 	movw	r2, #565	; 0x235
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002578:	2100      	movs	r1, #0
 800257a:	4823      	ldr	r0, [pc, #140]	; (8002608 <BSP_LCD_Init+0xcc>)
 800257c:	f000 ffe6 	bl	800354c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <BSP_LCD_Init+0xcc>)
 8002582:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002586:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <BSP_LCD_Init+0xcc>)
 800258a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800258e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <BSP_LCD_Init+0xcc>)
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <BSP_LCD_Init+0xcc>)
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <BSP_LCD_Init+0xcc>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <BSP_LCD_Init+0xcc>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <BSP_LCD_Init+0xcc>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <BSP_LCD_Init+0xcc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <BSP_LCD_Init+0xcc>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <BSP_LCD_Init+0xcc>)
 80025c2:	4a12      	ldr	r2, [pc, #72]	; (800260c <BSP_LCD_Init+0xd0>)
 80025c4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80025c6:	4810      	ldr	r0, [pc, #64]	; (8002608 <BSP_LCD_Init+0xcc>)
 80025c8:	f004 fe3c 	bl	8007244 <HAL_LTDC_GetState>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80025d2:	2100      	movs	r1, #0
 80025d4:	480c      	ldr	r0, [pc, #48]	; (8002608 <BSP_LCD_Init+0xcc>)
 80025d6:	f000 fedf 	bl	8003398 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80025da:	480b      	ldr	r0, [pc, #44]	; (8002608 <BSP_LCD_Init+0xcc>)
 80025dc:	f004 fc62 	bl	8006ea4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80025e0:	2201      	movs	r2, #1
 80025e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025e6:	480a      	ldr	r0, [pc, #40]	; (8002610 <BSP_LCD_Init+0xd4>)
 80025e8:	f003 fe92 	bl	8006310 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80025ec:	2201      	movs	r2, #1
 80025ee:	2108      	movs	r1, #8
 80025f0:	4808      	ldr	r0, [pc, #32]	; (8002614 <BSP_LCD_Init+0xd8>)
 80025f2:	f003 fe8d 	bl	8006310 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80025f6:	f001 f989 	bl	800390c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80025fa:	4807      	ldr	r0, [pc, #28]	; (8002618 <BSP_LCD_Init+0xdc>)
 80025fc:	f000 f8d8 	bl	80027b0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20008bb4 	.word	0x20008bb4
 800260c:	40016800 	.word	0x40016800
 8002610:	40022000 	.word	0x40022000
 8002614:	40022800 	.word	0x40022800
 8002618:	20000034 	.word	0x20000034

0800261c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <BSP_LCD_GetXSize+0x20>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a06      	ldr	r2, [pc, #24]	; (8002640 <BSP_LCD_GetXSize+0x24>)
 8002626:	2134      	movs	r1, #52	; 0x34
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	3360      	adds	r3, #96	; 0x60
 8002630:	681b      	ldr	r3, [r3, #0]
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	20000360 	.word	0x20000360
 8002640:	20008bb4 	.word	0x20008bb4

08002644 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <BSP_LCD_GetYSize+0x20>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <BSP_LCD_GetYSize+0x24>)
 800264e:	2134      	movs	r1, #52	; 0x34
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	3364      	adds	r3, #100	; 0x64
 8002658:	681b      	ldr	r3, [r3, #0]
}
 800265a:	4618      	mov	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	20000360 	.word	0x20000360
 8002668:	20008bb4 	.word	0x20008bb4

0800266c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800266c:	b580      	push	{r7, lr}
 800266e:	b090      	sub	sp, #64	; 0x40
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800267c:	f7ff ffce 	bl	800261c <BSP_LCD_GetXSize>
 8002680:	4603      	mov	r3, r0
 8002682:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002688:	f7ff ffdc 	bl	8002644 <BSP_LCD_GetYSize>
 800268c:	4603      	mov	r3, r0
 800268e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002698:	23ff      	movs	r3, #255	; 0xff
 800269a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80026b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026b8:	2307      	movs	r3, #7
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80026bc:	f7ff ffae 	bl	800261c <BSP_LCD_GetXSize>
 80026c0:	4603      	mov	r3, r0
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80026c4:	f7ff ffbe 	bl	8002644 <BSP_LCD_GetYSize>
 80026c8:	4603      	mov	r3, r0
 80026ca:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80026cc:	88fa      	ldrh	r2, [r7, #6]
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	4619      	mov	r1, r3
 80026d4:	4812      	ldr	r0, [pc, #72]	; (8002720 <BSP_LCD_LayerDefaultInit+0xb4>)
 80026d6:	f004 fd77 	bl	80071c8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80026da:	88fa      	ldrh	r2, [r7, #6]
 80026dc:	4911      	ldr	r1, [pc, #68]	; (8002724 <BSP_LCD_LayerDefaultInit+0xb8>)
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	3304      	adds	r3, #4
 80026ea:	f04f 32ff 	mov.w	r2, #4294967295
 80026ee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80026f0:	88fa      	ldrh	r2, [r7, #6]
 80026f2:	490c      	ldr	r1, [pc, #48]	; (8002724 <BSP_LCD_LayerDefaultInit+0xb8>)
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	3308      	adds	r3, #8
 8002700:	4a09      	ldr	r2, [pc, #36]	; (8002728 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002702:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002704:	88fa      	ldrh	r2, [r7, #6]
 8002706:	4907      	ldr	r1, [pc, #28]	; (8002724 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002716:	601a      	str	r2, [r3, #0]
}
 8002718:	bf00      	nop
 800271a:	3740      	adds	r7, #64	; 0x40
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20008bb4 	.word	0x20008bb4
 8002724:	20000364 	.word	0x20000364
 8002728:	20000034 	.word	0x20000034

0800272c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <BSP_LCD_SelectLayer+0x1c>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6013      	str	r3, [r2, #0]
} 
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000360 	.word	0x20000360

0800274c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <BSP_LCD_SetTextColor+0x28>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <BSP_LCD_SetTextColor+0x2c>)
 800275a:	4613      	mov	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	601a      	str	r2, [r3, #0]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	20000360 	.word	0x20000360
 8002778:	20000364 	.word	0x20000364

0800277c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <BSP_LCD_SetBackColor+0x2c>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4908      	ldr	r1, [pc, #32]	; (80027ac <BSP_LCD_SetBackColor+0x30>)
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3304      	adds	r3, #4
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	601a      	str	r2, [r3, #0]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000360 	.word	0x20000360
 80027ac:	20000364 	.word	0x20000364

080027b0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <BSP_LCD_SetFont+0x2c>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4908      	ldr	r1, [pc, #32]	; (80027e0 <BSP_LCD_SetFont+0x30>)
 80027be:	4613      	mov	r3, r2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	3308      	adds	r3, #8
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000360 	.word	0x20000360
 80027e0:	20000364 	.word	0x20000364

080027e4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80027e8:	4b07      	ldr	r3, [pc, #28]	; (8002808 <BSP_LCD_GetFont+0x24>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4907      	ldr	r1, [pc, #28]	; (800280c <BSP_LCD_GetFont+0x28>)
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3308      	adds	r3, #8
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000360 	.word	0x20000360
 800280c:	20000364 	.word	0x20000364

08002810 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002812:	b085      	sub	sp, #20
 8002814:	af02      	add	r7, sp, #8
 8002816:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <BSP_LCD_Clear+0x48>)
 800281a:	681c      	ldr	r4, [r3, #0]
 800281c:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <BSP_LCD_Clear+0x48>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0e      	ldr	r2, [pc, #56]	; (800285c <BSP_LCD_Clear+0x4c>)
 8002822:	2134      	movs	r1, #52	; 0x34
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	335c      	adds	r3, #92	; 0x5c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	461e      	mov	r6, r3
 8002830:	f7ff fef4 	bl	800261c <BSP_LCD_GetXSize>
 8002834:	4605      	mov	r5, r0
 8002836:	f7ff ff05 	bl	8002644 <BSP_LCD_GetYSize>
 800283a:	4602      	mov	r2, r0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	2300      	movs	r3, #0
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	462a      	mov	r2, r5
 8002848:	4631      	mov	r1, r6
 800284a:	4620      	mov	r0, r4
 800284c:	f001 f812 	bl	8003874 <LL_FillBuffer>
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002858:	20000360 	.word	0x20000360
 800285c:	20008bb4 	.word	0x20008bb4

08002860 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	80fb      	strh	r3, [r7, #6]
 800286a:	460b      	mov	r3, r1
 800286c:	80bb      	strh	r3, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <BSP_LCD_DisplayChar+0x80>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	491b      	ldr	r1, [pc, #108]	; (80028e4 <BSP_LCD_DisplayChar+0x84>)
 8002878:	4613      	mov	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	3308      	adds	r3, #8
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <BSP_LCD_DisplayChar+0x80>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4c14      	ldr	r4, [pc, #80]	; (80028e4 <BSP_LCD_DisplayChar+0x84>)
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4423      	add	r3, r4
 800289e:	3308      	adds	r3, #8
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028a4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <BSP_LCD_DisplayChar+0x80>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4c0d      	ldr	r4, [pc, #52]	; (80028e4 <BSP_LCD_DisplayChar+0x84>)
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4423      	add	r3, r4
 80028b8:	3308      	adds	r3, #8
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	889b      	ldrh	r3, [r3, #4]
 80028be:	3307      	adds	r3, #7
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	da00      	bge.n	80028c6 <BSP_LCD_DisplayChar+0x66>
 80028c4:	3307      	adds	r3, #7
 80028c6:	10db      	asrs	r3, r3, #3
 80028c8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028cc:	18ca      	adds	r2, r1, r3
 80028ce:	88b9      	ldrh	r1, [r7, #4]
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fe56 	bl	8003584 <DrawChar>
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd90      	pop	{r4, r7, pc}
 80028e0:	20000360 	.word	0x20000360
 80028e4:	20000364 	.word	0x20000364

080028e8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60ba      	str	r2, [r7, #8]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	81fb      	strh	r3, [r7, #14]
 80028f6:	460b      	mov	r3, r1
 80028f8:	81bb      	strh	r3, [r7, #12]
 80028fa:	4613      	mov	r3, r2
 80028fc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80028fe:	2301      	movs	r3, #1
 8002900:	83fb      	strh	r3, [r7, #30]
 8002902:	2300      	movs	r3, #0
 8002904:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002912:	e002      	b.n	800291a <BSP_LCD_DisplayStringAt+0x32>
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	3301      	adds	r3, #1
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	617a      	str	r2, [r7, #20]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f6      	bne.n	8002914 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002926:	f7ff fe79 	bl	800261c <BSP_LCD_GetXSize>
 800292a:	4601      	mov	r1, r0
 800292c:	4b50      	ldr	r3, [pc, #320]	; (8002a70 <BSP_LCD_DisplayStringAt+0x188>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4850      	ldr	r0, [pc, #320]	; (8002a74 <BSP_LCD_DisplayStringAt+0x18c>)
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4403      	add	r3, r0
 800293c:	3308      	adds	r3, #8
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	889b      	ldrh	r3, [r3, #4]
 8002942:	fbb1 f3f3 	udiv	r3, r1, r3
 8002946:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d01c      	beq.n	8002988 <BSP_LCD_DisplayStringAt+0xa0>
 800294e:	2b03      	cmp	r3, #3
 8002950:	dc33      	bgt.n	80029ba <BSP_LCD_DisplayStringAt+0xd2>
 8002952:	2b01      	cmp	r3, #1
 8002954:	d002      	beq.n	800295c <BSP_LCD_DisplayStringAt+0x74>
 8002956:	2b02      	cmp	r3, #2
 8002958:	d019      	beq.n	800298e <BSP_LCD_DisplayStringAt+0xa6>
 800295a:	e02e      	b.n	80029ba <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	1ad1      	subs	r1, r2, r3
 8002962:	4b43      	ldr	r3, [pc, #268]	; (8002a70 <BSP_LCD_DisplayStringAt+0x188>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4843      	ldr	r0, [pc, #268]	; (8002a74 <BSP_LCD_DisplayStringAt+0x18c>)
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4403      	add	r3, r0
 8002972:	3308      	adds	r3, #8
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	889b      	ldrh	r3, [r3, #4]
 8002978:	fb03 f301 	mul.w	r3, r3, r1
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	89fb      	ldrh	r3, [r7, #14]
 8002982:	4413      	add	r3, r2
 8002984:	83fb      	strh	r3, [r7, #30]
      break;
 8002986:	e01b      	b.n	80029c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002988:	89fb      	ldrh	r3, [r7, #14]
 800298a:	83fb      	strh	r3, [r7, #30]
      break;
 800298c:	e018      	b.n	80029c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	b299      	uxth	r1, r3
 8002996:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <BSP_LCD_DisplayStringAt+0x188>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4836      	ldr	r0, [pc, #216]	; (8002a74 <BSP_LCD_DisplayStringAt+0x18c>)
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4403      	add	r3, r0
 80029a6:	3308      	adds	r3, #8
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	889b      	ldrh	r3, [r3, #4]
 80029ac:	fb11 f303 	smulbb	r3, r1, r3
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	89fb      	ldrh	r3, [r7, #14]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	83fb      	strh	r3, [r7, #30]
      break;
 80029b8:	e002      	b.n	80029c0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80029ba:	89fb      	ldrh	r3, [r7, #14]
 80029bc:	83fb      	strh	r3, [r7, #30]
      break;
 80029be:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80029c0:	8bfb      	ldrh	r3, [r7, #30]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <BSP_LCD_DisplayStringAt+0xe6>
 80029c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da1d      	bge.n	8002a0a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80029ce:	2301      	movs	r3, #1
 80029d0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029d2:	e01a      	b.n	8002a0a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	89b9      	ldrh	r1, [r7, #12]
 80029da:	8bfb      	ldrh	r3, [r7, #30]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff3f 	bl	8002860 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <BSP_LCD_DisplayStringAt+0x188>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4923      	ldr	r1, [pc, #140]	; (8002a74 <BSP_LCD_DisplayStringAt+0x18c>)
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3308      	adds	r3, #8
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	889a      	ldrh	r2, [r3, #4]
 80029f8:	8bfb      	ldrh	r3, [r7, #30]
 80029fa:	4413      	add	r3, r2
 80029fc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3301      	adds	r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
    i++;
 8002a04:	8bbb      	ldrh	r3, [r7, #28]
 8002a06:	3301      	adds	r3, #1
 8002a08:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	bf14      	ite	ne
 8002a12:	2301      	movne	r3, #1
 8002a14:	2300      	moveq	r3, #0
 8002a16:	b2dc      	uxtb	r4, r3
 8002a18:	f7ff fe00 	bl	800261c <BSP_LCD_GetXSize>
 8002a1c:	8bb9      	ldrh	r1, [r7, #28]
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <BSP_LCD_DisplayStringAt+0x188>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4d14      	ldr	r5, [pc, #80]	; (8002a74 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	442b      	add	r3, r5
 8002a2e:	3308      	adds	r3, #8
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	889b      	ldrh	r3, [r3, #4]
 8002a34:	fb03 f301 	mul.w	r3, r3, r1
 8002a38:	1ac3      	subs	r3, r0, r3
 8002a3a:	b299      	uxth	r1, r3
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <BSP_LCD_DisplayStringAt+0x188>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	480c      	ldr	r0, [pc, #48]	; (8002a74 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4403      	add	r3, r0
 8002a4c:	3308      	adds	r3, #8
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	889b      	ldrh	r3, [r3, #4]
 8002a52:	4299      	cmp	r1, r3
 8002a54:	bf2c      	ite	cs
 8002a56:	2301      	movcs	r3, #1
 8002a58:	2300      	movcc	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	4023      	ands	r3, r4
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1b7      	bne.n	80029d4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000360 	.word	0x20000360
 8002a74:	20000364 	.word	0x20000364

08002a78 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002a84:	f7ff feae 	bl	80027e4 <BSP_LCD_GetFont>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	88db      	ldrh	r3, [r3, #6]
 8002a8c:	88fa      	ldrh	r2, [r7, #6]
 8002a8e:	fb12 f303 	smulbb	r3, r2, r3
 8002a92:	b299      	uxth	r1, r3
 8002a94:	2303      	movs	r3, #3
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7ff ff25 	bl	80028e8 <BSP_LCD_DisplayStringAt>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	4603      	mov	r3, r0
 8002ab0:	80fb      	strh	r3, [r7, #6]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	80bb      	strh	r3, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002abe:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <BSP_LCD_DrawHLine+0xb0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <BSP_LCD_DrawHLine+0xb4>)
 8002ac4:	2134      	movs	r1, #52	; 0x34
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3348      	adds	r3, #72	; 0x48
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d114      	bne.n	8002afe <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002ad4:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <BSP_LCD_DrawHLine+0xb0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a20      	ldr	r2, [pc, #128]	; (8002b5c <BSP_LCD_DrawHLine+0xb4>)
 8002ada:	2134      	movs	r1, #52	; 0x34
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	335c      	adds	r3, #92	; 0x5c
 8002ae4:	681c      	ldr	r4, [r3, #0]
 8002ae6:	f7ff fd99 	bl	800261c <BSP_LCD_GetXSize>
 8002aea:	4602      	mov	r2, r0
 8002aec:	88bb      	ldrh	r3, [r7, #4]
 8002aee:	fb03 f202 	mul.w	r2, r3, r2
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	4413      	add	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4423      	add	r3, r4
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e013      	b.n	8002b26 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <BSP_LCD_DrawHLine+0xb0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <BSP_LCD_DrawHLine+0xb4>)
 8002b04:	2134      	movs	r1, #52	; 0x34
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	335c      	adds	r3, #92	; 0x5c
 8002b0e:	681c      	ldr	r4, [r3, #0]
 8002b10:	f7ff fd84 	bl	800261c <BSP_LCD_GetXSize>
 8002b14:	4602      	mov	r2, r0
 8002b16:	88bb      	ldrh	r3, [r7, #4]
 8002b18:	fb03 f202 	mul.w	r2, r3, r2
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4423      	add	r3, r4
 8002b24:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <BSP_LCD_DrawHLine+0xb0>)
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	68f9      	ldr	r1, [r7, #12]
 8002b2c:	887c      	ldrh	r4, [r7, #2]
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <BSP_LCD_DrawHLine+0xb0>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4d0b      	ldr	r5, [pc, #44]	; (8002b60 <BSP_LCD_DrawHLine+0xb8>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	442b      	add	r3, r5
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	2300      	movs	r3, #0
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2301      	movs	r3, #1
 8002b48:	4622      	mov	r2, r4
 8002b4a:	f000 fe93 	bl	8003874 <LL_FillBuffer>
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bdb0      	pop	{r4, r5, r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000360 	.word	0x20000360
 8002b5c:	20008bb4 	.word	0x20008bb4
 8002b60:	20000364 	.word	0x20000364

08002b64 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b08b      	sub	sp, #44	; 0x2c
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	4608      	mov	r0, r1
 8002b6e:	4611      	mov	r1, r2
 8002b70:	461a      	mov	r2, r3
 8002b72:	4623      	mov	r3, r4
 8002b74:	80fb      	strh	r3, [r7, #6]
 8002b76:	4603      	mov	r3, r0
 8002b78:	80bb      	strh	r3, [r7, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	807b      	strh	r3, [r7, #2]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002b82:	2300      	movs	r3, #0
 8002b84:	823b      	strh	r3, [r7, #16]
 8002b86:	2300      	movs	r3, #0
 8002b88:	81fb      	strh	r3, [r7, #14]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b8e:	2300      	movs	r3, #0
 8002b90:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002b92:	2300      	movs	r3, #0
 8002b94:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b96:	2300      	movs	r3, #0
 8002b98:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	83fb      	strh	r3, [r7, #30]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	83bb      	strh	r3, [r7, #28]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	837b      	strh	r3, [r7, #26]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	833b      	strh	r3, [r7, #24]
 8002baa:	2300      	movs	r3, #0
 8002bac:	82fb      	strh	r3, [r7, #22]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bfb8      	it	lt
 8002bc0:	425b      	neglt	r3, r3
 8002bc2:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002bc4:	883a      	ldrh	r2, [r7, #0]
 8002bc6:	88bb      	ldrh	r3, [r7, #4]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bfb8      	it	lt
 8002bce:	425b      	neglt	r3, r3
 8002bd0:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8002bd6:	88bb      	ldrh	r3, [r7, #4]
 8002bd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d304      	bcc.n	8002bec <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002be6:	2301      	movs	r3, #1
 8002be8:	843b      	strh	r3, [r7, #32]
 8002bea:	e005      	b.n	8002bf8 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf6:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8002bf8:	883a      	ldrh	r2, [r7, #0]
 8002bfa:	88bb      	ldrh	r3, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d304      	bcc.n	8002c0a <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002c00:	2301      	movs	r3, #1
 8002c02:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002c04:	2301      	movs	r3, #1
 8002c06:	83bb      	strh	r3, [r7, #28]
 8002c08:	e005      	b.n	8002c16 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c0e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c14:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002c16:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	db11      	blt.n	8002c46 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002c22:	2300      	movs	r3, #0
 8002c24:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002c26:	2300      	movs	r3, #0
 8002c28:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002c2a:	8a3b      	ldrh	r3, [r7, #16]
 8002c2c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002c2e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	da00      	bge.n	8002c38 <BSP_LCD_DrawLine+0xd4>
 8002c36:	3301      	adds	r3, #1
 8002c38:	105b      	asrs	r3, r3, #1
 8002c3a:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8002c3c:	89fb      	ldrh	r3, [r7, #14]
 8002c3e:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8002c40:	8a3b      	ldrh	r3, [r7, #16]
 8002c42:	82bb      	strh	r3, [r7, #20]
 8002c44:	e010      	b.n	8002c68 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002c46:	2300      	movs	r3, #0
 8002c48:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002c4e:	89fb      	ldrh	r3, [r7, #14]
 8002c50:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002c52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da00      	bge.n	8002c5c <BSP_LCD_DrawLine+0xf8>
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	105b      	asrs	r3, r3, #1
 8002c5e:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8002c60:	8a3b      	ldrh	r3, [r7, #16]
 8002c62:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8002c64:	89fb      	ldrh	r3, [r7, #14]
 8002c66:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	827b      	strh	r3, [r7, #18]
 8002c6c:	e037      	b.n	8002cde <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002c6e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002c70:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <BSP_LCD_DrawLine+0x190>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4c20      	ldr	r4, [pc, #128]	; (8002cf8 <BSP_LCD_DrawLine+0x194>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4423      	add	r3, r4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f000 f923 	bl	8002ed0 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002c8a:	8b3a      	ldrh	r2, [r7, #24]
 8002c8c:	8afb      	ldrh	r3, [r7, #22]
 8002c8e:	4413      	add	r3, r2
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002c94:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002c98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	db0e      	blt.n	8002cbe <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002ca0:	8b3a      	ldrh	r2, [r7, #24]
 8002ca2:	8b7b      	ldrh	r3, [r7, #26]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002caa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002cac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002cae:	4413      	add	r3, r2
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002cb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cb6:	8bfb      	ldrh	r3, [r7, #30]
 8002cb8:	4413      	add	r3, r2
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002cbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002cc0:	8c3b      	ldrh	r3, [r7, #32]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002cc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cca:	8bbb      	ldrh	r3, [r7, #28]
 8002ccc:	4413      	add	r3, r2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002cd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	827b      	strh	r3, [r7, #18]
 8002cde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ce2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	ddc1      	ble.n	8002c6e <BSP_LCD_DrawLine+0x10a>
  }
}
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
 8002cee:	372c      	adds	r7, #44	; 0x2c
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd90      	pop	{r4, r7, pc}
 8002cf4:	20000360 	.word	0x20000360
 8002cf8:	20000364 	.word	0x20000364

08002cfc <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	80fb      	strh	r3, [r7, #6]
 8002d06:	460b      	mov	r3, r1
 8002d08:	80bb      	strh	r3, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	f1c3 0303 	rsb	r3, r3, #3
 8002d16:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002d20:	e0c7      	b.n	8002eb2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	4413      	add	r3, r2
 8002d2a:	b298      	uxth	r0, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	88ba      	ldrh	r2, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	b299      	uxth	r1, r3
 8002d36:	4b64      	ldr	r3, [pc, #400]	; (8002ec8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4c64      	ldr	r4, [pc, #400]	; (8002ecc <BSP_LCD_DrawCircle+0x1d0>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4423      	add	r3, r4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f000 f8c1 	bl	8002ed0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	b298      	uxth	r0, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	88ba      	ldrh	r2, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	b299      	uxth	r1, r3
 8002d62:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4c59      	ldr	r4, [pc, #356]	; (8002ecc <BSP_LCD_DrawCircle+0x1d0>)
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4423      	add	r3, r4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	f000 f8ab 	bl	8002ed0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	4413      	add	r3, r2
 8002d82:	b298      	uxth	r0, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	88ba      	ldrh	r2, [r7, #4]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	b299      	uxth	r1, r3
 8002d8e:	4b4e      	ldr	r3, [pc, #312]	; (8002ec8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4c4e      	ldr	r4, [pc, #312]	; (8002ecc <BSP_LCD_DrawCircle+0x1d0>)
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4423      	add	r3, r4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f000 f895 	bl	8002ed0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	b298      	uxth	r0, r3
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	88ba      	ldrh	r2, [r7, #4]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	b299      	uxth	r1, r3
 8002dba:	4b43      	ldr	r3, [pc, #268]	; (8002ec8 <BSP_LCD_DrawCircle+0x1cc>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4c43      	ldr	r4, [pc, #268]	; (8002ecc <BSP_LCD_DrawCircle+0x1d0>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4423      	add	r3, r4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f000 f87f 	bl	8002ed0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	4413      	add	r3, r2
 8002dda:	b298      	uxth	r0, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	88bb      	ldrh	r3, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	b299      	uxth	r1, r3
 8002de6:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <BSP_LCD_DrawCircle+0x1cc>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4c38      	ldr	r4, [pc, #224]	; (8002ecc <BSP_LCD_DrawCircle+0x1d0>)
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4423      	add	r3, r4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f000 f869 	bl	8002ed0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	88fa      	ldrh	r2, [r7, #6]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	b298      	uxth	r0, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	88bb      	ldrh	r3, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	b299      	uxth	r1, r3
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <BSP_LCD_DrawCircle+0x1cc>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4c2d      	ldr	r4, [pc, #180]	; (8002ecc <BSP_LCD_DrawCircle+0x1d0>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4423      	add	r3, r4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f000 f853 	bl	8002ed0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	4413      	add	r3, r2
 8002e32:	b298      	uxth	r0, r3
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	88bb      	ldrh	r3, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	b299      	uxth	r1, r3
 8002e3e:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <BSP_LCD_DrawCircle+0x1cc>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4c22      	ldr	r4, [pc, #136]	; (8002ecc <BSP_LCD_DrawCircle+0x1d0>)
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4423      	add	r3, r4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	f000 f83d 	bl	8002ed0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	b298      	uxth	r0, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	88bb      	ldrh	r3, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	b299      	uxth	r1, r3
 8002e6a:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <BSP_LCD_DrawCircle+0x1cc>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4c17      	ldr	r4, [pc, #92]	; (8002ecc <BSP_LCD_DrawCircle+0x1d0>)
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4423      	add	r3, r4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f000 f827 	bl	8002ed0 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	da06      	bge.n	8002e96 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	009a      	lsls	r2, r3, #2
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3306      	adds	r3, #6
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e00a      	b.n	8002eac <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	009a      	lsls	r2, r3, #2
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	330a      	adds	r3, #10
 8002ea4:	617b      	str	r3, [r7, #20]
      current_y--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	f67f af33 	bls.w	8002d22 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd90      	pop	{r4, r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000360 	.word	0x20000360
 8002ecc:	20000364 	.word	0x20000364

08002ed0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002ed0:	b5b0      	push	{r4, r5, r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	603a      	str	r2, [r7, #0]
 8002eda:	80fb      	strh	r3, [r7, #6]
 8002edc:	460b      	mov	r3, r1
 8002ede:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <BSP_LCD_DrawPixel+0x88>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <BSP_LCD_DrawPixel+0x8c>)
 8002ee6:	2134      	movs	r1, #52	; 0x34
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3348      	adds	r3, #72	; 0x48
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d116      	bne.n	8002f24 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <BSP_LCD_DrawPixel+0x88>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <BSP_LCD_DrawPixel+0x8c>)
 8002efc:	2134      	movs	r1, #52	; 0x34
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	335c      	adds	r3, #92	; 0x5c
 8002f06:	681c      	ldr	r4, [r3, #0]
 8002f08:	88bd      	ldrh	r5, [r7, #4]
 8002f0a:	f7ff fb87 	bl	800261c <BSP_LCD_GetXSize>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	fb03 f205 	mul.w	r2, r3, r5
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	4413      	add	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4423      	add	r3, r4
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002f22:	e015      	b.n	8002f50 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <BSP_LCD_DrawPixel+0x88>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <BSP_LCD_DrawPixel+0x8c>)
 8002f2a:	2134      	movs	r1, #52	; 0x34
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	335c      	adds	r3, #92	; 0x5c
 8002f34:	681c      	ldr	r4, [r3, #0]
 8002f36:	88bd      	ldrh	r5, [r7, #4]
 8002f38:	f7ff fb70 	bl	800261c <BSP_LCD_GetXSize>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	fb03 f205 	mul.w	r2, r3, r5
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4423      	add	r3, r4
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6013      	str	r3, [r2, #0]
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bdb0      	pop	{r4, r5, r7, pc}
 8002f58:	20000360 	.word	0x20000360
 8002f5c:	20008bb4 	.word	0x20008bb4

08002f60 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af02      	add	r7, sp, #8
 8002f68:	4604      	mov	r4, r0
 8002f6a:	4608      	mov	r0, r1
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4623      	mov	r3, r4
 8002f72:	80fb      	strh	r3, [r7, #6]
 8002f74:	4603      	mov	r3, r0
 8002f76:	80bb      	strh	r3, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002f84:	4b30      	ldr	r3, [pc, #192]	; (8003048 <BSP_LCD_FillRect+0xe8>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4930      	ldr	r1, [pc, #192]	; (800304c <BSP_LCD_FillRect+0xec>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fbd8 	bl	800274c <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002f9c:	4b2a      	ldr	r3, [pc, #168]	; (8003048 <BSP_LCD_FillRect+0xe8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2b      	ldr	r2, [pc, #172]	; (8003050 <BSP_LCD_FillRect+0xf0>)
 8002fa2:	2134      	movs	r1, #52	; 0x34
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	3348      	adds	r3, #72	; 0x48
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d114      	bne.n	8002fdc <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002fb2:	4b25      	ldr	r3, [pc, #148]	; (8003048 <BSP_LCD_FillRect+0xe8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a26      	ldr	r2, [pc, #152]	; (8003050 <BSP_LCD_FillRect+0xf0>)
 8002fb8:	2134      	movs	r1, #52	; 0x34
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	335c      	adds	r3, #92	; 0x5c
 8002fc2:	681c      	ldr	r4, [r3, #0]
 8002fc4:	f7ff fb2a 	bl	800261c <BSP_LCD_GetXSize>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	88bb      	ldrh	r3, [r7, #4]
 8002fcc:	fb03 f202 	mul.w	r2, r3, r2
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4423      	add	r3, r4
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e013      	b.n	8003004 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <BSP_LCD_FillRect+0xe8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <BSP_LCD_FillRect+0xf0>)
 8002fe2:	2134      	movs	r1, #52	; 0x34
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	335c      	adds	r3, #92	; 0x5c
 8002fec:	681c      	ldr	r4, [r3, #0]
 8002fee:	f7ff fb15 	bl	800261c <BSP_LCD_GetXSize>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	88bb      	ldrh	r3, [r7, #4]
 8002ff6:	fb03 f202 	mul.w	r2, r3, r2
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4423      	add	r3, r4
 8003002:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003004:	4b10      	ldr	r3, [pc, #64]	; (8003048 <BSP_LCD_FillRect+0xe8>)
 8003006:	681c      	ldr	r4, [r3, #0]
 8003008:	68fd      	ldr	r5, [r7, #12]
 800300a:	887e      	ldrh	r6, [r7, #2]
 800300c:	f8b7 8000 	ldrh.w	r8, [r7]
 8003010:	f7ff fb04 	bl	800261c <BSP_LCD_GetXSize>
 8003014:	4602      	mov	r2, r0
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	1ad1      	subs	r1, r2, r3
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <BSP_LCD_FillRect+0xe8>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	480b      	ldr	r0, [pc, #44]	; (800304c <BSP_LCD_FillRect+0xec>)
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4403      	add	r3, r0
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	9100      	str	r1, [sp, #0]
 8003030:	4643      	mov	r3, r8
 8003032:	4632      	mov	r2, r6
 8003034:	4629      	mov	r1, r5
 8003036:	4620      	mov	r0, r4
 8003038:	f000 fc1c 	bl	8003874 <LL_FillBuffer>
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003046:	bf00      	nop
 8003048:	20000360 	.word	0x20000360
 800304c:	20000364 	.word	0x20000364
 8003050:	20008bb4 	.word	0x20008bb4

08003054 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
 800305e:	460b      	mov	r3, r1
 8003060:	80bb      	strh	r3, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003066:	887b      	ldrh	r3, [r7, #2]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	f1c3 0303 	rsb	r3, r3, #3
 800306e:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003074:	887b      	ldrh	r3, [r7, #2]
 8003076:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003078:	4b44      	ldr	r3, [pc, #272]	; (800318c <BSP_LCD_FillCircle+0x138>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4944      	ldr	r1, [pc, #272]	; (8003190 <BSP_LCD_FillCircle+0x13c>)
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fb5e 	bl	800274c <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003090:	e061      	b.n	8003156 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d021      	beq.n	80030dc <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	b29b      	uxth	r3, r3
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	b298      	uxth	r0, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	88bb      	ldrh	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	b299      	uxth	r1, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	f7ff fcf7 	bl	8002aa8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	b298      	uxth	r0, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	88ba      	ldrh	r2, [r7, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	b299      	uxth	r1, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	f7ff fce6 	bl	8002aa8 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d021      	beq.n	8003126 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	88fa      	ldrh	r2, [r7, #6]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	b298      	uxth	r0, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	88ba      	ldrh	r2, [r7, #4]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	b299      	uxth	r1, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	f7ff fcd2 	bl	8002aa8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	b29b      	uxth	r3, r3
 8003108:	88fa      	ldrh	r2, [r7, #6]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	b298      	uxth	r0, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	b29a      	uxth	r2, r3
 8003112:	88bb      	ldrh	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	b299      	uxth	r1, r3
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	b29b      	uxth	r3, r3
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	b29b      	uxth	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	f7ff fcc1 	bl	8002aa8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	da06      	bge.n	800313a <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	009a      	lsls	r2, r3, #2
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	4413      	add	r3, r2
 8003134:	3306      	adds	r3, #6
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e00a      	b.n	8003150 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	009a      	lsls	r2, r3, #2
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	4413      	add	r3, r2
 8003146:	330a      	adds	r3, #10
 8003148:	617b      	str	r3, [r7, #20]
      current_y--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3b01      	subs	r3, #1
 800314e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	3301      	adds	r3, #1
 8003154:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	429a      	cmp	r2, r3
 800315c:	d999      	bls.n	8003092 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <BSP_LCD_FillCircle+0x138>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	490b      	ldr	r1, [pc, #44]	; (8003190 <BSP_LCD_FillCircle+0x13c>)
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff faeb 	bl	800274c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	88b9      	ldrh	r1, [r7, #4]
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fdbd 	bl	8002cfc <BSP_LCD_DrawCircle>
}
 8003182:	bf00      	nop
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000360 	.word	0x20000360
 8003190:	20000364 	.word	0x20000364

08003194 <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	b08c      	sub	sp, #48	; 0x30
 8003198:	af02      	add	r7, sp, #8
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	833b      	strh	r3, [r7, #24]
 80031a4:	2300      	movs	r3, #0
 80031a6:	82fb      	strh	r3, [r7, #22]
 80031a8:	2300      	movs	r3, #0
 80031aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80031ac:	2300      	movs	r3, #0
 80031ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80031b0:	2300      	movs	r3, #0
 80031b2:	82bb      	strh	r3, [r7, #20]
 80031b4:	2300      	movs	r3, #0
 80031b6:	827b      	strh	r3, [r7, #18]
 80031b8:	2300      	movs	r3, #0
 80031ba:	823b      	strh	r3, [r7, #16]
 80031bc:	2300      	movs	r3, #0
 80031be:	81fb      	strh	r3, [r7, #14]
 80031c0:	2300      	movs	r3, #0
 80031c2:	81bb      	strh	r3, [r7, #12]
 80031c4:	2300      	movs	r3, #0
 80031c6:	817b      	strh	r3, [r7, #10]
 80031c8:	2300      	movs	r3, #0
 80031ca:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	843b      	strh	r3, [r7, #32]
 80031d0:	2300      	movs	r3, #0
 80031d2:	83fb      	strh	r3, [r7, #30]
 80031d4:	2300      	movs	r3, #0
 80031d6:	83bb      	strh	r3, [r7, #28]
 80031d8:	2300      	movs	r3, #0
 80031da:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e2:	83fb      	strh	r3, [r7, #30]
 80031e4:	8bfb      	ldrh	r3, [r7, #30]
 80031e6:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031ee:	837b      	strh	r3, [r7, #26]
 80031f0:	8b7b      	ldrh	r3, [r7, #26]
 80031f2:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 80031f4:	2301      	movs	r3, #1
 80031f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80031f8:	e02f      	b.n	800325a <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 80031fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4413      	add	r3, r2
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 8003208:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800320c:	8c3b      	ldrh	r3, [r7, #32]
 800320e:	429a      	cmp	r2, r3
 8003210:	da01      	bge.n	8003216 <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 8003212:	89bb      	ldrh	r3, [r7, #12]
 8003214:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 8003216:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800321a:	8bfb      	ldrh	r3, [r7, #30]
 800321c:	429a      	cmp	r2, r3
 800321e:	dd01      	ble.n	8003224 <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 8003220:	89bb      	ldrh	r3, [r7, #12]
 8003222:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 8003224:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	885b      	ldrh	r3, [r3, #2]
 8003230:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 8003232:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003236:	8bbb      	ldrh	r3, [r7, #28]
 8003238:	429a      	cmp	r2, r3
 800323a:	da01      	bge.n	8003240 <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 800323c:	897b      	ldrh	r3, [r7, #10]
 800323e:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 8003240:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003244:	8b7b      	ldrh	r3, [r7, #26]
 8003246:	429a      	cmp	r2, r3
 8003248:	dd01      	ble.n	800324e <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 800324a:	897b      	ldrh	r3, [r7, #10]
 800324c:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 800324e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003252:	b29b      	uxth	r3, r3
 8003254:	3301      	adds	r3, #1
 8003256:	b29b      	uxth	r3, r3
 8003258:	847b      	strh	r3, [r7, #34]	; 0x22
 800325a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	429a      	cmp	r2, r3
 8003262:	dbca      	blt.n	80031fa <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 8003264:	887b      	ldrh	r3, [r7, #2]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d974      	bls.n	8003354 <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 800326a:	8c3a      	ldrh	r2, [r7, #32]
 800326c:	8bfb      	ldrh	r3, [r7, #30]
 800326e:	4413      	add	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	da00      	bge.n	8003276 <BSP_LCD_FillPolygon+0xe2>
 8003274:	3301      	adds	r3, #1
 8003276:	105b      	asrs	r3, r3, #1
 8003278:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 800327a:	8b7a      	ldrh	r2, [r7, #26]
 800327c:	8bbb      	ldrh	r3, [r7, #28]
 800327e:	4413      	add	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	da00      	bge.n	8003286 <BSP_LCD_FillPolygon+0xf2>
 8003284:	3301      	adds	r3, #1
 8003286:	105b      	asrs	r3, r3, #1
 8003288:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	885b      	ldrh	r3, [r3, #2]
 8003294:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 8003296:	e032      	b.n	80032fe <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	885b      	ldrh	r3, [r3, #2]
 80032a2:	82fb      	strh	r3, [r7, #22]
    Points++;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	885b      	ldrh	r3, [r3, #2]
 80032b4:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80032b6:	8b38      	ldrh	r0, [r7, #24]
 80032b8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80032ba:	8abc      	ldrh	r4, [r7, #20]
 80032bc:	8afd      	ldrh	r5, [r7, #22]
 80032be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032c0:	8a7a      	ldrh	r2, [r7, #18]
 80032c2:	9201      	str	r2, [sp, #4]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	462b      	mov	r3, r5
 80032c8:	4622      	mov	r2, r4
 80032ca:	f000 fa13 	bl	80036f4 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 80032ce:	8b38      	ldrh	r0, [r7, #24]
 80032d0:	8ab9      	ldrh	r1, [r7, #20]
 80032d2:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80032d4:	8afd      	ldrh	r5, [r7, #22]
 80032d6:	8a7b      	ldrh	r3, [r7, #18]
 80032d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032da:	9201      	str	r2, [sp, #4]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	462b      	mov	r3, r5
 80032e0:	4622      	mov	r2, r4
 80032e2:	f000 fa07 	bl	80036f4 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 80032e6:	8ab8      	ldrh	r0, [r7, #20]
 80032e8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80032ea:	8b3c      	ldrh	r4, [r7, #24]
 80032ec:	8a7d      	ldrh	r5, [r7, #18]
 80032ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032f0:	8afa      	ldrh	r2, [r7, #22]
 80032f2:	9201      	str	r2, [sp, #4]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	462b      	mov	r3, r5
 80032f8:	4622      	mov	r2, r4
 80032fa:	f000 f9fb 	bl	80036f4 <FillTriangle>
  while(--PointCount)
 80032fe:	887b      	ldrh	r3, [r7, #2]
 8003300:	3b01      	subs	r3, #1
 8003302:	807b      	strh	r3, [r7, #2]
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1c6      	bne.n	8003298 <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 800330a:	8a38      	ldrh	r0, [r7, #16]
 800330c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800330e:	8abc      	ldrh	r4, [r7, #20]
 8003310:	89fd      	ldrh	r5, [r7, #14]
 8003312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003314:	8a7a      	ldrh	r2, [r7, #18]
 8003316:	9201      	str	r2, [sp, #4]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	462b      	mov	r3, r5
 800331c:	4622      	mov	r2, r4
 800331e:	f000 f9e9 	bl	80036f4 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8003322:	8a38      	ldrh	r0, [r7, #16]
 8003324:	8ab9      	ldrh	r1, [r7, #20]
 8003326:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003328:	89fd      	ldrh	r5, [r7, #14]
 800332a:	8a7b      	ldrh	r3, [r7, #18]
 800332c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800332e:	9201      	str	r2, [sp, #4]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	462b      	mov	r3, r5
 8003334:	4622      	mov	r2, r4
 8003336:	f000 f9dd 	bl	80036f4 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 800333a:	8ab8      	ldrh	r0, [r7, #20]
 800333c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800333e:	8a3c      	ldrh	r4, [r7, #16]
 8003340:	8a7d      	ldrh	r5, [r7, #18]
 8003342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003344:	89fa      	ldrh	r2, [r7, #14]
 8003346:	9201      	str	r2, [sp, #4]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	462b      	mov	r3, r5
 800334c:	4622      	mov	r2, r4
 800334e:	f000 f9d1 	bl	80036f4 <FillTriangle>
 8003352:	e000      	b.n	8003356 <BSP_LCD_FillPolygon+0x1c2>
    return;
 8003354:	bf00      	nop
}
 8003356:	3728      	adds	r7, #40	; 0x28
 8003358:	46bd      	mov	sp, r7
 800335a:	bdb0      	pop	{r4, r5, r7, pc}

0800335c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <BSP_LCD_DisplayOn+0x30>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <BSP_LCD_DisplayOn+0x30>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003370:	2201      	movs	r2, #1
 8003372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003376:	4806      	ldr	r0, [pc, #24]	; (8003390 <BSP_LCD_DisplayOn+0x34>)
 8003378:	f002 ffca 	bl	8006310 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800337c:	2201      	movs	r2, #1
 800337e:	2108      	movs	r1, #8
 8003380:	4804      	ldr	r0, [pc, #16]	; (8003394 <BSP_LCD_DisplayOn+0x38>)
 8003382:	f002 ffc5 	bl	8006310 <HAL_GPIO_WritePin>
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20008bb4 	.word	0x20008bb4
 8003390:	40022000 	.word	0x40022000
 8003394:	40022800 	.word	0x40022800

08003398 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b090      	sub	sp, #64	; 0x40
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80033a2:	4b64      	ldr	r3, [pc, #400]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4a63      	ldr	r2, [pc, #396]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 80033a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033ac:	6453      	str	r3, [r2, #68]	; 0x44
 80033ae:	4b61      	ldr	r3, [pc, #388]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80033ba:	4b5e      	ldr	r3, [pc, #376]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a5d      	ldr	r2, [pc, #372]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 80033c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30
 80033c6:	4b5b      	ldr	r3, [pc, #364]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033d2:	4b58      	ldr	r3, [pc, #352]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a57      	ldr	r2, [pc, #348]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 80033d8:	f043 0310 	orr.w	r3, r3, #16
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b55      	ldr	r3, [pc, #340]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	623b      	str	r3, [r7, #32]
 80033e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033ea:	4b52      	ldr	r3, [pc, #328]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	4a51      	ldr	r2, [pc, #324]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 80033f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
 80033f6:	4b4f      	ldr	r3, [pc, #316]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003402:	4b4c      	ldr	r3, [pc, #304]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a4b      	ldr	r2, [pc, #300]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b49      	ldr	r3, [pc, #292]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800341a:	4b46      	ldr	r3, [pc, #280]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a45      	ldr	r2, [pc, #276]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b43      	ldr	r3, [pc, #268]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003432:	4b40      	ldr	r3, [pc, #256]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a3f      	ldr	r2, [pc, #252]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800344a:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a39      	ldr	r2, [pc, #228]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b37      	ldr	r3, [pc, #220]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003462:	4b34      	ldr	r3, [pc, #208]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a33      	ldr	r2, [pc, #204]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003468:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b31      	ldr	r3, [pc, #196]	; (8003534 <BSP_LCD_MspInit+0x19c>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800347a:	2310      	movs	r3, #16
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800347e:	2302      	movs	r3, #2
 8003480:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003486:	2302      	movs	r3, #2
 8003488:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800348a:	230e      	movs	r3, #14
 800348c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800348e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003492:	4619      	mov	r1, r3
 8003494:	4828      	ldr	r0, [pc, #160]	; (8003538 <BSP_LCD_MspInit+0x1a0>)
 8003496:	f002 fc6b 	bl	8005d70 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800349a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80034a4:	2309      	movs	r3, #9
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80034a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ac:	4619      	mov	r1, r3
 80034ae:	4823      	ldr	r0, [pc, #140]	; (800353c <BSP_LCD_MspInit+0x1a4>)
 80034b0:	f002 fc5e 	bl	8005d70 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80034b4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034ba:	2302      	movs	r3, #2
 80034bc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80034be:	230e      	movs	r3, #14
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80034c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034c6:	4619      	mov	r1, r3
 80034c8:	481d      	ldr	r0, [pc, #116]	; (8003540 <BSP_LCD_MspInit+0x1a8>)
 80034ca:	f002 fc51 	bl	8005d70 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80034ce:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80034d8:	230e      	movs	r3, #14
 80034da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80034dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034e0:	4619      	mov	r1, r3
 80034e2:	4818      	ldr	r0, [pc, #96]	; (8003544 <BSP_LCD_MspInit+0x1ac>)
 80034e4:	f002 fc44 	bl	8005d70 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80034e8:	23f7      	movs	r3, #247	; 0xf7
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034ec:	2302      	movs	r3, #2
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80034f0:	230e      	movs	r3, #14
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80034f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f8:	4619      	mov	r1, r3
 80034fa:	4813      	ldr	r0, [pc, #76]	; (8003548 <BSP_LCD_MspInit+0x1b0>)
 80034fc:	f002 fc38 	bl	8005d70 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003506:	2301      	movs	r3, #1
 8003508:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800350a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800350e:	4619      	mov	r1, r3
 8003510:	480b      	ldr	r0, [pc, #44]	; (8003540 <BSP_LCD_MspInit+0x1a8>)
 8003512:	f002 fc2d 	bl	8005d70 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003516:	2308      	movs	r3, #8
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800351a:	2301      	movs	r3, #1
 800351c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800351e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003522:	4619      	mov	r1, r3
 8003524:	4808      	ldr	r0, [pc, #32]	; (8003548 <BSP_LCD_MspInit+0x1b0>)
 8003526:	f002 fc23 	bl	8005d70 <HAL_GPIO_Init>
}
 800352a:	bf00      	nop
 800352c:	3740      	adds	r7, #64	; 0x40
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800
 8003538:	40021000 	.word	0x40021000
 800353c:	40021800 	.word	0x40021800
 8003540:	40022000 	.word	0x40022000
 8003544:	40022400 	.word	0x40022400
 8003548:	40022800 	.word	0x40022800

0800354c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <BSP_LCD_ClockConfig+0x34>)
 8003558:	2208      	movs	r2, #8
 800355a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <BSP_LCD_ClockConfig+0x34>)
 800355e:	22c0      	movs	r2, #192	; 0xc0
 8003560:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <BSP_LCD_ClockConfig+0x34>)
 8003564:	2205      	movs	r2, #5
 8003566:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <BSP_LCD_ClockConfig+0x34>)
 800356a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003570:	4803      	ldr	r0, [pc, #12]	; (8003580 <BSP_LCD_ClockConfig+0x34>)
 8003572:	f004 fd1b 	bl	8007fac <HAL_RCCEx_PeriphCLKConfig>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	2000037c 	.word	0x2000037c

08003584 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	603a      	str	r2, [r7, #0]
 800358e:	80fb      	strh	r3, [r7, #6]
 8003590:	460b      	mov	r3, r1
 8003592:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800359c:	4b53      	ldr	r3, [pc, #332]	; (80036ec <DrawChar+0x168>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4953      	ldr	r1, [pc, #332]	; (80036f0 <DrawChar+0x16c>)
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	3308      	adds	r3, #8
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	88db      	ldrh	r3, [r3, #6]
 80035b2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80035b4:	4b4d      	ldr	r3, [pc, #308]	; (80036ec <DrawChar+0x168>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	494d      	ldr	r1, [pc, #308]	; (80036f0 <DrawChar+0x16c>)
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3308      	adds	r3, #8
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	889b      	ldrh	r3, [r3, #4]
 80035ca:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80035cc:	8a3b      	ldrh	r3, [r7, #16]
 80035ce:	3307      	adds	r3, #7
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	da00      	bge.n	80035d6 <DrawChar+0x52>
 80035d4:	3307      	adds	r3, #7
 80035d6:	10db      	asrs	r3, r3, #3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	8a3b      	ldrh	r3, [r7, #16]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	e076      	b.n	80036da <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80035ec:	8a3b      	ldrh	r3, [r7, #16]
 80035ee:	3307      	adds	r3, #7
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da00      	bge.n	80035f6 <DrawChar+0x72>
 80035f4:	3307      	adds	r3, #7
 80035f6:	10db      	asrs	r3, r3, #3
 80035f8:	461a      	mov	r2, r3
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	fb03 f302 	mul.w	r3, r3, r2
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	4413      	add	r3, r2
 8003604:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003606:	8a3b      	ldrh	r3, [r7, #16]
 8003608:	3307      	adds	r3, #7
 800360a:	2b00      	cmp	r3, #0
 800360c:	da00      	bge.n	8003610 <DrawChar+0x8c>
 800360e:	3307      	adds	r3, #7
 8003610:	10db      	asrs	r3, r3, #3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d002      	beq.n	800361c <DrawChar+0x98>
 8003616:	2b02      	cmp	r3, #2
 8003618:	d004      	beq.n	8003624 <DrawChar+0xa0>
 800361a:	e00c      	b.n	8003636 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	617b      	str	r3, [r7, #20]
      break;
 8003622:	e016      	b.n	8003652 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	3201      	adds	r2, #1
 800362e:	7812      	ldrb	r2, [r2, #0]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
      break;
 8003634:	e00d      	b.n	8003652 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	041a      	lsls	r2, r3, #16
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	3301      	adds	r3, #1
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	4313      	orrs	r3, r2
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	3202      	adds	r2, #2
 800364a:	7812      	ldrb	r2, [r2, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
      break;
 8003650:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	e036      	b.n	80036c6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003658:	8a3a      	ldrh	r2, [r7, #16]
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	1ad2      	subs	r2, r2, r3
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	4413      	add	r3, r2
 8003662:	3b01      	subs	r3, #1
 8003664:	2201      	movs	r2, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	461a      	mov	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d012      	beq.n	800369a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	b29a      	uxth	r2, r3
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	4413      	add	r3, r2
 800367c:	b298      	uxth	r0, r3
 800367e:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <DrawChar+0x168>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	491b      	ldr	r1, [pc, #108]	; (80036f0 <DrawChar+0x16c>)
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	88bb      	ldrh	r3, [r7, #4]
 8003692:	4619      	mov	r1, r3
 8003694:	f7ff fc1c 	bl	8002ed0 <BSP_LCD_DrawPixel>
 8003698:	e012      	b.n	80036c0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	b29a      	uxth	r2, r3
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	4413      	add	r3, r2
 80036a2:	b298      	uxth	r0, r3
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <DrawChar+0x168>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4911      	ldr	r1, [pc, #68]	; (80036f0 <DrawChar+0x16c>)
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	3304      	adds	r3, #4
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	88bb      	ldrh	r3, [r7, #4]
 80036ba:	4619      	mov	r1, r3
 80036bc:	f7ff fc08 	bl	8002ed0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	3301      	adds	r3, #1
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	8a3b      	ldrh	r3, [r7, #16]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d3c4      	bcc.n	8003658 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80036ce:	88bb      	ldrh	r3, [r7, #4]
 80036d0:	3301      	adds	r3, #1
 80036d2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	3301      	adds	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	8a7b      	ldrh	r3, [r7, #18]
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d384      	bcc.n	80035ec <DrawChar+0x68>
  }
}
 80036e2:	bf00      	nop
 80036e4:	bf00      	nop
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000360 	.word	0x20000360
 80036f0:	20000364 	.word	0x20000364

080036f4 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b08b      	sub	sp, #44	; 0x2c
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4604      	mov	r4, r0
 80036fc:	4608      	mov	r0, r1
 80036fe:	4611      	mov	r1, r2
 8003700:	461a      	mov	r2, r3
 8003702:	4623      	mov	r3, r4
 8003704:	80fb      	strh	r3, [r7, #6]
 8003706:	4603      	mov	r3, r0
 8003708:	80bb      	strh	r3, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	807b      	strh	r3, [r7, #2]
 800370e:	4613      	mov	r3, r2
 8003710:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003712:	2300      	movs	r3, #0
 8003714:	823b      	strh	r3, [r7, #16]
 8003716:	2300      	movs	r3, #0
 8003718:	81fb      	strh	r3, [r7, #14]
 800371a:	2300      	movs	r3, #0
 800371c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800371e:	2300      	movs	r3, #0
 8003720:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003722:	2300      	movs	r3, #0
 8003724:	847b      	strh	r3, [r7, #34]	; 0x22
 8003726:	2300      	movs	r3, #0
 8003728:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 800372a:	2300      	movs	r3, #0
 800372c:	83fb      	strh	r3, [r7, #30]
 800372e:	2300      	movs	r3, #0
 8003730:	83bb      	strh	r3, [r7, #28]
 8003732:	2300      	movs	r3, #0
 8003734:	837b      	strh	r3, [r7, #26]
 8003736:	2300      	movs	r3, #0
 8003738:	833b      	strh	r3, [r7, #24]
 800373a:	2300      	movs	r3, #0
 800373c:	82fb      	strh	r3, [r7, #22]
 800373e:	2300      	movs	r3, #0
 8003740:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003746:	88ba      	ldrh	r2, [r7, #4]
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	bfb8      	it	lt
 8003750:	425b      	neglt	r3, r3
 8003752:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003754:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003756:	883b      	ldrh	r3, [r7, #0]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	bfb8      	it	lt
 800375e:	425b      	neglt	r3, r3
 8003760:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003766:	883b      	ldrh	r3, [r7, #0]
 8003768:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800376a:	88ba      	ldrh	r2, [r7, #4]
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	429a      	cmp	r2, r3
 8003770:	d304      	bcc.n	800377c <FillTriangle+0x88>
  {
    xinc1 = 1;
 8003772:	2301      	movs	r3, #1
 8003774:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003776:	2301      	movs	r3, #1
 8003778:	843b      	strh	r3, [r7, #32]
 800377a:	e005      	b.n	8003788 <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800377c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003780:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003786:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003788:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800378a:	883b      	ldrh	r3, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d304      	bcc.n	800379a <FillTriangle+0xa6>
  {
    yinc1 = 1;
 8003790:	2301      	movs	r3, #1
 8003792:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003794:	2301      	movs	r3, #1
 8003796:	83bb      	strh	r3, [r7, #28]
 8003798:	e005      	b.n	80037a6 <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800379a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800379e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80037a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037a4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80037a6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80037aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	db11      	blt.n	80037d6 <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80037b2:	2300      	movs	r3, #0
 80037b4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80037b6:	2300      	movs	r3, #0
 80037b8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80037ba:	8a3b      	ldrh	r3, [r7, #16]
 80037bc:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80037be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	da00      	bge.n	80037c8 <FillTriangle+0xd4>
 80037c6:	3301      	adds	r3, #1
 80037c8:	105b      	asrs	r3, r3, #1
 80037ca:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 80037cc:	89fb      	ldrh	r3, [r7, #14]
 80037ce:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 80037d0:	8a3b      	ldrh	r3, [r7, #16]
 80037d2:	82bb      	strh	r3, [r7, #20]
 80037d4:	e010      	b.n	80037f8 <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80037d6:	2300      	movs	r3, #0
 80037d8:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80037da:	2300      	movs	r3, #0
 80037dc:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80037de:	89fb      	ldrh	r3, [r7, #14]
 80037e0:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80037e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	da00      	bge.n	80037ec <FillTriangle+0xf8>
 80037ea:	3301      	adds	r3, #1
 80037ec:	105b      	asrs	r3, r3, #1
 80037ee:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 80037f0:	8a3b      	ldrh	r3, [r7, #16]
 80037f2:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 80037f4:	89fb      	ldrh	r3, [r7, #14]
 80037f6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80037f8:	2300      	movs	r3, #0
 80037fa:	827b      	strh	r3, [r7, #18]
 80037fc:	e02f      	b.n	800385e <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 80037fe:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003800:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003802:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003804:	887a      	ldrh	r2, [r7, #2]
 8003806:	f7ff f9ad 	bl	8002b64 <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800380a:	8b3a      	ldrh	r2, [r7, #24]
 800380c:	8afb      	ldrh	r3, [r7, #22]
 800380e:	4413      	add	r3, r2
 8003810:	b29b      	uxth	r3, r3
 8003812:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8003814:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003818:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800381c:	429a      	cmp	r2, r3
 800381e:	db0e      	blt.n	800383e <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 8003820:	8b3a      	ldrh	r2, [r7, #24]
 8003822:	8b7b      	ldrh	r3, [r7, #26]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	b29b      	uxth	r3, r3
 8003828:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 800382a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800382c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800382e:	4413      	add	r3, r2
 8003830:	b29b      	uxth	r3, r3
 8003832:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8003834:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003836:	8bfb      	ldrh	r3, [r7, #30]
 8003838:	4413      	add	r3, r2
 800383a:	b29b      	uxth	r3, r3
 800383c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 800383e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003840:	8c3b      	ldrh	r3, [r7, #32]
 8003842:	4413      	add	r3, r2
 8003844:	b29b      	uxth	r3, r3
 8003846:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8003848:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800384a:	8bbb      	ldrh	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003852:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003856:	b29b      	uxth	r3, r3
 8003858:	3301      	adds	r3, #1
 800385a:	b29b      	uxth	r3, r3
 800385c:	827b      	strh	r3, [r7, #18]
 800385e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003862:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003866:	429a      	cmp	r2, r3
 8003868:	ddc9      	ble.n	80037fe <FillTriangle+0x10a>
  } 
}
 800386a:	bf00      	nop
 800386c:	bf00      	nop
 800386e:	372c      	adds	r7, #44	; 0x2c
 8003870:	46bd      	mov	sp, r7
 8003872:	bd90      	pop	{r4, r7, pc}

08003874 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003882:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <LL_FillBuffer+0x88>)
 8003884:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003888:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800388a:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <LL_FillBuffer+0x8c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <LL_FillBuffer+0x90>)
 8003890:	2134      	movs	r1, #52	; 0x34
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	4413      	add	r3, r2
 8003898:	3348      	adds	r3, #72	; 0x48
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d103      	bne.n	80038a8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80038a0:	4b16      	ldr	r3, [pc, #88]	; (80038fc <LL_FillBuffer+0x88>)
 80038a2:	2202      	movs	r2, #2
 80038a4:	609a      	str	r2, [r3, #8]
 80038a6:	e002      	b.n	80038ae <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80038a8:	4b14      	ldr	r3, [pc, #80]	; (80038fc <LL_FillBuffer+0x88>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80038ae:	4a13      	ldr	r2, [pc, #76]	; (80038fc <LL_FillBuffer+0x88>)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80038b4:	4b11      	ldr	r3, [pc, #68]	; (80038fc <LL_FillBuffer+0x88>)
 80038b6:	4a14      	ldr	r2, [pc, #80]	; (8003908 <LL_FillBuffer+0x94>)
 80038b8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80038ba:	4810      	ldr	r0, [pc, #64]	; (80038fc <LL_FillBuffer+0x88>)
 80038bc:	f001 ffcc 	bl	8005858 <HAL_DMA2D_Init>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d115      	bne.n	80038f2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	480c      	ldr	r0, [pc, #48]	; (80038fc <LL_FillBuffer+0x88>)
 80038ca:	f002 f923 	bl	8005b14 <HAL_DMA2D_ConfigLayer>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10e      	bne.n	80038f2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69f9      	ldr	r1, [r7, #28]
 80038de:	4807      	ldr	r0, [pc, #28]	; (80038fc <LL_FillBuffer+0x88>)
 80038e0:	f002 f804 	bl	80058ec <HAL_DMA2D_Start>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80038ea:	210a      	movs	r1, #10
 80038ec:	4803      	ldr	r0, [pc, #12]	; (80038fc <LL_FillBuffer+0x88>)
 80038ee:	f002 f828 	bl	8005942 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000320 	.word	0x20000320
 8003900:	20000360 	.word	0x20000360
 8003904:	20008bb4 	.word	0x20008bb4
 8003908:	4002b000 	.word	0x4002b000

0800390c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003910:	4b29      	ldr	r3, [pc, #164]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 8003912:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <BSP_SDRAM_Init+0xb0>)
 8003914:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003916:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <BSP_SDRAM_Init+0xb4>)
 8003918:	2202      	movs	r2, #2
 800391a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <BSP_SDRAM_Init+0xb4>)
 800391e:	2207      	movs	r2, #7
 8003920:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003922:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <BSP_SDRAM_Init+0xb4>)
 8003924:	2204      	movs	r2, #4
 8003926:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <BSP_SDRAM_Init+0xb4>)
 800392a:	2207      	movs	r2, #7
 800392c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <BSP_SDRAM_Init+0xb4>)
 8003930:	2202      	movs	r2, #2
 8003932:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <BSP_SDRAM_Init+0xb4>)
 8003936:	2202      	movs	r2, #2
 8003938:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800393a:	4b21      	ldr	r3, [pc, #132]	; (80039c0 <BSP_SDRAM_Init+0xb4>)
 800393c:	2202      	movs	r2, #2
 800393e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 8003942:	2200      	movs	r2, #0
 8003944:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003946:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800394c:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 800394e:	2204      	movs	r2, #4
 8003950:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003952:	4b19      	ldr	r3, [pc, #100]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 8003954:	2210      	movs	r2, #16
 8003956:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003958:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 800395a:	2240      	movs	r2, #64	; 0x40
 800395c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800395e:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 8003960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003964:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003966:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 8003968:	2200      	movs	r2, #0
 800396a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800396c:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 800396e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003972:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003974:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 8003976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800397a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800397c:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 800397e:	2200      	movs	r2, #0
 8003980:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003982:	2100      	movs	r1, #0
 8003984:	480c      	ldr	r0, [pc, #48]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 8003986:	f000 f87f 	bl	8003a88 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800398a:	490d      	ldr	r1, [pc, #52]	; (80039c0 <BSP_SDRAM_Init+0xb4>)
 800398c:	480a      	ldr	r0, [pc, #40]	; (80039b8 <BSP_SDRAM_Init+0xac>)
 800398e:	f005 fabd 	bl	8008f0c <HAL_SDRAM_Init>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <BSP_SDRAM_Init+0xb8>)
 800399a:	2201      	movs	r2, #1
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	e002      	b.n	80039a6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <BSP_SDRAM_Init+0xb8>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80039a6:	f240 6003 	movw	r0, #1539	; 0x603
 80039aa:	f000 f80d 	bl	80039c8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <BSP_SDRAM_Init+0xb8>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20008c5c 	.word	0x20008c5c
 80039bc:	a0000140 	.word	0xa0000140
 80039c0:	20000400 	.word	0x20000400
 80039c4:	20000044 	.word	0x20000044

080039c8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80039d4:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039da:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039dc:	2210      	movs	r2, #16
 80039de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80039e0:	4b27      	ldr	r3, [pc, #156]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80039ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039f0:	4923      	ldr	r1, [pc, #140]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039f2:	4824      	ldr	r0, [pc, #144]	; (8003a84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039f4:	f005 fabe 	bl	8008f74 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80039f8:	2001      	movs	r0, #1
 80039fa:	f000 ff9f 	bl	800493c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a00:	2202      	movs	r2, #2
 8003a02:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a04:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a06:	2210      	movs	r2, #16
 8003a08:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a10:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a1a:	4919      	ldr	r1, [pc, #100]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a1c:	4819      	ldr	r0, [pc, #100]	; (8003a84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a1e:	f005 faa9 	bl	8008f74 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003a22:	4b17      	ldr	r3, [pc, #92]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a24:	2203      	movs	r2, #3
 8003a26:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a28:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a2a:	2210      	movs	r2, #16
 8003a2c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003a2e:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a30:	2208      	movs	r2, #8
 8003a32:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a34:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a3e:	4910      	ldr	r1, [pc, #64]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a40:	4810      	ldr	r0, [pc, #64]	; (8003a84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a42:	f005 fa97 	bl	8008f74 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003a46:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003a4a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a4e:	2204      	movs	r2, #4
 8003a50:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a54:	2210      	movs	r2, #16
 8003a56:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a62:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a68:	4905      	ldr	r1, [pc, #20]	; (8003a80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a6a:	4806      	ldr	r0, [pc, #24]	; (8003a84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a6c:	f005 fa82 	bl	8008f74 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4804      	ldr	r0, [pc, #16]	; (8003a84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a74:	f005 faa9 	bl	8008fca <HAL_SDRAM_ProgramRefreshRate>
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	2000041c 	.word	0x2000041c
 8003a84:	20008c5c 	.word	0x20008c5c

08003a88 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b090      	sub	sp, #64	; 0x40
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003a92:	4b70      	ldr	r3, [pc, #448]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	4a6f      	ldr	r2, [pc, #444]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6393      	str	r3, [r2, #56]	; 0x38
 8003a9e:	4b6d      	ldr	r3, [pc, #436]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003aaa:	4b6a      	ldr	r3, [pc, #424]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a69      	ldr	r2, [pc, #420]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003ab0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b67      	ldr	r3, [pc, #412]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ac2:	4b64      	ldr	r3, [pc, #400]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4a63      	ldr	r2, [pc, #396]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003ac8:	f043 0304 	orr.w	r3, r3, #4
 8003acc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ace:	4b61      	ldr	r3, [pc, #388]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	623b      	str	r3, [r7, #32]
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ada:	4b5e      	ldr	r3, [pc, #376]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4a5d      	ldr	r2, [pc, #372]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003ae0:	f043 0308 	orr.w	r3, r3, #8
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae6:	4b5b      	ldr	r3, [pc, #364]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003af2:	4b58      	ldr	r3, [pc, #352]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4a57      	ldr	r2, [pc, #348]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003af8:	f043 0310 	orr.w	r3, r3, #16
 8003afc:	6313      	str	r3, [r2, #48]	; 0x30
 8003afe:	4b55      	ldr	r3, [pc, #340]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b0a:	4b52      	ldr	r3, [pc, #328]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	4a51      	ldr	r2, [pc, #324]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003b10:	f043 0320 	orr.w	r3, r3, #32
 8003b14:	6313      	str	r3, [r2, #48]	; 0x30
 8003b16:	4b4f      	ldr	r3, [pc, #316]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b22:	4b4c      	ldr	r3, [pc, #304]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	4a4b      	ldr	r2, [pc, #300]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2e:	4b49      	ldr	r3, [pc, #292]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b3a:	4b46      	ldr	r3, [pc, #280]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4a45      	ldr	r2, [pc, #276]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b44:	6313      	str	r3, [r2, #48]	; 0x30
 8003b46:	4b43      	ldr	r3, [pc, #268]	; (8003c54 <BSP_SDRAM_MspInit+0x1cc>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003b52:	2302      	movs	r3, #2
 8003b54:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003b56:	2301      	movs	r3, #1
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003b5e:	230c      	movs	r3, #12
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003b62:	2308      	movs	r3, #8
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	483a      	ldr	r0, [pc, #232]	; (8003c58 <BSP_SDRAM_MspInit+0x1d0>)
 8003b6e:	f002 f8ff 	bl	8005d70 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003b72:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4837      	ldr	r0, [pc, #220]	; (8003c5c <BSP_SDRAM_MspInit+0x1d4>)
 8003b80:	f002 f8f6 	bl	8005d70 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003b84:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003b8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4833      	ldr	r0, [pc, #204]	; (8003c60 <BSP_SDRAM_MspInit+0x1d8>)
 8003b92:	f002 f8ed 	bl	8005d70 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003b96:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4830      	ldr	r0, [pc, #192]	; (8003c64 <BSP_SDRAM_MspInit+0x1dc>)
 8003ba4:	f002 f8e4 	bl	8005d70 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003ba8:	f248 1333 	movw	r3, #33075	; 0x8133
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	482c      	ldr	r0, [pc, #176]	; (8003c68 <BSP_SDRAM_MspInit+0x1e0>)
 8003bb6:	f002 f8db 	bl	8005d70 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003bba:	2328      	movs	r3, #40	; 0x28
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4829      	ldr	r0, [pc, #164]	; (8003c6c <BSP_SDRAM_MspInit+0x1e4>)
 8003bc6:	f002 f8d3 	bl	8005d70 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003bca:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003bd0:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003bd2:	2280      	movs	r2, #128	; 0x80
 8003bd4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003bd6:	4b26      	ldr	r3, [pc, #152]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bdc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003be6:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003be8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bec:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003bee:	4b20      	ldr	r3, [pc, #128]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003bf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bf4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003bfc:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c02:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003c0a:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003c10:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003c16:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003c1e:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <BSP_SDRAM_MspInit+0x1ec>)
 8003c20:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
 8003c28:	4a11      	ldr	r2, [pc, #68]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003c2e:	4810      	ldr	r0, [pc, #64]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003c30:	f001 fce0 	bl	80055f4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003c34:	480e      	ldr	r0, [pc, #56]	; (8003c70 <BSP_SDRAM_MspInit+0x1e8>)
 8003c36:	f001 fc2f 	bl	8005498 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	210f      	movs	r1, #15
 8003c3e:	2038      	movs	r0, #56	; 0x38
 8003c40:	f001 fb32 	bl	80052a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003c44:	2038      	movs	r0, #56	; 0x38
 8003c46:	f001 fb4b 	bl	80052e0 <HAL_NVIC_EnableIRQ>
}
 8003c4a:	bf00      	nop
 8003c4c:	3740      	adds	r7, #64	; 0x40
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40020800 	.word	0x40020800
 8003c5c:	40020c00 	.word	0x40020c00
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40021400 	.word	0x40021400
 8003c68:	40021800 	.word	0x40021800
 8003c6c:	40021c00 	.word	0x40021c00
 8003c70:	2000042c 	.word	0x2000042c
 8003c74:	40026410 	.word	0x40026410

08003c78 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	460a      	mov	r2, r1
 8003c82:	80fb      	strh	r3, [r7, #6]
 8003c84:	4613      	mov	r3, r2
 8003c86:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003c8c:	4a14      	ldr	r2, [pc, #80]	; (8003ce0 <BSP_TS_Init+0x68>)
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003c92:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <BSP_TS_Init+0x6c>)
 8003c94:	88bb      	ldrh	r3, [r7, #4]
 8003c96:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <BSP_TS_Init+0x70>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2070      	movs	r0, #112	; 0x70
 8003c9e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003ca0:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <BSP_TS_Init+0x70>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2070      	movs	r0, #112	; 0x70
 8003ca6:	4798      	blx	r3
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b51      	cmp	r3, #81	; 0x51
 8003cac:	d111      	bne.n	8003cd2 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <BSP_TS_Init+0x74>)
 8003cb0:	4a0d      	ldr	r2, [pc, #52]	; (8003ce8 <BSP_TS_Init+0x70>)
 8003cb2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <BSP_TS_Init+0x78>)
 8003cb6:	2270      	movs	r2, #112	; 0x70
 8003cb8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <BSP_TS_Init+0x7c>)
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <BSP_TS_Init+0x74>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	4a0a      	ldr	r2, [pc, #40]	; (8003cf0 <BSP_TS_Init+0x78>)
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	b292      	uxth	r2, r2
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4798      	blx	r3
 8003cd0:	e001      	b.n	8003cd6 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000490 	.word	0x20000490
 8003ce4:	20000492 	.word	0x20000492
 8003ce8:	20000000 	.word	0x20000000
 8003cec:	2000048c 	.word	0x2000048c
 8003cf0:	20000495 	.word	0x20000495
 8003cf4:	20000494 	.word	0x20000494

08003cf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <HAL_MspInit+0x4c>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	4a10      	ldr	r2, [pc, #64]	; (8003d44 <HAL_MspInit+0x4c>)
 8003d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d08:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0a:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <HAL_MspInit+0x4c>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d12:	607b      	str	r3, [r7, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_MspInit+0x4c>)
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	4a0a      	ldr	r2, [pc, #40]	; (8003d44 <HAL_MspInit+0x4c>)
 8003d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d20:	6453      	str	r3, [r2, #68]	; 0x44
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <HAL_MspInit+0x4c>)
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d2e:	2200      	movs	r2, #0
 8003d30:	210f      	movs	r1, #15
 8003d32:	f06f 0001 	mvn.w	r0, #1
 8003d36:	f001 fab7 	bl	80052a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800

08003d48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08c      	sub	sp, #48	; 0x30
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d50:	f107 031c 	add.w	r3, r7, #28
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <HAL_ADC_MspInit+0xc8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d124      	bne.n	8003db4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d6a:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <HAL_ADC_MspInit+0xcc>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <HAL_ADC_MspInit+0xcc>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	6453      	str	r3, [r2, #68]	; 0x44
 8003d76:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <HAL_ADC_MspInit+0xcc>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_ADC_MspInit+0xcc>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	4a23      	ldr	r2, [pc, #140]	; (8003e14 <HAL_ADC_MspInit+0xcc>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8e:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <HAL_ADC_MspInit+0xcc>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da6:	f107 031c 	add.w	r3, r7, #28
 8003daa:	4619      	mov	r1, r3
 8003dac:	481a      	ldr	r0, [pc, #104]	; (8003e18 <HAL_ADC_MspInit+0xd0>)
 8003dae:	f001 ffdf 	bl	8005d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003db2:	e029      	b.n	8003e08 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_ADC_MspInit+0xd4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d124      	bne.n	8003e08 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_ADC_MspInit+0xcc>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <HAL_ADC_MspInit+0xcc>)
 8003dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_ADC_MspInit+0xcc>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_ADC_MspInit+0xcc>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <HAL_ADC_MspInit+0xcc>)
 8003ddc:	f043 0320 	orr.w	r3, r3, #32
 8003de0:	6313      	str	r3, [r2, #48]	; 0x30
 8003de2:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <HAL_ADC_MspInit+0xcc>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003df4:	2303      	movs	r3, #3
 8003df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003dfc:	f107 031c 	add.w	r3, r7, #28
 8003e00:	4619      	mov	r1, r3
 8003e02:	4807      	ldr	r0, [pc, #28]	; (8003e20 <HAL_ADC_MspInit+0xd8>)
 8003e04:	f001 ffb4 	bl	8005d70 <HAL_GPIO_Init>
}
 8003e08:	bf00      	nop
 8003e0a:	3730      	adds	r7, #48	; 0x30
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40012000 	.word	0x40012000
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020000 	.word	0x40020000
 8003e1c:	40012200 	.word	0x40012200
 8003e20:	40021400 	.word	0x40021400

08003e24 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08a      	sub	sp, #40	; 0x28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <HAL_DAC_MspInit+0x84>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d12b      	bne.n	8003e9e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003e46:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_DAC_MspInit+0x88>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	4a18      	ldr	r2, [pc, #96]	; (8003eac <HAL_DAC_MspInit+0x88>)
 8003e4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e50:	6413      	str	r3, [r2, #64]	; 0x40
 8003e52:	4b16      	ldr	r3, [pc, #88]	; (8003eac <HAL_DAC_MspInit+0x88>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e5e:	4b13      	ldr	r3, [pc, #76]	; (8003eac <HAL_DAC_MspInit+0x88>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	4a12      	ldr	r2, [pc, #72]	; (8003eac <HAL_DAC_MspInit+0x88>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <HAL_DAC_MspInit+0x88>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e76:	2310      	movs	r3, #16
 8003e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	4619      	mov	r1, r3
 8003e88:	4809      	ldr	r0, [pc, #36]	; (8003eb0 <HAL_DAC_MspInit+0x8c>)
 8003e8a:	f001 ff71 	bl	8005d70 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2100      	movs	r1, #0
 8003e92:	2036      	movs	r0, #54	; 0x36
 8003e94:	f001 fa08 	bl	80052a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e98:	2036      	movs	r0, #54	; 0x36
 8003e9a:	f001 fa21 	bl	80052e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003e9e:	bf00      	nop
 8003ea0:	3728      	adds	r7, #40	; 0x28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40007400 	.word	0x40007400
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40020000 	.word	0x40020000

08003eb4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <HAL_DMA2D_MspInit+0x38>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d10b      	bne.n	8003ede <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003ec6:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <HAL_DMA2D_MspInit+0x3c>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <HAL_DMA2D_MspInit+0x3c>)
 8003ecc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <HAL_DMA2D_MspInit+0x3c>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	4002b000 	.word	0x4002b000
 8003ef0:	40023800 	.word	0x40023800

08003ef4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08c      	sub	sp, #48	; 0x30
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	f107 031c 	add.w	r3, r7, #28
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a2f      	ldr	r2, [pc, #188]	; (8003fd0 <HAL_I2C_MspInit+0xdc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d129      	bne.n	8003f6a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f16:	4b2f      	ldr	r3, [pc, #188]	; (8003fd4 <HAL_I2C_MspInit+0xe0>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	4a2e      	ldr	r2, [pc, #184]	; (8003fd4 <HAL_I2C_MspInit+0xe0>)
 8003f1c:	f043 0302 	orr.w	r3, r3, #2
 8003f20:	6313      	str	r3, [r2, #48]	; 0x30
 8003f22:	4b2c      	ldr	r3, [pc, #176]	; (8003fd4 <HAL_I2C_MspInit+0xe0>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003f2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f34:	2312      	movs	r3, #18
 8003f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f40:	2304      	movs	r3, #4
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f44:	f107 031c 	add.w	r3, r7, #28
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4823      	ldr	r0, [pc, #140]	; (8003fd8 <HAL_I2C_MspInit+0xe4>)
 8003f4c:	f001 ff10 	bl	8005d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f50:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_I2C_MspInit+0xe0>)
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <HAL_I2C_MspInit+0xe0>)
 8003f56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <HAL_I2C_MspInit+0xe0>)
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003f68:	e02d      	b.n	8003fc6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_I2C_MspInit+0xe8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d128      	bne.n	8003fc6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f74:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <HAL_I2C_MspInit+0xe0>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <HAL_I2C_MspInit+0xe0>)
 8003f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <HAL_I2C_MspInit+0xe0>)
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003f8c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f92:	2312      	movs	r3, #18
 8003f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f96:	2301      	movs	r3, #1
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f9e:	2304      	movs	r3, #4
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003fa2:	f107 031c 	add.w	r3, r7, #28
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	480d      	ldr	r0, [pc, #52]	; (8003fe0 <HAL_I2C_MspInit+0xec>)
 8003faa:	f001 fee1 	bl	8005d70 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <HAL_I2C_MspInit+0xe0>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	4a08      	ldr	r2, [pc, #32]	; (8003fd4 <HAL_I2C_MspInit+0xe0>)
 8003fb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <HAL_I2C_MspInit+0xe0>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
}
 8003fc6:	bf00      	nop
 8003fc8:	3730      	adds	r7, #48	; 0x30
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40005400 	.word	0x40005400
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40020400 	.word	0x40020400
 8003fdc:	40005c00 	.word	0x40005c00
 8003fe0:	40021c00 	.word	0x40021c00

08003fe4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a15      	ldr	r2, [pc, #84]	; (8004048 <HAL_I2C_MspDeInit+0x64>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d110      	bne.n	8004018 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_I2C_MspDeInit+0x68>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	4a14      	ldr	r2, [pc, #80]	; (800404c <HAL_I2C_MspDeInit+0x68>)
 8003ffc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004000:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8004002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004006:	4812      	ldr	r0, [pc, #72]	; (8004050 <HAL_I2C_MspDeInit+0x6c>)
 8004008:	f002 f85e 	bl	80060c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 800400c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004010:	480f      	ldr	r0, [pc, #60]	; (8004050 <HAL_I2C_MspDeInit+0x6c>)
 8004012:	f002 f859 	bl	80060c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8004016:	e013      	b.n	8004040 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a0d      	ldr	r2, [pc, #52]	; (8004054 <HAL_I2C_MspDeInit+0x70>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10e      	bne.n	8004040 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <HAL_I2C_MspDeInit+0x68>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	4a09      	ldr	r2, [pc, #36]	; (800404c <HAL_I2C_MspDeInit+0x68>)
 8004028:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800402c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800402e:	2180      	movs	r1, #128	; 0x80
 8004030:	4809      	ldr	r0, [pc, #36]	; (8004058 <HAL_I2C_MspDeInit+0x74>)
 8004032:	f002 f849 	bl	80060c8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8004036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800403a:	4807      	ldr	r0, [pc, #28]	; (8004058 <HAL_I2C_MspDeInit+0x74>)
 800403c:	f002 f844 	bl	80060c8 <HAL_GPIO_DeInit>
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40005400 	.word	0x40005400
 800404c:	40023800 	.word	0x40023800
 8004050:	40020400 	.word	0x40020400
 8004054:	40005c00 	.word	0x40005c00
 8004058:	40021c00 	.word	0x40021c00

0800405c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08e      	sub	sp, #56	; 0x38
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a55      	ldr	r2, [pc, #340]	; (80041d0 <HAL_LTDC_MspInit+0x174>)
 800407a:	4293      	cmp	r3, r2
 800407c:	f040 80a3 	bne.w	80041c6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004080:	4b54      	ldr	r3, [pc, #336]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	4a53      	ldr	r2, [pc, #332]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 8004086:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800408a:	6453      	str	r3, [r2, #68]	; 0x44
 800408c:	4b51      	ldr	r3, [pc, #324]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004098:	4b4e      	ldr	r3, [pc, #312]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	4a4d      	ldr	r2, [pc, #308]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 800409e:	f043 0310 	orr.w	r3, r3, #16
 80040a2:	6313      	str	r3, [r2, #48]	; 0x30
 80040a4:	4b4b      	ldr	r3, [pc, #300]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80040b0:	4b48      	ldr	r3, [pc, #288]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	4a47      	ldr	r2, [pc, #284]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 80040b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ba:	6313      	str	r3, [r2, #48]	; 0x30
 80040bc:	4b45      	ldr	r3, [pc, #276]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80040c8:	4b42      	ldr	r3, [pc, #264]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	4a41      	ldr	r2, [pc, #260]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 80040ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040d2:	6313      	str	r3, [r2, #48]	; 0x30
 80040d4:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80040e0:	4b3c      	ldr	r3, [pc, #240]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	4a3b      	ldr	r2, [pc, #236]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 80040e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ea:	6313      	str	r3, [r2, #48]	; 0x30
 80040ec:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80040f8:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	4a35      	ldr	r2, [pc, #212]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 80040fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004102:	6313      	str	r3, [r2, #48]	; 0x30
 8004104:	4b33      	ldr	r3, [pc, #204]	; (80041d4 <HAL_LTDC_MspInit+0x178>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004110:	2310      	movs	r3, #16
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004114:	2302      	movs	r3, #2
 8004116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004118:	2300      	movs	r3, #0
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411c:	2300      	movs	r3, #0
 800411e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004120:	230e      	movs	r3, #14
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004128:	4619      	mov	r1, r3
 800412a:	482b      	ldr	r0, [pc, #172]	; (80041d8 <HAL_LTDC_MspInit+0x17c>)
 800412c:	f001 fe20 	bl	8005d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004130:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004136:	2302      	movs	r3, #2
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413a:	2300      	movs	r3, #0
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800413e:	2300      	movs	r3, #0
 8004140:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004142:	230e      	movs	r3, #14
 8004144:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800414a:	4619      	mov	r1, r3
 800414c:	4823      	ldr	r0, [pc, #140]	; (80041dc <HAL_LTDC_MspInit+0x180>)
 800414e:	f001 fe0f 	bl	8005d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004152:	23f7      	movs	r3, #247	; 0xf7
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004156:	2302      	movs	r3, #2
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415a:	2300      	movs	r3, #0
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415e:	2300      	movs	r3, #0
 8004160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004162:	230e      	movs	r3, #14
 8004164:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800416a:	4619      	mov	r1, r3
 800416c:	481c      	ldr	r0, [pc, #112]	; (80041e0 <HAL_LTDC_MspInit+0x184>)
 800416e:	f001 fdff 	bl	8005d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004178:	2302      	movs	r3, #2
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417c:	2300      	movs	r3, #0
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004180:	2300      	movs	r3, #0
 8004182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004184:	2309      	movs	r3, #9
 8004186:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800418c:	4619      	mov	r1, r3
 800418e:	4815      	ldr	r0, [pc, #84]	; (80041e4 <HAL_LTDC_MspInit+0x188>)
 8004190:	f001 fdee 	bl	8005d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004194:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419a:	2302      	movs	r3, #2
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a2:	2300      	movs	r3, #0
 80041a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80041a6:	230e      	movs	r3, #14
 80041a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80041aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ae:	4619      	mov	r1, r3
 80041b0:	480d      	ldr	r0, [pc, #52]	; (80041e8 <HAL_LTDC_MspInit+0x18c>)
 80041b2:	f001 fddd 	bl	8005d70 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80041b6:	2200      	movs	r2, #0
 80041b8:	2105      	movs	r1, #5
 80041ba:	2058      	movs	r0, #88	; 0x58
 80041bc:	f001 f874 	bl	80052a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80041c0:	2058      	movs	r0, #88	; 0x58
 80041c2:	f001 f88d 	bl	80052e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80041c6:	bf00      	nop
 80041c8:	3738      	adds	r7, #56	; 0x38
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40016800 	.word	0x40016800
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40022400 	.word	0x40022400
 80041e0:	40022800 	.word	0x40022800
 80041e4:	40021800 	.word	0x40021800
 80041e8:	40022000 	.word	0x40022000

080041ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a07      	ldr	r2, [pc, #28]	; (8004218 <HAL_RTC_MspInit+0x2c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d105      	bne.n	800420a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <HAL_RTC_MspInit+0x30>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	4a06      	ldr	r2, [pc, #24]	; (800421c <HAL_RTC_MspInit+0x30>)
 8004204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004208:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40002800 	.word	0x40002800
 800421c:	40023800 	.word	0x40023800

08004220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	; 0x28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004228:	f107 0314 	add.w	r3, r7, #20
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2d      	ldr	r2, [pc, #180]	; (80042f4 <HAL_SPI_MspInit+0xd4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d154      	bne.n	80042ec <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004242:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <HAL_SPI_MspInit+0xd8>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <HAL_SPI_MspInit+0xd8>)
 8004248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800424c:	6413      	str	r3, [r2, #64]	; 0x40
 800424e:	4b2a      	ldr	r3, [pc, #168]	; (80042f8 <HAL_SPI_MspInit+0xd8>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800425a:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <HAL_SPI_MspInit+0xd8>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	4a26      	ldr	r2, [pc, #152]	; (80042f8 <HAL_SPI_MspInit+0xd8>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6313      	str	r3, [r2, #48]	; 0x30
 8004266:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <HAL_SPI_MspInit+0xd8>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004272:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <HAL_SPI_MspInit+0xd8>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	4a20      	ldr	r2, [pc, #128]	; (80042f8 <HAL_SPI_MspInit+0xd8>)
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	6313      	str	r3, [r2, #48]	; 0x30
 800427e:	4b1e      	ldr	r3, [pc, #120]	; (80042f8 <HAL_SPI_MspInit+0xd8>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800428a:	2302      	movs	r3, #2
 800428c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428e:	2302      	movs	r3, #2
 8004290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004296:	2300      	movs	r3, #0
 8004298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800429a:	2305      	movs	r3, #5
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800429e:	f107 0314 	add.w	r3, r7, #20
 80042a2:	4619      	mov	r1, r3
 80042a4:	4815      	ldr	r0, [pc, #84]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 80042a6:	f001 fd63 	bl	8005d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80042aa:	2301      	movs	r3, #1
 80042ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	2302      	movs	r3, #2
 80042b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b6:	2303      	movs	r3, #3
 80042b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042ba:	2305      	movs	r3, #5
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80042be:	f107 0314 	add.w	r3, r7, #20
 80042c2:	4619      	mov	r1, r3
 80042c4:	480d      	ldr	r0, [pc, #52]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 80042c6:	f001 fd53 	bl	8005d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80042ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80042ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d0:	2302      	movs	r3, #2
 80042d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d8:	2303      	movs	r3, #3
 80042da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042dc:	2305      	movs	r3, #5
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e0:	f107 0314 	add.w	r3, r7, #20
 80042e4:	4619      	mov	r1, r3
 80042e6:	4806      	ldr	r0, [pc, #24]	; (8004300 <HAL_SPI_MspInit+0xe0>)
 80042e8:	f001 fd42 	bl	8005d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80042ec:	bf00      	nop
 80042ee:	3728      	adds	r7, #40	; 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40003800 	.word	0x40003800
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40022000 	.word	0x40022000
 8004300:	40020400 	.word	0x40020400

08004304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004304:	b480      	push	{r7}
 8004306:	b089      	sub	sp, #36	; 0x24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a2e      	ldr	r2, [pc, #184]	; (80043cc <HAL_TIM_Base_MspInit+0xc8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d10c      	bne.n	8004330 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004316:	4b2e      	ldr	r3, [pc, #184]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6453      	str	r3, [r2, #68]	; 0x44
 8004322:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800432e:	e046      	b.n	80043be <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004338:	d10c      	bne.n	8004354 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800433a:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	4a24      	ldr	r2, [pc, #144]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	6413      	str	r3, [r2, #64]	; 0x40
 8004346:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	69bb      	ldr	r3, [r7, #24]
}
 8004352:	e034      	b.n	80043be <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1e      	ldr	r2, [pc, #120]	; (80043d4 <HAL_TIM_Base_MspInit+0xd0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d10c      	bne.n	8004378 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800435e:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004364:	f043 0302 	orr.w	r3, r3, #2
 8004368:	6413      	str	r3, [r2, #64]	; 0x40
 800436a:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	697b      	ldr	r3, [r7, #20]
}
 8004376:	e022      	b.n	80043be <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <HAL_TIM_Base_MspInit+0xd4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10c      	bne.n	800439c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004388:	f043 0308 	orr.w	r3, r3, #8
 800438c:	6413      	str	r3, [r2, #64]	; 0x40
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	693b      	ldr	r3, [r7, #16]
}
 800439a:	e010      	b.n	80043be <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0e      	ldr	r2, [pc, #56]	; (80043dc <HAL_TIM_Base_MspInit+0xd8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d10b      	bne.n	80043be <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	6453      	str	r3, [r2, #68]	; 0x44
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
}
 80043be:	bf00      	nop
 80043c0:	3724      	adds	r7, #36	; 0x24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40010400 	.word	0x40010400

080043e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e8:	f107 030c 	add.w	r3, r7, #12
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	60da      	str	r2, [r3, #12]
 80043f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a11      	ldr	r2, [pc, #68]	; (8004444 <HAL_TIM_MspPostInit+0x64>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d11b      	bne.n	800443a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004402:	4b11      	ldr	r3, [pc, #68]	; (8004448 <HAL_TIM_MspPostInit+0x68>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	4a10      	ldr	r2, [pc, #64]	; (8004448 <HAL_TIM_MspPostInit+0x68>)
 8004408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440c:	6313      	str	r3, [r2, #48]	; 0x30
 800440e:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <HAL_TIM_MspPostInit+0x68>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	60bb      	str	r3, [r7, #8]
 8004418:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI2     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800441a:	2304      	movs	r3, #4
 800441c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441e:	2302      	movs	r3, #2
 8004420:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800442a:	2303      	movs	r3, #3
 800442c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800442e:	f107 030c 	add.w	r3, r7, #12
 8004432:	4619      	mov	r1, r3
 8004434:	4805      	ldr	r0, [pc, #20]	; (800444c <HAL_TIM_MspPostInit+0x6c>)
 8004436:	f001 fc9b 	bl	8005d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800443a:	bf00      	nop
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40010400 	.word	0x40010400
 8004448:	40023800 	.word	0x40023800
 800444c:	40022000 	.word	0x40022000

08004450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08e      	sub	sp, #56	; 0x38
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a5b      	ldr	r2, [pc, #364]	; (80045dc <HAL_UART_MspInit+0x18c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d130      	bne.n	80044d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004472:	4b5b      	ldr	r3, [pc, #364]	; (80045e0 <HAL_UART_MspInit+0x190>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	4a5a      	ldr	r2, [pc, #360]	; (80045e0 <HAL_UART_MspInit+0x190>)
 8004478:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800447c:	6413      	str	r3, [r2, #64]	; 0x40
 800447e:	4b58      	ldr	r3, [pc, #352]	; (80045e0 <HAL_UART_MspInit+0x190>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800448a:	4b55      	ldr	r3, [pc, #340]	; (80045e0 <HAL_UART_MspInit+0x190>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	4a54      	ldr	r2, [pc, #336]	; (80045e0 <HAL_UART_MspInit+0x190>)
 8004490:	f043 0320 	orr.w	r3, r3, #32
 8004494:	6313      	str	r3, [r2, #48]	; 0x30
 8004496:	4b52      	ldr	r3, [pc, #328]	; (80045e0 <HAL_UART_MspInit+0x190>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80044a2:	23c0      	movs	r3, #192	; 0xc0
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	2302      	movs	r3, #2
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ae:	2303      	movs	r3, #3
 80044b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80044b2:	2308      	movs	r3, #8
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ba:	4619      	mov	r1, r3
 80044bc:	4849      	ldr	r0, [pc, #292]	; (80045e4 <HAL_UART_MspInit+0x194>)
 80044be:	f001 fc57 	bl	8005d70 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80044c2:	2200      	movs	r2, #0
 80044c4:	2105      	movs	r1, #5
 80044c6:	2052      	movs	r0, #82	; 0x52
 80044c8:	f000 feee 	bl	80052a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80044cc:	2052      	movs	r0, #82	; 0x52
 80044ce:	f000 ff07 	bl	80052e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80044d2:	e07f      	b.n	80045d4 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a43      	ldr	r2, [pc, #268]	; (80045e8 <HAL_UART_MspInit+0x198>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d14d      	bne.n	800457a <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80044de:	4b40      	ldr	r3, [pc, #256]	; (80045e0 <HAL_UART_MspInit+0x190>)
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	4a3f      	ldr	r2, [pc, #252]	; (80045e0 <HAL_UART_MspInit+0x190>)
 80044e4:	f043 0310 	orr.w	r3, r3, #16
 80044e8:	6453      	str	r3, [r2, #68]	; 0x44
 80044ea:	4b3d      	ldr	r3, [pc, #244]	; (80045e0 <HAL_UART_MspInit+0x190>)
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f6:	4b3a      	ldr	r3, [pc, #232]	; (80045e0 <HAL_UART_MspInit+0x190>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	4a39      	ldr	r2, [pc, #228]	; (80045e0 <HAL_UART_MspInit+0x190>)
 80044fc:	f043 0302 	orr.w	r3, r3, #2
 8004500:	6313      	str	r3, [r2, #48]	; 0x30
 8004502:	4b37      	ldr	r3, [pc, #220]	; (80045e0 <HAL_UART_MspInit+0x190>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800450e:	4b34      	ldr	r3, [pc, #208]	; (80045e0 <HAL_UART_MspInit+0x190>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	4a33      	ldr	r2, [pc, #204]	; (80045e0 <HAL_UART_MspInit+0x190>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	6313      	str	r3, [r2, #48]	; 0x30
 800451a:	4b31      	ldr	r3, [pc, #196]	; (80045e0 <HAL_UART_MspInit+0x190>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452a:	2302      	movs	r3, #2
 800452c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452e:	2300      	movs	r3, #0
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004532:	2300      	movs	r3, #0
 8004534:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004536:	2307      	movs	r3, #7
 8004538:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800453a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800453e:	4619      	mov	r1, r3
 8004540:	482a      	ldr	r0, [pc, #168]	; (80045ec <HAL_UART_MspInit+0x19c>)
 8004542:	f001 fc15 	bl	8005d70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454c:	2302      	movs	r3, #2
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004550:	2300      	movs	r3, #0
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004554:	2300      	movs	r3, #0
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004558:	2307      	movs	r3, #7
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800455c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004560:	4619      	mov	r1, r3
 8004562:	4823      	ldr	r0, [pc, #140]	; (80045f0 <HAL_UART_MspInit+0x1a0>)
 8004564:	f001 fc04 	bl	8005d70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8004568:	2200      	movs	r2, #0
 800456a:	2107      	movs	r1, #7
 800456c:	2025      	movs	r0, #37	; 0x25
 800456e:	f000 fe9b 	bl	80052a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004572:	2025      	movs	r0, #37	; 0x25
 8004574:	f000 feb4 	bl	80052e0 <HAL_NVIC_EnableIRQ>
}
 8004578:	e02c      	b.n	80045d4 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART6)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <HAL_UART_MspInit+0x1a4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d127      	bne.n	80045d4 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004584:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <HAL_UART_MspInit+0x190>)
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	4a15      	ldr	r2, [pc, #84]	; (80045e0 <HAL_UART_MspInit+0x190>)
 800458a:	f043 0320 	orr.w	r3, r3, #32
 800458e:	6453      	str	r3, [r2, #68]	; 0x44
 8004590:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <HAL_UART_MspInit+0x190>)
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <HAL_UART_MspInit+0x190>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	4a0f      	ldr	r2, [pc, #60]	; (80045e0 <HAL_UART_MspInit+0x190>)
 80045a2:	f043 0304 	orr.w	r3, r3, #4
 80045a6:	6313      	str	r3, [r2, #48]	; 0x30
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <HAL_UART_MspInit+0x190>)
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80045b4:	23c0      	movs	r3, #192	; 0xc0
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b8:	2302      	movs	r3, #2
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c0:	2303      	movs	r3, #3
 80045c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80045c4:	2308      	movs	r3, #8
 80045c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045cc:	4619      	mov	r1, r3
 80045ce:	480a      	ldr	r0, [pc, #40]	; (80045f8 <HAL_UART_MspInit+0x1a8>)
 80045d0:	f001 fbce 	bl	8005d70 <HAL_GPIO_Init>
}
 80045d4:	bf00      	nop
 80045d6:	3738      	adds	r7, #56	; 0x38
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40007800 	.word	0x40007800
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40021400 	.word	0x40021400
 80045e8:	40011000 	.word	0x40011000
 80045ec:	40020400 	.word	0x40020400
 80045f0:	40020000 	.word	0x40020000
 80045f4:	40011400 	.word	0x40011400
 80045f8:	40020800 	.word	0x40020800

080045fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004602:	1d3b      	adds	r3, r7, #4
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	605a      	str	r2, [r3, #4]
 800460a:	609a      	str	r2, [r3, #8]
 800460c:	60da      	str	r2, [r3, #12]
 800460e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004610:	4b3a      	ldr	r3, [pc, #232]	; (80046fc <HAL_FMC_MspInit+0x100>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d16d      	bne.n	80046f4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004618:	4b38      	ldr	r3, [pc, #224]	; (80046fc <HAL_FMC_MspInit+0x100>)
 800461a:	2201      	movs	r2, #1
 800461c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800461e:	4b38      	ldr	r3, [pc, #224]	; (8004700 <HAL_FMC_MspInit+0x104>)
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	4a37      	ldr	r2, [pc, #220]	; (8004700 <HAL_FMC_MspInit+0x104>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6393      	str	r3, [r2, #56]	; 0x38
 800462a:	4b35      	ldr	r3, [pc, #212]	; (8004700 <HAL_FMC_MspInit+0x104>)
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8004636:	f64f 7383 	movw	r3, #65411	; 0xff83
 800463a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463c:	2302      	movs	r3, #2
 800463e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004644:	2303      	movs	r3, #3
 8004646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004648:	230c      	movs	r3, #12
 800464a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800464c:	1d3b      	adds	r3, r7, #4
 800464e:	4619      	mov	r1, r3
 8004650:	482c      	ldr	r0, [pc, #176]	; (8004704 <HAL_FMC_MspInit+0x108>)
 8004652:	f001 fb8d 	bl	8005d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8004656:	f248 1333 	movw	r3, #33075	; 0x8133
 800465a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465c:	2302      	movs	r3, #2
 800465e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004664:	2303      	movs	r3, #3
 8004666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004668:	230c      	movs	r3, #12
 800466a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800466c:	1d3b      	adds	r3, r7, #4
 800466e:	4619      	mov	r1, r3
 8004670:	4825      	ldr	r0, [pc, #148]	; (8004708 <HAL_FMC_MspInit+0x10c>)
 8004672:	f001 fb7d 	bl	8005d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8004676:	f24c 7303 	movw	r3, #50947	; 0xc703
 800467a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	2302      	movs	r3, #2
 800467e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004684:	2303      	movs	r3, #3
 8004686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004688:	230c      	movs	r3, #12
 800468a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800468c:	1d3b      	adds	r3, r7, #4
 800468e:	4619      	mov	r1, r3
 8004690:	481e      	ldr	r0, [pc, #120]	; (800470c <HAL_FMC_MspInit+0x110>)
 8004692:	f001 fb6d 	bl	8005d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004696:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800469a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	2302      	movs	r3, #2
 800469e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a4:	2303      	movs	r3, #3
 80046a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80046a8:	230c      	movs	r3, #12
 80046aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046ac:	1d3b      	adds	r3, r7, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4817      	ldr	r0, [pc, #92]	; (8004710 <HAL_FMC_MspInit+0x114>)
 80046b2:	f001 fb5d 	bl	8005d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80046b6:	2328      	movs	r3, #40	; 0x28
 80046b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	2302      	movs	r3, #2
 80046bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c2:	2303      	movs	r3, #3
 80046c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80046c6:	230c      	movs	r3, #12
 80046c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80046ca:	1d3b      	adds	r3, r7, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4811      	ldr	r0, [pc, #68]	; (8004714 <HAL_FMC_MspInit+0x118>)
 80046d0:	f001 fb4e 	bl	8005d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80046d4:	2308      	movs	r3, #8
 80046d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d8:	2302      	movs	r3, #2
 80046da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e0:	2303      	movs	r3, #3
 80046e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80046e4:	230c      	movs	r3, #12
 80046e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046e8:	1d3b      	adds	r3, r7, #4
 80046ea:	4619      	mov	r1, r3
 80046ec:	480a      	ldr	r0, [pc, #40]	; (8004718 <HAL_FMC_MspInit+0x11c>)
 80046ee:	f001 fb3f 	bl	8005d70 <HAL_GPIO_Init>
 80046f2:	e000      	b.n	80046f6 <HAL_FMC_MspInit+0xfa>
    return;
 80046f4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20000498 	.word	0x20000498
 8004700:	40023800 	.word	0x40023800
 8004704:	40021000 	.word	0x40021000
 8004708:	40021800 	.word	0x40021800
 800470c:	40020c00 	.word	0x40020c00
 8004710:	40021400 	.word	0x40021400
 8004714:	40021c00 	.word	0x40021c00
 8004718:	40020800 	.word	0x40020800

0800471c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004724:	f7ff ff6a 	bl	80045fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08c      	sub	sp, #48	; 0x30
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004740:	2200      	movs	r2, #0
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	2036      	movs	r0, #54	; 0x36
 8004746:	f000 fdaf 	bl	80052a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800474a:	2036      	movs	r0, #54	; 0x36
 800474c:	f000 fdc8 	bl	80052e0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004750:	4b1f      	ldr	r3, [pc, #124]	; (80047d0 <HAL_InitTick+0xa0>)
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	4a1e      	ldr	r2, [pc, #120]	; (80047d0 <HAL_InitTick+0xa0>)
 8004756:	f043 0310 	orr.w	r3, r3, #16
 800475a:	6413      	str	r3, [r2, #64]	; 0x40
 800475c:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <HAL_InitTick+0xa0>)
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004768:	f107 0210 	add.w	r2, r7, #16
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f003 fbe8 	bl	8007f48 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004778:	f003 fbbe 	bl	8007ef8 <HAL_RCC_GetPCLK1Freq>
 800477c:	4603      	mov	r3, r0
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <HAL_InitTick+0xa4>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	0c9b      	lsrs	r3, r3, #18
 800478c:	3b01      	subs	r3, #1
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004790:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <HAL_InitTick+0xa8>)
 8004792:	4a12      	ldr	r2, [pc, #72]	; (80047dc <HAL_InitTick+0xac>)
 8004794:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004796:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <HAL_InitTick+0xa8>)
 8004798:	f240 32e7 	movw	r2, #999	; 0x3e7
 800479c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800479e:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <HAL_InitTick+0xa8>)
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <HAL_InitTick+0xa8>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_InitTick+0xa8>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80047b0:	4809      	ldr	r0, [pc, #36]	; (80047d8 <HAL_InitTick+0xa8>)
 80047b2:	f004 fcbc 	bl	800912e <HAL_TIM_Base_Init>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d104      	bne.n	80047c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80047bc:	4806      	ldr	r0, [pc, #24]	; (80047d8 <HAL_InitTick+0xa8>)
 80047be:	f004 fce1 	bl	8009184 <HAL_TIM_Base_Start_IT>
 80047c2:	4603      	mov	r3, r0
 80047c4:	e000      	b.n	80047c8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3730      	adds	r7, #48	; 0x30
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40023800 	.word	0x40023800
 80047d4:	431bde83 	.word	0x431bde83
 80047d8:	20008c90 	.word	0x20008c90
 80047dc:	40001000 	.word	0x40001000

080047e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047e4:	e7fe      	b.n	80047e4 <NMI_Handler+0x4>

080047e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047e6:	b480      	push	{r7}
 80047e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047ea:	e7fe      	b.n	80047ea <HardFault_Handler+0x4>

080047ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047f0:	e7fe      	b.n	80047f0 <MemManage_Handler+0x4>

080047f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047f2:	b480      	push	{r7}
 80047f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047f6:	e7fe      	b.n	80047f6 <BusFault_Handler+0x4>

080047f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047fc:	e7fe      	b.n	80047fc <UsageFault_Handler+0x4>

080047fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004802:	bf00      	nop
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004810:	4802      	ldr	r0, [pc, #8]	; (800481c <USART1_IRQHandler+0x10>)
 8004812:	f005 ff1b 	bl	800a64c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004816:	bf00      	nop
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20008964 	.word	0x20008964

08004820 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8004824:	4803      	ldr	r0, [pc, #12]	; (8004834 <TIM6_DAC_IRQHandler+0x14>)
 8004826:	f000 fd8b 	bl	8005340 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800482a:	4803      	ldr	r0, [pc, #12]	; (8004838 <TIM6_DAC_IRQHandler+0x18>)
 800482c:	f004 fd09 	bl	8009242 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}
 8004834:	200089e4 	.word	0x200089e4
 8004838:	20008c90 	.word	0x20008c90

0800483c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004840:	4802      	ldr	r0, [pc, #8]	; (800484c <UART7_IRQHandler+0x10>)
 8004842:	f005 ff03 	bl	800a64c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	2000869c 	.word	0x2000869c

08004850 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004854:	4802      	ldr	r0, [pc, #8]	; (8004860 <LTDC_IRQHandler+0x10>)
 8004856:	f002 fbf5 	bl	8007044 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800485a:	bf00      	nop
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20008828 	.word	0x20008828

08004864 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004868:	4b08      	ldr	r3, [pc, #32]	; (800488c <SystemInit+0x28>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	4a07      	ldr	r2, [pc, #28]	; (800488c <SystemInit+0x28>)
 8004870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004878:	4b04      	ldr	r3, [pc, #16]	; (800488c <SystemInit+0x28>)
 800487a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800487e:	609a      	str	r2, [r3, #8]
#endif
}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	e000ed00 	.word	0xe000ed00

08004890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004894:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004896:	e003      	b.n	80048a0 <LoopCopyDataInit>

08004898 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800489a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800489c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800489e:	3104      	adds	r1, #4

080048a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80048a0:	480b      	ldr	r0, [pc, #44]	; (80048d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80048a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80048a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80048a8:	d3f6      	bcc.n	8004898 <CopyDataInit>
  ldr  r2, =_sbss
 80048aa:	4a0b      	ldr	r2, [pc, #44]	; (80048d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80048ac:	e002      	b.n	80048b4 <LoopFillZerobss>

080048ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80048ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80048b0:	f842 3b04 	str.w	r3, [r2], #4

080048b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80048b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80048b8:	d3f9      	bcc.n	80048ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048ba:	f7ff ffd3 	bl	8004864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048be:	f009 fa17 	bl	800dcf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048c2:	f7fc f831 	bl	8000928 <main>
  bx  lr    
 80048c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80048c8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80048cc:	0800fd94 	.word	0x0800fd94
  ldr  r0, =_sdata
 80048d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80048d4:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 80048d8:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 80048dc:	20008cd4 	.word	0x20008cd4

080048e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048e0:	e7fe      	b.n	80048e0 <ADC_IRQHandler>

080048e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048e6:	2003      	movs	r0, #3
 80048e8:	f000 fcd3 	bl	8005292 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048ec:	2000      	movs	r0, #0
 80048ee:	f7ff ff1f 	bl	8004730 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80048f2:	f7ff fa01 	bl	8003cf8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <HAL_IncTick+0x20>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_IncTick+0x24>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4413      	add	r3, r2
 800490c:	4a04      	ldr	r2, [pc, #16]	; (8004920 <HAL_IncTick+0x24>)
 800490e:	6013      	str	r3, [r2, #0]
}
 8004910:	bf00      	nop
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000050 	.word	0x20000050
 8004920:	20008cd0 	.word	0x20008cd0

08004924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  return uwTick;
 8004928:	4b03      	ldr	r3, [pc, #12]	; (8004938 <HAL_GetTick+0x14>)
 800492a:	681b      	ldr	r3, [r3, #0]
}
 800492c:	4618      	mov	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	20008cd0 	.word	0x20008cd0

0800493c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004944:	f7ff ffee 	bl	8004924 <HAL_GetTick>
 8004948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d005      	beq.n	8004962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <HAL_Delay+0x44>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004962:	bf00      	nop
 8004964:	f7ff ffde 	bl	8004924 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	429a      	cmp	r2, r3
 8004972:	d8f7      	bhi.n	8004964 <HAL_Delay+0x28>
  {
  }
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000050 	.word	0x20000050

08004984 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e031      	b.n	80049fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff f9d0 	bl	8003d48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d116      	bne.n	80049f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c6:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <HAL_ADC_Init+0x84>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	f043 0202 	orr.w	r2, r3, #2
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fab6 	bl	8004f44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	f043 0201 	orr.w	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
 80049ee:	e001      	b.n	80049f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	ffffeefd 	.word	0xffffeefd

08004a0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_ADC_Start+0x1a>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e0a0      	b.n	8004b68 <HAL_ADC_Start+0x15c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d018      	beq.n	8004a6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004a4c:	4b49      	ldr	r3, [pc, #292]	; (8004b74 <HAL_ADC_Start+0x168>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a49      	ldr	r2, [pc, #292]	; (8004b78 <HAL_ADC_Start+0x16c>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	0c9a      	lsrs	r2, r3, #18
 8004a58:	4613      	mov	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4413      	add	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a60:	e002      	b.n	8004a68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f9      	bne.n	8004a62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d174      	bne.n	8004b66 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a80:	4b3e      	ldr	r3, [pc, #248]	; (8004b7c <HAL_ADC_Start+0x170>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004aa2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab6:	d106      	bne.n	8004ac6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f023 0206 	bic.w	r2, r3, #6
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44
 8004ac4:	e002      	b.n	8004acc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004adc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <HAL_ADC_Start+0x174>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10f      	bne.n	8004b0a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d136      	bne.n	8004b66 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b06:	609a      	str	r2, [r3, #8]
 8004b08:	e02d      	b.n	8004b66 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1d      	ldr	r2, [pc, #116]	; (8004b84 <HAL_ADC_Start+0x178>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10e      	bne.n	8004b32 <HAL_ADC_Start+0x126>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d107      	bne.n	8004b32 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b30:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004b32:	4b13      	ldr	r3, [pc, #76]	; (8004b80 <HAL_ADC_Start+0x174>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d113      	bne.n	8004b66 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a11      	ldr	r2, [pc, #68]	; (8004b88 <HAL_ADC_Start+0x17c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d10e      	bne.n	8004b66 <HAL_ADC_Start+0x15a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d107      	bne.n	8004b66 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b64:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	20000048 	.word	0x20000048
 8004b78:	431bde83 	.word	0x431bde83
 8004b7c:	fffff8fe 	.word	0xfffff8fe
 8004b80:	40012300 	.word	0x40012300
 8004b84:	40012000 	.word	0x40012000
 8004b88:	40012200 	.word	0x40012200

08004b8c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba8:	d113      	bne.n	8004bd2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb8:	d10b      	bne.n	8004bd2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f043 0220 	orr.w	r2, r3, #32
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e05c      	b.n	8004c8c <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004bd2:	f7ff fea7 	bl	8004924 <HAL_GetTick>
 8004bd6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004bd8:	e01a      	b.n	8004c10 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d016      	beq.n	8004c10 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <HAL_ADC_PollForConversion+0x6c>
 8004be8:	f7ff fe9c 	bl	8004924 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d20b      	bcs.n	8004c10 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	f043 0204 	orr.w	r2, r3, #4
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e03d      	b.n	8004c8c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d1dd      	bne.n	8004bda <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f06f 0212 	mvn.w	r2, #18
 8004c26:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d123      	bne.n	8004c8a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d11f      	bne.n	8004c8a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d006      	beq.n	8004c66 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d111      	bne.n	8004c8a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f043 0201 	orr.w	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x1c>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e12a      	b.n	8004f22 <HAL_ADC_ConfigChannel+0x272>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b09      	cmp	r3, #9
 8004cda:	d93a      	bls.n	8004d52 <HAL_ADC_ConfigChannel+0xa2>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ce4:	d035      	beq.n	8004d52 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68d9      	ldr	r1, [r3, #12]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3b1e      	subs	r3, #30
 8004cfc:	2207      	movs	r2, #7
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43da      	mvns	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	400a      	ands	r2, r1
 8004d0a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a87      	ldr	r2, [pc, #540]	; (8004f30 <HAL_ADC_ConfigChannel+0x280>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d10a      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68d9      	ldr	r1, [r3, #12]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	061a      	lsls	r2, r3, #24
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d2a:	e035      	b.n	8004d98 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68d9      	ldr	r1, [r3, #12]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	4403      	add	r3, r0
 8004d44:	3b1e      	subs	r3, #30
 8004d46:	409a      	lsls	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d50:	e022      	b.n	8004d98 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6919      	ldr	r1, [r3, #16]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4613      	mov	r3, r2
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	4413      	add	r3, r2
 8004d66:	2207      	movs	r2, #7
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43da      	mvns	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	400a      	ands	r2, r1
 8004d74:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6919      	ldr	r1, [r3, #16]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	4618      	mov	r0, r3
 8004d88:	4603      	mov	r3, r0
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	4403      	add	r3, r0
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b06      	cmp	r3, #6
 8004d9e:	d824      	bhi.n	8004dea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	3b05      	subs	r3, #5
 8004db2:	221f      	movs	r2, #31
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	43da      	mvns	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	400a      	ands	r2, r1
 8004dc0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	4618      	mov	r0, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	3b05      	subs	r3, #5
 8004ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	635a      	str	r2, [r3, #52]	; 0x34
 8004de8:	e04c      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b0c      	cmp	r3, #12
 8004df0:	d824      	bhi.n	8004e3c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	3b23      	subs	r3, #35	; 0x23
 8004e04:	221f      	movs	r2, #31
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43da      	mvns	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	400a      	ands	r2, r1
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	4618      	mov	r0, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3b23      	subs	r3, #35	; 0x23
 8004e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30
 8004e3a:	e023      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3b41      	subs	r3, #65	; 0x41
 8004e4e:	221f      	movs	r2, #31
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43da      	mvns	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	400a      	ands	r2, r1
 8004e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	3b41      	subs	r3, #65	; 0x41
 8004e78:	fa00 f203 	lsl.w	r2, r0, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2a      	ldr	r2, [pc, #168]	; (8004f34 <HAL_ADC_ConfigChannel+0x284>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d10a      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x1f4>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e96:	d105      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004e98:	4b27      	ldr	r3, [pc, #156]	; (8004f38 <HAL_ADC_ConfigChannel+0x288>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4a26      	ldr	r2, [pc, #152]	; (8004f38 <HAL_ADC_ConfigChannel+0x288>)
 8004e9e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004ea2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a22      	ldr	r2, [pc, #136]	; (8004f34 <HAL_ADC_ConfigChannel+0x284>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d109      	bne.n	8004ec2 <HAL_ADC_ConfigChannel+0x212>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b12      	cmp	r3, #18
 8004eb4:	d105      	bne.n	8004ec2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004eb6:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <HAL_ADC_ConfigChannel+0x288>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	4a1f      	ldr	r2, [pc, #124]	; (8004f38 <HAL_ADC_ConfigChannel+0x288>)
 8004ebc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ec0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1b      	ldr	r2, [pc, #108]	; (8004f34 <HAL_ADC_ConfigChannel+0x284>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d125      	bne.n	8004f18 <HAL_ADC_ConfigChannel+0x268>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a17      	ldr	r2, [pc, #92]	; (8004f30 <HAL_ADC_ConfigChannel+0x280>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <HAL_ADC_ConfigChannel+0x22e>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b11      	cmp	r3, #17
 8004edc:	d11c      	bne.n	8004f18 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004ede:	4b16      	ldr	r3, [pc, #88]	; (8004f38 <HAL_ADC_ConfigChannel+0x288>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <HAL_ADC_ConfigChannel+0x288>)
 8004ee4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ee8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a10      	ldr	r2, [pc, #64]	; (8004f30 <HAL_ADC_ConfigChannel+0x280>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d111      	bne.n	8004f18 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004ef4:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_ADC_ConfigChannel+0x28c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <HAL_ADC_ConfigChannel+0x290>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	0c9a      	lsrs	r2, r3, #18
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004f0a:	e002      	b.n	8004f12 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1f9      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	10000012 	.word	0x10000012
 8004f34:	40012000 	.word	0x40012000
 8004f38:	40012300 	.word	0x40012300
 8004f3c:	20000048 	.word	0x20000048
 8004f40:	431bde83 	.word	0x431bde83

08004f44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004f4c:	4b78      	ldr	r3, [pc, #480]	; (8005130 <ADC_Init+0x1ec>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4a77      	ldr	r2, [pc, #476]	; (8005130 <ADC_Init+0x1ec>)
 8004f52:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004f56:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004f58:	4b75      	ldr	r3, [pc, #468]	; (8005130 <ADC_Init+0x1ec>)
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4973      	ldr	r1, [pc, #460]	; (8005130 <ADC_Init+0x1ec>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6859      	ldr	r1, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	021a      	lsls	r2, r3, #8
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6899      	ldr	r1, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	4a58      	ldr	r2, [pc, #352]	; (8005134 <ADC_Init+0x1f0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d022      	beq.n	800501e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fe6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6899      	ldr	r1, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005008:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6899      	ldr	r1, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	e00f      	b.n	800503e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800502c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800503c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0202 	bic.w	r2, r2, #2
 800504c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6899      	ldr	r1, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	005a      	lsls	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01b      	beq.n	80050a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800507a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800508a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6859      	ldr	r1, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	3b01      	subs	r3, #1
 8005098:	035a      	lsls	r2, r3, #13
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
 80050a2:	e007      	b.n	80050b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	051a      	lsls	r2, r3, #20
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6899      	ldr	r1, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050f6:	025a      	lsls	r2, r3, #9
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6899      	ldr	r1, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	029a      	lsls	r2, r3, #10
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	609a      	str	r2, [r3, #8]
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40012300 	.word	0x40012300
 8005134:	0f000001 	.word	0x0f000001

08005138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <__NVIC_SetPriorityGrouping+0x40>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005154:	4013      	ands	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <__NVIC_SetPriorityGrouping+0x44>)
 8005162:	4313      	orrs	r3, r2
 8005164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005166:	4a04      	ldr	r2, [pc, #16]	; (8005178 <__NVIC_SetPriorityGrouping+0x40>)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	60d3      	str	r3, [r2, #12]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	e000ed00 	.word	0xe000ed00
 800517c:	05fa0000 	.word	0x05fa0000

08005180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <__NVIC_GetPriorityGrouping+0x18>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	0a1b      	lsrs	r3, r3, #8
 800518a:	f003 0307 	and.w	r3, r3, #7
}
 800518e:	4618      	mov	r0, r3
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	e000ed00 	.word	0xe000ed00

0800519c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	db0b      	blt.n	80051c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	f003 021f 	and.w	r2, r3, #31
 80051b4:	4907      	ldr	r1, [pc, #28]	; (80051d4 <__NVIC_EnableIRQ+0x38>)
 80051b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	2001      	movs	r0, #1
 80051be:	fa00 f202 	lsl.w	r2, r0, r2
 80051c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	e000e100 	.word	0xe000e100

080051d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	6039      	str	r1, [r7, #0]
 80051e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	db0a      	blt.n	8005202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	490c      	ldr	r1, [pc, #48]	; (8005224 <__NVIC_SetPriority+0x4c>)
 80051f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f6:	0112      	lsls	r2, r2, #4
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	440b      	add	r3, r1
 80051fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005200:	e00a      	b.n	8005218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	b2da      	uxtb	r2, r3
 8005206:	4908      	ldr	r1, [pc, #32]	; (8005228 <__NVIC_SetPriority+0x50>)
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	3b04      	subs	r3, #4
 8005210:	0112      	lsls	r2, r2, #4
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	440b      	add	r3, r1
 8005216:	761a      	strb	r2, [r3, #24]
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	e000e100 	.word	0xe000e100
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800522c:	b480      	push	{r7}
 800522e:	b089      	sub	sp, #36	; 0x24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f1c3 0307 	rsb	r3, r3, #7
 8005246:	2b04      	cmp	r3, #4
 8005248:	bf28      	it	cs
 800524a:	2304      	movcs	r3, #4
 800524c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3304      	adds	r3, #4
 8005252:	2b06      	cmp	r3, #6
 8005254:	d902      	bls.n	800525c <NVIC_EncodePriority+0x30>
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3b03      	subs	r3, #3
 800525a:	e000      	b.n	800525e <NVIC_EncodePriority+0x32>
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005260:	f04f 32ff 	mov.w	r2, #4294967295
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43da      	mvns	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	401a      	ands	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005274:	f04f 31ff 	mov.w	r1, #4294967295
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	fa01 f303 	lsl.w	r3, r1, r3
 800527e:	43d9      	mvns	r1, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005284:	4313      	orrs	r3, r2
         );
}
 8005286:	4618      	mov	r0, r3
 8005288:	3724      	adds	r7, #36	; 0x24
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff ff4c 	bl	8005138 <__NVIC_SetPriorityGrouping>
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052ba:	f7ff ff61 	bl	8005180 <__NVIC_GetPriorityGrouping>
 80052be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	6978      	ldr	r0, [r7, #20]
 80052c6:	f7ff ffb1 	bl	800522c <NVIC_EncodePriority>
 80052ca:	4602      	mov	r2, r0
 80052cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d0:	4611      	mov	r1, r2
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff ff80 	bl	80051d8 <__NVIC_SetPriority>
}
 80052d8:	bf00      	nop
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff ff54 	bl	800519c <__NVIC_EnableIRQ>
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e014      	b.n	8005338 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	791b      	ldrb	r3, [r3, #4]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d105      	bne.n	8005324 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fe fd80 	bl	8003e24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005356:	d118      	bne.n	800538a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2204      	movs	r2, #4
 800535c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005372:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005382:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f825 	bl	80053d4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005398:	d118      	bne.n	80053cc <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2204      	movs	r2, #4
 800539e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f043 0202 	orr.w	r2, r3, #2
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80053b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80053c4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f85b 	bl	8005482 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	795b      	ldrb	r3, [r3, #5]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_DAC_ConfigChannel+0x20>
 8005404:	2302      	movs	r3, #2
 8005406:	e036      	b.n	8005476 <HAL_DAC_ConfigChannel+0x8e>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2202      	movs	r2, #2
 8005412:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800541c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4013      	ands	r3, r2
 800542c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6819      	ldr	r1, [r3, #0]
 8005456:	22c0      	movs	r2, #192	; 0xc0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	43da      	mvns	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	400a      	ands	r2, r1
 8005466:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054a4:	f7ff fa3e 	bl	8004924 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e099      	b.n	80055e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0201 	bic.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054d4:	e00f      	b.n	80054f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054d6:	f7ff fa25 	bl	8004924 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b05      	cmp	r3, #5
 80054e2:	d908      	bls.n	80054f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2203      	movs	r2, #3
 80054ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e078      	b.n	80055e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e8      	bne.n	80054d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <HAL_DMA_Init+0x158>)
 8005510:	4013      	ands	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800552e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800553a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	2b04      	cmp	r3, #4
 800554e:	d107      	bne.n	8005560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4313      	orrs	r3, r2
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f023 0307 	bic.w	r3, r3, #7
 8005576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	2b04      	cmp	r3, #4
 8005588:	d117      	bne.n	80055ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00e      	beq.n	80055ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f8df 	bl	8005760 <DMA_CheckFifoParam>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2240      	movs	r2, #64	; 0x40
 80055ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055b6:	2301      	movs	r3, #1
 80055b8:	e016      	b.n	80055e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f896 	bl	80056f4 <DMA_CalcBaseAndBitshift>
 80055c8:	4603      	mov	r3, r0
 80055ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d0:	223f      	movs	r2, #63	; 0x3f
 80055d2:	409a      	lsls	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	f010803f 	.word	0xf010803f

080055f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e050      	b.n	80056a8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d101      	bne.n	8005616 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005612:	2302      	movs	r3, #2
 8005614:	e048      	b.n	80056a8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2200      	movs	r2, #0
 8005634:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2200      	movs	r2, #0
 8005644:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2221      	movs	r2, #33	; 0x21
 8005654:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f84c 	bl	80056f4 <DMA_CalcBaseAndBitshift>
 800565c:	4603      	mov	r3, r0
 800565e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005664:	223f      	movs	r2, #63	; 0x3f
 8005666:	409a      	lsls	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d004      	beq.n	80056ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2280      	movs	r2, #128	; 0x80
 80056c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e00c      	b.n	80056e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2205      	movs	r2, #5
 80056d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	3b10      	subs	r3, #16
 8005704:	4a13      	ldr	r2, [pc, #76]	; (8005754 <DMA_CalcBaseAndBitshift+0x60>)
 8005706:	fba2 2303 	umull	r2, r3, r2, r3
 800570a:	091b      	lsrs	r3, r3, #4
 800570c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800570e:	4a12      	ldr	r2, [pc, #72]	; (8005758 <DMA_CalcBaseAndBitshift+0x64>)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b03      	cmp	r3, #3
 8005720:	d908      	bls.n	8005734 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	4b0c      	ldr	r3, [pc, #48]	; (800575c <DMA_CalcBaseAndBitshift+0x68>)
 800572a:	4013      	ands	r3, r2
 800572c:	1d1a      	adds	r2, r3, #4
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	659a      	str	r2, [r3, #88]	; 0x58
 8005732:	e006      	b.n	8005742 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	4b08      	ldr	r3, [pc, #32]	; (800575c <DMA_CalcBaseAndBitshift+0x68>)
 800573c:	4013      	ands	r3, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	aaaaaaab 	.word	0xaaaaaaab
 8005758:	0800fd7c 	.word	0x0800fd7c
 800575c:	fffffc00 	.word	0xfffffc00

08005760 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d11f      	bne.n	80057ba <DMA_CheckFifoParam+0x5a>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d856      	bhi.n	800582e <DMA_CheckFifoParam+0xce>
 8005780:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <DMA_CheckFifoParam+0x28>)
 8005782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005786:	bf00      	nop
 8005788:	08005799 	.word	0x08005799
 800578c:	080057ab 	.word	0x080057ab
 8005790:	08005799 	.word	0x08005799
 8005794:	0800582f 	.word	0x0800582f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d046      	beq.n	8005832 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a8:	e043      	b.n	8005832 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057b2:	d140      	bne.n	8005836 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057b8:	e03d      	b.n	8005836 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c2:	d121      	bne.n	8005808 <DMA_CheckFifoParam+0xa8>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d837      	bhi.n	800583a <DMA_CheckFifoParam+0xda>
 80057ca:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <DMA_CheckFifoParam+0x70>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	080057e1 	.word	0x080057e1
 80057d4:	080057e7 	.word	0x080057e7
 80057d8:	080057e1 	.word	0x080057e1
 80057dc:	080057f9 	.word	0x080057f9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
      break;
 80057e4:	e030      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d025      	beq.n	800583e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f6:	e022      	b.n	800583e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005800:	d11f      	bne.n	8005842 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005806:	e01c      	b.n	8005842 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d903      	bls.n	8005816 <DMA_CheckFifoParam+0xb6>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d003      	beq.n	800581c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005814:	e018      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
      break;
 800581a:	e015      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00e      	beq.n	8005846 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
      break;
 800582c:	e00b      	b.n	8005846 <DMA_CheckFifoParam+0xe6>
      break;
 800582e:	bf00      	nop
 8005830:	e00a      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      break;
 8005832:	bf00      	nop
 8005834:	e008      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      break;
 8005836:	bf00      	nop
 8005838:	e006      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      break;
 800583a:	bf00      	nop
 800583c:	e004      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      break;
 800583e:	bf00      	nop
 8005840:	e002      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      break;   
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      break;
 8005846:	bf00      	nop
    }
  } 
  
  return status; 
 8005848:	7bfb      	ldrb	r3, [r7, #15]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop

08005858 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e039      	b.n	80058de <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fe fb18 	bl	8003eb4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a8:	f023 0107 	bic.w	r1, r3, #7
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <HAL_DMA2D_Init+0x90>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	68d1      	ldr	r1, [r2, #12]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	430b      	orrs	r3, r1
 80058cc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	ffffc000 	.word	0xffffc000

080058ec <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_DMA2D_Start+0x1c>
 8005904:	2302      	movs	r3, #2
 8005906:	e018      	b.n	800593a <HAL_DMA2D_Start+0x4e>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 f988 	bl	8005c38 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b086      	sub	sp, #24
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d056      	beq.n	8005a0c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800595e:	f7fe ffe1 	bl	8004924 <HAL_GetTick>
 8005962:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005964:	e04b      	b.n	80059fe <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005974:	2b00      	cmp	r3, #0
 8005976:	d023      	beq.n	80059c0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005986:	f043 0202 	orr.w	r2, r3, #2
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599c:	f043 0201 	orr.w	r2, r3, #1
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2221      	movs	r2, #33	; 0x21
 80059aa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2204      	movs	r2, #4
 80059b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0a5      	b.n	8005b0c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	d01a      	beq.n	80059fe <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80059c8:	f7fe ffac 	bl	8004924 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d302      	bcc.n	80059de <HAL_DMA2D_PollForTransfer+0x9c>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10f      	bne.n	80059fe <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2203      	movs	r2, #3
 80059ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e086      	b.n	8005b0c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0ac      	beq.n	8005966 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d061      	beq.n	8005af2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a2e:	f7fe ff79 	bl	8004924 <HAL_GetTick>
 8005a32:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005a34:	e056      	b.n	8005ae4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d02e      	beq.n	8005aa6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a56:	f043 0204 	orr.w	r2, r3, #4
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6c:	f043 0202 	orr.w	r2, r3, #2
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a82:	f043 0201 	orr.w	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2229      	movs	r2, #41	; 0x29
 8005a90:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2204      	movs	r2, #4
 8005a96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e032      	b.n	8005b0c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aac:	d01a      	beq.n	8005ae4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005aae:	f7fe ff39 	bl	8004924 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d302      	bcc.n	8005ac4 <HAL_DMA2D_PollForTransfer+0x182>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10f      	bne.n	8005ae4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e013      	b.n	8005b0c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0a1      	beq.n	8005a36 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2212      	movs	r2, #18
 8005af8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_DMA2D_ConfigLayer+0x20>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e079      	b.n	8005c28 <HAL_DMA2D_ConfigLayer+0x114>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	3318      	adds	r3, #24
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	041b      	lsls	r3, r3, #16
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005b5e:	4b35      	ldr	r3, [pc, #212]	; (8005c34 <HAL_DMA2D_ConfigLayer+0x120>)
 8005b60:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b0a      	cmp	r3, #10
 8005b68:	d003      	beq.n	8005b72 <HAL_DMA2D_ConfigLayer+0x5e>
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b09      	cmp	r3, #9
 8005b70:	d107      	bne.n	8005b82 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e005      	b.n	8005b8e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	061b      	lsls	r3, r3, #24
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d120      	bne.n	8005bd6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	ea02 0103 	and.w	r1, r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b0a      	cmp	r3, #10
 8005bbc:	d003      	beq.n	8005bc6 <HAL_DMA2D_ConfigLayer+0xb2>
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b09      	cmp	r3, #9
 8005bc4:	d127      	bne.n	8005c16 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8005bd4:	e01f      	b.n	8005c16 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	43db      	mvns	r3, r3
 8005be0:	ea02 0103 	and.w	r1, r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b0a      	cmp	r3, #10
 8005bfe:	d003      	beq.n	8005c08 <HAL_DMA2D_ConfigLayer+0xf4>
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b09      	cmp	r3, #9
 8005c06:	d106      	bne.n	8005c16 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005c14:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	ff03000f 	.word	0xff03000f

08005c38 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b08b      	sub	sp, #44	; 0x2c
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	041a      	lsls	r2, r3, #16
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c70:	d174      	bne.n	8005d5c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c78:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c80:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c88:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d108      	bne.n	8005caa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca8:	e053      	b.n	8005d52 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d106      	bne.n	8005cc0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cbe:	e048      	b.n	8005d52 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d111      	bne.n	8005cec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	0cdb      	lsrs	r3, r3, #19
 8005ccc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	0a9b      	lsrs	r3, r3, #10
 8005cd2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	08db      	lsrs	r3, r3, #3
 8005cd8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	02db      	lsls	r3, r3, #11
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cea:	e032      	b.n	8005d52 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d117      	bne.n	8005d24 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	0fdb      	lsrs	r3, r3, #31
 8005cf8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	0cdb      	lsrs	r3, r3, #19
 8005cfe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	0adb      	lsrs	r3, r3, #11
 8005d04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	08db      	lsrs	r3, r3, #3
 8005d0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	029b      	lsls	r3, r3, #10
 8005d14:	431a      	orrs	r2, r3
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	03db      	lsls	r3, r3, #15
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
 8005d22:	e016      	b.n	8005d52 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	0f1b      	lsrs	r3, r3, #28
 8005d28:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	0d1b      	lsrs	r3, r3, #20
 8005d2e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	0b1b      	lsrs	r3, r3, #12
 8005d34:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	091b      	lsrs	r3, r3, #4
 8005d3a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	011a      	lsls	r2, r3, #4
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	431a      	orrs	r2, r3
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	031b      	lsls	r3, r3, #12
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005d5a:	e003      	b.n	8005d64 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	60da      	str	r2, [r3, #12]
}
 8005d64:	bf00      	nop
 8005d66:	372c      	adds	r7, #44	; 0x2c
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b089      	sub	sp, #36	; 0x24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005d82:	2300      	movs	r3, #0
 8005d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005d86:	2300      	movs	r3, #0
 8005d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	e175      	b.n	800607c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005d90:	2201      	movs	r2, #1
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4013      	ands	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	f040 8164 	bne.w	8006076 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d00b      	beq.n	8005dce <HAL_GPIO_Init+0x5e>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d007      	beq.n	8005dce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005dc2:	2b11      	cmp	r3, #17
 8005dc4:	d003      	beq.n	8005dce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b12      	cmp	r3, #18
 8005dcc:	d130      	bne.n	8005e30 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	2203      	movs	r2, #3
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	43db      	mvns	r3, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e04:	2201      	movs	r2, #1
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	f003 0201 	and.w	r2, r3, #1
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4013      	ands	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d003      	beq.n	8005e70 <HAL_GPIO_Init+0x100>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b12      	cmp	r3, #18
 8005e6e:	d123      	bne.n	8005eb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	08da      	lsrs	r2, r3, #3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3208      	adds	r2, #8
 8005e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	220f      	movs	r2, #15
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	4013      	ands	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	08da      	lsrs	r2, r3, #3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3208      	adds	r2, #8
 8005eb2:	69b9      	ldr	r1, [r7, #24]
 8005eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	2203      	movs	r2, #3
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 0203 	and.w	r2, r3, #3
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 80be 	beq.w	8006076 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005efa:	4b66      	ldr	r3, [pc, #408]	; (8006094 <HAL_GPIO_Init+0x324>)
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	4a65      	ldr	r2, [pc, #404]	; (8006094 <HAL_GPIO_Init+0x324>)
 8005f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f04:	6453      	str	r3, [r2, #68]	; 0x44
 8005f06:	4b63      	ldr	r3, [pc, #396]	; (8006094 <HAL_GPIO_Init+0x324>)
 8005f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005f12:	4a61      	ldr	r2, [pc, #388]	; (8006098 <HAL_GPIO_Init+0x328>)
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	089b      	lsrs	r3, r3, #2
 8005f18:	3302      	adds	r3, #2
 8005f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	220f      	movs	r2, #15
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4013      	ands	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a58      	ldr	r2, [pc, #352]	; (800609c <HAL_GPIO_Init+0x32c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d037      	beq.n	8005fae <HAL_GPIO_Init+0x23e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a57      	ldr	r2, [pc, #348]	; (80060a0 <HAL_GPIO_Init+0x330>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d031      	beq.n	8005faa <HAL_GPIO_Init+0x23a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a56      	ldr	r2, [pc, #344]	; (80060a4 <HAL_GPIO_Init+0x334>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d02b      	beq.n	8005fa6 <HAL_GPIO_Init+0x236>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a55      	ldr	r2, [pc, #340]	; (80060a8 <HAL_GPIO_Init+0x338>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d025      	beq.n	8005fa2 <HAL_GPIO_Init+0x232>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a54      	ldr	r2, [pc, #336]	; (80060ac <HAL_GPIO_Init+0x33c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d01f      	beq.n	8005f9e <HAL_GPIO_Init+0x22e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a53      	ldr	r2, [pc, #332]	; (80060b0 <HAL_GPIO_Init+0x340>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d019      	beq.n	8005f9a <HAL_GPIO_Init+0x22a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a52      	ldr	r2, [pc, #328]	; (80060b4 <HAL_GPIO_Init+0x344>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <HAL_GPIO_Init+0x226>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a51      	ldr	r2, [pc, #324]	; (80060b8 <HAL_GPIO_Init+0x348>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00d      	beq.n	8005f92 <HAL_GPIO_Init+0x222>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a50      	ldr	r2, [pc, #320]	; (80060bc <HAL_GPIO_Init+0x34c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d007      	beq.n	8005f8e <HAL_GPIO_Init+0x21e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a4f      	ldr	r2, [pc, #316]	; (80060c0 <HAL_GPIO_Init+0x350>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d101      	bne.n	8005f8a <HAL_GPIO_Init+0x21a>
 8005f86:	2309      	movs	r3, #9
 8005f88:	e012      	b.n	8005fb0 <HAL_GPIO_Init+0x240>
 8005f8a:	230a      	movs	r3, #10
 8005f8c:	e010      	b.n	8005fb0 <HAL_GPIO_Init+0x240>
 8005f8e:	2308      	movs	r3, #8
 8005f90:	e00e      	b.n	8005fb0 <HAL_GPIO_Init+0x240>
 8005f92:	2307      	movs	r3, #7
 8005f94:	e00c      	b.n	8005fb0 <HAL_GPIO_Init+0x240>
 8005f96:	2306      	movs	r3, #6
 8005f98:	e00a      	b.n	8005fb0 <HAL_GPIO_Init+0x240>
 8005f9a:	2305      	movs	r3, #5
 8005f9c:	e008      	b.n	8005fb0 <HAL_GPIO_Init+0x240>
 8005f9e:	2304      	movs	r3, #4
 8005fa0:	e006      	b.n	8005fb0 <HAL_GPIO_Init+0x240>
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e004      	b.n	8005fb0 <HAL_GPIO_Init+0x240>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e002      	b.n	8005fb0 <HAL_GPIO_Init+0x240>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <HAL_GPIO_Init+0x240>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	f002 0203 	and.w	r2, r2, #3
 8005fb6:	0092      	lsls	r2, r2, #2
 8005fb8:	4093      	lsls	r3, r2
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005fc0:	4935      	ldr	r1, [pc, #212]	; (8006098 <HAL_GPIO_Init+0x328>)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	089b      	lsrs	r3, r3, #2
 8005fc6:	3302      	adds	r3, #2
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fce:	4b3d      	ldr	r3, [pc, #244]	; (80060c4 <HAL_GPIO_Init+0x354>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ff2:	4a34      	ldr	r2, [pc, #208]	; (80060c4 <HAL_GPIO_Init+0x354>)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ff8:	4b32      	ldr	r3, [pc, #200]	; (80060c4 <HAL_GPIO_Init+0x354>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	43db      	mvns	r3, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	4013      	ands	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800601c:	4a29      	ldr	r2, [pc, #164]	; (80060c4 <HAL_GPIO_Init+0x354>)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006022:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <HAL_GPIO_Init+0x354>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	43db      	mvns	r3, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4013      	ands	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006046:	4a1f      	ldr	r2, [pc, #124]	; (80060c4 <HAL_GPIO_Init+0x354>)
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800604c:	4b1d      	ldr	r3, [pc, #116]	; (80060c4 <HAL_GPIO_Init+0x354>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	43db      	mvns	r3, r3
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	4013      	ands	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006070:	4a14      	ldr	r2, [pc, #80]	; (80060c4 <HAL_GPIO_Init+0x354>)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	3301      	adds	r3, #1
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b0f      	cmp	r3, #15
 8006080:	f67f ae86 	bls.w	8005d90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	3724      	adds	r7, #36	; 0x24
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40023800 	.word	0x40023800
 8006098:	40013800 	.word	0x40013800
 800609c:	40020000 	.word	0x40020000
 80060a0:	40020400 	.word	0x40020400
 80060a4:	40020800 	.word	0x40020800
 80060a8:	40020c00 	.word	0x40020c00
 80060ac:	40021000 	.word	0x40021000
 80060b0:	40021400 	.word	0x40021400
 80060b4:	40021800 	.word	0x40021800
 80060b8:	40021c00 	.word	0x40021c00
 80060bc:	40022000 	.word	0x40022000
 80060c0:	40022400 	.word	0x40022400
 80060c4:	40013c00 	.word	0x40013c00

080060c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80060d2:	2300      	movs	r3, #0
 80060d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	e0d9      	b.n	8006298 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80060e4:	2201      	movs	r2, #1
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4013      	ands	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	f040 80c9 	bne.w	8006292 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006100:	4a6b      	ldr	r2, [pc, #428]	; (80062b0 <HAL_GPIO_DeInit+0x1e8>)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	089b      	lsrs	r3, r3, #2
 8006106:	3302      	adds	r3, #2
 8006108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800610c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	220f      	movs	r2, #15
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	4013      	ands	r3, r2
 8006120:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a63      	ldr	r2, [pc, #396]	; (80062b4 <HAL_GPIO_DeInit+0x1ec>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d037      	beq.n	800619a <HAL_GPIO_DeInit+0xd2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a62      	ldr	r2, [pc, #392]	; (80062b8 <HAL_GPIO_DeInit+0x1f0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d031      	beq.n	8006196 <HAL_GPIO_DeInit+0xce>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a61      	ldr	r2, [pc, #388]	; (80062bc <HAL_GPIO_DeInit+0x1f4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d02b      	beq.n	8006192 <HAL_GPIO_DeInit+0xca>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a60      	ldr	r2, [pc, #384]	; (80062c0 <HAL_GPIO_DeInit+0x1f8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d025      	beq.n	800618e <HAL_GPIO_DeInit+0xc6>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a5f      	ldr	r2, [pc, #380]	; (80062c4 <HAL_GPIO_DeInit+0x1fc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01f      	beq.n	800618a <HAL_GPIO_DeInit+0xc2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a5e      	ldr	r2, [pc, #376]	; (80062c8 <HAL_GPIO_DeInit+0x200>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d019      	beq.n	8006186 <HAL_GPIO_DeInit+0xbe>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a5d      	ldr	r2, [pc, #372]	; (80062cc <HAL_GPIO_DeInit+0x204>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d013      	beq.n	8006182 <HAL_GPIO_DeInit+0xba>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a5c      	ldr	r2, [pc, #368]	; (80062d0 <HAL_GPIO_DeInit+0x208>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00d      	beq.n	800617e <HAL_GPIO_DeInit+0xb6>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a5b      	ldr	r2, [pc, #364]	; (80062d4 <HAL_GPIO_DeInit+0x20c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d007      	beq.n	800617a <HAL_GPIO_DeInit+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a5a      	ldr	r2, [pc, #360]	; (80062d8 <HAL_GPIO_DeInit+0x210>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d101      	bne.n	8006176 <HAL_GPIO_DeInit+0xae>
 8006172:	2309      	movs	r3, #9
 8006174:	e012      	b.n	800619c <HAL_GPIO_DeInit+0xd4>
 8006176:	230a      	movs	r3, #10
 8006178:	e010      	b.n	800619c <HAL_GPIO_DeInit+0xd4>
 800617a:	2308      	movs	r3, #8
 800617c:	e00e      	b.n	800619c <HAL_GPIO_DeInit+0xd4>
 800617e:	2307      	movs	r3, #7
 8006180:	e00c      	b.n	800619c <HAL_GPIO_DeInit+0xd4>
 8006182:	2306      	movs	r3, #6
 8006184:	e00a      	b.n	800619c <HAL_GPIO_DeInit+0xd4>
 8006186:	2305      	movs	r3, #5
 8006188:	e008      	b.n	800619c <HAL_GPIO_DeInit+0xd4>
 800618a:	2304      	movs	r3, #4
 800618c:	e006      	b.n	800619c <HAL_GPIO_DeInit+0xd4>
 800618e:	2303      	movs	r3, #3
 8006190:	e004      	b.n	800619c <HAL_GPIO_DeInit+0xd4>
 8006192:	2302      	movs	r3, #2
 8006194:	e002      	b.n	800619c <HAL_GPIO_DeInit+0xd4>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <HAL_GPIO_DeInit+0xd4>
 800619a:	2300      	movs	r3, #0
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	f002 0203 	and.w	r2, r2, #3
 80061a2:	0092      	lsls	r2, r2, #2
 80061a4:	4093      	lsls	r3, r2
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d132      	bne.n	8006212 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80061ac:	4b4b      	ldr	r3, [pc, #300]	; (80062dc <HAL_GPIO_DeInit+0x214>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	43db      	mvns	r3, r3
 80061b4:	4949      	ldr	r1, [pc, #292]	; (80062dc <HAL_GPIO_DeInit+0x214>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80061ba:	4b48      	ldr	r3, [pc, #288]	; (80062dc <HAL_GPIO_DeInit+0x214>)
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	43db      	mvns	r3, r3
 80061c2:	4946      	ldr	r1, [pc, #280]	; (80062dc <HAL_GPIO_DeInit+0x214>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80061c8:	4b44      	ldr	r3, [pc, #272]	; (80062dc <HAL_GPIO_DeInit+0x214>)
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	43db      	mvns	r3, r3
 80061d0:	4942      	ldr	r1, [pc, #264]	; (80062dc <HAL_GPIO_DeInit+0x214>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80061d6:	4b41      	ldr	r3, [pc, #260]	; (80062dc <HAL_GPIO_DeInit+0x214>)
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	43db      	mvns	r3, r3
 80061de:	493f      	ldr	r1, [pc, #252]	; (80062dc <HAL_GPIO_DeInit+0x214>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	220f      	movs	r2, #15
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80061f4:	4a2e      	ldr	r2, [pc, #184]	; (80062b0 <HAL_GPIO_DeInit+0x1e8>)
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	089b      	lsrs	r3, r3, #2
 80061fa:	3302      	adds	r3, #2
 80061fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	43da      	mvns	r2, r3
 8006204:	482a      	ldr	r0, [pc, #168]	; (80062b0 <HAL_GPIO_DeInit+0x1e8>)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	089b      	lsrs	r3, r3, #2
 800620a:	400a      	ands	r2, r1
 800620c:	3302      	adds	r3, #2
 800620e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	2103      	movs	r1, #3
 800621c:	fa01 f303 	lsl.w	r3, r1, r3
 8006220:	43db      	mvns	r3, r3
 8006222:	401a      	ands	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	08da      	lsrs	r2, r3, #3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3208      	adds	r2, #8
 8006230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	220f      	movs	r2, #15
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	43db      	mvns	r3, r3
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	08d2      	lsrs	r2, r2, #3
 8006248:	4019      	ands	r1, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3208      	adds	r2, #8
 800624e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	2103      	movs	r1, #3
 800625c:	fa01 f303 	lsl.w	r3, r1, r3
 8006260:	43db      	mvns	r3, r3
 8006262:	401a      	ands	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	2101      	movs	r1, #1
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	fa01 f303 	lsl.w	r3, r1, r3
 8006274:	43db      	mvns	r3, r3
 8006276:	401a      	ands	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	2103      	movs	r1, #3
 8006286:	fa01 f303 	lsl.w	r3, r1, r3
 800628a:	43db      	mvns	r3, r3
 800628c:	401a      	ands	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	3301      	adds	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b0f      	cmp	r3, #15
 800629c:	f67f af22 	bls.w	80060e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40013800 	.word	0x40013800
 80062b4:	40020000 	.word	0x40020000
 80062b8:	40020400 	.word	0x40020400
 80062bc:	40020800 	.word	0x40020800
 80062c0:	40020c00 	.word	0x40020c00
 80062c4:	40021000 	.word	0x40021000
 80062c8:	40021400 	.word	0x40021400
 80062cc:	40021800 	.word	0x40021800
 80062d0:	40021c00 	.word	0x40021c00
 80062d4:	40022000 	.word	0x40022000
 80062d8:	40022400 	.word	0x40022400
 80062dc:	40013c00 	.word	0x40013c00

080062e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	887b      	ldrh	r3, [r7, #2]
 80062f2:	4013      	ands	r3, r2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062f8:	2301      	movs	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
 80062fc:	e001      	b.n	8006302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006302:	7bfb      	ldrb	r3, [r7, #15]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	807b      	strh	r3, [r7, #2]
 800631c:	4613      	mov	r3, r2
 800631e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006320:	787b      	ldrb	r3, [r7, #1]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006326:	887a      	ldrh	r2, [r7, #2]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800632c:	e003      	b.n	8006336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800632e:	887b      	ldrh	r3, [r7, #2]
 8006330:	041a      	lsls	r2, r3, #16
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	619a      	str	r2, [r3, #24]
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
	...

08006344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e07f      	b.n	8006456 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fd fdc2 	bl	8003ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2224      	movs	r2, #36	; 0x24
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0201 	bic.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006394:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d107      	bne.n	80063be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063ba:	609a      	str	r2, [r3, #8]
 80063bc:	e006      	b.n	80063cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80063ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d104      	bne.n	80063de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6859      	ldr	r1, [r3, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <HAL_I2C_Init+0x11c>)
 80063ea:	430b      	orrs	r3, r1
 80063ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	ea42 0103 	orr.w	r1, r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	021a      	lsls	r2, r3, #8
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69d9      	ldr	r1, [r3, #28]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1a      	ldr	r2, [r3, #32]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0201 	orr.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	02008000 	.word	0x02008000

08006464 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e021      	b.n	80064ba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2224      	movs	r2, #36	; 0x24
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0201 	bic.w	r2, r2, #1
 800648c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fd fda8 	bl	8003fe4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	4608      	mov	r0, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	461a      	mov	r2, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	817b      	strh	r3, [r7, #10]
 80064d6:	460b      	mov	r3, r1
 80064d8:	813b      	strh	r3, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	f040 80f9 	bne.w	80066de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_I2C_Mem_Write+0x34>
 80064f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0ed      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_I2C_Mem_Write+0x4e>
 800650e:	2302      	movs	r3, #2
 8006510:	e0e6      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800651a:	f7fe fa03 	bl	8004924 <HAL_GetTick>
 800651e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	2319      	movs	r3, #25
 8006526:	2201      	movs	r2, #1
 8006528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 fad1 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e0d1      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2221      	movs	r2, #33	; 0x21
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2240      	movs	r2, #64	; 0x40
 8006548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a3a      	ldr	r2, [r7, #32]
 8006556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800655c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006564:	88f8      	ldrh	r0, [r7, #6]
 8006566:	893a      	ldrh	r2, [r7, #8]
 8006568:	8979      	ldrh	r1, [r7, #10]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	4603      	mov	r3, r0
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f9e1 	bl	800693c <I2C_RequestMemoryWrite>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e0a9      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006590:	b29b      	uxth	r3, r3
 8006592:	2bff      	cmp	r3, #255	; 0xff
 8006594:	d90e      	bls.n	80065b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	22ff      	movs	r2, #255	; 0xff
 800659a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	8979      	ldrh	r1, [r7, #10]
 80065a4:	2300      	movs	r3, #0
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 fbb3 	bl	8006d18 <I2C_TransferConfig>
 80065b2:	e00f      	b.n	80065d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	8979      	ldrh	r1, [r7, #10]
 80065c6:	2300      	movs	r3, #0
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 fba2 	bl	8006d18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fabb 	bl	8006b54 <I2C_WaitOnTXISFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e07b      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d034      	beq.n	800668c <HAL_I2C_Mem_Write+0x1c8>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006626:	2b00      	cmp	r3, #0
 8006628:	d130      	bne.n	800668c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	2200      	movs	r2, #0
 8006632:	2180      	movs	r1, #128	; 0x80
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 fa4d 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e04d      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006648:	b29b      	uxth	r3, r3
 800664a:	2bff      	cmp	r3, #255	; 0xff
 800664c:	d90e      	bls.n	800666c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	22ff      	movs	r2, #255	; 0xff
 8006652:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006658:	b2da      	uxtb	r2, r3
 800665a:	8979      	ldrh	r1, [r7, #10]
 800665c:	2300      	movs	r3, #0
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 fb57 	bl	8006d18 <I2C_TransferConfig>
 800666a:	e00f      	b.n	800668c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006670:	b29a      	uxth	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667a:	b2da      	uxtb	r2, r3
 800667c:	8979      	ldrh	r1, [r7, #10]
 800667e:	2300      	movs	r3, #0
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 fb46 	bl	8006d18 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d19e      	bne.n	80065d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fa9a 	bl	8006bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e01a      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2220      	movs	r2, #32
 80066b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6859      	ldr	r1, [r3, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <HAL_I2C_Mem_Write+0x224>)
 80066be:	400b      	ands	r3, r1
 80066c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	e000      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80066de:	2302      	movs	r3, #2
  }
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	fe00e800 	.word	0xfe00e800

080066ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	4608      	mov	r0, r1
 80066f6:	4611      	mov	r1, r2
 80066f8:	461a      	mov	r2, r3
 80066fa:	4603      	mov	r3, r0
 80066fc:	817b      	strh	r3, [r7, #10]
 80066fe:	460b      	mov	r3, r1
 8006700:	813b      	strh	r3, [r7, #8]
 8006702:	4613      	mov	r3, r2
 8006704:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b20      	cmp	r3, #32
 8006710:	f040 80fd 	bne.w	800690e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <HAL_I2C_Mem_Read+0x34>
 800671a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800671c:	2b00      	cmp	r3, #0
 800671e:	d105      	bne.n	800672c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006726:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0f1      	b.n	8006910 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006732:	2b01      	cmp	r3, #1
 8006734:	d101      	bne.n	800673a <HAL_I2C_Mem_Read+0x4e>
 8006736:	2302      	movs	r3, #2
 8006738:	e0ea      	b.n	8006910 <HAL_I2C_Mem_Read+0x224>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006742:	f7fe f8ef 	bl	8004924 <HAL_GetTick>
 8006746:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	2319      	movs	r3, #25
 800674e:	2201      	movs	r2, #1
 8006750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f9bd 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e0d5      	b.n	8006910 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2222      	movs	r2, #34	; 0x22
 8006768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2240      	movs	r2, #64	; 0x40
 8006770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a3a      	ldr	r2, [r7, #32]
 800677e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006784:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800678c:	88f8      	ldrh	r0, [r7, #6]
 800678e:	893a      	ldrh	r2, [r7, #8]
 8006790:	8979      	ldrh	r1, [r7, #10]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	4603      	mov	r3, r0
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f921 	bl	80069e4 <I2C_RequestMemoryRead>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0ad      	b.n	8006910 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2bff      	cmp	r3, #255	; 0xff
 80067bc:	d90e      	bls.n	80067dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	22ff      	movs	r2, #255	; 0xff
 80067c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	8979      	ldrh	r1, [r7, #10]
 80067cc:	4b52      	ldr	r3, [pc, #328]	; (8006918 <HAL_I2C_Mem_Read+0x22c>)
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 fa9f 	bl	8006d18 <I2C_TransferConfig>
 80067da:	e00f      	b.n	80067fc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	8979      	ldrh	r1, [r7, #10]
 80067ee:	4b4a      	ldr	r3, [pc, #296]	; (8006918 <HAL_I2C_Mem_Read+0x22c>)
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fa8e 	bl	8006d18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	2200      	movs	r2, #0
 8006804:	2104      	movs	r1, #4
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f964 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e07c      	b.n	8006910 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d034      	beq.n	80068bc <HAL_I2C_Mem_Read+0x1d0>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006856:	2b00      	cmp	r3, #0
 8006858:	d130      	bne.n	80068bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	2200      	movs	r2, #0
 8006862:	2180      	movs	r1, #128	; 0x80
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 f935 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e04d      	b.n	8006910 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	2bff      	cmp	r3, #255	; 0xff
 800687c:	d90e      	bls.n	800689c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	22ff      	movs	r2, #255	; 0xff
 8006882:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006888:	b2da      	uxtb	r2, r3
 800688a:	8979      	ldrh	r1, [r7, #10]
 800688c:	2300      	movs	r3, #0
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fa3f 	bl	8006d18 <I2C_TransferConfig>
 800689a:	e00f      	b.n	80068bc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	8979      	ldrh	r1, [r7, #10]
 80068ae:	2300      	movs	r3, #0
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fa2e 	bl	8006d18 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d19a      	bne.n	80067fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 f982 	bl	8006bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e01a      	b.n	8006910 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2220      	movs	r2, #32
 80068e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6859      	ldr	r1, [r3, #4]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	4b0b      	ldr	r3, [pc, #44]	; (800691c <HAL_I2C_Mem_Read+0x230>)
 80068ee:	400b      	ands	r3, r1
 80068f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	e000      	b.n	8006910 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800690e:	2302      	movs	r3, #2
  }
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	80002400 	.word	0x80002400
 800691c:	fe00e800 	.word	0xfe00e800

08006920 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800692e:	b2db      	uxtb	r3, r3
}
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af02      	add	r7, sp, #8
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	4608      	mov	r0, r1
 8006946:	4611      	mov	r1, r2
 8006948:	461a      	mov	r2, r3
 800694a:	4603      	mov	r3, r0
 800694c:	817b      	strh	r3, [r7, #10]
 800694e:	460b      	mov	r3, r1
 8006950:	813b      	strh	r3, [r7, #8]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	b2da      	uxtb	r2, r3
 800695a:	8979      	ldrh	r1, [r7, #10]
 800695c:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <I2C_RequestMemoryWrite+0xa4>)
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 f9d7 	bl	8006d18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	69b9      	ldr	r1, [r7, #24]
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f8f0 	bl	8006b54 <I2C_WaitOnTXISFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e02c      	b.n	80069d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800697e:	88fb      	ldrh	r3, [r7, #6]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d105      	bne.n	8006990 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006984:	893b      	ldrh	r3, [r7, #8]
 8006986:	b2da      	uxtb	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	629a      	str	r2, [r3, #40]	; 0x28
 800698e:	e015      	b.n	80069bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006990:	893b      	ldrh	r3, [r7, #8]
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	b29b      	uxth	r3, r3
 8006996:	b2da      	uxtb	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	69b9      	ldr	r1, [r7, #24]
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f8d6 	bl	8006b54 <I2C_WaitOnTXISFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e012      	b.n	80069d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069b2:	893b      	ldrh	r3, [r7, #8]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	2200      	movs	r2, #0
 80069c4:	2180      	movs	r1, #128	; 0x80
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f884 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	80002000 	.word	0x80002000

080069e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	4608      	mov	r0, r1
 80069ee:	4611      	mov	r1, r2
 80069f0:	461a      	mov	r2, r3
 80069f2:	4603      	mov	r3, r0
 80069f4:	817b      	strh	r3, [r7, #10]
 80069f6:	460b      	mov	r3, r1
 80069f8:	813b      	strh	r3, [r7, #8]
 80069fa:	4613      	mov	r3, r2
 80069fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	8979      	ldrh	r1, [r7, #10]
 8006a04:	4b20      	ldr	r3, [pc, #128]	; (8006a88 <I2C_RequestMemoryRead+0xa4>)
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f984 	bl	8006d18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	69b9      	ldr	r1, [r7, #24]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f89d 	bl	8006b54 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e02c      	b.n	8006a7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d105      	bne.n	8006a36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a2a:	893b      	ldrh	r3, [r7, #8]
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	629a      	str	r2, [r3, #40]	; 0x28
 8006a34:	e015      	b.n	8006a62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a36:	893b      	ldrh	r3, [r7, #8]
 8006a38:	0a1b      	lsrs	r3, r3, #8
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a44:	69fa      	ldr	r2, [r7, #28]
 8006a46:	69b9      	ldr	r1, [r7, #24]
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f883 	bl	8006b54 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e012      	b.n	8006a7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a58:	893b      	ldrh	r3, [r7, #8]
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2140      	movs	r1, #64	; 0x40
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f831 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	80002000 	.word	0x80002000

08006a8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d103      	bne.n	8006aaa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d007      	beq.n	8006ac8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0201 	orr.w	r2, r2, #1
 8006ac6:	619a      	str	r2, [r3, #24]
  }
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	603b      	str	r3, [r7, #0]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ae4:	e022      	b.n	8006b2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d01e      	beq.n	8006b2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aee:	f7fd ff19 	bl	8004924 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d113      	bne.n	8006b2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b08:	f043 0220 	orr.w	r2, r3, #32
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e00f      	b.n	8006b4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4013      	ands	r3, r2
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	bf0c      	ite	eq
 8006b3c:	2301      	moveq	r3, #1
 8006b3e:	2300      	movne	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d0cd      	beq.n	8006ae6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b60:	e02c      	b.n	8006bbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 f870 	bl	8006c4c <I2C_IsAcknowledgeFailed>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e02a      	b.n	8006bcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d01e      	beq.n	8006bbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b7e:	f7fd fed1 	bl	8004924 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d302      	bcc.n	8006b94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d113      	bne.n	8006bbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b98:	f043 0220 	orr.w	r2, r3, #32
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e007      	b.n	8006bcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d1cb      	bne.n	8006b62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006be0:	e028      	b.n	8006c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 f830 	bl	8006c4c <I2C_IsAcknowledgeFailed>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e026      	b.n	8006c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf6:	f7fd fe95 	bl	8004924 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d302      	bcc.n	8006c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d113      	bne.n	8006c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c10:	f043 0220 	orr.w	r2, r3, #32
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e007      	b.n	8006c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	2b20      	cmp	r3, #32
 8006c40:	d1cf      	bne.n	8006be2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	d151      	bne.n	8006d0a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c66:	e022      	b.n	8006cae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6e:	d01e      	beq.n	8006cae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c70:	f7fd fe58 	bl	8004924 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d302      	bcc.n	8006c86 <I2C_IsAcknowledgeFailed+0x3a>
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d113      	bne.n	8006cae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8a:	f043 0220 	orr.w	r2, r3, #32
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e02e      	b.n	8006d0c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	f003 0320 	and.w	r3, r3, #32
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d1d5      	bne.n	8006c68 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2210      	movs	r2, #16
 8006cc2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7ff fedd 	bl	8006a8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6859      	ldr	r1, [r3, #4]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <I2C_IsAcknowledgeFailed+0xc8>)
 8006cde:	400b      	ands	r3, r1
 8006ce0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce6:	f043 0204 	orr.w	r2, r3, #4
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	fe00e800 	.word	0xfe00e800

08006d18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	607b      	str	r3, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	817b      	strh	r3, [r7, #10]
 8006d26:	4613      	mov	r3, r2
 8006d28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	0d5b      	lsrs	r3, r3, #21
 8006d34:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006d38:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <I2C_TransferConfig+0x58>)
 8006d3a:	430b      	orrs	r3, r1
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	ea02 0103 	and.w	r1, r2, r3
 8006d42:	897b      	ldrh	r3, [r7, #10]
 8006d44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d48:	7a7b      	ldrb	r3, [r7, #9]
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d50:	431a      	orrs	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	431a      	orrs	r2, r3
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006d62:	bf00      	nop
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	03ff63ff 	.word	0x03ff63ff

08006d74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d138      	bne.n	8006dfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e032      	b.n	8006dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2224      	movs	r2, #36	; 0x24
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0201 	bic.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6819      	ldr	r1, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0201 	orr.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e000      	b.n	8006dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006dfc:	2302      	movs	r3, #2
  }
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d139      	bne.n	8006e94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e033      	b.n	8006e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2224      	movs	r2, #36	; 0x24
 8006e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0201 	bic.w	r2, r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	021b      	lsls	r3, r3, #8
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e000      	b.n	8006e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e94:	2302      	movs	r3, #2
  }
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
	...

08006ea4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e0bf      	b.n	8007036 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fd f8c6 	bl	800405c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699a      	ldr	r2, [r3, #24]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006ee6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6999      	ldr	r1, [r3, #24]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006efc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6899      	ldr	r1, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4b4a      	ldr	r3, [pc, #296]	; (8007040 <HAL_LTDC_Init+0x19c>)
 8006f18:	400b      	ands	r3, r1
 8006f1a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	041b      	lsls	r3, r3, #16
 8006f22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6899      	ldr	r1, [r3, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	431a      	orrs	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68d9      	ldr	r1, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	4b3e      	ldr	r3, [pc, #248]	; (8007040 <HAL_LTDC_Init+0x19c>)
 8006f46:	400b      	ands	r3, r1
 8006f48:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	041b      	lsls	r3, r3, #16
 8006f50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68d9      	ldr	r1, [r3, #12]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a1a      	ldr	r2, [r3, #32]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6919      	ldr	r1, [r3, #16]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	4b33      	ldr	r3, [pc, #204]	; (8007040 <HAL_LTDC_Init+0x19c>)
 8006f74:	400b      	ands	r3, r1
 8006f76:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	041b      	lsls	r3, r3, #16
 8006f7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6919      	ldr	r1, [r3, #16]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6959      	ldr	r1, [r3, #20]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	4b27      	ldr	r3, [pc, #156]	; (8007040 <HAL_LTDC_Init+0x19c>)
 8006fa2:	400b      	ands	r3, r1
 8006fa4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006faa:	041b      	lsls	r3, r3, #16
 8006fac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6959      	ldr	r1, [r3, #20]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fca:	021b      	lsls	r3, r3, #8
 8006fcc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006fd4:	041b      	lsls	r3, r3, #16
 8006fd6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0206 	orr.w	r2, r2, #6
 8007012:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	f000f800 	.word	0xf000f800

08007044 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	d023      	beq.n	80070ae <HAL_LTDC_IRQHandler+0x6a>
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01e      	beq.n	80070ae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0204 	bic.w	r2, r2, #4
 800707e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2204      	movs	r2, #4
 8007086:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800708e:	f043 0201 	orr.w	r2, r3, #1
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2204      	movs	r2, #4
 800709c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f86f 	bl	800718c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d023      	beq.n	8007100 <HAL_LTDC_IRQHandler+0xbc>
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d01e      	beq.n	8007100 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0202 	bic.w	r2, r2, #2
 80070d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2202      	movs	r2, #2
 80070d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070e0:	f043 0202 	orr.w	r2, r3, #2
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2204      	movs	r2, #4
 80070ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f846 	bl	800718c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d01b      	beq.n	8007142 <HAL_LTDC_IRQHandler+0xfe>
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d016      	beq.n	8007142 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0201 	bic.w	r2, r2, #1
 8007122:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2201      	movs	r2, #1
 800712a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f82f 	bl	80071a0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01b      	beq.n	8007184 <HAL_LTDC_IRQHandler+0x140>
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f003 0308 	and.w	r3, r3, #8
 8007152:	2b00      	cmp	r3, #0
 8007154:	d016      	beq.n	8007184 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0208 	bic.w	r2, r2, #8
 8007164:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2208      	movs	r2, #8
 800716c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f818 	bl	80071b4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80071c8:	b5b0      	push	{r4, r5, r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_LTDC_ConfigLayer+0x1a>
 80071de:	2302      	movs	r3, #2
 80071e0:	e02c      	b.n	800723c <HAL_LTDC_ConfigLayer+0x74>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2202      	movs	r2, #2
 80071ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2134      	movs	r1, #52	; 0x34
 80071f8:	fb01 f303 	mul.w	r3, r1, r3
 80071fc:	4413      	add	r3, r2
 80071fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	4614      	mov	r4, r2
 8007206:	461d      	mov	r5, r3
 8007208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800720a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800720c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800720e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f81f 	bl	8007260 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2201      	movs	r2, #1
 8007228:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bdb0      	pop	{r4, r5, r7, pc}

08007244 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007252:	b2db      	uxtb	r3, r3
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007260:	b480      	push	{r7}
 8007262:	b089      	sub	sp, #36	; 0x24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	0c1b      	lsrs	r3, r3, #16
 8007278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800727c:	4413      	add	r3, r2
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	01db      	lsls	r3, r3, #7
 800728c:	4413      	add	r3, r2
 800728e:	3384      	adds	r3, #132	; 0x84
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	6812      	ldr	r2, [r2, #0]
 8007296:	4611      	mov	r1, r2
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	01d2      	lsls	r2, r2, #7
 800729c:	440a      	add	r2, r1
 800729e:	3284      	adds	r2, #132	; 0x84
 80072a0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80072a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	0c1b      	lsrs	r3, r3, #16
 80072b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072b6:	4413      	add	r3, r2
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4619      	mov	r1, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	01db      	lsls	r3, r3, #7
 80072c4:	440b      	add	r3, r1
 80072c6:	3384      	adds	r3, #132	; 0x84
 80072c8:	4619      	mov	r1, r3
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072de:	4413      	add	r3, r2
 80072e0:	041b      	lsls	r3, r3, #16
 80072e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	01db      	lsls	r3, r3, #7
 80072ee:	4413      	add	r3, r2
 80072f0:	3384      	adds	r3, #132	; 0x84
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	6812      	ldr	r2, [r2, #0]
 80072f8:	4611      	mov	r1, r2
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	01d2      	lsls	r2, r2, #7
 80072fe:	440a      	add	r2, r1
 8007300:	3284      	adds	r2, #132	; 0x84
 8007302:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007306:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007316:	4413      	add	r3, r2
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4619      	mov	r1, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	01db      	lsls	r3, r3, #7
 8007324:	440b      	add	r3, r1
 8007326:	3384      	adds	r3, #132	; 0x84
 8007328:	4619      	mov	r1, r3
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4313      	orrs	r3, r2
 800732e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	01db      	lsls	r3, r3, #7
 800733a:	4413      	add	r3, r2
 800733c:	3384      	adds	r3, #132	; 0x84
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	6812      	ldr	r2, [r2, #0]
 8007344:	4611      	mov	r1, r2
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	01d2      	lsls	r2, r2, #7
 800734a:	440a      	add	r2, r1
 800734c:	3284      	adds	r2, #132	; 0x84
 800734e:	f023 0307 	bic.w	r3, r3, #7
 8007352:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	01db      	lsls	r3, r3, #7
 800735e:	4413      	add	r3, r2
 8007360:	3384      	adds	r3, #132	; 0x84
 8007362:	461a      	mov	r2, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007370:	021b      	lsls	r3, r3, #8
 8007372:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800737a:	041b      	lsls	r3, r3, #16
 800737c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	061b      	lsls	r3, r3, #24
 8007384:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	01db      	lsls	r3, r3, #7
 8007390:	4413      	add	r3, r2
 8007392:	3384      	adds	r3, #132	; 0x84
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	01db      	lsls	r3, r3, #7
 80073a0:	4413      	add	r3, r2
 80073a2:	3384      	adds	r3, #132	; 0x84
 80073a4:	461a      	mov	r2, r3
 80073a6:	2300      	movs	r3, #0
 80073a8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073b0:	461a      	mov	r2, r3
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	431a      	orrs	r2, r3
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	431a      	orrs	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	01db      	lsls	r3, r3, #7
 80073c4:	440b      	add	r3, r1
 80073c6:	3384      	adds	r3, #132	; 0x84
 80073c8:	4619      	mov	r1, r3
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	01db      	lsls	r3, r3, #7
 80073da:	4413      	add	r3, r2
 80073dc:	3384      	adds	r3, #132	; 0x84
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	4611      	mov	r1, r2
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	01d2      	lsls	r2, r2, #7
 80073ea:	440a      	add	r2, r1
 80073ec:	3284      	adds	r2, #132	; 0x84
 80073ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	01db      	lsls	r3, r3, #7
 80073fe:	4413      	add	r3, r2
 8007400:	3384      	adds	r3, #132	; 0x84
 8007402:	461a      	mov	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	01db      	lsls	r3, r3, #7
 8007414:	4413      	add	r3, r2
 8007416:	3384      	adds	r3, #132	; 0x84
 8007418:	69da      	ldr	r2, [r3, #28]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4619      	mov	r1, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	01db      	lsls	r3, r3, #7
 8007424:	440b      	add	r3, r1
 8007426:	3384      	adds	r3, #132	; 0x84
 8007428:	4619      	mov	r1, r3
 800742a:	4b58      	ldr	r3, [pc, #352]	; (800758c <LTDC_SetConfig+0x32c>)
 800742c:	4013      	ands	r3, r2
 800742e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	69da      	ldr	r2, [r3, #28]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	68f9      	ldr	r1, [r7, #12]
 800743a:	6809      	ldr	r1, [r1, #0]
 800743c:	4608      	mov	r0, r1
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	01c9      	lsls	r1, r1, #7
 8007442:	4401      	add	r1, r0
 8007444:	3184      	adds	r1, #132	; 0x84
 8007446:	4313      	orrs	r3, r2
 8007448:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	01db      	lsls	r3, r3, #7
 8007454:	4413      	add	r3, r2
 8007456:	3384      	adds	r3, #132	; 0x84
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	01db      	lsls	r3, r3, #7
 8007464:	4413      	add	r3, r2
 8007466:	3384      	adds	r3, #132	; 0x84
 8007468:	461a      	mov	r2, r3
 800746a:	2300      	movs	r3, #0
 800746c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	01db      	lsls	r3, r3, #7
 8007478:	4413      	add	r3, r2
 800747a:	3384      	adds	r3, #132	; 0x84
 800747c:	461a      	mov	r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d102      	bne.n	8007492 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800748c:	2304      	movs	r3, #4
 800748e:	61fb      	str	r3, [r7, #28]
 8007490:	e01b      	b.n	80074ca <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d102      	bne.n	80074a0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800749a:	2303      	movs	r3, #3
 800749c:	61fb      	str	r3, [r7, #28]
 800749e:	e014      	b.n	80074ca <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d00b      	beq.n	80074c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d007      	beq.n	80074c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d003      	beq.n	80074c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80074bc:	2b07      	cmp	r3, #7
 80074be:	d102      	bne.n	80074c6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80074c0:	2302      	movs	r3, #2
 80074c2:	61fb      	str	r3, [r7, #28]
 80074c4:	e001      	b.n	80074ca <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80074c6:	2301      	movs	r3, #1
 80074c8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	01db      	lsls	r3, r3, #7
 80074d4:	4413      	add	r3, r2
 80074d6:	3384      	adds	r3, #132	; 0x84
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	4611      	mov	r1, r2
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	01d2      	lsls	r2, r2, #7
 80074e4:	440a      	add	r2, r1
 80074e6:	3284      	adds	r2, #132	; 0x84
 80074e8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80074ec:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	fb02 f303 	mul.w	r3, r2, r3
 80074f8:	041a      	lsls	r2, r3, #16
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6859      	ldr	r1, [r3, #4]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	1acb      	subs	r3, r1, r3
 8007504:	69f9      	ldr	r1, [r7, #28]
 8007506:	fb01 f303 	mul.w	r3, r1, r3
 800750a:	3303      	adds	r3, #3
 800750c:	68f9      	ldr	r1, [r7, #12]
 800750e:	6809      	ldr	r1, [r1, #0]
 8007510:	4608      	mov	r0, r1
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	01c9      	lsls	r1, r1, #7
 8007516:	4401      	add	r1, r0
 8007518:	3184      	adds	r1, #132	; 0x84
 800751a:	4313      	orrs	r3, r2
 800751c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	01db      	lsls	r3, r3, #7
 8007528:	4413      	add	r3, r2
 800752a:	3384      	adds	r3, #132	; 0x84
 800752c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4619      	mov	r1, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	01db      	lsls	r3, r3, #7
 8007538:	440b      	add	r3, r1
 800753a:	3384      	adds	r3, #132	; 0x84
 800753c:	4619      	mov	r1, r3
 800753e:	4b14      	ldr	r3, [pc, #80]	; (8007590 <LTDC_SetConfig+0x330>)
 8007540:	4013      	ands	r3, r2
 8007542:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	01db      	lsls	r3, r3, #7
 800754e:	4413      	add	r3, r2
 8007550:	3384      	adds	r3, #132	; 0x84
 8007552:	461a      	mov	r2, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	01db      	lsls	r3, r3, #7
 8007564:	4413      	add	r3, r2
 8007566:	3384      	adds	r3, #132	; 0x84
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	6812      	ldr	r2, [r2, #0]
 800756e:	4611      	mov	r1, r2
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	01d2      	lsls	r2, r2, #7
 8007574:	440a      	add	r2, r1
 8007576:	3284      	adds	r2, #132	; 0x84
 8007578:	f043 0301 	orr.w	r3, r3, #1
 800757c:	6013      	str	r3, [r2, #0]
}
 800757e:	bf00      	nop
 8007580:	3724      	adds	r7, #36	; 0x24
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	fffff8f8 	.word	0xfffff8f8
 8007590:	fffff800 	.word	0xfffff800

08007594 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007594:	b480      	push	{r7}
 8007596:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007598:	4b05      	ldr	r3, [pc, #20]	; (80075b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a04      	ldr	r2, [pc, #16]	; (80075b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800759e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075a2:	6013      	str	r3, [r2, #0]
}
 80075a4:	bf00      	nop
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40007000 	.word	0x40007000

080075b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80075be:	4b23      	ldr	r3, [pc, #140]	; (800764c <HAL_PWREx_EnableOverDrive+0x98>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	4a22      	ldr	r2, [pc, #136]	; (800764c <HAL_PWREx_EnableOverDrive+0x98>)
 80075c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c8:	6413      	str	r3, [r2, #64]	; 0x40
 80075ca:	4b20      	ldr	r3, [pc, #128]	; (800764c <HAL_PWREx_EnableOverDrive+0x98>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80075d6:	4b1e      	ldr	r3, [pc, #120]	; (8007650 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a1d      	ldr	r2, [pc, #116]	; (8007650 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075e2:	f7fd f99f 	bl	8004924 <HAL_GetTick>
 80075e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80075e8:	e009      	b.n	80075fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80075ea:	f7fd f99b 	bl	8004924 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075f8:	d901      	bls.n	80075fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e022      	b.n	8007644 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80075fe:	4b14      	ldr	r3, [pc, #80]	; (8007650 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800760a:	d1ee      	bne.n	80075ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800760c:	4b10      	ldr	r3, [pc, #64]	; (8007650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a0f      	ldr	r2, [pc, #60]	; (8007650 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007616:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007618:	f7fd f984 	bl	8004924 <HAL_GetTick>
 800761c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800761e:	e009      	b.n	8007634 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007620:	f7fd f980 	bl	8004924 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800762e:	d901      	bls.n	8007634 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e007      	b.n	8007644 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007634:	4b06      	ldr	r3, [pc, #24]	; (8007650 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007640:	d1ee      	bne.n	8007620 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	40023800 	.word	0x40023800
 8007650:	40007000 	.word	0x40007000

08007654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800765c:	2300      	movs	r3, #0
 800765e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e291      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8087 	beq.w	8007786 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007678:	4b96      	ldr	r3, [pc, #600]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f003 030c 	and.w	r3, r3, #12
 8007680:	2b04      	cmp	r3, #4
 8007682:	d00c      	beq.n	800769e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007684:	4b93      	ldr	r3, [pc, #588]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 030c 	and.w	r3, r3, #12
 800768c:	2b08      	cmp	r3, #8
 800768e:	d112      	bne.n	80076b6 <HAL_RCC_OscConfig+0x62>
 8007690:	4b90      	ldr	r3, [pc, #576]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800769c:	d10b      	bne.n	80076b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800769e:	4b8d      	ldr	r3, [pc, #564]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d06c      	beq.n	8007784 <HAL_RCC_OscConfig+0x130>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d168      	bne.n	8007784 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e26b      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076be:	d106      	bne.n	80076ce <HAL_RCC_OscConfig+0x7a>
 80076c0:	4b84      	ldr	r3, [pc, #528]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a83      	ldr	r2, [pc, #524]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80076c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076ca:	6013      	str	r3, [r2, #0]
 80076cc:	e02e      	b.n	800772c <HAL_RCC_OscConfig+0xd8>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10c      	bne.n	80076f0 <HAL_RCC_OscConfig+0x9c>
 80076d6:	4b7f      	ldr	r3, [pc, #508]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a7e      	ldr	r2, [pc, #504]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80076dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	4b7c      	ldr	r3, [pc, #496]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a7b      	ldr	r2, [pc, #492]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80076e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	e01d      	b.n	800772c <HAL_RCC_OscConfig+0xd8>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076f8:	d10c      	bne.n	8007714 <HAL_RCC_OscConfig+0xc0>
 80076fa:	4b76      	ldr	r3, [pc, #472]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a75      	ldr	r2, [pc, #468]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	4b73      	ldr	r3, [pc, #460]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a72      	ldr	r2, [pc, #456]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 800770c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	e00b      	b.n	800772c <HAL_RCC_OscConfig+0xd8>
 8007714:	4b6f      	ldr	r3, [pc, #444]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a6e      	ldr	r2, [pc, #440]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 800771a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	4b6c      	ldr	r3, [pc, #432]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a6b      	ldr	r2, [pc, #428]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800772a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d013      	beq.n	800775c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007734:	f7fd f8f6 	bl	8004924 <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800773c:	f7fd f8f2 	bl	8004924 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b64      	cmp	r3, #100	; 0x64
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e21f      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800774e:	4b61      	ldr	r3, [pc, #388]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f0      	beq.n	800773c <HAL_RCC_OscConfig+0xe8>
 800775a:	e014      	b.n	8007786 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775c:	f7fd f8e2 	bl	8004924 <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007764:	f7fd f8de 	bl	8004924 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b64      	cmp	r3, #100	; 0x64
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e20b      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007776:	4b57      	ldr	r3, [pc, #348]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f0      	bne.n	8007764 <HAL_RCC_OscConfig+0x110>
 8007782:	e000      	b.n	8007786 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d069      	beq.n	8007866 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007792:	4b50      	ldr	r3, [pc, #320]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 030c 	and.w	r3, r3, #12
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00b      	beq.n	80077b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800779e:	4b4d      	ldr	r3, [pc, #308]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f003 030c 	and.w	r3, r3, #12
 80077a6:	2b08      	cmp	r3, #8
 80077a8:	d11c      	bne.n	80077e4 <HAL_RCC_OscConfig+0x190>
 80077aa:	4b4a      	ldr	r3, [pc, #296]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d116      	bne.n	80077e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077b6:	4b47      	ldr	r3, [pc, #284]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d005      	beq.n	80077ce <HAL_RCC_OscConfig+0x17a>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d001      	beq.n	80077ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e1df      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077ce:	4b41      	ldr	r3, [pc, #260]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	493d      	ldr	r1, [pc, #244]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077e2:	e040      	b.n	8007866 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d023      	beq.n	8007834 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077ec:	4b39      	ldr	r3, [pc, #228]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a38      	ldr	r2, [pc, #224]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80077f2:	f043 0301 	orr.w	r3, r3, #1
 80077f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f8:	f7fd f894 	bl	8004924 <HAL_GetTick>
 80077fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077fe:	e008      	b.n	8007812 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007800:	f7fd f890 	bl	8004924 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b02      	cmp	r3, #2
 800780c:	d901      	bls.n	8007812 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e1bd      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007812:	4b30      	ldr	r3, [pc, #192]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0f0      	beq.n	8007800 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800781e:	4b2d      	ldr	r3, [pc, #180]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	4929      	ldr	r1, [pc, #164]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 800782e:	4313      	orrs	r3, r2
 8007830:	600b      	str	r3, [r1, #0]
 8007832:	e018      	b.n	8007866 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007834:	4b27      	ldr	r3, [pc, #156]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a26      	ldr	r2, [pc, #152]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 800783a:	f023 0301 	bic.w	r3, r3, #1
 800783e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007840:	f7fd f870 	bl	8004924 <HAL_GetTick>
 8007844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007846:	e008      	b.n	800785a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007848:	f7fd f86c 	bl	8004924 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d901      	bls.n	800785a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e199      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800785a:	4b1e      	ldr	r3, [pc, #120]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f0      	bne.n	8007848 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d038      	beq.n	80078e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d019      	beq.n	80078ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800787a:	4b16      	ldr	r3, [pc, #88]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 800787c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800787e:	4a15      	ldr	r2, [pc, #84]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 8007880:	f043 0301 	orr.w	r3, r3, #1
 8007884:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007886:	f7fd f84d 	bl	8004924 <HAL_GetTick>
 800788a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800788c:	e008      	b.n	80078a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800788e:	f7fd f849 	bl	8004924 <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	2b02      	cmp	r3, #2
 800789a:	d901      	bls.n	80078a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e176      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078a0:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80078a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d0f0      	beq.n	800788e <HAL_RCC_OscConfig+0x23a>
 80078ac:	e01a      	b.n	80078e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078ae:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80078b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b2:	4a08      	ldr	r2, [pc, #32]	; (80078d4 <HAL_RCC_OscConfig+0x280>)
 80078b4:	f023 0301 	bic.w	r3, r3, #1
 80078b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ba:	f7fd f833 	bl	8004924 <HAL_GetTick>
 80078be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078c0:	e00a      	b.n	80078d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078c2:	f7fd f82f 	bl	8004924 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d903      	bls.n	80078d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e15c      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
 80078d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078d8:	4b91      	ldr	r3, [pc, #580]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 80078da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1ee      	bne.n	80078c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 80a4 	beq.w	8007a3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078f2:	4b8b      	ldr	r3, [pc, #556]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10d      	bne.n	800791a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80078fe:	4b88      	ldr	r3, [pc, #544]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	4a87      	ldr	r2, [pc, #540]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007908:	6413      	str	r3, [r2, #64]	; 0x40
 800790a:	4b85      	ldr	r3, [pc, #532]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007912:	60bb      	str	r3, [r7, #8]
 8007914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007916:	2301      	movs	r3, #1
 8007918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800791a:	4b82      	ldr	r3, [pc, #520]	; (8007b24 <HAL_RCC_OscConfig+0x4d0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007922:	2b00      	cmp	r3, #0
 8007924:	d118      	bne.n	8007958 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007926:	4b7f      	ldr	r3, [pc, #508]	; (8007b24 <HAL_RCC_OscConfig+0x4d0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a7e      	ldr	r2, [pc, #504]	; (8007b24 <HAL_RCC_OscConfig+0x4d0>)
 800792c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007932:	f7fc fff7 	bl	8004924 <HAL_GetTick>
 8007936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007938:	e008      	b.n	800794c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800793a:	f7fc fff3 	bl	8004924 <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	2b64      	cmp	r3, #100	; 0x64
 8007946:	d901      	bls.n	800794c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e120      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800794c:	4b75      	ldr	r3, [pc, #468]	; (8007b24 <HAL_RCC_OscConfig+0x4d0>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0f0      	beq.n	800793a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d106      	bne.n	800796e <HAL_RCC_OscConfig+0x31a>
 8007960:	4b6f      	ldr	r3, [pc, #444]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007964:	4a6e      	ldr	r2, [pc, #440]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	6713      	str	r3, [r2, #112]	; 0x70
 800796c:	e02d      	b.n	80079ca <HAL_RCC_OscConfig+0x376>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10c      	bne.n	8007990 <HAL_RCC_OscConfig+0x33c>
 8007976:	4b6a      	ldr	r3, [pc, #424]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797a:	4a69      	ldr	r2, [pc, #420]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	6713      	str	r3, [r2, #112]	; 0x70
 8007982:	4b67      	ldr	r3, [pc, #412]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007986:	4a66      	ldr	r2, [pc, #408]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007988:	f023 0304 	bic.w	r3, r3, #4
 800798c:	6713      	str	r3, [r2, #112]	; 0x70
 800798e:	e01c      	b.n	80079ca <HAL_RCC_OscConfig+0x376>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2b05      	cmp	r3, #5
 8007996:	d10c      	bne.n	80079b2 <HAL_RCC_OscConfig+0x35e>
 8007998:	4b61      	ldr	r3, [pc, #388]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 800799a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799c:	4a60      	ldr	r2, [pc, #384]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 800799e:	f043 0304 	orr.w	r3, r3, #4
 80079a2:	6713      	str	r3, [r2, #112]	; 0x70
 80079a4:	4b5e      	ldr	r3, [pc, #376]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 80079a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a8:	4a5d      	ldr	r2, [pc, #372]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 80079aa:	f043 0301 	orr.w	r3, r3, #1
 80079ae:	6713      	str	r3, [r2, #112]	; 0x70
 80079b0:	e00b      	b.n	80079ca <HAL_RCC_OscConfig+0x376>
 80079b2:	4b5b      	ldr	r3, [pc, #364]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 80079b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b6:	4a5a      	ldr	r2, [pc, #360]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 80079b8:	f023 0301 	bic.w	r3, r3, #1
 80079bc:	6713      	str	r3, [r2, #112]	; 0x70
 80079be:	4b58      	ldr	r3, [pc, #352]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	4a57      	ldr	r2, [pc, #348]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 80079c4:	f023 0304 	bic.w	r3, r3, #4
 80079c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d015      	beq.n	80079fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d2:	f7fc ffa7 	bl	8004924 <HAL_GetTick>
 80079d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079d8:	e00a      	b.n	80079f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079da:	f7fc ffa3 	bl	8004924 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e0ce      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f0:	4b4b      	ldr	r3, [pc, #300]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 80079f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0ee      	beq.n	80079da <HAL_RCC_OscConfig+0x386>
 80079fc:	e014      	b.n	8007a28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079fe:	f7fc ff91 	bl	8004924 <HAL_GetTick>
 8007a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a04:	e00a      	b.n	8007a1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a06:	f7fc ff8d 	bl	8004924 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d901      	bls.n	8007a1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e0b8      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a1c:	4b40      	ldr	r3, [pc, #256]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1ee      	bne.n	8007a06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d105      	bne.n	8007a3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a2e:	4b3c      	ldr	r3, [pc, #240]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	4a3b      	ldr	r2, [pc, #236]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 80a4 	beq.w	8007b8c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a44:	4b36      	ldr	r3, [pc, #216]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 030c 	and.w	r3, r3, #12
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d06b      	beq.n	8007b28 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d149      	bne.n	8007aec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a58:	4b31      	ldr	r3, [pc, #196]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a30      	ldr	r2, [pc, #192]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a64:	f7fc ff5e 	bl	8004924 <HAL_GetTick>
 8007a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a6a:	e008      	b.n	8007a7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a6c:	f7fc ff5a 	bl	8004924 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e087      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a7e:	4b28      	ldr	r3, [pc, #160]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1f0      	bne.n	8007a6c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	69da      	ldr	r2, [r3, #28]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	431a      	orrs	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	019b      	lsls	r3, r3, #6
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa0:	085b      	lsrs	r3, r3, #1
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	041b      	lsls	r3, r3, #16
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	061b      	lsls	r3, r3, #24
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	4a1b      	ldr	r2, [pc, #108]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007ab2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ab6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ab8:	4b19      	ldr	r3, [pc, #100]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a18      	ldr	r2, [pc, #96]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac4:	f7fc ff2e 	bl	8004924 <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007acc:	f7fc ff2a 	bl	8004924 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e057      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ade:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0f0      	beq.n	8007acc <HAL_RCC_OscConfig+0x478>
 8007aea:	e04f      	b.n	8007b8c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aec:	4b0c      	ldr	r3, [pc, #48]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0b      	ldr	r2, [pc, #44]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af8:	f7fc ff14 	bl	8004924 <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b00:	f7fc ff10 	bl	8004924 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e03d      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b12:	4b03      	ldr	r3, [pc, #12]	; (8007b20 <HAL_RCC_OscConfig+0x4cc>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <HAL_RCC_OscConfig+0x4ac>
 8007b1e:	e035      	b.n	8007b8c <HAL_RCC_OscConfig+0x538>
 8007b20:	40023800 	.word	0x40023800
 8007b24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007b28:	4b1b      	ldr	r3, [pc, #108]	; (8007b98 <HAL_RCC_OscConfig+0x544>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d028      	beq.n	8007b88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d121      	bne.n	8007b88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d11a      	bne.n	8007b88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b58:	4013      	ands	r3, r2
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d111      	bne.n	8007b88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	085b      	lsrs	r3, r3, #1
 8007b70:	3b01      	subs	r3, #1
 8007b72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d107      	bne.n	8007b88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d001      	beq.n	8007b8c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e000      	b.n	8007b8e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40023800 	.word	0x40023800

08007b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e0d0      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007bb4:	4b6a      	ldr	r3, [pc, #424]	; (8007d60 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 030f 	and.w	r3, r3, #15
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d910      	bls.n	8007be4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bc2:	4b67      	ldr	r3, [pc, #412]	; (8007d60 <HAL_RCC_ClockConfig+0x1c4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f023 020f 	bic.w	r2, r3, #15
 8007bca:	4965      	ldr	r1, [pc, #404]	; (8007d60 <HAL_RCC_ClockConfig+0x1c4>)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bd2:	4b63      	ldr	r3, [pc, #396]	; (8007d60 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 030f 	and.w	r3, r3, #15
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d001      	beq.n	8007be4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e0b8      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d020      	beq.n	8007c32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bfc:	4b59      	ldr	r3, [pc, #356]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	4a58      	ldr	r2, [pc, #352]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d005      	beq.n	8007c20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c14:	4b53      	ldr	r3, [pc, #332]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	4a52      	ldr	r2, [pc, #328]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c20:	4b50      	ldr	r3, [pc, #320]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	494d      	ldr	r1, [pc, #308]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d040      	beq.n	8007cc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d107      	bne.n	8007c56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c46:	4b47      	ldr	r3, [pc, #284]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d115      	bne.n	8007c7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e07f      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d107      	bne.n	8007c6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c5e:	4b41      	ldr	r3, [pc, #260]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e073      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c6e:	4b3d      	ldr	r3, [pc, #244]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e06b      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c7e:	4b39      	ldr	r3, [pc, #228]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f023 0203 	bic.w	r2, r3, #3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	4936      	ldr	r1, [pc, #216]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c90:	f7fc fe48 	bl	8004924 <HAL_GetTick>
 8007c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c96:	e00a      	b.n	8007cae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c98:	f7fc fe44 	bl	8004924 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e053      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cae:	4b2d      	ldr	r3, [pc, #180]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 020c 	and.w	r2, r3, #12
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d1eb      	bne.n	8007c98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cc0:	4b27      	ldr	r3, [pc, #156]	; (8007d60 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 030f 	and.w	r3, r3, #15
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d210      	bcs.n	8007cf0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cce:	4b24      	ldr	r3, [pc, #144]	; (8007d60 <HAL_RCC_ClockConfig+0x1c4>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f023 020f 	bic.w	r2, r3, #15
 8007cd6:	4922      	ldr	r1, [pc, #136]	; (8007d60 <HAL_RCC_ClockConfig+0x1c4>)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cde:	4b20      	ldr	r3, [pc, #128]	; (8007d60 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 030f 	and.w	r3, r3, #15
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d001      	beq.n	8007cf0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e032      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d008      	beq.n	8007d0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cfc:	4b19      	ldr	r3, [pc, #100]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	4916      	ldr	r1, [pc, #88]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d009      	beq.n	8007d2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	490e      	ldr	r1, [pc, #56]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d2e:	f000 f821 	bl	8007d74 <HAL_RCC_GetSysClockFreq>
 8007d32:	4602      	mov	r2, r0
 8007d34:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <HAL_RCC_ClockConfig+0x1c8>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	091b      	lsrs	r3, r3, #4
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	490a      	ldr	r1, [pc, #40]	; (8007d68 <HAL_RCC_ClockConfig+0x1cc>)
 8007d40:	5ccb      	ldrb	r3, [r1, r3]
 8007d42:	fa22 f303 	lsr.w	r3, r2, r3
 8007d46:	4a09      	ldr	r2, [pc, #36]	; (8007d6c <HAL_RCC_ClockConfig+0x1d0>)
 8007d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007d4a:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <HAL_RCC_ClockConfig+0x1d4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fc fcee 	bl	8004730 <HAL_InitTick>

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	40023c00 	.word	0x40023c00
 8007d64:	40023800 	.word	0x40023800
 8007d68:	0800fd64 	.word	0x0800fd64
 8007d6c:	20000048 	.word	0x20000048
 8007d70:	2000004c 	.word	0x2000004c

08007d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d74:	b5b0      	push	{r4, r5, r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	6079      	str	r1, [r7, #4]
 8007d7e:	2100      	movs	r1, #0
 8007d80:	60f9      	str	r1, [r7, #12]
 8007d82:	2100      	movs	r1, #0
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007d86:	2100      	movs	r1, #0
 8007d88:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d8a:	4952      	ldr	r1, [pc, #328]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d8c:	6889      	ldr	r1, [r1, #8]
 8007d8e:	f001 010c 	and.w	r1, r1, #12
 8007d92:	2908      	cmp	r1, #8
 8007d94:	d00d      	beq.n	8007db2 <HAL_RCC_GetSysClockFreq+0x3e>
 8007d96:	2908      	cmp	r1, #8
 8007d98:	f200 8094 	bhi.w	8007ec4 <HAL_RCC_GetSysClockFreq+0x150>
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	d002      	beq.n	8007da6 <HAL_RCC_GetSysClockFreq+0x32>
 8007da0:	2904      	cmp	r1, #4
 8007da2:	d003      	beq.n	8007dac <HAL_RCC_GetSysClockFreq+0x38>
 8007da4:	e08e      	b.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007da6:	4b4c      	ldr	r3, [pc, #304]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x164>)
 8007da8:	60bb      	str	r3, [r7, #8]
      break;
 8007daa:	e08e      	b.n	8007eca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dac:	4b4b      	ldr	r3, [pc, #300]	; (8007edc <HAL_RCC_GetSysClockFreq+0x168>)
 8007dae:	60bb      	str	r3, [r7, #8]
      break;
 8007db0:	e08b      	b.n	8007eca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007db2:	4948      	ldr	r1, [pc, #288]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007db4:	6849      	ldr	r1, [r1, #4]
 8007db6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007dba:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007dbc:	4945      	ldr	r1, [pc, #276]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007dbe:	6849      	ldr	r1, [r1, #4]
 8007dc0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	d024      	beq.n	8007e12 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dc8:	4942      	ldr	r1, [pc, #264]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007dca:	6849      	ldr	r1, [r1, #4]
 8007dcc:	0989      	lsrs	r1, r1, #6
 8007dce:	4608      	mov	r0, r1
 8007dd0:	f04f 0100 	mov.w	r1, #0
 8007dd4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007dd8:	f04f 0500 	mov.w	r5, #0
 8007ddc:	ea00 0204 	and.w	r2, r0, r4
 8007de0:	ea01 0305 	and.w	r3, r1, r5
 8007de4:	493d      	ldr	r1, [pc, #244]	; (8007edc <HAL_RCC_GetSysClockFreq+0x168>)
 8007de6:	fb01 f003 	mul.w	r0, r1, r3
 8007dea:	2100      	movs	r1, #0
 8007dec:	fb01 f102 	mul.w	r1, r1, r2
 8007df0:	1844      	adds	r4, r0, r1
 8007df2:	493a      	ldr	r1, [pc, #232]	; (8007edc <HAL_RCC_GetSysClockFreq+0x168>)
 8007df4:	fba2 0101 	umull	r0, r1, r2, r1
 8007df8:	1863      	adds	r3, r4, r1
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f04f 0300 	mov.w	r3, #0
 8007e04:	f7f8 fa04 	bl	8000210 <__aeabi_uldivmod>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	e04a      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e12:	4b30      	ldr	r3, [pc, #192]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	099b      	lsrs	r3, r3, #6
 8007e18:	461a      	mov	r2, r3
 8007e1a:	f04f 0300 	mov.w	r3, #0
 8007e1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e22:	f04f 0100 	mov.w	r1, #0
 8007e26:	ea02 0400 	and.w	r4, r2, r0
 8007e2a:	ea03 0501 	and.w	r5, r3, r1
 8007e2e:	4620      	mov	r0, r4
 8007e30:	4629      	mov	r1, r5
 8007e32:	f04f 0200 	mov.w	r2, #0
 8007e36:	f04f 0300 	mov.w	r3, #0
 8007e3a:	014b      	lsls	r3, r1, #5
 8007e3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e40:	0142      	lsls	r2, r0, #5
 8007e42:	4610      	mov	r0, r2
 8007e44:	4619      	mov	r1, r3
 8007e46:	1b00      	subs	r0, r0, r4
 8007e48:	eb61 0105 	sbc.w	r1, r1, r5
 8007e4c:	f04f 0200 	mov.w	r2, #0
 8007e50:	f04f 0300 	mov.w	r3, #0
 8007e54:	018b      	lsls	r3, r1, #6
 8007e56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e5a:	0182      	lsls	r2, r0, #6
 8007e5c:	1a12      	subs	r2, r2, r0
 8007e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e62:	f04f 0000 	mov.w	r0, #0
 8007e66:	f04f 0100 	mov.w	r1, #0
 8007e6a:	00d9      	lsls	r1, r3, #3
 8007e6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e70:	00d0      	lsls	r0, r2, #3
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	1912      	adds	r2, r2, r4
 8007e78:	eb45 0303 	adc.w	r3, r5, r3
 8007e7c:	f04f 0000 	mov.w	r0, #0
 8007e80:	f04f 0100 	mov.w	r1, #0
 8007e84:	0299      	lsls	r1, r3, #10
 8007e86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e8a:	0290      	lsls	r0, r2, #10
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4610      	mov	r0, r2
 8007e92:	4619      	mov	r1, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f04f 0300 	mov.w	r3, #0
 8007e9c:	f7f8 f9b8 	bl	8000210 <__aeabi_uldivmod>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	0c1b      	lsrs	r3, r3, #16
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec0:	60bb      	str	r3, [r7, #8]
      break;
 8007ec2:	e002      	b.n	8007eca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ec4:	4b04      	ldr	r3, [pc, #16]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x164>)
 8007ec6:	60bb      	str	r3, [r7, #8]
      break;
 8007ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007eca:	68bb      	ldr	r3, [r7, #8]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ed4:	40023800 	.word	0x40023800
 8007ed8:	00f42400 	.word	0x00f42400
 8007edc:	017d7840 	.word	0x017d7840

08007ee0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ee4:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	20000048 	.word	0x20000048

08007ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007efc:	f7ff fff0 	bl	8007ee0 <HAL_RCC_GetHCLKFreq>
 8007f00:	4602      	mov	r2, r0
 8007f02:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	0a9b      	lsrs	r3, r3, #10
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	4903      	ldr	r1, [pc, #12]	; (8007f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f0e:	5ccb      	ldrb	r3, [r1, r3]
 8007f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	40023800 	.word	0x40023800
 8007f1c:	0800fd74 	.word	0x0800fd74

08007f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f24:	f7ff ffdc 	bl	8007ee0 <HAL_RCC_GetHCLKFreq>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	0b5b      	lsrs	r3, r3, #13
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	4903      	ldr	r1, [pc, #12]	; (8007f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f36:	5ccb      	ldrb	r3, [r1, r3]
 8007f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	40023800 	.word	0x40023800
 8007f44:	0800fd74 	.word	0x0800fd74

08007f48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	220f      	movs	r2, #15
 8007f56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f58:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f003 0203 	and.w	r2, r3, #3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007f64:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007f70:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007f7c:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	08db      	lsrs	r3, r3, #3
 8007f82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f8a:	4b07      	ldr	r3, [pc, #28]	; (8007fa8 <HAL_RCC_GetClockConfig+0x60>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 020f 	and.w	r2, r3, #15
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	601a      	str	r2, [r3, #0]
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	40023800 	.word	0x40023800
 8007fa8:	40023c00 	.word	0x40023c00

08007fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d012      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007fd4:	4b69      	ldr	r3, [pc, #420]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	4a68      	ldr	r2, [pc, #416]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007fde:	6093      	str	r3, [r2, #8]
 8007fe0:	4b66      	ldr	r3, [pc, #408]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe8:	4964      	ldr	r1, [pc, #400]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d017      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008006:	4b5d      	ldr	r3, [pc, #372]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800800c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008014:	4959      	ldr	r1, [pc, #356]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008016:	4313      	orrs	r3, r2
 8008018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008024:	d101      	bne.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008026:	2301      	movs	r3, #1
 8008028:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008032:	2301      	movs	r3, #1
 8008034:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d017      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008042:	4b4e      	ldr	r3, [pc, #312]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008048:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008050:	494a      	ldr	r1, [pc, #296]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008052:	4313      	orrs	r3, r2
 8008054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008060:	d101      	bne.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008062:	2301      	movs	r3, #1
 8008064:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800806e:	2301      	movs	r3, #1
 8008070:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800807e:	2301      	movs	r3, #1
 8008080:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0320 	and.w	r3, r3, #32
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 808b 	beq.w	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008090:	4b3a      	ldr	r3, [pc, #232]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008094:	4a39      	ldr	r2, [pc, #228]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800809a:	6413      	str	r3, [r2, #64]	; 0x40
 800809c:	4b37      	ldr	r3, [pc, #220]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800809e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80080a8:	4b35      	ldr	r3, [pc, #212]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a34      	ldr	r2, [pc, #208]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b4:	f7fc fc36 	bl	8004924 <HAL_GetTick>
 80080b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80080ba:	e008      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080bc:	f7fc fc32 	bl	8004924 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	2b64      	cmp	r3, #100	; 0x64
 80080c8:	d901      	bls.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e355      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80080ce:	4b2c      	ldr	r3, [pc, #176]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0f0      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80080da:	4b28      	ldr	r3, [pc, #160]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d035      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d02e      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080f8:	4b20      	ldr	r3, [pc, #128]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008100:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008102:	4b1e      	ldr	r3, [pc, #120]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008106:	4a1d      	ldr	r2, [pc, #116]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800810c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800810e:	4b1b      	ldr	r3, [pc, #108]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008112:	4a1a      	ldr	r2, [pc, #104]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008118:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800811a:	4a18      	ldr	r2, [pc, #96]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008120:	4b16      	ldr	r3, [pc, #88]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b01      	cmp	r3, #1
 800812a:	d114      	bne.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800812c:	f7fc fbfa 	bl	8004924 <HAL_GetTick>
 8008130:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008132:	e00a      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008134:	f7fc fbf6 	bl	8004924 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008142:	4293      	cmp	r3, r2
 8008144:	d901      	bls.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e317      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800814a:	4b0c      	ldr	r3, [pc, #48]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800814c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0ee      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800815e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008162:	d111      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008164:	4b05      	ldr	r3, [pc, #20]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008170:	4b04      	ldr	r3, [pc, #16]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008172:	400b      	ands	r3, r1
 8008174:	4901      	ldr	r1, [pc, #4]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008176:	4313      	orrs	r3, r2
 8008178:	608b      	str	r3, [r1, #8]
 800817a:	e00b      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800817c:	40023800 	.word	0x40023800
 8008180:	40007000 	.word	0x40007000
 8008184:	0ffffcff 	.word	0x0ffffcff
 8008188:	4bb0      	ldr	r3, [pc, #704]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	4aaf      	ldr	r2, [pc, #700]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800818e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008192:	6093      	str	r3, [r2, #8]
 8008194:	4bad      	ldr	r3, [pc, #692]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008196:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081a0:	49aa      	ldr	r1, [pc, #680]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0310 	and.w	r3, r3, #16
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d010      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081b2:	4ba6      	ldr	r3, [pc, #664]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b8:	4aa4      	ldr	r2, [pc, #656]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80081c2:	4ba2      	ldr	r3, [pc, #648]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081cc:	499f      	ldr	r1, [pc, #636]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081e0:	4b9a      	ldr	r3, [pc, #616]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ee:	4997      	ldr	r1, [pc, #604]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008202:	4b92      	ldr	r3, [pc, #584]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008208:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008210:	498e      	ldr	r1, [pc, #568]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008212:	4313      	orrs	r3, r2
 8008214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00a      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008224:	4b89      	ldr	r3, [pc, #548]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800822a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008232:	4986      	ldr	r1, [pc, #536]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008234:	4313      	orrs	r3, r2
 8008236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00a      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008246:	4b81      	ldr	r3, [pc, #516]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800824c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008254:	497d      	ldr	r1, [pc, #500]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008256:	4313      	orrs	r3, r2
 8008258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008268:	4b78      	ldr	r3, [pc, #480]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800826a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800826e:	f023 0203 	bic.w	r2, r3, #3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008276:	4975      	ldr	r1, [pc, #468]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008278:	4313      	orrs	r3, r2
 800827a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800828a:	4b70      	ldr	r3, [pc, #448]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800828c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008290:	f023 020c 	bic.w	r2, r3, #12
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008298:	496c      	ldr	r1, [pc, #432]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800829a:	4313      	orrs	r3, r2
 800829c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082ac:	4b67      	ldr	r3, [pc, #412]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ba:	4964      	ldr	r1, [pc, #400]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80082ce:	4b5f      	ldr	r3, [pc, #380]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082dc:	495b      	ldr	r1, [pc, #364]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00a      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80082f0:	4b56      	ldr	r3, [pc, #344]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fe:	4953      	ldr	r1, [pc, #332]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008300:	4313      	orrs	r3, r2
 8008302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00a      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008312:	4b4e      	ldr	r3, [pc, #312]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008318:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008320:	494a      	ldr	r1, [pc, #296]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008322:	4313      	orrs	r3, r2
 8008324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00a      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008334:	4b45      	ldr	r3, [pc, #276]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800833a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008342:	4942      	ldr	r1, [pc, #264]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008344:	4313      	orrs	r3, r2
 8008346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00a      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008356:	4b3d      	ldr	r3, [pc, #244]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008364:	4939      	ldr	r1, [pc, #228]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00a      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008378:	4b34      	ldr	r3, [pc, #208]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800837a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008386:	4931      	ldr	r1, [pc, #196]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008388:	4313      	orrs	r3, r2
 800838a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d011      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800839a:	4b2c      	ldr	r3, [pc, #176]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800839c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a8:	4928      	ldr	r1, [pc, #160]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083b8:	d101      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80083ba:	2301      	movs	r3, #1
 80083bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80083ca:	2301      	movs	r3, #1
 80083cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083da:	4b1c      	ldr	r3, [pc, #112]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083e8:	4918      	ldr	r1, [pc, #96]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80083fc:	4b13      	ldr	r3, [pc, #76]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008402:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800840c:	490f      	ldr	r1, [pc, #60]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d005      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008422:	f040 80d8 	bne.w	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008426:	4b09      	ldr	r3, [pc, #36]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a08      	ldr	r2, [pc, #32]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800842c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008432:	f7fc fa77 	bl	8004924 <HAL_GetTick>
 8008436:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008438:	e00a      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800843a:	f7fc fa73 	bl	8004924 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	2b64      	cmp	r3, #100	; 0x64
 8008446:	d903      	bls.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e196      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800844c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008450:	4b6c      	ldr	r3, [pc, #432]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1ee      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	d021      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846c:	2b00      	cmp	r3, #0
 800846e:	d11d      	bne.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008470:	4b64      	ldr	r3, [pc, #400]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008476:	0c1b      	lsrs	r3, r3, #16
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800847e:	4b61      	ldr	r3, [pc, #388]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008484:	0e1b      	lsrs	r3, r3, #24
 8008486:	f003 030f 	and.w	r3, r3, #15
 800848a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	019a      	lsls	r2, r3, #6
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	041b      	lsls	r3, r3, #16
 8008496:	431a      	orrs	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	061b      	lsls	r3, r3, #24
 800849c:	431a      	orrs	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	071b      	lsls	r3, r3, #28
 80084a4:	4957      	ldr	r1, [pc, #348]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d004      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084c0:	d00a      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d02e      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084d6:	d129      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80084d8:	4b4a      	ldr	r3, [pc, #296]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084de:	0c1b      	lsrs	r3, r3, #16
 80084e0:	f003 0303 	and.w	r3, r3, #3
 80084e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80084e6:	4b47      	ldr	r3, [pc, #284]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ec:	0f1b      	lsrs	r3, r3, #28
 80084ee:	f003 0307 	and.w	r3, r3, #7
 80084f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	019a      	lsls	r2, r3, #6
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	041b      	lsls	r3, r3, #16
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	061b      	lsls	r3, r3, #24
 8008506:	431a      	orrs	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	071b      	lsls	r3, r3, #28
 800850c:	493d      	ldr	r1, [pc, #244]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800850e:	4313      	orrs	r3, r2
 8008510:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008514:	4b3b      	ldr	r3, [pc, #236]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800851a:	f023 021f 	bic.w	r2, r3, #31
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	3b01      	subs	r3, #1
 8008524:	4937      	ldr	r1, [pc, #220]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008526:	4313      	orrs	r3, r2
 8008528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01d      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008538:	4b32      	ldr	r3, [pc, #200]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800853a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800853e:	0e1b      	lsrs	r3, r3, #24
 8008540:	f003 030f 	and.w	r3, r3, #15
 8008544:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008546:	4b2f      	ldr	r3, [pc, #188]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800854c:	0f1b      	lsrs	r3, r3, #28
 800854e:	f003 0307 	and.w	r3, r3, #7
 8008552:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	019a      	lsls	r2, r3, #6
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	041b      	lsls	r3, r3, #16
 8008560:	431a      	orrs	r2, r3
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	061b      	lsls	r3, r3, #24
 8008566:	431a      	orrs	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	071b      	lsls	r3, r3, #28
 800856c:	4925      	ldr	r1, [pc, #148]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800856e:	4313      	orrs	r3, r2
 8008570:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d011      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	019a      	lsls	r2, r3, #6
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	041b      	lsls	r3, r3, #16
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	061b      	lsls	r3, r3, #24
 8008594:	431a      	orrs	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	071b      	lsls	r3, r3, #28
 800859c:	4919      	ldr	r1, [pc, #100]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80085a4:	4b17      	ldr	r3, [pc, #92]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a16      	ldr	r2, [pc, #88]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085b0:	f7fc f9b8 	bl	8004924 <HAL_GetTick>
 80085b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085b6:	e008      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80085b8:	f7fc f9b4 	bl	8004924 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b64      	cmp	r3, #100	; 0x64
 80085c4:	d901      	bls.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e0d7      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085ca:	4b0e      	ldr	r3, [pc, #56]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0f0      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	f040 80cd 	bne.w	8008778 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80085de:	4b09      	ldr	r3, [pc, #36]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a08      	ldr	r2, [pc, #32]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ea:	f7fc f99b 	bl	8004924 <HAL_GetTick>
 80085ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80085f0:	e00a      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80085f2:	f7fc f997 	bl	8004924 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b64      	cmp	r3, #100	; 0x64
 80085fe:	d903      	bls.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e0ba      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008604:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008608:	4b5e      	ldr	r3, [pc, #376]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008614:	d0ed      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008626:	2b00      	cmp	r3, #0
 8008628:	d009      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008632:	2b00      	cmp	r3, #0
 8008634:	d02e      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	2b00      	cmp	r3, #0
 800863c:	d12a      	bne.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800863e:	4b51      	ldr	r3, [pc, #324]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008644:	0c1b      	lsrs	r3, r3, #16
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800864c:	4b4d      	ldr	r3, [pc, #308]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800864e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008652:	0f1b      	lsrs	r3, r3, #28
 8008654:	f003 0307 	and.w	r3, r3, #7
 8008658:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	019a      	lsls	r2, r3, #6
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	041b      	lsls	r3, r3, #16
 8008664:	431a      	orrs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	061b      	lsls	r3, r3, #24
 800866c:	431a      	orrs	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	071b      	lsls	r3, r3, #28
 8008672:	4944      	ldr	r1, [pc, #272]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008674:	4313      	orrs	r3, r2
 8008676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800867a:	4b42      	ldr	r3, [pc, #264]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800867c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008680:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	3b01      	subs	r3, #1
 800868a:	021b      	lsls	r3, r3, #8
 800868c:	493d      	ldr	r1, [pc, #244]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800868e:	4313      	orrs	r3, r2
 8008690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d022      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086a8:	d11d      	bne.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80086aa:	4b36      	ldr	r3, [pc, #216]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b0:	0e1b      	lsrs	r3, r3, #24
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80086b8:	4b32      	ldr	r3, [pc, #200]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086be:	0f1b      	lsrs	r3, r3, #28
 80086c0:	f003 0307 	and.w	r3, r3, #7
 80086c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	019a      	lsls	r2, r3, #6
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	041b      	lsls	r3, r3, #16
 80086d2:	431a      	orrs	r2, r3
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	061b      	lsls	r3, r3, #24
 80086d8:	431a      	orrs	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	071b      	lsls	r3, r3, #28
 80086de:	4929      	ldr	r1, [pc, #164]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0308 	and.w	r3, r3, #8
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d028      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80086f2:	4b24      	ldr	r3, [pc, #144]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f8:	0e1b      	lsrs	r3, r3, #24
 80086fa:	f003 030f 	and.w	r3, r3, #15
 80086fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008700:	4b20      	ldr	r3, [pc, #128]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008706:	0c1b      	lsrs	r3, r3, #16
 8008708:	f003 0303 	and.w	r3, r3, #3
 800870c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	019a      	lsls	r2, r3, #6
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	041b      	lsls	r3, r3, #16
 8008718:	431a      	orrs	r2, r3
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	061b      	lsls	r3, r3, #24
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	071b      	lsls	r3, r3, #28
 8008726:	4917      	ldr	r1, [pc, #92]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008728:	4313      	orrs	r3, r2
 800872a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800872e:	4b15      	ldr	r3, [pc, #84]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	4911      	ldr	r1, [pc, #68]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800873e:	4313      	orrs	r3, r2
 8008740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008744:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a0e      	ldr	r2, [pc, #56]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800874a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800874e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008750:	f7fc f8e8 	bl	8004924 <HAL_GetTick>
 8008754:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008756:	e008      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008758:	f7fc f8e4 	bl	8004924 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b64      	cmp	r3, #100	; 0x64
 8008764:	d901      	bls.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e007      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800876a:	4b06      	ldr	r3, [pc, #24]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008776:	d1ef      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3720      	adds	r7, #32
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	40023800 	.word	0x40023800

08008788 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e06b      	b.n	8008872 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	7f5b      	ldrb	r3, [r3, #29]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d105      	bne.n	80087b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7fb fd1e 	bl	80041ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	22ca      	movs	r2, #202	; 0xca
 80087bc:	625a      	str	r2, [r3, #36]	; 0x24
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2253      	movs	r2, #83	; 0x53
 80087c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fb00 	bl	8008dcc <RTC_EnterInitMode>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d008      	beq.n	80087e4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	22ff      	movs	r2, #255	; 0xff
 80087d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2204      	movs	r2, #4
 80087de:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e046      	b.n	8008872 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6899      	ldr	r1, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b23      	ldr	r3, [pc, #140]	; (800887c <HAL_RTC_Init+0xf4>)
 80087f0:	400b      	ands	r3, r1
 80087f2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6899      	ldr	r1, [r3, #8]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	431a      	orrs	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	68d2      	ldr	r2, [r2, #12]
 800881a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6919      	ldr	r1, [r3, #16]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	041a      	lsls	r2, r3, #16
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800883e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 0208 	bic.w	r2, r2, #8
 800884e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	699a      	ldr	r2, [r3, #24]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	22ff      	movs	r2, #255	; 0xff
 8008868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008870:	2300      	movs	r3, #0
  }
}
 8008872:	4618      	mov	r0, r3
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	ff8fffbf 	.word	0xff8fffbf

08008880 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008880:	b590      	push	{r4, r7, lr}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	7f1b      	ldrb	r3, [r3, #28]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d101      	bne.n	800889c <HAL_RTC_SetTime+0x1c>
 8008898:	2302      	movs	r3, #2
 800889a:	e0a8      	b.n	80089ee <HAL_RTC_SetTime+0x16e>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2202      	movs	r2, #2
 80088a6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d126      	bne.n	80088fc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d102      	bne.n	80088c2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2200      	movs	r2, #0
 80088c0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 faac 	bl	8008e24 <RTC_ByteToBcd2>
 80088cc:	4603      	mov	r3, r0
 80088ce:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	785b      	ldrb	r3, [r3, #1]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 faa5 	bl	8008e24 <RTC_ByteToBcd2>
 80088da:	4603      	mov	r3, r0
 80088dc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80088de:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	789b      	ldrb	r3, [r3, #2]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fa9d 	bl	8008e24 <RTC_ByteToBcd2>
 80088ea:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80088ec:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	7b1b      	ldrb	r3, [r3, #12]
 80088f4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80088f6:	4313      	orrs	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]
 80088fa:	e018      	b.n	800892e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008906:	2b00      	cmp	r3, #0
 8008908:	d102      	bne.n	8008910 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2200      	movs	r2, #0
 800890e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	785b      	ldrb	r3, [r3, #1]
 800891a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800891c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008922:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	7b1b      	ldrb	r3, [r3, #12]
 8008928:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800892a:	4313      	orrs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	22ca      	movs	r2, #202	; 0xca
 8008934:	625a      	str	r2, [r3, #36]	; 0x24
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2253      	movs	r2, #83	; 0x53
 800893c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 fa44 	bl	8008dcc <RTC_EnterInitMode>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	22ff      	movs	r2, #255	; 0xff
 8008950:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2204      	movs	r2, #4
 8008956:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e045      	b.n	80089ee <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	6979      	ldr	r1, [r7, #20]
 8008968:	4b23      	ldr	r3, [pc, #140]	; (80089f8 <HAL_RTC_SetTime+0x178>)
 800896a:	400b      	ands	r3, r1
 800896c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689a      	ldr	r2, [r3, #8]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800897c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6899      	ldr	r1, [r3, #8]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	691a      	ldr	r2, [r3, #16]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	431a      	orrs	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f003 0320 	and.w	r3, r3, #32
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d111      	bne.n	80089d8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 f9e1 	bl	8008d7c <HAL_RTC_WaitForSynchro>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	22ff      	movs	r2, #255	; 0xff
 80089c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2204      	movs	r2, #4
 80089cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e00a      	b.n	80089ee <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	22ff      	movs	r2, #255	; 0xff
 80089de:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80089ec:	2300      	movs	r3, #0
  }
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd90      	pop	{r4, r7, pc}
 80089f6:	bf00      	nop
 80089f8:	007f7f7f 	.word	0x007f7f7f

080089fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80089fc:	b590      	push	{r4, r7, lr}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	7f1b      	ldrb	r3, [r3, #28]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d101      	bne.n	8008a18 <HAL_RTC_SetDate+0x1c>
 8008a14:	2302      	movs	r3, #2
 8008a16:	e092      	b.n	8008b3e <HAL_RTC_SetDate+0x142>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2202      	movs	r2, #2
 8008a22:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10e      	bne.n	8008a48 <HAL_RTC_SetDate+0x4c>
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	785b      	ldrb	r3, [r3, #1]
 8008a2e:	f003 0310 	and.w	r3, r3, #16
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d008      	beq.n	8008a48 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	785b      	ldrb	r3, [r3, #1]
 8008a3a:	f023 0310 	bic.w	r3, r3, #16
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	330a      	adds	r3, #10
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d11c      	bne.n	8008a88 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	78db      	ldrb	r3, [r3, #3]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 f9e6 	bl	8008e24 <RTC_ByteToBcd2>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	785b      	ldrb	r3, [r3, #1]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 f9df 	bl	8008e24 <RTC_ByteToBcd2>
 8008a66:	4603      	mov	r3, r0
 8008a68:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008a6a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	789b      	ldrb	r3, [r3, #2]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 f9d7 	bl	8008e24 <RTC_ByteToBcd2>
 8008a76:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008a78:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008a82:	4313      	orrs	r3, r2
 8008a84:	617b      	str	r3, [r7, #20]
 8008a86:	e00e      	b.n	8008aa6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	78db      	ldrb	r3, [r3, #3]
 8008a8c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	785b      	ldrb	r3, [r3, #1]
 8008a92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008a94:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008a9a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	22ca      	movs	r2, #202	; 0xca
 8008aac:	625a      	str	r2, [r3, #36]	; 0x24
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2253      	movs	r2, #83	; 0x53
 8008ab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 f988 	bl	8008dcc <RTC_EnterInitMode>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	22ff      	movs	r2, #255	; 0xff
 8008ac8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2204      	movs	r2, #4
 8008ace:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e031      	b.n	8008b3e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	6979      	ldr	r1, [r7, #20]
 8008ae0:	4b19      	ldr	r3, [pc, #100]	; (8008b48 <HAL_RTC_SetDate+0x14c>)
 8008ae2:	400b      	ands	r3, r1
 8008ae4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008af4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d111      	bne.n	8008b28 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 f939 	bl	8008d7c <HAL_RTC_WaitForSynchro>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00b      	beq.n	8008b28 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	22ff      	movs	r2, #255	; 0xff
 8008b16:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2204      	movs	r2, #4
 8008b1c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e00a      	b.n	8008b3e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	22ff      	movs	r2, #255	; 0xff
 8008b2e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2201      	movs	r2, #1
 8008b34:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
  }
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	371c      	adds	r7, #28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd90      	pop	{r4, r7, pc}
 8008b46:	bf00      	nop
 8008b48:	00ffff3f 	.word	0x00ffff3f

08008b4c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008b4c:	b590      	push	{r4, r7, lr}
 8008b4e:	b089      	sub	sp, #36	; 0x24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	61fb      	str	r3, [r7, #28]
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	7f1b      	ldrb	r3, [r3, #28]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d101      	bne.n	8008b70 <HAL_RTC_SetAlarm+0x24>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	e101      	b.n	8008d74 <HAL_RTC_SetAlarm+0x228>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2201      	movs	r2, #1
 8008b74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2202      	movs	r2, #2
 8008b7a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d137      	bne.n	8008bf2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2200      	movs	r2, #0
 8008b94:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 f942 	bl	8008e24 <RTC_ByteToBcd2>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	785b      	ldrb	r3, [r3, #1]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 f93b 	bl	8008e24 <RTC_ByteToBcd2>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008bb2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	789b      	ldrb	r3, [r3, #2]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 f933 	bl	8008e24 <RTC_ByteToBcd2>
 8008bbe:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008bc0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	7b1b      	ldrb	r3, [r3, #12]
 8008bc8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008bca:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 f925 	bl	8008e24 <RTC_ByteToBcd2>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008bde:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008be6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008bec:	4313      	orrs	r3, r2
 8008bee:	61fb      	str	r3, [r7, #28]
 8008bf0:	e023      	b.n	8008c3a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d102      	bne.n	8008c06 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2200      	movs	r2, #0
 8008c04:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	785b      	ldrb	r3, [r3, #1]
 8008c10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008c12:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008c18:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	7b1b      	ldrb	r3, [r3, #12]
 8008c1e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008c20:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c28:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008c2a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008c30:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008c36:	4313      	orrs	r3, r2
 8008c38:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	22ca      	movs	r2, #202	; 0xca
 8008c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2253      	movs	r2, #83	; 0x53
 8008c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c5e:	d13f      	bne.n	8008ce0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689a      	ldr	r2, [r3, #8]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c6e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c7e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c80:	f7fb fe50 	bl	8004924 <HAL_GetTick>
 8008c84:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008c86:	e013      	b.n	8008cb0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c88:	f7fb fe4c 	bl	8004924 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c96:	d90b      	bls.n	8008cb0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	22ff      	movs	r2, #255	; 0xff
 8008c9e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2203      	movs	r2, #3
 8008ca4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e061      	b.n	8008d74 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d0e4      	beq.n	8008c88 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69fa      	ldr	r2, [r7, #28]
 8008cc4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689a      	ldr	r2, [r3, #8]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cdc:	609a      	str	r2, [r3, #8]
 8008cde:	e03e      	b.n	8008d5e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	689a      	ldr	r2, [r3, #8]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008cee:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689a      	ldr	r2, [r3, #8]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cfe:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d00:	f7fb fe10 	bl	8004924 <HAL_GetTick>
 8008d04:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008d06:	e013      	b.n	8008d30 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d08:	f7fb fe0c 	bl	8004924 <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d16:	d90b      	bls.n	8008d30 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	22ff      	movs	r2, #255	; 0xff
 8008d1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2203      	movs	r2, #3
 8008d24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e021      	b.n	8008d74 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0e4      	beq.n	8008d08 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d5c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	22ff      	movs	r2, #255	; 0xff
 8008d64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3724      	adds	r7, #36	; 0x24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd90      	pop	{r4, r7, pc}

08008d7c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d98:	f7fb fdc4 	bl	8004924 <HAL_GetTick>
 8008d9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d9e:	e009      	b.n	8008db4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008da0:	f7fb fdc0 	bl	8004924 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dae:	d901      	bls.n	8008db4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e007      	b.n	8008dc4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0ee      	beq.n	8008da0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d119      	bne.n	8008e1a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f04f 32ff 	mov.w	r2, #4294967295
 8008dee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008df0:	f7fb fd98 	bl	8004924 <HAL_GetTick>
 8008df4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008df6:	e009      	b.n	8008e0c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008df8:	f7fb fd94 	bl	8004924 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e06:	d901      	bls.n	8008e0c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e007      	b.n	8008e1c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0ee      	beq.n	8008df8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008e32:	e005      	b.n	8008e40 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	3b0a      	subs	r3, #10
 8008e3e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	2b09      	cmp	r3, #9
 8008e44:	d8f6      	bhi.n	8008e34 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	011b      	lsls	r3, r3, #4
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	b2db      	uxtb	r3, r3
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	7f1b      	ldrb	r3, [r3, #28]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d101      	bne.n	8008e7c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e03e      	b.n	8008efa <HAL_RTCEx_SetTimeStamp+0x9a>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2202      	movs	r2, #2
 8008e86:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689a      	ldr	r2, [r3, #8]
 8008e8e:	4b1e      	ldr	r3, [pc, #120]	; (8008f08 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008e90:	4013      	ands	r3, r2
 8008e92:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	22ca      	movs	r2, #202	; 0xca
 8008ea2:	625a      	str	r2, [r3, #36]	; 0x24
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2253      	movs	r2, #83	; 0x53
 8008eaa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f022 0206 	bic.w	r2, r2, #6
 8008eba:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689a      	ldr	r2, [r3, #8]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ee2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	22ff      	movs	r2, #255	; 0xff
 8008eea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	fffff7f7 	.word	0xfffff7f7

08008f0c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e025      	b.n	8008f6c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d106      	bne.n	8008f3a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7fb fbf1 	bl	800471c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	f002 fa25 	bl	800b39c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	f002 fa8f 	bl	800b480 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d101      	bne.n	8008f90 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e018      	b.n	8008fc2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	68b9      	ldr	r1, [r7, #8]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f002 faed 	bl	800b580 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d104      	bne.n	8008fb8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2205      	movs	r2, #5
 8008fb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008fb6:	e003      	b.n	8008fc0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b082      	sub	sp, #8
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d101      	bne.n	8008fe4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	e00e      	b.n	8009002 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f002 fae5 	bl	800b5c2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e084      	b.n	8009126 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d106      	bne.n	800903c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7fb f8f2 	bl	8004220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009052:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800905c:	d902      	bls.n	8009064 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	e002      	b.n	800906a <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009068:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009072:	d007      	beq.n	8009084 <HAL_SPI_Init+0x7a>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800907c:	d002      	beq.n	8009084 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10b      	bne.n	80090a4 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009094:	d903      	bls.n	800909e <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2202      	movs	r2, #2
 800909a:	631a      	str	r2, [r3, #48]	; 0x30
 800909c:	e002      	b.n	80090a4 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685a      	ldr	r2, [r3, #4]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	431a      	orrs	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090c2:	431a      	orrs	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	431a      	orrs	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	ea42 0103 	orr.w	r1, r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	430a      	orrs	r2, r1
 80090dc:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	0c1b      	lsrs	r3, r3, #16
 80090e4:	f003 0204 	and.w	r2, r3, #4
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	431a      	orrs	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	ea42 0103 	orr.w	r1, r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	430a      	orrs	r2, r1
 8009104:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	69da      	ldr	r2, [r3, #28]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009114:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e01d      	b.n	800917c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	d106      	bne.n	800915a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7fb f8d5 	bl	8004304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2202      	movs	r2, #2
 800915e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3304      	adds	r3, #4
 800916a:	4619      	mov	r1, r3
 800916c:	4610      	mov	r0, r2
 800916e:	f000 fbcf 	bl	8009910 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68da      	ldr	r2, [r3, #12]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0201 	orr.w	r2, r2, #1
 800919a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <HAL_TIM_Base_Start_IT+0x50>)
 80091a4:	4013      	ands	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b06      	cmp	r3, #6
 80091ac:	d00b      	beq.n	80091c6 <HAL_TIM_Base_Start_IT+0x42>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b4:	d007      	beq.n	80091c6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f042 0201 	orr.w	r2, r2, #1
 80091c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	00010007 	.word	0x00010007

080091d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e01d      	b.n	8009226 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d106      	bne.n	8009204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f815 	bl	800922e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2202      	movs	r2, #2
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3304      	adds	r3, #4
 8009214:	4619      	mov	r1, r3
 8009216:	4610      	mov	r0, r2
 8009218:	f000 fb7a 	bl	8009910 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f003 0302 	and.w	r3, r3, #2
 8009254:	2b02      	cmp	r3, #2
 8009256:	d122      	bne.n	800929e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b02      	cmp	r3, #2
 8009264:	d11b      	bne.n	800929e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f06f 0202 	mvn.w	r2, #2
 800926e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	f003 0303 	and.w	r3, r3, #3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d003      	beq.n	800928c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fb25 	bl	80098d4 <HAL_TIM_IC_CaptureCallback>
 800928a:	e005      	b.n	8009298 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fb17 	bl	80098c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fb28 	bl	80098e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	f003 0304 	and.w	r3, r3, #4
 80092a8:	2b04      	cmp	r3, #4
 80092aa:	d122      	bne.n	80092f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	f003 0304 	and.w	r3, r3, #4
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	d11b      	bne.n	80092f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f06f 0204 	mvn.w	r2, #4
 80092c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d003      	beq.n	80092e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fafb 	bl	80098d4 <HAL_TIM_IC_CaptureCallback>
 80092de:	e005      	b.n	80092ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 faed 	bl	80098c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fafe 	bl	80098e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f003 0308 	and.w	r3, r3, #8
 80092fc:	2b08      	cmp	r3, #8
 80092fe:	d122      	bne.n	8009346 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	f003 0308 	and.w	r3, r3, #8
 800930a:	2b08      	cmp	r3, #8
 800930c:	d11b      	bne.n	8009346 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f06f 0208 	mvn.w	r2, #8
 8009316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2204      	movs	r2, #4
 800931c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	f003 0303 	and.w	r3, r3, #3
 8009328:	2b00      	cmp	r3, #0
 800932a:	d003      	beq.n	8009334 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fad1 	bl	80098d4 <HAL_TIM_IC_CaptureCallback>
 8009332:	e005      	b.n	8009340 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fac3 	bl	80098c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fad4 	bl	80098e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	f003 0310 	and.w	r3, r3, #16
 8009350:	2b10      	cmp	r3, #16
 8009352:	d122      	bne.n	800939a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f003 0310 	and.w	r3, r3, #16
 800935e:	2b10      	cmp	r3, #16
 8009360:	d11b      	bne.n	800939a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f06f 0210 	mvn.w	r2, #16
 800936a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2208      	movs	r2, #8
 8009370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800937c:	2b00      	cmp	r3, #0
 800937e:	d003      	beq.n	8009388 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 faa7 	bl	80098d4 <HAL_TIM_IC_CaptureCallback>
 8009386:	e005      	b.n	8009394 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fa99 	bl	80098c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 faaa 	bl	80098e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f003 0301 	and.w	r3, r3, #1
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d10e      	bne.n	80093c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d107      	bne.n	80093c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f06f 0201 	mvn.w	r2, #1
 80093be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7f8 feff 	bl	80021c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d0:	2b80      	cmp	r3, #128	; 0x80
 80093d2:	d10e      	bne.n	80093f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093de:	2b80      	cmp	r3, #128	; 0x80
 80093e0:	d107      	bne.n	80093f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 ffcd 	bl	800a38c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009400:	d10e      	bne.n	8009420 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940c:	2b80      	cmp	r3, #128	; 0x80
 800940e:	d107      	bne.n	8009420 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 ffc0 	bl	800a3a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942a:	2b40      	cmp	r3, #64	; 0x40
 800942c:	d10e      	bne.n	800944c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009438:	2b40      	cmp	r3, #64	; 0x40
 800943a:	d107      	bne.n	800944c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fa58 	bl	80098fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	f003 0320 	and.w	r3, r3, #32
 8009456:	2b20      	cmp	r3, #32
 8009458:	d10e      	bne.n	8009478 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f003 0320 	and.w	r3, r3, #32
 8009464:	2b20      	cmp	r3, #32
 8009466:	d107      	bne.n	8009478 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f06f 0220 	mvn.w	r2, #32
 8009470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 ff80 	bl	800a378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009492:	2b01      	cmp	r3, #1
 8009494:	d101      	bne.n	800949a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009496:	2302      	movs	r3, #2
 8009498:	e105      	b.n	80096a6 <HAL_TIM_PWM_ConfigChannel+0x226>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2202      	movs	r2, #2
 80094a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b14      	cmp	r3, #20
 80094ae:	f200 80f0 	bhi.w	8009692 <HAL_TIM_PWM_ConfigChannel+0x212>
 80094b2:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	0800950d 	.word	0x0800950d
 80094bc:	08009693 	.word	0x08009693
 80094c0:	08009693 	.word	0x08009693
 80094c4:	08009693 	.word	0x08009693
 80094c8:	0800954d 	.word	0x0800954d
 80094cc:	08009693 	.word	0x08009693
 80094d0:	08009693 	.word	0x08009693
 80094d4:	08009693 	.word	0x08009693
 80094d8:	0800958f 	.word	0x0800958f
 80094dc:	08009693 	.word	0x08009693
 80094e0:	08009693 	.word	0x08009693
 80094e4:	08009693 	.word	0x08009693
 80094e8:	080095cf 	.word	0x080095cf
 80094ec:	08009693 	.word	0x08009693
 80094f0:	08009693 	.word	0x08009693
 80094f4:	08009693 	.word	0x08009693
 80094f8:	08009611 	.word	0x08009611
 80094fc:	08009693 	.word	0x08009693
 8009500:	08009693 	.word	0x08009693
 8009504:	08009693 	.word	0x08009693
 8009508:	08009651 	.word	0x08009651
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68b9      	ldr	r1, [r7, #8]
 8009512:	4618      	mov	r0, r3
 8009514:	f000 fa9c 	bl	8009a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	699a      	ldr	r2, [r3, #24]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f042 0208 	orr.w	r2, r2, #8
 8009526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	699a      	ldr	r2, [r3, #24]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f022 0204 	bic.w	r2, r2, #4
 8009536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6999      	ldr	r1, [r3, #24]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	691a      	ldr	r2, [r3, #16]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	619a      	str	r2, [r3, #24]
      break;
 800954a:	e0a3      	b.n	8009694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68b9      	ldr	r1, [r7, #8]
 8009552:	4618      	mov	r0, r3
 8009554:	f000 faee 	bl	8009b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	699a      	ldr	r2, [r3, #24]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	699a      	ldr	r2, [r3, #24]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6999      	ldr	r1, [r3, #24]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	021a      	lsls	r2, r3, #8
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	430a      	orrs	r2, r1
 800958a:	619a      	str	r2, [r3, #24]
      break;
 800958c:	e082      	b.n	8009694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68b9      	ldr	r1, [r7, #8]
 8009594:	4618      	mov	r0, r3
 8009596:	f000 fb45 	bl	8009c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	69da      	ldr	r2, [r3, #28]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0208 	orr.w	r2, r2, #8
 80095a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	69da      	ldr	r2, [r3, #28]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 0204 	bic.w	r2, r2, #4
 80095b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	69d9      	ldr	r1, [r3, #28]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	691a      	ldr	r2, [r3, #16]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	61da      	str	r2, [r3, #28]
      break;
 80095cc:	e062      	b.n	8009694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68b9      	ldr	r1, [r7, #8]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 fb9b 	bl	8009d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69da      	ldr	r2, [r3, #28]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69da      	ldr	r2, [r3, #28]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	69d9      	ldr	r1, [r3, #28]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	021a      	lsls	r2, r3, #8
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	430a      	orrs	r2, r1
 800960c:	61da      	str	r2, [r3, #28]
      break;
 800960e:	e041      	b.n	8009694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68b9      	ldr	r1, [r7, #8]
 8009616:	4618      	mov	r0, r3
 8009618:	f000 fbd2 	bl	8009dc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f042 0208 	orr.w	r2, r2, #8
 800962a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 0204 	bic.w	r2, r2, #4
 800963a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	691a      	ldr	r2, [r3, #16]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800964e:	e021      	b.n	8009694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68b9      	ldr	r1, [r7, #8]
 8009656:	4618      	mov	r0, r3
 8009658:	f000 fc04 	bl	8009e64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800966a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800967a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	021a      	lsls	r2, r3, #8
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	430a      	orrs	r2, r1
 800968e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009690:	e000      	b.n	8009694 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009692:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop

080096b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d101      	bne.n	80096c8 <HAL_TIM_ConfigClockSource+0x18>
 80096c4:	2302      	movs	r3, #2
 80096c6:	e0b3      	b.n	8009830 <HAL_TIM_ConfigClockSource+0x180>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2202      	movs	r2, #2
 80096d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	4b55      	ldr	r3, [pc, #340]	; (8009838 <HAL_TIM_ConfigClockSource+0x188>)
 80096e4:	4013      	ands	r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009700:	d03e      	beq.n	8009780 <HAL_TIM_ConfigClockSource+0xd0>
 8009702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009706:	f200 8087 	bhi.w	8009818 <HAL_TIM_ConfigClockSource+0x168>
 800970a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800970e:	f000 8085 	beq.w	800981c <HAL_TIM_ConfigClockSource+0x16c>
 8009712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009716:	d87f      	bhi.n	8009818 <HAL_TIM_ConfigClockSource+0x168>
 8009718:	2b70      	cmp	r3, #112	; 0x70
 800971a:	d01a      	beq.n	8009752 <HAL_TIM_ConfigClockSource+0xa2>
 800971c:	2b70      	cmp	r3, #112	; 0x70
 800971e:	d87b      	bhi.n	8009818 <HAL_TIM_ConfigClockSource+0x168>
 8009720:	2b60      	cmp	r3, #96	; 0x60
 8009722:	d050      	beq.n	80097c6 <HAL_TIM_ConfigClockSource+0x116>
 8009724:	2b60      	cmp	r3, #96	; 0x60
 8009726:	d877      	bhi.n	8009818 <HAL_TIM_ConfigClockSource+0x168>
 8009728:	2b50      	cmp	r3, #80	; 0x50
 800972a:	d03c      	beq.n	80097a6 <HAL_TIM_ConfigClockSource+0xf6>
 800972c:	2b50      	cmp	r3, #80	; 0x50
 800972e:	d873      	bhi.n	8009818 <HAL_TIM_ConfigClockSource+0x168>
 8009730:	2b40      	cmp	r3, #64	; 0x40
 8009732:	d058      	beq.n	80097e6 <HAL_TIM_ConfigClockSource+0x136>
 8009734:	2b40      	cmp	r3, #64	; 0x40
 8009736:	d86f      	bhi.n	8009818 <HAL_TIM_ConfigClockSource+0x168>
 8009738:	2b30      	cmp	r3, #48	; 0x30
 800973a:	d064      	beq.n	8009806 <HAL_TIM_ConfigClockSource+0x156>
 800973c:	2b30      	cmp	r3, #48	; 0x30
 800973e:	d86b      	bhi.n	8009818 <HAL_TIM_ConfigClockSource+0x168>
 8009740:	2b20      	cmp	r3, #32
 8009742:	d060      	beq.n	8009806 <HAL_TIM_ConfigClockSource+0x156>
 8009744:	2b20      	cmp	r3, #32
 8009746:	d867      	bhi.n	8009818 <HAL_TIM_ConfigClockSource+0x168>
 8009748:	2b00      	cmp	r3, #0
 800974a:	d05c      	beq.n	8009806 <HAL_TIM_ConfigClockSource+0x156>
 800974c:	2b10      	cmp	r3, #16
 800974e:	d05a      	beq.n	8009806 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009750:	e062      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6818      	ldr	r0, [r3, #0]
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	6899      	ldr	r1, [r3, #8]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	f000 fcdd 	bl	800a120 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009774:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	609a      	str	r2, [r3, #8]
      break;
 800977e:	e04e      	b.n	800981e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	6899      	ldr	r1, [r3, #8]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	f000 fcc6 	bl	800a120 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689a      	ldr	r2, [r3, #8]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097a2:	609a      	str	r2, [r3, #8]
      break;
 80097a4:	e03b      	b.n	800981e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6818      	ldr	r0, [r3, #0]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	6859      	ldr	r1, [r3, #4]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	461a      	mov	r2, r3
 80097b4:	f000 fc3a 	bl	800a02c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2150      	movs	r1, #80	; 0x50
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fc93 	bl	800a0ea <TIM_ITRx_SetConfig>
      break;
 80097c4:	e02b      	b.n	800981e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	6859      	ldr	r1, [r3, #4]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	461a      	mov	r2, r3
 80097d4:	f000 fc59 	bl	800a08a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2160      	movs	r1, #96	; 0x60
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fc83 	bl	800a0ea <TIM_ITRx_SetConfig>
      break;
 80097e4:	e01b      	b.n	800981e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6818      	ldr	r0, [r3, #0]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	6859      	ldr	r1, [r3, #4]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	461a      	mov	r2, r3
 80097f4:	f000 fc1a 	bl	800a02c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2140      	movs	r1, #64	; 0x40
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 fc73 	bl	800a0ea <TIM_ITRx_SetConfig>
      break;
 8009804:	e00b      	b.n	800981e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4619      	mov	r1, r3
 8009810:	4610      	mov	r0, r2
 8009812:	f000 fc6a 	bl	800a0ea <TIM_ITRx_SetConfig>
      break;
 8009816:	e002      	b.n	800981e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009818:	bf00      	nop
 800981a:	e000      	b.n	800981e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800981c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	fffeff88 	.word	0xfffeff88

0800983c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800984c:	2b01      	cmp	r3, #1
 800984e:	d101      	bne.n	8009854 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009850:	2302      	movs	r3, #2
 8009852:	e031      	b.n	80098b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2202      	movs	r2, #2
 8009860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fb50 	bl	8009f0c <TIM_SlaveTimer_SetConfig>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d009      	beq.n	8009886 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e018      	b.n	80098b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68da      	ldr	r2, [r3, #12]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009894:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68da      	ldr	r2, [r3, #12]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80098a4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a40      	ldr	r2, [pc, #256]	; (8009a24 <TIM_Base_SetConfig+0x114>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d013      	beq.n	8009950 <TIM_Base_SetConfig+0x40>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800992e:	d00f      	beq.n	8009950 <TIM_Base_SetConfig+0x40>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a3d      	ldr	r2, [pc, #244]	; (8009a28 <TIM_Base_SetConfig+0x118>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d00b      	beq.n	8009950 <TIM_Base_SetConfig+0x40>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a3c      	ldr	r2, [pc, #240]	; (8009a2c <TIM_Base_SetConfig+0x11c>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d007      	beq.n	8009950 <TIM_Base_SetConfig+0x40>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a3b      	ldr	r2, [pc, #236]	; (8009a30 <TIM_Base_SetConfig+0x120>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d003      	beq.n	8009950 <TIM_Base_SetConfig+0x40>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a3a      	ldr	r2, [pc, #232]	; (8009a34 <TIM_Base_SetConfig+0x124>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d108      	bne.n	8009962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	4313      	orrs	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a2f      	ldr	r2, [pc, #188]	; (8009a24 <TIM_Base_SetConfig+0x114>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d02b      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009970:	d027      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a2c      	ldr	r2, [pc, #176]	; (8009a28 <TIM_Base_SetConfig+0x118>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d023      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a2b      	ldr	r2, [pc, #172]	; (8009a2c <TIM_Base_SetConfig+0x11c>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d01f      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a2a      	ldr	r2, [pc, #168]	; (8009a30 <TIM_Base_SetConfig+0x120>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d01b      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a29      	ldr	r2, [pc, #164]	; (8009a34 <TIM_Base_SetConfig+0x124>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d017      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a28      	ldr	r2, [pc, #160]	; (8009a38 <TIM_Base_SetConfig+0x128>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d013      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a27      	ldr	r2, [pc, #156]	; (8009a3c <TIM_Base_SetConfig+0x12c>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d00f      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a26      	ldr	r2, [pc, #152]	; (8009a40 <TIM_Base_SetConfig+0x130>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d00b      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a25      	ldr	r2, [pc, #148]	; (8009a44 <TIM_Base_SetConfig+0x134>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d007      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a24      	ldr	r2, [pc, #144]	; (8009a48 <TIM_Base_SetConfig+0x138>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d003      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a23      	ldr	r2, [pc, #140]	; (8009a4c <TIM_Base_SetConfig+0x13c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d108      	bne.n	80099d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	4313      	orrs	r3, r2
 80099e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	689a      	ldr	r2, [r3, #8]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a0a      	ldr	r2, [pc, #40]	; (8009a24 <TIM_Base_SetConfig+0x114>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d003      	beq.n	8009a08 <TIM_Base_SetConfig+0xf8>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a0c      	ldr	r2, [pc, #48]	; (8009a34 <TIM_Base_SetConfig+0x124>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d103      	bne.n	8009a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	691a      	ldr	r2, [r3, #16]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	615a      	str	r2, [r3, #20]
}
 8009a16:	bf00      	nop
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	40010000 	.word	0x40010000
 8009a28:	40000400 	.word	0x40000400
 8009a2c:	40000800 	.word	0x40000800
 8009a30:	40000c00 	.word	0x40000c00
 8009a34:	40010400 	.word	0x40010400
 8009a38:	40014000 	.word	0x40014000
 8009a3c:	40014400 	.word	0x40014400
 8009a40:	40014800 	.word	0x40014800
 8009a44:	40001800 	.word	0x40001800
 8009a48:	40001c00 	.word	0x40001c00
 8009a4c:	40002000 	.word	0x40002000

08009a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	f023 0201 	bic.w	r2, r3, #1
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	4b2b      	ldr	r3, [pc, #172]	; (8009b28 <TIM_OC1_SetConfig+0xd8>)
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f023 0303 	bic.w	r3, r3, #3
 8009a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f023 0302 	bic.w	r3, r3, #2
 8009a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a21      	ldr	r2, [pc, #132]	; (8009b2c <TIM_OC1_SetConfig+0xdc>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d003      	beq.n	8009ab4 <TIM_OC1_SetConfig+0x64>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a20      	ldr	r2, [pc, #128]	; (8009b30 <TIM_OC1_SetConfig+0xe0>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d10c      	bne.n	8009ace <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	f023 0308 	bic.w	r3, r3, #8
 8009aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f023 0304 	bic.w	r3, r3, #4
 8009acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a16      	ldr	r2, [pc, #88]	; (8009b2c <TIM_OC1_SetConfig+0xdc>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d003      	beq.n	8009ade <TIM_OC1_SetConfig+0x8e>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a15      	ldr	r2, [pc, #84]	; (8009b30 <TIM_OC1_SetConfig+0xe0>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d111      	bne.n	8009b02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	693a      	ldr	r2, [r7, #16]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	621a      	str	r2, [r3, #32]
}
 8009b1c:	bf00      	nop
 8009b1e:	371c      	adds	r7, #28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	fffeff8f 	.word	0xfffeff8f
 8009b2c:	40010000 	.word	0x40010000
 8009b30:	40010400 	.word	0x40010400

08009b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	f023 0210 	bic.w	r2, r3, #16
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	4b2e      	ldr	r3, [pc, #184]	; (8009c18 <TIM_OC2_SetConfig+0xe4>)
 8009b60:	4013      	ands	r3, r2
 8009b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	021b      	lsls	r3, r3, #8
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f023 0320 	bic.w	r3, r3, #32
 8009b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	011b      	lsls	r3, r3, #4
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a23      	ldr	r2, [pc, #140]	; (8009c1c <TIM_OC2_SetConfig+0xe8>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d003      	beq.n	8009b9c <TIM_OC2_SetConfig+0x68>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a22      	ldr	r2, [pc, #136]	; (8009c20 <TIM_OC2_SetConfig+0xec>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d10d      	bne.n	8009bb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	011b      	lsls	r3, r3, #4
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a18      	ldr	r2, [pc, #96]	; (8009c1c <TIM_OC2_SetConfig+0xe8>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d003      	beq.n	8009bc8 <TIM_OC2_SetConfig+0x94>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a17      	ldr	r2, [pc, #92]	; (8009c20 <TIM_OC2_SetConfig+0xec>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d113      	bne.n	8009bf0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	621a      	str	r2, [r3, #32]
}
 8009c0a:	bf00      	nop
 8009c0c:	371c      	adds	r7, #28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	feff8fff 	.word	0xfeff8fff
 8009c1c:	40010000 	.word	0x40010000
 8009c20:	40010400 	.word	0x40010400

08009c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	4b2d      	ldr	r3, [pc, #180]	; (8009d04 <TIM_OC3_SetConfig+0xe0>)
 8009c50:	4013      	ands	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f023 0303 	bic.w	r3, r3, #3
 8009c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	021b      	lsls	r3, r3, #8
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a22      	ldr	r2, [pc, #136]	; (8009d08 <TIM_OC3_SetConfig+0xe4>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d003      	beq.n	8009c8a <TIM_OC3_SetConfig+0x66>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a21      	ldr	r2, [pc, #132]	; (8009d0c <TIM_OC3_SetConfig+0xe8>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d10d      	bne.n	8009ca6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	021b      	lsls	r3, r3, #8
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a17      	ldr	r2, [pc, #92]	; (8009d08 <TIM_OC3_SetConfig+0xe4>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d003      	beq.n	8009cb6 <TIM_OC3_SetConfig+0x92>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a16      	ldr	r2, [pc, #88]	; (8009d0c <TIM_OC3_SetConfig+0xe8>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d113      	bne.n	8009cde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	011b      	lsls	r3, r3, #4
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	011b      	lsls	r3, r3, #4
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	621a      	str	r2, [r3, #32]
}
 8009cf8:	bf00      	nop
 8009cfa:	371c      	adds	r7, #28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	fffeff8f 	.word	0xfffeff8f
 8009d08:	40010000 	.word	0x40010000
 8009d0c:	40010400 	.word	0x40010400

08009d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4b1e      	ldr	r3, [pc, #120]	; (8009db4 <TIM_OC4_SetConfig+0xa4>)
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	021b      	lsls	r3, r3, #8
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	031b      	lsls	r3, r3, #12
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a13      	ldr	r2, [pc, #76]	; (8009db8 <TIM_OC4_SetConfig+0xa8>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d003      	beq.n	8009d78 <TIM_OC4_SetConfig+0x68>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a12      	ldr	r2, [pc, #72]	; (8009dbc <TIM_OC4_SetConfig+0xac>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d109      	bne.n	8009d8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	019b      	lsls	r3, r3, #6
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	685a      	ldr	r2, [r3, #4]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	621a      	str	r2, [r3, #32]
}
 8009da6:	bf00      	nop
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	feff8fff 	.word	0xfeff8fff
 8009db8:	40010000 	.word	0x40010000
 8009dbc:	40010400 	.word	0x40010400

08009dc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	4b1b      	ldr	r3, [pc, #108]	; (8009e58 <TIM_OC5_SetConfig+0x98>)
 8009dec:	4013      	ands	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009e00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	041b      	lsls	r3, r3, #16
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a12      	ldr	r2, [pc, #72]	; (8009e5c <TIM_OC5_SetConfig+0x9c>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d003      	beq.n	8009e1e <TIM_OC5_SetConfig+0x5e>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a11      	ldr	r2, [pc, #68]	; (8009e60 <TIM_OC5_SetConfig+0xa0>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d109      	bne.n	8009e32 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	021b      	lsls	r3, r3, #8
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	697a      	ldr	r2, [r7, #20]
 8009e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	621a      	str	r2, [r3, #32]
}
 8009e4c:	bf00      	nop
 8009e4e:	371c      	adds	r7, #28
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	fffeff8f 	.word	0xfffeff8f
 8009e5c:	40010000 	.word	0x40010000
 8009e60:	40010400 	.word	0x40010400

08009e64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b087      	sub	sp, #28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	4b1c      	ldr	r3, [pc, #112]	; (8009f00 <TIM_OC6_SetConfig+0x9c>)
 8009e90:	4013      	ands	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	021b      	lsls	r3, r3, #8
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	051b      	lsls	r3, r3, #20
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a13      	ldr	r2, [pc, #76]	; (8009f04 <TIM_OC6_SetConfig+0xa0>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d003      	beq.n	8009ec4 <TIM_OC6_SetConfig+0x60>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a12      	ldr	r2, [pc, #72]	; (8009f08 <TIM_OC6_SetConfig+0xa4>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d109      	bne.n	8009ed8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009eca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	695b      	ldr	r3, [r3, #20]
 8009ed0:	029b      	lsls	r3, r3, #10
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	685a      	ldr	r2, [r3, #4]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	621a      	str	r2, [r3, #32]
}
 8009ef2:	bf00      	nop
 8009ef4:	371c      	adds	r7, #28
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	feff8fff 	.word	0xfeff8fff
 8009f04:	40010000 	.word	0x40010000
 8009f08:	40010400 	.word	0x40010400

08009f0c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f24:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	4b3d      	ldr	r3, [pc, #244]	; (800a028 <TIM_SlaveTimer_SetConfig+0x11c>)
 8009f34:	4013      	ands	r3, r2
 8009f36:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	2b70      	cmp	r3, #112	; 0x70
 8009f50:	d01a      	beq.n	8009f88 <TIM_SlaveTimer_SetConfig+0x7c>
 8009f52:	2b70      	cmp	r3, #112	; 0x70
 8009f54:	d860      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f56:	2b60      	cmp	r3, #96	; 0x60
 8009f58:	d054      	beq.n	800a004 <TIM_SlaveTimer_SetConfig+0xf8>
 8009f5a:	2b60      	cmp	r3, #96	; 0x60
 8009f5c:	d85c      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f5e:	2b50      	cmp	r3, #80	; 0x50
 8009f60:	d046      	beq.n	8009ff0 <TIM_SlaveTimer_SetConfig+0xe4>
 8009f62:	2b50      	cmp	r3, #80	; 0x50
 8009f64:	d858      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f66:	2b40      	cmp	r3, #64	; 0x40
 8009f68:	d019      	beq.n	8009f9e <TIM_SlaveTimer_SetConfig+0x92>
 8009f6a:	2b40      	cmp	r3, #64	; 0x40
 8009f6c:	d854      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f6e:	2b30      	cmp	r3, #48	; 0x30
 8009f70:	d054      	beq.n	800a01c <TIM_SlaveTimer_SetConfig+0x110>
 8009f72:	2b30      	cmp	r3, #48	; 0x30
 8009f74:	d850      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f76:	2b20      	cmp	r3, #32
 8009f78:	d050      	beq.n	800a01c <TIM_SlaveTimer_SetConfig+0x110>
 8009f7a:	2b20      	cmp	r3, #32
 8009f7c:	d84c      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d04c      	beq.n	800a01c <TIM_SlaveTimer_SetConfig+0x110>
 8009f82:	2b10      	cmp	r3, #16
 8009f84:	d04a      	beq.n	800a01c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8009f86:	e047      	b.n	800a018 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6818      	ldr	r0, [r3, #0]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	68d9      	ldr	r1, [r3, #12]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	689a      	ldr	r2, [r3, #8]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	f000 f8c2 	bl	800a120 <TIM_ETR_SetConfig>
      break;
 8009f9c:	e03f      	b.n	800a01e <TIM_SlaveTimer_SetConfig+0x112>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b05      	cmp	r3, #5
 8009fa4:	d101      	bne.n	8009faa <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e03a      	b.n	800a020 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6a1b      	ldr	r3, [r3, #32]
 8009fb0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6a1a      	ldr	r2, [r3, #32]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f022 0201 	bic.w	r2, r2, #1
 8009fc0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fd0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	621a      	str	r2, [r3, #32]
      break;
 8009fee:	e016      	b.n	800a01e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	6899      	ldr	r1, [r3, #8]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	f000 f815 	bl	800a02c <TIM_TI1_ConfigInputStage>
      break;
 800a002:	e00c      	b.n	800a01e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6818      	ldr	r0, [r3, #0]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	6899      	ldr	r1, [r3, #8]
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	461a      	mov	r2, r3
 800a012:	f000 f83a 	bl	800a08a <TIM_TI2_ConfigInputStage>
      break;
 800a016:	e002      	b.n	800a01e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800a018:	bf00      	nop
 800a01a:	e000      	b.n	800a01e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800a01c:	bf00      	nop
  }
  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	fffefff8 	.word	0xfffefff8

0800a02c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b087      	sub	sp, #28
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6a1b      	ldr	r3, [r3, #32]
 800a03c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	f023 0201 	bic.w	r2, r3, #1
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	011b      	lsls	r3, r3, #4
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	4313      	orrs	r3, r2
 800a060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f023 030a 	bic.w	r3, r3, #10
 800a068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	4313      	orrs	r3, r2
 800a070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	693a      	ldr	r2, [r7, #16]
 800a076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	697a      	ldr	r2, [r7, #20]
 800a07c:	621a      	str	r2, [r3, #32]
}
 800a07e:	bf00      	nop
 800a080:	371c      	adds	r7, #28
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b087      	sub	sp, #28
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	f023 0210 	bic.w	r2, r3, #16
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6a1b      	ldr	r3, [r3, #32]
 800a0ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	031b      	lsls	r3, r3, #12
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a0c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	011b      	lsls	r3, r3, #4
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	693a      	ldr	r2, [r7, #16]
 800a0dc:	621a      	str	r2, [r3, #32]
}
 800a0de:	bf00      	nop
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b085      	sub	sp, #20
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4313      	orrs	r3, r2
 800a108:	f043 0307 	orr.w	r3, r3, #7
 800a10c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	609a      	str	r2, [r3, #8]
}
 800a114:	bf00      	nop
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a13a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	021a      	lsls	r2, r3, #8
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	431a      	orrs	r2, r3
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	4313      	orrs	r3, r2
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	609a      	str	r2, [r3, #8]
}
 800a154:	bf00      	nop
 800a156:	371c      	adds	r7, #28
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a170:	2b01      	cmp	r3, #1
 800a172:	d101      	bne.n	800a178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a174:	2302      	movs	r3, #2
 800a176:	e06d      	b.n	800a254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2202      	movs	r2, #2
 800a184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a30      	ldr	r2, [pc, #192]	; (800a260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d004      	beq.n	800a1ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a2f      	ldr	r2, [pc, #188]	; (800a264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d108      	bne.n	800a1be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a20      	ldr	r2, [pc, #128]	; (800a260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d022      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ea:	d01d      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a1d      	ldr	r2, [pc, #116]	; (800a268 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d018      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a1c      	ldr	r2, [pc, #112]	; (800a26c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d013      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a1a      	ldr	r2, [pc, #104]	; (800a270 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d00e      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a15      	ldr	r2, [pc, #84]	; (800a264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d009      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a16      	ldr	r2, [pc, #88]	; (800a274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d004      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a15      	ldr	r2, [pc, #84]	; (800a278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d10c      	bne.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a22e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	4313      	orrs	r3, r2
 800a238:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	40010000 	.word	0x40010000
 800a264:	40010400 	.word	0x40010400
 800a268:	40000400 	.word	0x40000400
 800a26c:	40000800 	.word	0x40000800
 800a270:	40000c00 	.word	0x40000c00
 800a274:	40014000 	.word	0x40014000
 800a278:	40001800 	.word	0x40001800

0800a27c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a294:	2302      	movs	r3, #2
 800a296:	e065      	b.n	800a364 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2fe:	4313      	orrs	r3, r2
 800a300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	041b      	lsls	r3, r3, #16
 800a30e:	4313      	orrs	r3, r2
 800a310:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a16      	ldr	r2, [pc, #88]	; (800a370 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d004      	beq.n	800a326 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a14      	ldr	r2, [pc, #80]	; (800a374 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d115      	bne.n	800a352 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	051b      	lsls	r3, r3, #20
 800a332:	4313      	orrs	r3, r2
 800a334:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	69db      	ldr	r3, [r3, #28]
 800a340:	4313      	orrs	r3, r2
 800a342:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	4313      	orrs	r3, r2
 800a350:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	40010000 	.word	0x40010000
 800a374:	40010400 	.word	0x40010400

0800a378 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e040      	b.n	800a448 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d106      	bne.n	800a3dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7fa f83a 	bl	8004450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2224      	movs	r2, #36	; 0x24
 800a3e0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f022 0201 	bic.w	r2, r2, #1
 800a3f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fa6e 	bl	800a8d4 <UART_SetConfig>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d101      	bne.n	800a402 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e022      	b.n	800a448 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fd0e 	bl	800ae2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a41e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689a      	ldr	r2, [r3, #8]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a42e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f042 0201 	orr.w	r2, r2, #1
 800a43e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fd95 	bl	800af70 <UART_CheckIdleState>
 800a446:	4603      	mov	r3, r0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	4613      	mov	r3, r2
 800a45c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a462:	2b20      	cmp	r3, #32
 800a464:	d144      	bne.n	800a4f0 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d002      	beq.n	800a472 <HAL_UART_Transmit_IT+0x22>
 800a46c:	88fb      	ldrh	r3, [r7, #6]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e03d      	b.n	800a4f2 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d101      	bne.n	800a484 <HAL_UART_Transmit_IT+0x34>
 800a480:	2302      	movs	r3, #2
 800a482:	e036      	b.n	800a4f2 <HAL_UART_Transmit_IT+0xa2>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	88fa      	ldrh	r2, [r7, #6]
 800a496:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	88fa      	ldrh	r2, [r7, #6]
 800a49e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2221      	movs	r2, #33	; 0x21
 800a4b2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4bc:	d107      	bne.n	800a4ce <HAL_UART_Transmit_IT+0x7e>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d103      	bne.n	800a4ce <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	4a0d      	ldr	r2, [pc, #52]	; (800a500 <HAL_UART_Transmit_IT+0xb0>)
 800a4ca:	665a      	str	r2, [r3, #100]	; 0x64
 800a4cc:	e002      	b.n	800a4d4 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	4a0c      	ldr	r2, [pc, #48]	; (800a504 <HAL_UART_Transmit_IT+0xb4>)
 800a4d2:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a4ea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e000      	b.n	800a4f2 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800a4f0:	2302      	movs	r3, #2
  }
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	0800b1a3 	.word	0x0800b1a3
 800a504:	0800b131 	.word	0x0800b131

0800a508 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	4613      	mov	r3, r2
 800a514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a51a:	2b20      	cmp	r3, #32
 800a51c:	f040 808a 	bne.w	800a634 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <HAL_UART_Receive_IT+0x24>
 800a526:	88fb      	ldrh	r3, [r7, #6]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e082      	b.n	800a636 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a536:	2b01      	cmp	r3, #1
 800a538:	d101      	bne.n	800a53e <HAL_UART_Receive_IT+0x36>
 800a53a:	2302      	movs	r3, #2
 800a53c:	e07b      	b.n	800a636 <HAL_UART_Receive_IT+0x12e>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	88fa      	ldrh	r2, [r7, #6]
 800a550:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	88fa      	ldrh	r2, [r7, #6]
 800a558:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a56a:	d10e      	bne.n	800a58a <HAL_UART_Receive_IT+0x82>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d105      	bne.n	800a580 <HAL_UART_Receive_IT+0x78>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a57a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a57e:	e02d      	b.n	800a5dc <HAL_UART_Receive_IT+0xd4>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	22ff      	movs	r2, #255	; 0xff
 800a584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a588:	e028      	b.n	800a5dc <HAL_UART_Receive_IT+0xd4>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10d      	bne.n	800a5ae <HAL_UART_Receive_IT+0xa6>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d104      	bne.n	800a5a4 <HAL_UART_Receive_IT+0x9c>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	22ff      	movs	r2, #255	; 0xff
 800a59e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5a2:	e01b      	b.n	800a5dc <HAL_UART_Receive_IT+0xd4>
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	227f      	movs	r2, #127	; 0x7f
 800a5a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5ac:	e016      	b.n	800a5dc <HAL_UART_Receive_IT+0xd4>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5b6:	d10d      	bne.n	800a5d4 <HAL_UART_Receive_IT+0xcc>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d104      	bne.n	800a5ca <HAL_UART_Receive_IT+0xc2>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	227f      	movs	r2, #127	; 0x7f
 800a5c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5c8:	e008      	b.n	800a5dc <HAL_UART_Receive_IT+0xd4>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	223f      	movs	r2, #63	; 0x3f
 800a5ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5d2:	e003      	b.n	800a5dc <HAL_UART_Receive_IT+0xd4>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2222      	movs	r2, #34	; 0x22
 800a5e6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	689a      	ldr	r2, [r3, #8]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f042 0201 	orr.w	r2, r2, #1
 800a5f6:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a600:	d107      	bne.n	800a612 <HAL_UART_Receive_IT+0x10a>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d103      	bne.n	800a612 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	4a0d      	ldr	r2, [pc, #52]	; (800a644 <HAL_UART_Receive_IT+0x13c>)
 800a60e:	661a      	str	r2, [r3, #96]	; 0x60
 800a610:	e002      	b.n	800a618 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	4a0c      	ldr	r2, [pc, #48]	; (800a648 <HAL_UART_Receive_IT+0x140>)
 800a616:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a62e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	e000      	b.n	800a636 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a634:	2302      	movs	r3, #2
  }
}
 800a636:	4618      	mov	r0, r3
 800a638:	3714      	adds	r7, #20
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	0800b2f7 	.word	0x0800b2f7
 800a648:	0800b251 	.word	0x0800b251

0800a64c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b088      	sub	sp, #32
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	69db      	ldr	r3, [r3, #28]
 800a65a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a66c:	69fa      	ldr	r2, [r7, #28]
 800a66e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a672:	4013      	ands	r3, r2
 800a674:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d113      	bne.n	800a6a4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	f003 0320 	and.w	r3, r3, #32
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00e      	beq.n	800a6a4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	f003 0320 	and.w	r3, r3, #32
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d009      	beq.n	800a6a4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 80ff 	beq.w	800a898 <HAL_UART_IRQHandler+0x24c>
      {
        huart->RxISR(huart);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	4798      	blx	r3
      }
      return;
 800a6a2:	e0f9      	b.n	800a898 <HAL_UART_IRQHandler+0x24c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 80d5 	beq.w	800a856 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	f003 0301 	and.w	r3, r3, #1
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d105      	bne.n	800a6c2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f000 80ca 	beq.w	800a856 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	f003 0301 	and.w	r3, r3, #1
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00e      	beq.n	800a6ea <HAL_UART_IRQHandler+0x9e>
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d009      	beq.n	800a6ea <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6e2:	f043 0201 	orr.w	r2, r3, #1
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	f003 0302 	and.w	r3, r3, #2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00e      	beq.n	800a712 <HAL_UART_IRQHandler+0xc6>
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d009      	beq.n	800a712 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2202      	movs	r2, #2
 800a704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a70a:	f043 0204 	orr.w	r2, r3, #4
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00e      	beq.n	800a73a <HAL_UART_IRQHandler+0xee>
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f003 0301 	and.w	r3, r3, #1
 800a722:	2b00      	cmp	r3, #0
 800a724:	d009      	beq.n	800a73a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2204      	movs	r2, #4
 800a72c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a732:	f043 0202 	orr.w	r2, r3, #2
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	f003 0308 	and.w	r3, r3, #8
 800a740:	2b00      	cmp	r3, #0
 800a742:	d013      	beq.n	800a76c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	f003 0320 	and.w	r3, r3, #32
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d104      	bne.n	800a758 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a754:	2b00      	cmp	r3, #0
 800a756:	d009      	beq.n	800a76c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2208      	movs	r2, #8
 800a75e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a764:	f043 0208 	orr.w	r2, r3, #8
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00f      	beq.n	800a796 <HAL_UART_IRQHandler+0x14a>
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00a      	beq.n	800a796 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a788:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a78e:	f043 0220 	orr.w	r2, r3, #32
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d07e      	beq.n	800a89c <HAL_UART_IRQHandler+0x250>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	f003 0320 	and.w	r3, r3, #32
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00c      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d007      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7c6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d2:	2b40      	cmp	r3, #64	; 0x40
 800a7d4:	d004      	beq.n	800a7e0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d031      	beq.n	800a844 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fc6f 	bl	800b0c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f0:	2b40      	cmp	r3, #64	; 0x40
 800a7f2:	d123      	bne.n	800a83c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	689a      	ldr	r2, [r3, #8]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a802:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d013      	beq.n	800a834 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a810:	4a25      	ldr	r2, [pc, #148]	; (800a8a8 <HAL_UART_IRQHandler+0x25c>)
 800a812:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fa ff49 	bl	80056b0 <HAL_DMA_Abort_IT>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d016      	beq.n	800a852 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a82e:	4610      	mov	r0, r2
 800a830:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a832:	e00e      	b.n	800a852 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f843 	bl	800a8c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a83a:	e00a      	b.n	800a852 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f83f 	bl	800a8c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a842:	e006      	b.n	800a852 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f83b 	bl	800a8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a850:	e024      	b.n	800a89c <HAL_UART_IRQHandler+0x250>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a852:	bf00      	nop
    return;
 800a854:	e022      	b.n	800a89c <HAL_UART_IRQHandler+0x250>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00d      	beq.n	800a87c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a866:	2b00      	cmp	r3, #0
 800a868:	d008      	beq.n	800a87c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d016      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x254>
    {
      huart->TxISR(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	4798      	blx	r3
    }
    return;
 800a87a:	e011      	b.n	800a8a0 <HAL_UART_IRQHandler+0x254>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00d      	beq.n	800a8a2 <HAL_UART_IRQHandler+0x256>
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d008      	beq.n	800a8a2 <HAL_UART_IRQHandler+0x256>
  {
    UART_EndTransmit_IT(huart);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fcc4 	bl	800b21e <UART_EndTransmit_IT>
    return;
 800a896:	e004      	b.n	800a8a2 <HAL_UART_IRQHandler+0x256>
      return;
 800a898:	bf00      	nop
 800a89a:	e002      	b.n	800a8a2 <HAL_UART_IRQHandler+0x256>
    return;
 800a89c:	bf00      	nop
 800a89e:	e000      	b.n	800a8a2 <HAL_UART_IRQHandler+0x256>
    return;
 800a8a0:	bf00      	nop
  }

}
 800a8a2:	3720      	adds	r7, #32
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	0800b105 	.word	0x0800b105

0800a8ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b088      	sub	sp, #32
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	689a      	ldr	r2, [r3, #8]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	431a      	orrs	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	431a      	orrs	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	4ba7      	ldr	r3, [pc, #668]	; (800aba0 <UART_SetConfig+0x2cc>)
 800a904:	4013      	ands	r3, r2
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	6812      	ldr	r2, [r2, #0]
 800a90a:	6939      	ldr	r1, [r7, #16]
 800a90c:	430b      	orrs	r3, r1
 800a90e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68da      	ldr	r2, [r3, #12]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	430a      	orrs	r2, r1
 800a924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a1b      	ldr	r3, [r3, #32]
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	4313      	orrs	r3, r2
 800a934:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	430a      	orrs	r2, r1
 800a948:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a95      	ldr	r2, [pc, #596]	; (800aba4 <UART_SetConfig+0x2d0>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d120      	bne.n	800a996 <UART_SetConfig+0xc2>
 800a954:	4b94      	ldr	r3, [pc, #592]	; (800aba8 <UART_SetConfig+0x2d4>)
 800a956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a95a:	f003 0303 	and.w	r3, r3, #3
 800a95e:	2b03      	cmp	r3, #3
 800a960:	d816      	bhi.n	800a990 <UART_SetConfig+0xbc>
 800a962:	a201      	add	r2, pc, #4	; (adr r2, 800a968 <UART_SetConfig+0x94>)
 800a964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a968:	0800a979 	.word	0x0800a979
 800a96c:	0800a985 	.word	0x0800a985
 800a970:	0800a97f 	.word	0x0800a97f
 800a974:	0800a98b 	.word	0x0800a98b
 800a978:	2301      	movs	r3, #1
 800a97a:	77fb      	strb	r3, [r7, #31]
 800a97c:	e14f      	b.n	800ac1e <UART_SetConfig+0x34a>
 800a97e:	2302      	movs	r3, #2
 800a980:	77fb      	strb	r3, [r7, #31]
 800a982:	e14c      	b.n	800ac1e <UART_SetConfig+0x34a>
 800a984:	2304      	movs	r3, #4
 800a986:	77fb      	strb	r3, [r7, #31]
 800a988:	e149      	b.n	800ac1e <UART_SetConfig+0x34a>
 800a98a:	2308      	movs	r3, #8
 800a98c:	77fb      	strb	r3, [r7, #31]
 800a98e:	e146      	b.n	800ac1e <UART_SetConfig+0x34a>
 800a990:	2310      	movs	r3, #16
 800a992:	77fb      	strb	r3, [r7, #31]
 800a994:	e143      	b.n	800ac1e <UART_SetConfig+0x34a>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a84      	ldr	r2, [pc, #528]	; (800abac <UART_SetConfig+0x2d8>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d132      	bne.n	800aa06 <UART_SetConfig+0x132>
 800a9a0:	4b81      	ldr	r3, [pc, #516]	; (800aba8 <UART_SetConfig+0x2d4>)
 800a9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9a6:	f003 030c 	and.w	r3, r3, #12
 800a9aa:	2b0c      	cmp	r3, #12
 800a9ac:	d828      	bhi.n	800aa00 <UART_SetConfig+0x12c>
 800a9ae:	a201      	add	r2, pc, #4	; (adr r2, 800a9b4 <UART_SetConfig+0xe0>)
 800a9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b4:	0800a9e9 	.word	0x0800a9e9
 800a9b8:	0800aa01 	.word	0x0800aa01
 800a9bc:	0800aa01 	.word	0x0800aa01
 800a9c0:	0800aa01 	.word	0x0800aa01
 800a9c4:	0800a9f5 	.word	0x0800a9f5
 800a9c8:	0800aa01 	.word	0x0800aa01
 800a9cc:	0800aa01 	.word	0x0800aa01
 800a9d0:	0800aa01 	.word	0x0800aa01
 800a9d4:	0800a9ef 	.word	0x0800a9ef
 800a9d8:	0800aa01 	.word	0x0800aa01
 800a9dc:	0800aa01 	.word	0x0800aa01
 800a9e0:	0800aa01 	.word	0x0800aa01
 800a9e4:	0800a9fb 	.word	0x0800a9fb
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	77fb      	strb	r3, [r7, #31]
 800a9ec:	e117      	b.n	800ac1e <UART_SetConfig+0x34a>
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	77fb      	strb	r3, [r7, #31]
 800a9f2:	e114      	b.n	800ac1e <UART_SetConfig+0x34a>
 800a9f4:	2304      	movs	r3, #4
 800a9f6:	77fb      	strb	r3, [r7, #31]
 800a9f8:	e111      	b.n	800ac1e <UART_SetConfig+0x34a>
 800a9fa:	2308      	movs	r3, #8
 800a9fc:	77fb      	strb	r3, [r7, #31]
 800a9fe:	e10e      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aa00:	2310      	movs	r3, #16
 800aa02:	77fb      	strb	r3, [r7, #31]
 800aa04:	e10b      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a69      	ldr	r2, [pc, #420]	; (800abb0 <UART_SetConfig+0x2dc>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d120      	bne.n	800aa52 <UART_SetConfig+0x17e>
 800aa10:	4b65      	ldr	r3, [pc, #404]	; (800aba8 <UART_SetConfig+0x2d4>)
 800aa12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aa1a:	2b30      	cmp	r3, #48	; 0x30
 800aa1c:	d013      	beq.n	800aa46 <UART_SetConfig+0x172>
 800aa1e:	2b30      	cmp	r3, #48	; 0x30
 800aa20:	d814      	bhi.n	800aa4c <UART_SetConfig+0x178>
 800aa22:	2b20      	cmp	r3, #32
 800aa24:	d009      	beq.n	800aa3a <UART_SetConfig+0x166>
 800aa26:	2b20      	cmp	r3, #32
 800aa28:	d810      	bhi.n	800aa4c <UART_SetConfig+0x178>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <UART_SetConfig+0x160>
 800aa2e:	2b10      	cmp	r3, #16
 800aa30:	d006      	beq.n	800aa40 <UART_SetConfig+0x16c>
 800aa32:	e00b      	b.n	800aa4c <UART_SetConfig+0x178>
 800aa34:	2300      	movs	r3, #0
 800aa36:	77fb      	strb	r3, [r7, #31]
 800aa38:	e0f1      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	77fb      	strb	r3, [r7, #31]
 800aa3e:	e0ee      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aa40:	2304      	movs	r3, #4
 800aa42:	77fb      	strb	r3, [r7, #31]
 800aa44:	e0eb      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aa46:	2308      	movs	r3, #8
 800aa48:	77fb      	strb	r3, [r7, #31]
 800aa4a:	e0e8      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aa4c:	2310      	movs	r3, #16
 800aa4e:	77fb      	strb	r3, [r7, #31]
 800aa50:	e0e5      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a57      	ldr	r2, [pc, #348]	; (800abb4 <UART_SetConfig+0x2e0>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d120      	bne.n	800aa9e <UART_SetConfig+0x1ca>
 800aa5c:	4b52      	ldr	r3, [pc, #328]	; (800aba8 <UART_SetConfig+0x2d4>)
 800aa5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa66:	2bc0      	cmp	r3, #192	; 0xc0
 800aa68:	d013      	beq.n	800aa92 <UART_SetConfig+0x1be>
 800aa6a:	2bc0      	cmp	r3, #192	; 0xc0
 800aa6c:	d814      	bhi.n	800aa98 <UART_SetConfig+0x1c4>
 800aa6e:	2b80      	cmp	r3, #128	; 0x80
 800aa70:	d009      	beq.n	800aa86 <UART_SetConfig+0x1b2>
 800aa72:	2b80      	cmp	r3, #128	; 0x80
 800aa74:	d810      	bhi.n	800aa98 <UART_SetConfig+0x1c4>
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d002      	beq.n	800aa80 <UART_SetConfig+0x1ac>
 800aa7a:	2b40      	cmp	r3, #64	; 0x40
 800aa7c:	d006      	beq.n	800aa8c <UART_SetConfig+0x1b8>
 800aa7e:	e00b      	b.n	800aa98 <UART_SetConfig+0x1c4>
 800aa80:	2300      	movs	r3, #0
 800aa82:	77fb      	strb	r3, [r7, #31]
 800aa84:	e0cb      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aa86:	2302      	movs	r3, #2
 800aa88:	77fb      	strb	r3, [r7, #31]
 800aa8a:	e0c8      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aa8c:	2304      	movs	r3, #4
 800aa8e:	77fb      	strb	r3, [r7, #31]
 800aa90:	e0c5      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aa92:	2308      	movs	r3, #8
 800aa94:	77fb      	strb	r3, [r7, #31]
 800aa96:	e0c2      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aa98:	2310      	movs	r3, #16
 800aa9a:	77fb      	strb	r3, [r7, #31]
 800aa9c:	e0bf      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a45      	ldr	r2, [pc, #276]	; (800abb8 <UART_SetConfig+0x2e4>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d125      	bne.n	800aaf4 <UART_SetConfig+0x220>
 800aaa8:	4b3f      	ldr	r3, [pc, #252]	; (800aba8 <UART_SetConfig+0x2d4>)
 800aaaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aab6:	d017      	beq.n	800aae8 <UART_SetConfig+0x214>
 800aab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aabc:	d817      	bhi.n	800aaee <UART_SetConfig+0x21a>
 800aabe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aac2:	d00b      	beq.n	800aadc <UART_SetConfig+0x208>
 800aac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aac8:	d811      	bhi.n	800aaee <UART_SetConfig+0x21a>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <UART_SetConfig+0x202>
 800aace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aad2:	d006      	beq.n	800aae2 <UART_SetConfig+0x20e>
 800aad4:	e00b      	b.n	800aaee <UART_SetConfig+0x21a>
 800aad6:	2300      	movs	r3, #0
 800aad8:	77fb      	strb	r3, [r7, #31]
 800aada:	e0a0      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aadc:	2302      	movs	r3, #2
 800aade:	77fb      	strb	r3, [r7, #31]
 800aae0:	e09d      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aae2:	2304      	movs	r3, #4
 800aae4:	77fb      	strb	r3, [r7, #31]
 800aae6:	e09a      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aae8:	2308      	movs	r3, #8
 800aaea:	77fb      	strb	r3, [r7, #31]
 800aaec:	e097      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aaee:	2310      	movs	r3, #16
 800aaf0:	77fb      	strb	r3, [r7, #31]
 800aaf2:	e094      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a30      	ldr	r2, [pc, #192]	; (800abbc <UART_SetConfig+0x2e8>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d125      	bne.n	800ab4a <UART_SetConfig+0x276>
 800aafe:	4b2a      	ldr	r3, [pc, #168]	; (800aba8 <UART_SetConfig+0x2d4>)
 800ab00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ab08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab0c:	d017      	beq.n	800ab3e <UART_SetConfig+0x26a>
 800ab0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab12:	d817      	bhi.n	800ab44 <UART_SetConfig+0x270>
 800ab14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab18:	d00b      	beq.n	800ab32 <UART_SetConfig+0x25e>
 800ab1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab1e:	d811      	bhi.n	800ab44 <UART_SetConfig+0x270>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <UART_SetConfig+0x258>
 800ab24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab28:	d006      	beq.n	800ab38 <UART_SetConfig+0x264>
 800ab2a:	e00b      	b.n	800ab44 <UART_SetConfig+0x270>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	77fb      	strb	r3, [r7, #31]
 800ab30:	e075      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ab32:	2302      	movs	r3, #2
 800ab34:	77fb      	strb	r3, [r7, #31]
 800ab36:	e072      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ab38:	2304      	movs	r3, #4
 800ab3a:	77fb      	strb	r3, [r7, #31]
 800ab3c:	e06f      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ab3e:	2308      	movs	r3, #8
 800ab40:	77fb      	strb	r3, [r7, #31]
 800ab42:	e06c      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ab44:	2310      	movs	r3, #16
 800ab46:	77fb      	strb	r3, [r7, #31]
 800ab48:	e069      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a1c      	ldr	r2, [pc, #112]	; (800abc0 <UART_SetConfig+0x2ec>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d137      	bne.n	800abc4 <UART_SetConfig+0x2f0>
 800ab54:	4b14      	ldr	r3, [pc, #80]	; (800aba8 <UART_SetConfig+0x2d4>)
 800ab56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ab5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab62:	d017      	beq.n	800ab94 <UART_SetConfig+0x2c0>
 800ab64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab68:	d817      	bhi.n	800ab9a <UART_SetConfig+0x2c6>
 800ab6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab6e:	d00b      	beq.n	800ab88 <UART_SetConfig+0x2b4>
 800ab70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab74:	d811      	bhi.n	800ab9a <UART_SetConfig+0x2c6>
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <UART_SetConfig+0x2ae>
 800ab7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab7e:	d006      	beq.n	800ab8e <UART_SetConfig+0x2ba>
 800ab80:	e00b      	b.n	800ab9a <UART_SetConfig+0x2c6>
 800ab82:	2300      	movs	r3, #0
 800ab84:	77fb      	strb	r3, [r7, #31]
 800ab86:	e04a      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ab88:	2302      	movs	r3, #2
 800ab8a:	77fb      	strb	r3, [r7, #31]
 800ab8c:	e047      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ab8e:	2304      	movs	r3, #4
 800ab90:	77fb      	strb	r3, [r7, #31]
 800ab92:	e044      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ab94:	2308      	movs	r3, #8
 800ab96:	77fb      	strb	r3, [r7, #31]
 800ab98:	e041      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ab9a:	2310      	movs	r3, #16
 800ab9c:	77fb      	strb	r3, [r7, #31]
 800ab9e:	e03e      	b.n	800ac1e <UART_SetConfig+0x34a>
 800aba0:	efff69f3 	.word	0xefff69f3
 800aba4:	40011000 	.word	0x40011000
 800aba8:	40023800 	.word	0x40023800
 800abac:	40004400 	.word	0x40004400
 800abb0:	40004800 	.word	0x40004800
 800abb4:	40004c00 	.word	0x40004c00
 800abb8:	40005000 	.word	0x40005000
 800abbc:	40011400 	.word	0x40011400
 800abc0:	40007800 	.word	0x40007800
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a94      	ldr	r2, [pc, #592]	; (800ae1c <UART_SetConfig+0x548>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d125      	bne.n	800ac1a <UART_SetConfig+0x346>
 800abce:	4b94      	ldr	r3, [pc, #592]	; (800ae20 <UART_SetConfig+0x54c>)
 800abd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800abd8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800abdc:	d017      	beq.n	800ac0e <UART_SetConfig+0x33a>
 800abde:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800abe2:	d817      	bhi.n	800ac14 <UART_SetConfig+0x340>
 800abe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abe8:	d00b      	beq.n	800ac02 <UART_SetConfig+0x32e>
 800abea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abee:	d811      	bhi.n	800ac14 <UART_SetConfig+0x340>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <UART_SetConfig+0x328>
 800abf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abf8:	d006      	beq.n	800ac08 <UART_SetConfig+0x334>
 800abfa:	e00b      	b.n	800ac14 <UART_SetConfig+0x340>
 800abfc:	2300      	movs	r3, #0
 800abfe:	77fb      	strb	r3, [r7, #31]
 800ac00:	e00d      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ac02:	2302      	movs	r3, #2
 800ac04:	77fb      	strb	r3, [r7, #31]
 800ac06:	e00a      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ac08:	2304      	movs	r3, #4
 800ac0a:	77fb      	strb	r3, [r7, #31]
 800ac0c:	e007      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ac0e:	2308      	movs	r3, #8
 800ac10:	77fb      	strb	r3, [r7, #31]
 800ac12:	e004      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ac14:	2310      	movs	r3, #16
 800ac16:	77fb      	strb	r3, [r7, #31]
 800ac18:	e001      	b.n	800ac1e <UART_SetConfig+0x34a>
 800ac1a:	2310      	movs	r3, #16
 800ac1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	69db      	ldr	r3, [r3, #28]
 800ac22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac26:	d17f      	bne.n	800ad28 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800ac28:	7ffb      	ldrb	r3, [r7, #31]
 800ac2a:	2b08      	cmp	r3, #8
 800ac2c:	d85c      	bhi.n	800ace8 <UART_SetConfig+0x414>
 800ac2e:	a201      	add	r2, pc, #4	; (adr r2, 800ac34 <UART_SetConfig+0x360>)
 800ac30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac34:	0800ac59 	.word	0x0800ac59
 800ac38:	0800ac79 	.word	0x0800ac79
 800ac3c:	0800ac99 	.word	0x0800ac99
 800ac40:	0800ace9 	.word	0x0800ace9
 800ac44:	0800acb1 	.word	0x0800acb1
 800ac48:	0800ace9 	.word	0x0800ace9
 800ac4c:	0800ace9 	.word	0x0800ace9
 800ac50:	0800ace9 	.word	0x0800ace9
 800ac54:	0800acd1 	.word	0x0800acd1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac58:	f7fd f94e 	bl	8007ef8 <HAL_RCC_GetPCLK1Freq>
 800ac5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	005a      	lsls	r2, r3, #1
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	085b      	lsrs	r3, r3, #1
 800ac68:	441a      	add	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	61bb      	str	r3, [r7, #24]
        break;
 800ac76:	e03a      	b.n	800acee <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac78:	f7fd f952 	bl	8007f20 <HAL_RCC_GetPCLK2Freq>
 800ac7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	005a      	lsls	r2, r3, #1
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	085b      	lsrs	r3, r3, #1
 800ac88:	441a      	add	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	61bb      	str	r3, [r7, #24]
        break;
 800ac96:	e02a      	b.n	800acee <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	085a      	lsrs	r2, r3, #1
 800ac9e:	4b61      	ldr	r3, [pc, #388]	; (800ae24 <UART_SetConfig+0x550>)
 800aca0:	4413      	add	r3, r2
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	6852      	ldr	r2, [r2, #4]
 800aca6:	fbb3 f3f2 	udiv	r3, r3, r2
 800acaa:	b29b      	uxth	r3, r3
 800acac:	61bb      	str	r3, [r7, #24]
        break;
 800acae:	e01e      	b.n	800acee <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acb0:	f7fd f860 	bl	8007d74 <HAL_RCC_GetSysClockFreq>
 800acb4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	005a      	lsls	r2, r3, #1
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	085b      	lsrs	r3, r3, #1
 800acc0:	441a      	add	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acca:	b29b      	uxth	r3, r3
 800accc:	61bb      	str	r3, [r7, #24]
        break;
 800acce:	e00e      	b.n	800acee <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	085b      	lsrs	r3, r3, #1
 800acd6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	fbb2 f3f3 	udiv	r3, r2, r3
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	61bb      	str	r3, [r7, #24]
        break;
 800ace6:	e002      	b.n	800acee <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	75fb      	strb	r3, [r7, #23]
        break;
 800acec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	2b0f      	cmp	r3, #15
 800acf2:	d916      	bls.n	800ad22 <UART_SetConfig+0x44e>
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acfa:	d212      	bcs.n	800ad22 <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	f023 030f 	bic.w	r3, r3, #15
 800ad04:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	085b      	lsrs	r3, r3, #1
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	f003 0307 	and.w	r3, r3, #7
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	897b      	ldrh	r3, [r7, #10]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	897a      	ldrh	r2, [r7, #10]
 800ad1e:	60da      	str	r2, [r3, #12]
 800ad20:	e070      	b.n	800ae04 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	75fb      	strb	r3, [r7, #23]
 800ad26:	e06d      	b.n	800ae04 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 800ad28:	7ffb      	ldrb	r3, [r7, #31]
 800ad2a:	2b08      	cmp	r3, #8
 800ad2c:	d859      	bhi.n	800ade2 <UART_SetConfig+0x50e>
 800ad2e:	a201      	add	r2, pc, #4	; (adr r2, 800ad34 <UART_SetConfig+0x460>)
 800ad30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad34:	0800ad59 	.word	0x0800ad59
 800ad38:	0800ad77 	.word	0x0800ad77
 800ad3c:	0800ad95 	.word	0x0800ad95
 800ad40:	0800ade3 	.word	0x0800ade3
 800ad44:	0800adad 	.word	0x0800adad
 800ad48:	0800ade3 	.word	0x0800ade3
 800ad4c:	0800ade3 	.word	0x0800ade3
 800ad50:	0800ade3 	.word	0x0800ade3
 800ad54:	0800adcb 	.word	0x0800adcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad58:	f7fd f8ce 	bl	8007ef8 <HAL_RCC_GetPCLK1Freq>
 800ad5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	085a      	lsrs	r2, r3, #1
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	441a      	add	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	61bb      	str	r3, [r7, #24]
        break;
 800ad74:	e038      	b.n	800ade8 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad76:	f7fd f8d3 	bl	8007f20 <HAL_RCC_GetPCLK2Freq>
 800ad7a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	085a      	lsrs	r2, r3, #1
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	441a      	add	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	61bb      	str	r3, [r7, #24]
        break;
 800ad92:	e029      	b.n	800ade8 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	085a      	lsrs	r2, r3, #1
 800ad9a:	4b23      	ldr	r3, [pc, #140]	; (800ae28 <UART_SetConfig+0x554>)
 800ad9c:	4413      	add	r3, r2
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	6852      	ldr	r2, [r2, #4]
 800ada2:	fbb3 f3f2 	udiv	r3, r3, r2
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	61bb      	str	r3, [r7, #24]
        break;
 800adaa:	e01d      	b.n	800ade8 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adac:	f7fc ffe2 	bl	8007d74 <HAL_RCC_GetSysClockFreq>
 800adb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	085a      	lsrs	r2, r3, #1
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	441a      	add	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	61bb      	str	r3, [r7, #24]
        break;
 800adc8:	e00e      	b.n	800ade8 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	085b      	lsrs	r3, r3, #1
 800add0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	fbb2 f3f3 	udiv	r3, r2, r3
 800addc:	b29b      	uxth	r3, r3
 800adde:	61bb      	str	r3, [r7, #24]
        break;
 800ade0:	e002      	b.n	800ade8 <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	75fb      	strb	r3, [r7, #23]
        break;
 800ade6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	2b0f      	cmp	r3, #15
 800adec:	d908      	bls.n	800ae00 <UART_SetConfig+0x52c>
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adf4:	d204      	bcs.n	800ae00 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	69ba      	ldr	r2, [r7, #24]
 800adfc:	60da      	str	r2, [r3, #12]
 800adfe:	e001      	b.n	800ae04 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ae10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3720      	adds	r7, #32
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	40007c00 	.word	0x40007c00
 800ae20:	40023800 	.word	0x40023800
 800ae24:	01e84800 	.word	0x01e84800
 800ae28:	00f42400 	.word	0x00f42400

0800ae2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	f003 0301 	and.w	r3, r3, #1
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00a      	beq.n	800ae56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	430a      	orrs	r2, r1
 800ae54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5a:	f003 0302 	and.w	r3, r3, #2
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00a      	beq.n	800ae78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	430a      	orrs	r2, r1
 800ae76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7c:	f003 0304 	and.w	r3, r3, #4
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00a      	beq.n	800ae9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	430a      	orrs	r2, r1
 800ae98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	f003 0308 	and.w	r3, r3, #8
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	430a      	orrs	r2, r1
 800aeba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec0:	f003 0310 	and.w	r3, r3, #16
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00a      	beq.n	800aede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	430a      	orrs	r2, r1
 800aedc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee2:	f003 0320 	and.w	r3, r3, #32
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00a      	beq.n	800af00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	430a      	orrs	r2, r1
 800aefe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d01a      	beq.n	800af42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af2a:	d10a      	bne.n	800af42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	430a      	orrs	r2, r1
 800af40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00a      	beq.n	800af64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	430a      	orrs	r2, r1
 800af62:	605a      	str	r2, [r3, #4]
  }
}
 800af64:	bf00      	nop
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af02      	add	r7, sp, #8
 800af76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800af7e:	f7f9 fcd1 	bl	8004924 <HAL_GetTick>
 800af82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 0308 	and.w	r3, r3, #8
 800af8e:	2b08      	cmp	r3, #8
 800af90:	d10e      	bne.n	800afb0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f814 	bl	800afce <UART_WaitOnFlagUntilTimeout>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afac:	2303      	movs	r3, #3
 800afae:	e00a      	b.n	800afc6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2220      	movs	r2, #32
 800afb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2220      	movs	r2, #32
 800afba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	603b      	str	r3, [r7, #0]
 800afda:	4613      	mov	r3, r2
 800afdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afde:	e05d      	b.n	800b09c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe6:	d059      	beq.n	800b09c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afe8:	f7f9 fc9c 	bl	8004924 <HAL_GetTick>
 800afec:	4602      	mov	r2, r0
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	69ba      	ldr	r2, [r7, #24]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d302      	bcc.n	800affe <UART_WaitOnFlagUntilTimeout+0x30>
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d11b      	bne.n	800b036 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b00c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	689a      	ldr	r2, [r3, #8]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f022 0201 	bic.w	r2, r2, #1
 800b01c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2220      	movs	r2, #32
 800b022:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2220      	movs	r2, #32
 800b028:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e042      	b.n	800b0bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 0304 	and.w	r3, r3, #4
 800b040:	2b00      	cmp	r3, #0
 800b042:	d02b      	beq.n	800b09c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	69db      	ldr	r3, [r3, #28]
 800b04a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b04e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b052:	d123      	bne.n	800b09c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b05c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b06c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689a      	ldr	r2, [r3, #8]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f022 0201 	bic.w	r2, r2, #1
 800b07c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2220      	movs	r2, #32
 800b082:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2220      	movs	r2, #32
 800b088:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2220      	movs	r2, #32
 800b08e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	e00f      	b.n	800b0bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	69da      	ldr	r2, [r3, #28]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	bf0c      	ite	eq
 800b0ac:	2301      	moveq	r3, #1
 800b0ae:	2300      	movne	r3, #0
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	79fb      	ldrb	r3, [r7, #7]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d092      	beq.n	800afe0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b0da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689a      	ldr	r2, [r3, #8]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f022 0201 	bic.w	r2, r2, #1
 800b0ea:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2220      	movs	r2, #32
 800b0f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b0f8:	bf00      	nop
 800b0fa:	370c      	adds	r7, #12
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr

0800b104 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b110:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f7ff fbcc 	bl	800a8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b128:	bf00      	nop
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b13c:	2b21      	cmp	r3, #33	; 0x21
 800b13e:	d12a      	bne.n	800b196 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b146:	b29b      	uxth	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d110      	bne.n	800b16e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b15a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b16a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b16c:	e013      	b.n	800b196 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b172:	781a      	ldrb	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	3b01      	subs	r3, #1
 800b18e:	b29a      	uxth	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b196:	bf00      	nop
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b1a2:	b480      	push	{r7}
 800b1a4:	b085      	sub	sp, #20
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1ae:	2b21      	cmp	r3, #33	; 0x21
 800b1b0:	d12f      	bne.n	800b212 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d110      	bne.n	800b1e0 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1cc:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1dc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b1de:	e018      	b.n	800b212 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	881b      	ldrh	r3, [r3, #0]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1f4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1fa:	1c9a      	adds	r2, r3, #2
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b206:	b29b      	uxth	r3, r3
 800b208:	3b01      	subs	r3, #1
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b212:	bf00      	nop
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b234:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2220      	movs	r2, #32
 800b23a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7ff fb32 	bl	800a8ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b248:	bf00      	nop
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b25e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b264:	2b22      	cmp	r3, #34	; 0x22
 800b266:	d13a      	bne.n	800b2de <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b270:	89bb      	ldrh	r3, [r7, #12]
 800b272:	b2d9      	uxtb	r1, r3
 800b274:	89fb      	ldrh	r3, [r7, #14]
 800b276:	b2da      	uxtb	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27c:	400a      	ands	r2, r1
 800b27e:	b2d2      	uxtb	r2, r2
 800b280:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b292:	b29b      	uxth	r3, r3
 800b294:	3b01      	subs	r3, #1
 800b296:	b29a      	uxth	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d121      	bne.n	800b2ee <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b2b8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f022 0201 	bic.w	r2, r2, #1
 800b2c8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f7f6 fc86 	bl	8001be8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2dc:	e007      	b.n	800b2ee <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	699a      	ldr	r2, [r3, #24]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f042 0208 	orr.w	r2, r2, #8
 800b2ec:	619a      	str	r2, [r3, #24]
}
 800b2ee:	bf00      	nop
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b304:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b30a:	2b22      	cmp	r3, #34	; 0x22
 800b30c:	d13a      	bne.n	800b384 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b314:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b31c:	89ba      	ldrh	r2, [r7, #12]
 800b31e:	89fb      	ldrh	r3, [r7, #14]
 800b320:	4013      	ands	r3, r2
 800b322:	b29a      	uxth	r2, r3
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b32c:	1c9a      	adds	r2, r3, #2
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b338:	b29b      	uxth	r3, r3
 800b33a:	3b01      	subs	r3, #1
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d121      	bne.n	800b394 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b35e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689a      	ldr	r2, [r3, #8]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f022 0201 	bic.w	r2, r2, #1
 800b36e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2220      	movs	r2, #32
 800b374:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f7f6 fc33 	bl	8001be8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b382:	e007      	b.n	800b394 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	699a      	ldr	r2, [r3, #24]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f042 0208 	orr.w	r2, r2, #8
 800b392:	619a      	str	r2, [r3, #24]
}
 800b394:	bf00      	nop
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d027      	beq.n	800b406 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	4b2f      	ldr	r3, [pc, #188]	; (800b47c <FMC_SDRAM_Init+0xe0>)
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3cc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b3d2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b3d8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b3de:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b3e4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b3ea:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b3f0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b3f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	e032      	b.n	800b46c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b412:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b41c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b422:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	4b12      	ldr	r3, [pc, #72]	; (800b47c <FMC_SDRAM_Init+0xe0>)
 800b434:	4013      	ands	r3, r2
 800b436:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b440:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b446:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b44c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b452:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b458:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3714      	adds	r7, #20
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	ffff8000 	.word	0xffff8000

0800b480 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b480:	b480      	push	{r7}
 800b482:	b087      	sub	sp, #28
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b490:	2300      	movs	r3, #0
 800b492:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d02e      	beq.n	800b4f8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b4a6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4b6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b4c0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b4ca:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b4d4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b4de:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	697a      	ldr	r2, [r7, #20]
 800b4f4:	609a      	str	r2, [r3, #8]
 800b4f6:	e039      	b.n	800b56c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	4b1e      	ldr	r3, [pc, #120]	; (800b57c <FMC_SDRAM_Timing_Init+0xfc>)
 800b502:	4013      	ands	r3, r2
 800b504:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	3b01      	subs	r3, #1
 800b514:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b516:	4313      	orrs	r3, r2
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b52a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	3b01      	subs	r3, #1
 800b538:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b53a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	3b01      	subs	r3, #1
 800b542:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b544:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b54e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	3b01      	subs	r3, #1
 800b556:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b558:	4313      	orrs	r3, r2
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	697a      	ldr	r2, [r7, #20]
 800b564:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	693a      	ldr	r2, [r7, #16]
 800b56a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	371c      	adds	r7, #28
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	ff0f0fff 	.word	0xff0f0fff

0800b580 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b580:	b480      	push	{r7}
 800b582:	b087      	sub	sp, #28
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b58c:	2300      	movs	r3, #0
 800b58e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b598:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b5a2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	371c      	adds	r7, #28
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b083      	sub	sp, #12
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	695a      	ldr	r2, [r3, #20]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	005b      	lsls	r3, r3, #1
 800b5d4:	431a      	orrs	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b5f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5fa:	2b84      	cmp	r3, #132	; 0x84
 800b5fc:	d005      	beq.n	800b60a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b5fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	4413      	add	r3, r2
 800b606:	3303      	adds	r3, #3
 800b608:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b60a:	68fb      	ldr	r3, [r7, #12]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b61c:	f001 f902 	bl	800c824 <vTaskStartScheduler>
  
  return osOK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	bd80      	pop	{r7, pc}

0800b626 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b626:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b628:	b089      	sub	sp, #36	; 0x24
 800b62a:	af04      	add	r7, sp, #16
 800b62c:	6078      	str	r0, [r7, #4]
 800b62e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d020      	beq.n	800b67a <osThreadCreate+0x54>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	699b      	ldr	r3, [r3, #24]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d01c      	beq.n	800b67a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685c      	ldr	r4, [r3, #4]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681d      	ldr	r5, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	691e      	ldr	r6, [r3, #16]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff ffc8 	bl	800b5e8 <makeFreeRtosPriority>
 800b658:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	695b      	ldr	r3, [r3, #20]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b662:	9202      	str	r2, [sp, #8]
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	9100      	str	r1, [sp, #0]
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	4632      	mov	r2, r6
 800b66c:	4629      	mov	r1, r5
 800b66e:	4620      	mov	r0, r4
 800b670:	f000 fde4 	bl	800c23c <xTaskCreateStatic>
 800b674:	4603      	mov	r3, r0
 800b676:	60fb      	str	r3, [r7, #12]
 800b678:	e01c      	b.n	800b6b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685c      	ldr	r4, [r3, #4]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b686:	b29e      	uxth	r6, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b68e:	4618      	mov	r0, r3
 800b690:	f7ff ffaa 	bl	800b5e8 <makeFreeRtosPriority>
 800b694:	4602      	mov	r2, r0
 800b696:	f107 030c 	add.w	r3, r7, #12
 800b69a:	9301      	str	r3, [sp, #4]
 800b69c:	9200      	str	r2, [sp, #0]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	4632      	mov	r2, r6
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f000 fe2c 	bl	800c302 <xTaskCreate>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d001      	beq.n	800b6b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	e000      	b.n	800b6b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <osDelay+0x16>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	e000      	b.n	800b6d6 <osDelay+0x18>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f000 ffda 	bl	800c690 <vTaskDelay>
  
  return osOK;
 800b6dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b082      	sub	sp, #8
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d007      	beq.n	800b706 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	2001      	movs	r0, #1
 800b6fe:	f000 fa66 	bl	800bbce <xQueueCreateMutexStatic>
 800b702:	4603      	mov	r3, r0
 800b704:	e003      	b.n	800b70e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b706:	2001      	movs	r0, #1
 800b708:	f000 fa49 	bl	800bb9e <xQueueCreateMutex>
 800b70c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3708      	adds	r7, #8
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b716:	b590      	push	{r4, r7, lr}
 800b718:	b085      	sub	sp, #20
 800b71a:	af02      	add	r7, sp, #8
 800b71c:	6078      	str	r0, [r7, #4]
 800b71e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d011      	beq.n	800b74c <osMessageCreate+0x36>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00d      	beq.n	800b74c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6818      	ldr	r0, [r3, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6859      	ldr	r1, [r3, #4]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	689a      	ldr	r2, [r3, #8]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	2400      	movs	r4, #0
 800b742:	9400      	str	r4, [sp, #0]
 800b744:	f000 f92e 	bl	800b9a4 <xQueueGenericCreateStatic>
 800b748:	4603      	mov	r3, r0
 800b74a:	e008      	b.n	800b75e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6818      	ldr	r0, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	4619      	mov	r1, r3
 800b758:	f000 f9a6 	bl	800baa8 <xQueueGenericCreate>
 800b75c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b75e:	4618      	mov	r0, r3
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	bd90      	pop	{r4, r7, pc}

0800b766 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b766:	b480      	push	{r7}
 800b768:	b083      	sub	sp, #12
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f103 0208 	add.w	r2, r3, #8
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f04f 32ff 	mov.w	r2, #4294967295
 800b77e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f103 0208 	add.w	r2, r3, #8
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f103 0208 	add.w	r2, r3, #8
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b79a:	bf00      	nop
 800b79c:	370c      	adds	r7, #12
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	b083      	sub	sp, #12
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	689a      	ldr	r2, [r3, #8]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	683a      	ldr	r2, [r7, #0]
 800b7ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	1c5a      	adds	r2, r3, #1
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	601a      	str	r2, [r3, #0]
}
 800b7fc:	bf00      	nop
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81e:	d103      	bne.n	800b828 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	60fb      	str	r3, [r7, #12]
 800b826:	e00c      	b.n	800b842 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	3308      	adds	r3, #8
 800b82c:	60fb      	str	r3, [r7, #12]
 800b82e:	e002      	b.n	800b836 <vListInsert+0x2e>
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	60fb      	str	r3, [r7, #12]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d2f6      	bcs.n	800b830 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	601a      	str	r2, [r3, #0]
}
 800b86e:	bf00      	nop
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b87a:	b480      	push	{r7}
 800b87c:	b085      	sub	sp, #20
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	6892      	ldr	r2, [r2, #8]
 800b890:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	6852      	ldr	r2, [r2, #4]
 800b89a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d103      	bne.n	800b8ae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	689a      	ldr	r2, [r3, #8]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	1e5a      	subs	r2, r3, #1
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3714      	adds	r7, #20
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
	...

0800b8d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10c      	bne.n	800b8fe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	b672      	cpsid	i
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	b662      	cpsie	i
 800b8f8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b8fe:	f001 ff25 	bl	800d74c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b90a:	68f9      	ldr	r1, [r7, #12]
 800b90c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b90e:	fb01 f303 	mul.w	r3, r1, r3
 800b912:	441a      	add	r2, r3
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b92e:	3b01      	subs	r3, #1
 800b930:	68f9      	ldr	r1, [r7, #12]
 800b932:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b934:	fb01 f303 	mul.w	r3, r1, r3
 800b938:	441a      	add	r2, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	22ff      	movs	r2, #255	; 0xff
 800b942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	22ff      	movs	r2, #255	; 0xff
 800b94a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d114      	bne.n	800b97e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d01a      	beq.n	800b992 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	3310      	adds	r3, #16
 800b960:	4618      	mov	r0, r3
 800b962:	f001 f9e1 	bl	800cd28 <xTaskRemoveFromEventList>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d012      	beq.n	800b992 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b96c:	4b0c      	ldr	r3, [pc, #48]	; (800b9a0 <xQueueGenericReset+0xd0>)
 800b96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	f3bf 8f6f 	isb	sy
 800b97c:	e009      	b.n	800b992 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	3310      	adds	r3, #16
 800b982:	4618      	mov	r0, r3
 800b984:	f7ff feef 	bl	800b766 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	3324      	adds	r3, #36	; 0x24
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7ff feea 	bl	800b766 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b992:	f001 ff0f 	bl	800d7b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b996:	2301      	movs	r3, #1
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	e000ed04 	.word	0xe000ed04

0800b9a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08e      	sub	sp, #56	; 0x38
 800b9a8:	af02      	add	r7, sp, #8
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
 800b9b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10c      	bne.n	800b9d2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9bc:	b672      	cpsid	i
 800b9be:	f383 8811 	msr	BASEPRI, r3
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	f3bf 8f4f 	dsb	sy
 800b9ca:	b662      	cpsie	i
 800b9cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b9ce:	bf00      	nop
 800b9d0:	e7fe      	b.n	800b9d0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10c      	bne.n	800b9f2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9dc:	b672      	cpsid	i
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	b662      	cpsie	i
 800b9ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b9ee:	bf00      	nop
 800b9f0:	e7fe      	b.n	800b9f0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <xQueueGenericCreateStatic+0x5a>
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <xQueueGenericCreateStatic+0x5e>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e000      	b.n	800ba04 <xQueueGenericCreateStatic+0x60>
 800ba02:	2300      	movs	r3, #0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10c      	bne.n	800ba22 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800ba08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0c:	b672      	cpsid	i
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	b662      	cpsie	i
 800ba1c:	623b      	str	r3, [r7, #32]
}
 800ba1e:	bf00      	nop
 800ba20:	e7fe      	b.n	800ba20 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d102      	bne.n	800ba2e <xQueueGenericCreateStatic+0x8a>
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d101      	bne.n	800ba32 <xQueueGenericCreateStatic+0x8e>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e000      	b.n	800ba34 <xQueueGenericCreateStatic+0x90>
 800ba32:	2300      	movs	r3, #0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10c      	bne.n	800ba52 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	b672      	cpsid	i
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	b662      	cpsie	i
 800ba4c:	61fb      	str	r3, [r7, #28]
}
 800ba4e:	bf00      	nop
 800ba50:	e7fe      	b.n	800ba50 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba52:	2348      	movs	r3, #72	; 0x48
 800ba54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2b48      	cmp	r3, #72	; 0x48
 800ba5a:	d00c      	beq.n	800ba76 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba60:	b672      	cpsid	i
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	b662      	cpsie	i
 800ba70:	61bb      	str	r3, [r7, #24]
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ba7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00d      	beq.n	800ba9e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ba8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	4613      	mov	r3, r2
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	68b9      	ldr	r1, [r7, #8]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f000 f847 	bl	800bb2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3730      	adds	r7, #48	; 0x30
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b08a      	sub	sp, #40	; 0x28
 800baac:	af02      	add	r7, sp, #8
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	4613      	mov	r3, r2
 800bab4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10c      	bne.n	800bad6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac0:	b672      	cpsid	i
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	b662      	cpsie	i
 800bad0:	613b      	str	r3, [r7, #16]
}
 800bad2:	bf00      	nop
 800bad4:	e7fe      	b.n	800bad4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d102      	bne.n	800bae2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800badc:	2300      	movs	r3, #0
 800bade:	61fb      	str	r3, [r7, #28]
 800bae0:	e004      	b.n	800baec <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	fb02 f303 	mul.w	r3, r2, r3
 800baea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	3348      	adds	r3, #72	; 0x48
 800baf0:	4618      	mov	r0, r3
 800baf2:	f001 ff13 	bl	800d91c <pvPortMalloc>
 800baf6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d011      	beq.n	800bb22 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	3348      	adds	r3, #72	; 0x48
 800bb06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb10:	79fa      	ldrb	r2, [r7, #7]
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	4613      	mov	r3, r2
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	68b9      	ldr	r1, [r7, #8]
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f000 f805 	bl	800bb2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb22:	69bb      	ldr	r3, [r7, #24]
	}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3720      	adds	r7, #32
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
 800bb38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d103      	bne.n	800bb48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	69ba      	ldr	r2, [r7, #24]
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	e002      	b.n	800bb4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	69b8      	ldr	r0, [r7, #24]
 800bb5e:	f7ff feb7 	bl	800b8d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb62:	bf00      	nop
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b082      	sub	sp, #8
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00e      	beq.n	800bb96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2100      	movs	r1, #0
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f837 	bl	800bc04 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bb96:	bf00      	nop
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b086      	sub	sp, #24
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	4603      	mov	r3, r0
 800bba6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	2300      	movs	r3, #0
 800bbae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bbb0:	79fb      	ldrb	r3, [r7, #7]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	6939      	ldr	r1, [r7, #16]
 800bbb6:	6978      	ldr	r0, [r7, #20]
 800bbb8:	f7ff ff76 	bl	800baa8 <xQueueGenericCreate>
 800bbbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f7ff ffd3 	bl	800bb6a <prvInitialiseMutex>

		return xNewQueue;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
	}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3718      	adds	r7, #24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b088      	sub	sp, #32
 800bbd2:	af02      	add	r7, sp, #8
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	6039      	str	r1, [r7, #0]
 800bbd8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	617b      	str	r3, [r7, #20]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bbe2:	79fb      	ldrb	r3, [r7, #7]
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	6939      	ldr	r1, [r7, #16]
 800bbec:	6978      	ldr	r0, [r7, #20]
 800bbee:	f7ff fed9 	bl	800b9a4 <xQueueGenericCreateStatic>
 800bbf2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f7ff ffb8 	bl	800bb6a <prvInitialiseMutex>

		return xNewQueue;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
	}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b08e      	sub	sp, #56	; 0x38
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
 800bc10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc12:	2300      	movs	r3, #0
 800bc14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10c      	bne.n	800bc3a <xQueueGenericSend+0x36>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	b672      	cpsid	i
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	b662      	cpsie	i
 800bc34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc36:	bf00      	nop
 800bc38:	e7fe      	b.n	800bc38 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d103      	bne.n	800bc48 <xQueueGenericSend+0x44>
 800bc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <xQueueGenericSend+0x48>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e000      	b.n	800bc4e <xQueueGenericSend+0x4a>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10c      	bne.n	800bc6c <xQueueGenericSend+0x68>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	b672      	cpsid	i
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	b662      	cpsie	i
 800bc66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc68:	bf00      	nop
 800bc6a:	e7fe      	b.n	800bc6a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	d103      	bne.n	800bc7a <xQueueGenericSend+0x76>
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d101      	bne.n	800bc7e <xQueueGenericSend+0x7a>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e000      	b.n	800bc80 <xQueueGenericSend+0x7c>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10c      	bne.n	800bc9e <xQueueGenericSend+0x9a>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	b672      	cpsid	i
 800bc8a:	f383 8811 	msr	BASEPRI, r3
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	b662      	cpsie	i
 800bc98:	623b      	str	r3, [r7, #32]
}
 800bc9a:	bf00      	nop
 800bc9c:	e7fe      	b.n	800bc9c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc9e:	f001 fa09 	bl	800d0b4 <xTaskGetSchedulerState>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d102      	bne.n	800bcae <xQueueGenericSend+0xaa>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d101      	bne.n	800bcb2 <xQueueGenericSend+0xae>
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e000      	b.n	800bcb4 <xQueueGenericSend+0xb0>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10c      	bne.n	800bcd2 <xQueueGenericSend+0xce>
	__asm volatile
 800bcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbc:	b672      	cpsid	i
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	b662      	cpsie	i
 800bccc:	61fb      	str	r3, [r7, #28]
}
 800bcce:	bf00      	nop
 800bcd0:	e7fe      	b.n	800bcd0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcd2:	f001 fd3b 	bl	800d74c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d302      	bcc.n	800bce8 <xQueueGenericSend+0xe4>
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	d129      	bne.n	800bd3c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	68b9      	ldr	r1, [r7, #8]
 800bcec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcee:	f000 f9bb 	bl	800c068 <prvCopyDataToQueue>
 800bcf2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d010      	beq.n	800bd1e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	3324      	adds	r3, #36	; 0x24
 800bd00:	4618      	mov	r0, r3
 800bd02:	f001 f811 	bl	800cd28 <xTaskRemoveFromEventList>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d013      	beq.n	800bd34 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd0c:	4b3f      	ldr	r3, [pc, #252]	; (800be0c <xQueueGenericSend+0x208>)
 800bd0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd12:	601a      	str	r2, [r3, #0]
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	e00a      	b.n	800bd34 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d007      	beq.n	800bd34 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd24:	4b39      	ldr	r3, [pc, #228]	; (800be0c <xQueueGenericSend+0x208>)
 800bd26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2a:	601a      	str	r2, [r3, #0]
 800bd2c:	f3bf 8f4f 	dsb	sy
 800bd30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd34:	f001 fd3e 	bl	800d7b4 <vPortExitCritical>
				return pdPASS;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e063      	b.n	800be04 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d103      	bne.n	800bd4a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd42:	f001 fd37 	bl	800d7b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd46:	2300      	movs	r3, #0
 800bd48:	e05c      	b.n	800be04 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d106      	bne.n	800bd5e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd50:	f107 0314 	add.w	r3, r7, #20
 800bd54:	4618      	mov	r0, r3
 800bd56:	f001 f84b 	bl	800cdf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd5e:	f001 fd29 	bl	800d7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd62:	f000 fdc3 	bl	800c8ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd66:	f001 fcf1 	bl	800d74c <vPortEnterCritical>
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd70:	b25b      	sxtb	r3, r3
 800bd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd76:	d103      	bne.n	800bd80 <xQueueGenericSend+0x17c>
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd86:	b25b      	sxtb	r3, r3
 800bd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8c:	d103      	bne.n	800bd96 <xQueueGenericSend+0x192>
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd96:	f001 fd0d 	bl	800d7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd9a:	1d3a      	adds	r2, r7, #4
 800bd9c:	f107 0314 	add.w	r3, r7, #20
 800bda0:	4611      	mov	r1, r2
 800bda2:	4618      	mov	r0, r3
 800bda4:	f001 f83a 	bl	800ce1c <xTaskCheckForTimeOut>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d124      	bne.n	800bdf8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bdae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdb0:	f000 fa2c 	bl	800c20c <prvIsQueueFull>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d018      	beq.n	800bdec <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	3310      	adds	r3, #16
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 ff8a 	bl	800ccdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bdc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdca:	f000 f9b7 	bl	800c13c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bdce:	f000 fd9b 	bl	800c908 <xTaskResumeAll>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f47f af7c 	bne.w	800bcd2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800bdda:	4b0c      	ldr	r3, [pc, #48]	; (800be0c <xQueueGenericSend+0x208>)
 800bddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	e772      	b.n	800bcd2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bdec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdee:	f000 f9a5 	bl	800c13c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdf2:	f000 fd89 	bl	800c908 <xTaskResumeAll>
 800bdf6:	e76c      	b.n	800bcd2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bdf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdfa:	f000 f99f 	bl	800c13c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdfe:	f000 fd83 	bl	800c908 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be04:	4618      	mov	r0, r3
 800be06:	3738      	adds	r7, #56	; 0x38
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	e000ed04 	.word	0xe000ed04

0800be10 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b08e      	sub	sp, #56	; 0x38
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800be1a:	2300      	movs	r3, #0
 800be1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800be22:	2300      	movs	r3, #0
 800be24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10c      	bne.n	800be46 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	b672      	cpsid	i
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	b662      	cpsie	i
 800be40:	623b      	str	r3, [r7, #32]
}
 800be42:	bf00      	nop
 800be44:	e7fe      	b.n	800be44 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00c      	beq.n	800be68 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	b672      	cpsid	i
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	b662      	cpsie	i
 800be62:	61fb      	str	r3, [r7, #28]
}
 800be64:	bf00      	nop
 800be66:	e7fe      	b.n	800be66 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be68:	f001 f924 	bl	800d0b4 <xTaskGetSchedulerState>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d102      	bne.n	800be78 <xQueueSemaphoreTake+0x68>
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <xQueueSemaphoreTake+0x6c>
 800be78:	2301      	movs	r3, #1
 800be7a:	e000      	b.n	800be7e <xQueueSemaphoreTake+0x6e>
 800be7c:	2300      	movs	r3, #0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10c      	bne.n	800be9c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be86:	b672      	cpsid	i
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	b662      	cpsie	i
 800be96:	61bb      	str	r3, [r7, #24]
}
 800be98:	bf00      	nop
 800be9a:	e7fe      	b.n	800be9a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be9c:	f001 fc56 	bl	800d74c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d024      	beq.n	800bef6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800beac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beae:	1e5a      	subs	r2, r3, #1
 800beb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800beb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d104      	bne.n	800bec6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bebc:	f001 fac0 	bl	800d440 <pvTaskIncrementMutexHeldCount>
 800bec0:	4602      	mov	r2, r0
 800bec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec8:	691b      	ldr	r3, [r3, #16]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00f      	beq.n	800beee <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed0:	3310      	adds	r3, #16
 800bed2:	4618      	mov	r0, r3
 800bed4:	f000 ff28 	bl	800cd28 <xTaskRemoveFromEventList>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d007      	beq.n	800beee <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bede:	4b55      	ldr	r3, [pc, #340]	; (800c034 <xQueueSemaphoreTake+0x224>)
 800bee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bee4:	601a      	str	r2, [r3, #0]
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800beee:	f001 fc61 	bl	800d7b4 <vPortExitCritical>
				return pdPASS;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e099      	b.n	800c02a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d113      	bne.n	800bf24 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800befc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00c      	beq.n	800bf1c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800bf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf06:	b672      	cpsid	i
 800bf08:	f383 8811 	msr	BASEPRI, r3
 800bf0c:	f3bf 8f6f 	isb	sy
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	b662      	cpsie	i
 800bf16:	617b      	str	r3, [r7, #20]
}
 800bf18:	bf00      	nop
 800bf1a:	e7fe      	b.n	800bf1a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bf1c:	f001 fc4a 	bl	800d7b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf20:	2300      	movs	r3, #0
 800bf22:	e082      	b.n	800c02a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d106      	bne.n	800bf38 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf2a:	f107 030c 	add.w	r3, r7, #12
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 ff5e 	bl	800cdf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf34:	2301      	movs	r3, #1
 800bf36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf38:	f001 fc3c 	bl	800d7b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf3c:	f000 fcd6 	bl	800c8ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf40:	f001 fc04 	bl	800d74c <vPortEnterCritical>
 800bf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf4a:	b25b      	sxtb	r3, r3
 800bf4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf50:	d103      	bne.n	800bf5a <xQueueSemaphoreTake+0x14a>
 800bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf60:	b25b      	sxtb	r3, r3
 800bf62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf66:	d103      	bne.n	800bf70 <xQueueSemaphoreTake+0x160>
 800bf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf70:	f001 fc20 	bl	800d7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf74:	463a      	mov	r2, r7
 800bf76:	f107 030c 	add.w	r3, r7, #12
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f000 ff4d 	bl	800ce1c <xTaskCheckForTimeOut>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d132      	bne.n	800bfee <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf8a:	f000 f929 	bl	800c1e0 <prvIsQueueEmpty>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d026      	beq.n	800bfe2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d109      	bne.n	800bfb0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800bf9c:	f001 fbd6 	bl	800d74c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f001 f8a3 	bl	800d0f0 <xTaskPriorityInherit>
 800bfaa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bfac:	f001 fc02 	bl	800d7b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	3324      	adds	r3, #36	; 0x24
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 fe8f 	bl	800ccdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfc0:	f000 f8bc 	bl	800c13c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfc4:	f000 fca0 	bl	800c908 <xTaskResumeAll>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f47f af66 	bne.w	800be9c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800bfd0:	4b18      	ldr	r3, [pc, #96]	; (800c034 <xQueueSemaphoreTake+0x224>)
 800bfd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	e75c      	b.n	800be9c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bfe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfe4:	f000 f8aa 	bl	800c13c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfe8:	f000 fc8e 	bl	800c908 <xTaskResumeAll>
 800bfec:	e756      	b.n	800be9c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bfee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bff0:	f000 f8a4 	bl	800c13c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bff4:	f000 fc88 	bl	800c908 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bffa:	f000 f8f1 	bl	800c1e0 <prvIsQueueEmpty>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	f43f af4b 	beq.w	800be9c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00d      	beq.n	800c028 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800c00c:	f001 fb9e 	bl	800d74c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c010:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c012:	f000 f811 	bl	800c038 <prvGetDisinheritPriorityAfterTimeout>
 800c016:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c01e:	4618      	mov	r0, r3
 800c020:	f001 f970 	bl	800d304 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c024:	f001 fbc6 	bl	800d7b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c028:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3738      	adds	r7, #56	; 0x38
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	e000ed04 	.word	0xe000ed04

0800c038 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	2b00      	cmp	r3, #0
 800c046:	d006      	beq.n	800c056 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f1c3 0307 	rsb	r3, r3, #7
 800c052:	60fb      	str	r3, [r7, #12]
 800c054:	e001      	b.n	800c05a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c056:	2300      	movs	r3, #0
 800c058:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c05a:	68fb      	ldr	r3, [r7, #12]
	}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c074:	2300      	movs	r3, #0
 800c076:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c07c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10d      	bne.n	800c0a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d14d      	bne.n	800c12a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	4618      	mov	r0, r3
 800c094:	f001 f8ac 	bl	800d1f0 <xTaskPriorityDisinherit>
 800c098:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	609a      	str	r2, [r3, #8]
 800c0a0:	e043      	b.n	800c12a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d119      	bne.n	800c0dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6858      	ldr	r0, [r3, #4]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	68b9      	ldr	r1, [r7, #8]
 800c0b4:	f001 fe40 	bl	800dd38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c0:	441a      	add	r2, r3
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	685a      	ldr	r2, [r3, #4]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d32b      	bcc.n	800c12a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	605a      	str	r2, [r3, #4]
 800c0da:	e026      	b.n	800c12a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	68d8      	ldr	r0, [r3, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	68b9      	ldr	r1, [r7, #8]
 800c0e8:	f001 fe26 	bl	800dd38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	68da      	ldr	r2, [r3, #12]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f4:	425b      	negs	r3, r3
 800c0f6:	441a      	add	r2, r3
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	68da      	ldr	r2, [r3, #12]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	429a      	cmp	r2, r3
 800c106:	d207      	bcs.n	800c118 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	689a      	ldr	r2, [r3, #8]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c110:	425b      	negs	r3, r3
 800c112:	441a      	add	r2, r3
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d105      	bne.n	800c12a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d002      	beq.n	800c12a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	3b01      	subs	r3, #1
 800c128:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	1c5a      	adds	r2, r3, #1
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c132:	697b      	ldr	r3, [r7, #20]
}
 800c134:	4618      	mov	r0, r3
 800c136:	3718      	adds	r7, #24
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c144:	f001 fb02 	bl	800d74c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c14e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c150:	e011      	b.n	800c176 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c156:	2b00      	cmp	r3, #0
 800c158:	d012      	beq.n	800c180 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	3324      	adds	r3, #36	; 0x24
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 fde2 	bl	800cd28 <xTaskRemoveFromEventList>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d001      	beq.n	800c16e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c16a:	f000 febd 	bl	800cee8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
 800c170:	3b01      	subs	r3, #1
 800c172:	b2db      	uxtb	r3, r3
 800c174:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	dce9      	bgt.n	800c152 <prvUnlockQueue+0x16>
 800c17e:	e000      	b.n	800c182 <prvUnlockQueue+0x46>
					break;
 800c180:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	22ff      	movs	r2, #255	; 0xff
 800c186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c18a:	f001 fb13 	bl	800d7b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c18e:	f001 fadd 	bl	800d74c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c198:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c19a:	e011      	b.n	800c1c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d012      	beq.n	800c1ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	3310      	adds	r3, #16
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f000 fdbd 	bl	800cd28 <xTaskRemoveFromEventList>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d001      	beq.n	800c1b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c1b4:	f000 fe98 	bl	800cee8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c1b8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	dce9      	bgt.n	800c19c <prvUnlockQueue+0x60>
 800c1c8:	e000      	b.n	800c1cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c1ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	22ff      	movs	r2, #255	; 0xff
 800c1d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c1d4:	f001 faee 	bl	800d7b4 <vPortExitCritical>
}
 800c1d8:	bf00      	nop
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1e8:	f001 fab0 	bl	800d74c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d102      	bne.n	800c1fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	60fb      	str	r3, [r7, #12]
 800c1f8:	e001      	b.n	800c1fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1fe:	f001 fad9 	bl	800d7b4 <vPortExitCritical>

	return xReturn;
 800c202:	68fb      	ldr	r3, [r7, #12]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c214:	f001 fa9a 	bl	800d74c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c220:	429a      	cmp	r2, r3
 800c222:	d102      	bne.n	800c22a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c224:	2301      	movs	r3, #1
 800c226:	60fb      	str	r3, [r7, #12]
 800c228:	e001      	b.n	800c22e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c22a:	2300      	movs	r3, #0
 800c22c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c22e:	f001 fac1 	bl	800d7b4 <vPortExitCritical>

	return xReturn;
 800c232:	68fb      	ldr	r3, [r7, #12]
}
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b08e      	sub	sp, #56	; 0x38
 800c240:	af04      	add	r7, sp, #16
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
 800c248:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d10c      	bne.n	800c26a <xTaskCreateStatic+0x2e>
	__asm volatile
 800c250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c254:	b672      	cpsid	i
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	b662      	cpsie	i
 800c264:	623b      	str	r3, [r7, #32]
}
 800c266:	bf00      	nop
 800c268:	e7fe      	b.n	800c268 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10c      	bne.n	800c28a <xTaskCreateStatic+0x4e>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	b672      	cpsid	i
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	b662      	cpsie	i
 800c284:	61fb      	str	r3, [r7, #28]
}
 800c286:	bf00      	nop
 800c288:	e7fe      	b.n	800c288 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c28a:	2358      	movs	r3, #88	; 0x58
 800c28c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	2b58      	cmp	r3, #88	; 0x58
 800c292:	d00c      	beq.n	800c2ae <xTaskCreateStatic+0x72>
	__asm volatile
 800c294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c298:	b672      	cpsid	i
 800c29a:	f383 8811 	msr	BASEPRI, r3
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	b662      	cpsie	i
 800c2a8:	61bb      	str	r3, [r7, #24]
}
 800c2aa:	bf00      	nop
 800c2ac:	e7fe      	b.n	800c2ac <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c2ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d01e      	beq.n	800c2f4 <xTaskCreateStatic+0xb8>
 800c2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d01b      	beq.n	800c2f4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c8:	2202      	movs	r2, #2
 800c2ca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	9303      	str	r3, [sp, #12]
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d4:	9302      	str	r3, [sp, #8]
 800c2d6:	f107 0314 	add.w	r3, r7, #20
 800c2da:	9301      	str	r3, [sp, #4]
 800c2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	68b9      	ldr	r1, [r7, #8]
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f000 f850 	bl	800c38c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2ee:	f000 f8e1 	bl	800c4b4 <prvAddNewTaskToReadyList>
 800c2f2:	e001      	b.n	800c2f8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2f8:	697b      	ldr	r3, [r7, #20]
	}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3728      	adds	r7, #40	; 0x28
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c302:	b580      	push	{r7, lr}
 800c304:	b08c      	sub	sp, #48	; 0x30
 800c306:	af04      	add	r7, sp, #16
 800c308:	60f8      	str	r0, [r7, #12]
 800c30a:	60b9      	str	r1, [r7, #8]
 800c30c:	603b      	str	r3, [r7, #0]
 800c30e:	4613      	mov	r3, r2
 800c310:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c312:	88fb      	ldrh	r3, [r7, #6]
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	4618      	mov	r0, r3
 800c318:	f001 fb00 	bl	800d91c <pvPortMalloc>
 800c31c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00e      	beq.n	800c342 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c324:	2058      	movs	r0, #88	; 0x58
 800c326:	f001 faf9 	bl	800d91c <pvPortMalloc>
 800c32a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d003      	beq.n	800c33a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	631a      	str	r2, [r3, #48]	; 0x30
 800c338:	e005      	b.n	800c346 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c33a:	6978      	ldr	r0, [r7, #20]
 800c33c:	f001 fbbe 	bl	800dabc <vPortFree>
 800c340:	e001      	b.n	800c346 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c342:	2300      	movs	r3, #0
 800c344:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d017      	beq.n	800c37c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	2200      	movs	r2, #0
 800c350:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c354:	88fa      	ldrh	r2, [r7, #6]
 800c356:	2300      	movs	r3, #0
 800c358:	9303      	str	r3, [sp, #12]
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	9302      	str	r3, [sp, #8]
 800c35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c360:	9301      	str	r3, [sp, #4]
 800c362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	68b9      	ldr	r1, [r7, #8]
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f000 f80e 	bl	800c38c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c370:	69f8      	ldr	r0, [r7, #28]
 800c372:	f000 f89f 	bl	800c4b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c376:	2301      	movs	r3, #1
 800c378:	61bb      	str	r3, [r7, #24]
 800c37a:	e002      	b.n	800c382 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c37c:	f04f 33ff 	mov.w	r3, #4294967295
 800c380:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c382:	69bb      	ldr	r3, [r7, #24]
	}
 800c384:	4618      	mov	r0, r3
 800c386:	3720      	adds	r7, #32
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b088      	sub	sp, #32
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607a      	str	r2, [r7, #4]
 800c398:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	21a5      	movs	r1, #165	; 0xa5
 800c3a6:	f001 fcd5 	bl	800dd54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3ae:	6879      	ldr	r1, [r7, #4]
 800c3b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c3b4:	440b      	add	r3, r1
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4413      	add	r3, r2
 800c3ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	f023 0307 	bic.w	r3, r3, #7
 800c3c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	f003 0307 	and.w	r3, r3, #7
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00c      	beq.n	800c3e8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	b672      	cpsid	i
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	b662      	cpsie	i
 800c3e2:	617b      	str	r3, [r7, #20]
}
 800c3e4:	bf00      	nop
 800c3e6:	e7fe      	b.n	800c3e6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d01f      	beq.n	800c42e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	61fb      	str	r3, [r7, #28]
 800c3f2:	e012      	b.n	800c41a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	7819      	ldrb	r1, [r3, #0]
 800c3fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	4413      	add	r3, r2
 800c402:	3334      	adds	r3, #52	; 0x34
 800c404:	460a      	mov	r2, r1
 800c406:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	4413      	add	r3, r2
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d006      	beq.n	800c422 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	3301      	adds	r3, #1
 800c418:	61fb      	str	r3, [r7, #28]
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	2b0f      	cmp	r3, #15
 800c41e:	d9e9      	bls.n	800c3f4 <prvInitialiseNewTask+0x68>
 800c420:	e000      	b.n	800c424 <prvInitialiseNewTask+0x98>
			{
				break;
 800c422:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c426:	2200      	movs	r2, #0
 800c428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c42c:	e003      	b.n	800c436 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	2200      	movs	r2, #0
 800c432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c438:	2b06      	cmp	r3, #6
 800c43a:	d901      	bls.n	800c440 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c43c:	2306      	movs	r3, #6
 800c43e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c444:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c44a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44e:	2200      	movs	r2, #0
 800c450:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	3304      	adds	r3, #4
 800c456:	4618      	mov	r0, r3
 800c458:	f7ff f9a5 	bl	800b7a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45e:	3318      	adds	r3, #24
 800c460:	4618      	mov	r0, r3
 800c462:	f7ff f9a0 	bl	800b7a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c46a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46e:	f1c3 0207 	rsb	r2, r3, #7
 800c472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c474:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c47a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47e:	2200      	movs	r2, #0
 800c480:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c484:	2200      	movs	r2, #0
 800c486:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48a:	2200      	movs	r2, #0
 800c48c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	68f9      	ldr	r1, [r7, #12]
 800c494:	69b8      	ldr	r0, [r7, #24]
 800c496:	f001 f84d 	bl	800d534 <pxPortInitialiseStack>
 800c49a:	4602      	mov	r2, r0
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d002      	beq.n	800c4ac <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4ac:	bf00      	nop
 800c4ae:	3720      	adds	r7, #32
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c4bc:	f001 f946 	bl	800d74c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c4c0:	4b2a      	ldr	r3, [pc, #168]	; (800c56c <prvAddNewTaskToReadyList+0xb8>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	4a29      	ldr	r2, [pc, #164]	; (800c56c <prvAddNewTaskToReadyList+0xb8>)
 800c4c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4ca:	4b29      	ldr	r3, [pc, #164]	; (800c570 <prvAddNewTaskToReadyList+0xbc>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d109      	bne.n	800c4e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4d2:	4a27      	ldr	r2, [pc, #156]	; (800c570 <prvAddNewTaskToReadyList+0xbc>)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c4d8:	4b24      	ldr	r3, [pc, #144]	; (800c56c <prvAddNewTaskToReadyList+0xb8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d110      	bne.n	800c502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c4e0:	f000 fd28 	bl	800cf34 <prvInitialiseTaskLists>
 800c4e4:	e00d      	b.n	800c502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c4e6:	4b23      	ldr	r3, [pc, #140]	; (800c574 <prvAddNewTaskToReadyList+0xc0>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d109      	bne.n	800c502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c4ee:	4b20      	ldr	r3, [pc, #128]	; (800c570 <prvAddNewTaskToReadyList+0xbc>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d802      	bhi.n	800c502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c4fc:	4a1c      	ldr	r2, [pc, #112]	; (800c570 <prvAddNewTaskToReadyList+0xbc>)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c502:	4b1d      	ldr	r3, [pc, #116]	; (800c578 <prvAddNewTaskToReadyList+0xc4>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	3301      	adds	r3, #1
 800c508:	4a1b      	ldr	r2, [pc, #108]	; (800c578 <prvAddNewTaskToReadyList+0xc4>)
 800c50a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c510:	2201      	movs	r2, #1
 800c512:	409a      	lsls	r2, r3
 800c514:	4b19      	ldr	r3, [pc, #100]	; (800c57c <prvAddNewTaskToReadyList+0xc8>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4313      	orrs	r3, r2
 800c51a:	4a18      	ldr	r2, [pc, #96]	; (800c57c <prvAddNewTaskToReadyList+0xc8>)
 800c51c:	6013      	str	r3, [r2, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c522:	4613      	mov	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	4413      	add	r3, r2
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	4a15      	ldr	r2, [pc, #84]	; (800c580 <prvAddNewTaskToReadyList+0xcc>)
 800c52c:	441a      	add	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	3304      	adds	r3, #4
 800c532:	4619      	mov	r1, r3
 800c534:	4610      	mov	r0, r2
 800c536:	f7ff f943 	bl	800b7c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c53a:	f001 f93b 	bl	800d7b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c53e:	4b0d      	ldr	r3, [pc, #52]	; (800c574 <prvAddNewTaskToReadyList+0xc0>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00e      	beq.n	800c564 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c546:	4b0a      	ldr	r3, [pc, #40]	; (800c570 <prvAddNewTaskToReadyList+0xbc>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c550:	429a      	cmp	r2, r3
 800c552:	d207      	bcs.n	800c564 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c554:	4b0b      	ldr	r3, [pc, #44]	; (800c584 <prvAddNewTaskToReadyList+0xd0>)
 800c556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c55a:	601a      	str	r2, [r3, #0]
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c564:	bf00      	nop
 800c566:	3708      	adds	r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	2000059c 	.word	0x2000059c
 800c570:	2000049c 	.word	0x2000049c
 800c574:	200005a8 	.word	0x200005a8
 800c578:	200005b8 	.word	0x200005b8
 800c57c:	200005a4 	.word	0x200005a4
 800c580:	200004a0 	.word	0x200004a0
 800c584:	e000ed04 	.word	0xe000ed04

0800c588 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b08a      	sub	sp, #40	; 0x28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c592:	2300      	movs	r3, #0
 800c594:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10c      	bne.n	800c5b6 <vTaskDelayUntil+0x2e>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	b672      	cpsid	i
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	b662      	cpsie	i
 800c5b0:	617b      	str	r3, [r7, #20]
}
 800c5b2:	bf00      	nop
 800c5b4:	e7fe      	b.n	800c5b4 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10c      	bne.n	800c5d6 <vTaskDelayUntil+0x4e>
	__asm volatile
 800c5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c0:	b672      	cpsid	i
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	b662      	cpsie	i
 800c5d0:	613b      	str	r3, [r7, #16]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800c5d6:	4b2b      	ldr	r3, [pc, #172]	; (800c684 <vTaskDelayUntil+0xfc>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00c      	beq.n	800c5f8 <vTaskDelayUntil+0x70>
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e2:	b672      	cpsid	i
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	b662      	cpsie	i
 800c5f2:	60fb      	str	r3, [r7, #12]
}
 800c5f4:	bf00      	nop
 800c5f6:	e7fe      	b.n	800c5f6 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800c5f8:	f000 f978 	bl	800c8ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c5fc:	4b22      	ldr	r3, [pc, #136]	; (800c688 <vTaskDelayUntil+0x100>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	4413      	add	r3, r2
 800c60a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6a3a      	ldr	r2, [r7, #32]
 800c612:	429a      	cmp	r2, r3
 800c614:	d20b      	bcs.n	800c62e <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	69fa      	ldr	r2, [r7, #28]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d211      	bcs.n	800c644 <vTaskDelayUntil+0xbc>
 800c620:	69fa      	ldr	r2, [r7, #28]
 800c622:	6a3b      	ldr	r3, [r7, #32]
 800c624:	429a      	cmp	r2, r3
 800c626:	d90d      	bls.n	800c644 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c628:	2301      	movs	r3, #1
 800c62a:	627b      	str	r3, [r7, #36]	; 0x24
 800c62c:	e00a      	b.n	800c644 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	69fa      	ldr	r2, [r7, #28]
 800c634:	429a      	cmp	r2, r3
 800c636:	d303      	bcc.n	800c640 <vTaskDelayUntil+0xb8>
 800c638:	69fa      	ldr	r2, [r7, #28]
 800c63a:	6a3b      	ldr	r3, [r7, #32]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d901      	bls.n	800c644 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c640:	2301      	movs	r3, #1
 800c642:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	69fa      	ldr	r2, [r7, #28]
 800c648:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d006      	beq.n	800c65e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c650:	69fa      	ldr	r2, [r7, #28]
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	2100      	movs	r1, #0
 800c658:	4618      	mov	r0, r3
 800c65a:	f000 ff05 	bl	800d468 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c65e:	f000 f953 	bl	800c908 <xTaskResumeAll>
 800c662:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d107      	bne.n	800c67a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800c66a:	4b08      	ldr	r3, [pc, #32]	; (800c68c <vTaskDelayUntil+0x104>)
 800c66c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c670:	601a      	str	r2, [r3, #0]
 800c672:	f3bf 8f4f 	dsb	sy
 800c676:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c67a:	bf00      	nop
 800c67c:	3728      	adds	r7, #40	; 0x28
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	200005c4 	.word	0x200005c4
 800c688:	200005a0 	.word	0x200005a0
 800c68c:	e000ed04 	.word	0xe000ed04

0800c690 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c698:	2300      	movs	r3, #0
 800c69a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d019      	beq.n	800c6d6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c6a2:	4b14      	ldr	r3, [pc, #80]	; (800c6f4 <vTaskDelay+0x64>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00c      	beq.n	800c6c4 <vTaskDelay+0x34>
	__asm volatile
 800c6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ae:	b672      	cpsid	i
 800c6b0:	f383 8811 	msr	BASEPRI, r3
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	b662      	cpsie	i
 800c6be:	60bb      	str	r3, [r7, #8]
}
 800c6c0:	bf00      	nop
 800c6c2:	e7fe      	b.n	800c6c2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c6c4:	f000 f912 	bl	800c8ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 fecc 	bl	800d468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c6d0:	f000 f91a 	bl	800c908 <xTaskResumeAll>
 800c6d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d107      	bne.n	800c6ec <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c6dc:	4b06      	ldr	r3, [pc, #24]	; (800c6f8 <vTaskDelay+0x68>)
 800c6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e2:	601a      	str	r2, [r3, #0]
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6ec:	bf00      	nop
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	200005c4 	.word	0x200005c4
 800c6f8:	e000ed04 	.word	0xe000ed04

0800c6fc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c704:	f001 f822 	bl	800d74c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d102      	bne.n	800c714 <vTaskSuspend+0x18>
 800c70e:	4b3d      	ldr	r3, [pc, #244]	; (800c804 <vTaskSuspend+0x108>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	e000      	b.n	800c716 <vTaskSuspend+0x1a>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	3304      	adds	r3, #4
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7ff f8ac 	bl	800b87a <uxListRemove>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d115      	bne.n	800c754 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72c:	4936      	ldr	r1, [pc, #216]	; (800c808 <vTaskSuspend+0x10c>)
 800c72e:	4613      	mov	r3, r2
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4413      	add	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	440b      	add	r3, r1
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d10a      	bne.n	800c754 <vTaskSuspend+0x58>
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c742:	2201      	movs	r2, #1
 800c744:	fa02 f303 	lsl.w	r3, r2, r3
 800c748:	43da      	mvns	r2, r3
 800c74a:	4b30      	ldr	r3, [pc, #192]	; (800c80c <vTaskSuspend+0x110>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4013      	ands	r3, r2
 800c750:	4a2e      	ldr	r2, [pc, #184]	; (800c80c <vTaskSuspend+0x110>)
 800c752:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d004      	beq.n	800c766 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	3318      	adds	r3, #24
 800c760:	4618      	mov	r0, r3
 800c762:	f7ff f88a 	bl	800b87a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3304      	adds	r3, #4
 800c76a:	4619      	mov	r1, r3
 800c76c:	4828      	ldr	r0, [pc, #160]	; (800c810 <vTaskSuspend+0x114>)
 800c76e:	f7ff f827 	bl	800b7c0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d103      	bne.n	800c786 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2200      	movs	r2, #0
 800c782:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c786:	f001 f815 	bl	800d7b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c78a:	4b22      	ldr	r3, [pc, #136]	; (800c814 <vTaskSuspend+0x118>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d005      	beq.n	800c79e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c792:	f000 ffdb 	bl	800d74c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c796:	f000 fc6d 	bl	800d074 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c79a:	f001 f80b 	bl	800d7b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c79e:	4b19      	ldr	r3, [pc, #100]	; (800c804 <vTaskSuspend+0x108>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d129      	bne.n	800c7fc <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 800c7a8:	4b1a      	ldr	r3, [pc, #104]	; (800c814 <vTaskSuspend+0x118>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d019      	beq.n	800c7e4 <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c7b0:	4b19      	ldr	r3, [pc, #100]	; (800c818 <vTaskSuspend+0x11c>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00c      	beq.n	800c7d2 <vTaskSuspend+0xd6>
	__asm volatile
 800c7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7bc:	b672      	cpsid	i
 800c7be:	f383 8811 	msr	BASEPRI, r3
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	b662      	cpsie	i
 800c7cc:	60bb      	str	r3, [r7, #8]
}
 800c7ce:	bf00      	nop
 800c7d0:	e7fe      	b.n	800c7d0 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 800c7d2:	4b12      	ldr	r3, [pc, #72]	; (800c81c <vTaskSuspend+0x120>)
 800c7d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7d8:	601a      	str	r2, [r3, #0]
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7e2:	e00b      	b.n	800c7fc <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c7e4:	4b0a      	ldr	r3, [pc, #40]	; (800c810 <vTaskSuspend+0x114>)
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	4b0d      	ldr	r3, [pc, #52]	; (800c820 <vTaskSuspend+0x124>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d103      	bne.n	800c7f8 <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 800c7f0:	4b04      	ldr	r3, [pc, #16]	; (800c804 <vTaskSuspend+0x108>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	601a      	str	r2, [r3, #0]
	}
 800c7f6:	e001      	b.n	800c7fc <vTaskSuspend+0x100>
					vTaskSwitchContext();
 800c7f8:	f000 f9ee 	bl	800cbd8 <vTaskSwitchContext>
	}
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	2000049c 	.word	0x2000049c
 800c808:	200004a0 	.word	0x200004a0
 800c80c:	200005a4 	.word	0x200005a4
 800c810:	20000588 	.word	0x20000588
 800c814:	200005a8 	.word	0x200005a8
 800c818:	200005c4 	.word	0x200005c4
 800c81c:	e000ed04 	.word	0xe000ed04
 800c820:	2000059c 	.word	0x2000059c

0800c824 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b08a      	sub	sp, #40	; 0x28
 800c828:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c82a:	2300      	movs	r3, #0
 800c82c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c82e:	2300      	movs	r3, #0
 800c830:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c832:	463a      	mov	r2, r7
 800c834:	1d39      	adds	r1, r7, #4
 800c836:	f107 0308 	add.w	r3, r7, #8
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7f3 fe7e 	bl	800053c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c840:	6839      	ldr	r1, [r7, #0]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	9202      	str	r2, [sp, #8]
 800c848:	9301      	str	r3, [sp, #4]
 800c84a:	2300      	movs	r3, #0
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	2300      	movs	r3, #0
 800c850:	460a      	mov	r2, r1
 800c852:	4920      	ldr	r1, [pc, #128]	; (800c8d4 <vTaskStartScheduler+0xb0>)
 800c854:	4820      	ldr	r0, [pc, #128]	; (800c8d8 <vTaskStartScheduler+0xb4>)
 800c856:	f7ff fcf1 	bl	800c23c <xTaskCreateStatic>
 800c85a:	4603      	mov	r3, r0
 800c85c:	4a1f      	ldr	r2, [pc, #124]	; (800c8dc <vTaskStartScheduler+0xb8>)
 800c85e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c860:	4b1e      	ldr	r3, [pc, #120]	; (800c8dc <vTaskStartScheduler+0xb8>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d002      	beq.n	800c86e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c868:	2301      	movs	r3, #1
 800c86a:	617b      	str	r3, [r7, #20]
 800c86c:	e001      	b.n	800c872 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c86e:	2300      	movs	r3, #0
 800c870:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	2b01      	cmp	r3, #1
 800c876:	d118      	bne.n	800c8aa <vTaskStartScheduler+0x86>
	__asm volatile
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	b672      	cpsid	i
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	b662      	cpsie	i
 800c88c:	613b      	str	r3, [r7, #16]
}
 800c88e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c890:	4b13      	ldr	r3, [pc, #76]	; (800c8e0 <vTaskStartScheduler+0xbc>)
 800c892:	f04f 32ff 	mov.w	r2, #4294967295
 800c896:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c898:	4b12      	ldr	r3, [pc, #72]	; (800c8e4 <vTaskStartScheduler+0xc0>)
 800c89a:	2201      	movs	r2, #1
 800c89c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c89e:	4b12      	ldr	r3, [pc, #72]	; (800c8e8 <vTaskStartScheduler+0xc4>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c8a4:	f000 fed4 	bl	800d650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c8a8:	e010      	b.n	800c8cc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b0:	d10c      	bne.n	800c8cc <vTaskStartScheduler+0xa8>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	b672      	cpsid	i
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	b662      	cpsie	i
 800c8c6:	60fb      	str	r3, [r7, #12]
}
 800c8c8:	bf00      	nop
 800c8ca:	e7fe      	b.n	800c8ca <vTaskStartScheduler+0xa6>
}
 800c8cc:	bf00      	nop
 800c8ce:	3718      	adds	r7, #24
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	0800de30 	.word	0x0800de30
 800c8d8:	0800cf01 	.word	0x0800cf01
 800c8dc:	200005c0 	.word	0x200005c0
 800c8e0:	200005bc 	.word	0x200005bc
 800c8e4:	200005a8 	.word	0x200005a8
 800c8e8:	200005a0 	.word	0x200005a0

0800c8ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c8f0:	4b04      	ldr	r3, [pc, #16]	; (800c904 <vTaskSuspendAll+0x18>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	4a03      	ldr	r2, [pc, #12]	; (800c904 <vTaskSuspendAll+0x18>)
 800c8f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c8fa:	bf00      	nop
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr
 800c904:	200005c4 	.word	0x200005c4

0800c908 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c90e:	2300      	movs	r3, #0
 800c910:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c912:	2300      	movs	r3, #0
 800c914:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c916:	4b42      	ldr	r3, [pc, #264]	; (800ca20 <xTaskResumeAll+0x118>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10c      	bne.n	800c938 <xTaskResumeAll+0x30>
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c922:	b672      	cpsid	i
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	b662      	cpsie	i
 800c932:	603b      	str	r3, [r7, #0]
}
 800c934:	bf00      	nop
 800c936:	e7fe      	b.n	800c936 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c938:	f000 ff08 	bl	800d74c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c93c:	4b38      	ldr	r3, [pc, #224]	; (800ca20 <xTaskResumeAll+0x118>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	3b01      	subs	r3, #1
 800c942:	4a37      	ldr	r2, [pc, #220]	; (800ca20 <xTaskResumeAll+0x118>)
 800c944:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c946:	4b36      	ldr	r3, [pc, #216]	; (800ca20 <xTaskResumeAll+0x118>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d161      	bne.n	800ca12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c94e:	4b35      	ldr	r3, [pc, #212]	; (800ca24 <xTaskResumeAll+0x11c>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d05d      	beq.n	800ca12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c956:	e02e      	b.n	800c9b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c958:	4b33      	ldr	r3, [pc, #204]	; (800ca28 <xTaskResumeAll+0x120>)
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	3318      	adds	r3, #24
 800c964:	4618      	mov	r0, r3
 800c966:	f7fe ff88 	bl	800b87a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3304      	adds	r3, #4
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fe ff83 	bl	800b87a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c978:	2201      	movs	r2, #1
 800c97a:	409a      	lsls	r2, r3
 800c97c:	4b2b      	ldr	r3, [pc, #172]	; (800ca2c <xTaskResumeAll+0x124>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4313      	orrs	r3, r2
 800c982:	4a2a      	ldr	r2, [pc, #168]	; (800ca2c <xTaskResumeAll+0x124>)
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c98a:	4613      	mov	r3, r2
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	4413      	add	r3, r2
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	4a27      	ldr	r2, [pc, #156]	; (800ca30 <xTaskResumeAll+0x128>)
 800c994:	441a      	add	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	3304      	adds	r3, #4
 800c99a:	4619      	mov	r1, r3
 800c99c:	4610      	mov	r0, r2
 800c99e:	f7fe ff0f 	bl	800b7c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a6:	4b23      	ldr	r3, [pc, #140]	; (800ca34 <xTaskResumeAll+0x12c>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d302      	bcc.n	800c9b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c9b0:	4b21      	ldr	r3, [pc, #132]	; (800ca38 <xTaskResumeAll+0x130>)
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9b6:	4b1c      	ldr	r3, [pc, #112]	; (800ca28 <xTaskResumeAll+0x120>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1cc      	bne.n	800c958 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d001      	beq.n	800c9c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c9c4:	f000 fb56 	bl	800d074 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c9c8:	4b1c      	ldr	r3, [pc, #112]	; (800ca3c <xTaskResumeAll+0x134>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d010      	beq.n	800c9f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c9d4:	f000 f846 	bl	800ca64 <xTaskIncrementTick>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c9de:	4b16      	ldr	r3, [pc, #88]	; (800ca38 <xTaskResumeAll+0x130>)
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1f1      	bne.n	800c9d4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800c9f0:	4b12      	ldr	r3, [pc, #72]	; (800ca3c <xTaskResumeAll+0x134>)
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c9f6:	4b10      	ldr	r3, [pc, #64]	; (800ca38 <xTaskResumeAll+0x130>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d009      	beq.n	800ca12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca02:	4b0f      	ldr	r3, [pc, #60]	; (800ca40 <xTaskResumeAll+0x138>)
 800ca04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca08:	601a      	str	r2, [r3, #0]
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca12:	f000 fecf 	bl	800d7b4 <vPortExitCritical>

	return xAlreadyYielded;
 800ca16:	68bb      	ldr	r3, [r7, #8]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	200005c4 	.word	0x200005c4
 800ca24:	2000059c 	.word	0x2000059c
 800ca28:	2000055c 	.word	0x2000055c
 800ca2c:	200005a4 	.word	0x200005a4
 800ca30:	200004a0 	.word	0x200004a0
 800ca34:	2000049c 	.word	0x2000049c
 800ca38:	200005b0 	.word	0x200005b0
 800ca3c:	200005ac 	.word	0x200005ac
 800ca40:	e000ed04 	.word	0xe000ed04

0800ca44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ca4a:	4b05      	ldr	r3, [pc, #20]	; (800ca60 <xTaskGetTickCount+0x1c>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ca50:	687b      	ldr	r3, [r7, #4]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	370c      	adds	r7, #12
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	200005a0 	.word	0x200005a0

0800ca64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca6e:	4b4f      	ldr	r3, [pc, #316]	; (800cbac <xTaskIncrementTick+0x148>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f040 808a 	bne.w	800cb8c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ca78:	4b4d      	ldr	r3, [pc, #308]	; (800cbb0 <xTaskIncrementTick+0x14c>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ca80:	4a4b      	ldr	r2, [pc, #300]	; (800cbb0 <xTaskIncrementTick+0x14c>)
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d122      	bne.n	800cad2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800ca8c:	4b49      	ldr	r3, [pc, #292]	; (800cbb4 <xTaskIncrementTick+0x150>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00c      	beq.n	800cab0 <xTaskIncrementTick+0x4c>
	__asm volatile
 800ca96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9a:	b672      	cpsid	i
 800ca9c:	f383 8811 	msr	BASEPRI, r3
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	b662      	cpsie	i
 800caaa:	603b      	str	r3, [r7, #0]
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <xTaskIncrementTick+0x4a>
 800cab0:	4b40      	ldr	r3, [pc, #256]	; (800cbb4 <xTaskIncrementTick+0x150>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	60fb      	str	r3, [r7, #12]
 800cab6:	4b40      	ldr	r3, [pc, #256]	; (800cbb8 <xTaskIncrementTick+0x154>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a3e      	ldr	r2, [pc, #248]	; (800cbb4 <xTaskIncrementTick+0x150>)
 800cabc:	6013      	str	r3, [r2, #0]
 800cabe:	4a3e      	ldr	r2, [pc, #248]	; (800cbb8 <xTaskIncrementTick+0x154>)
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6013      	str	r3, [r2, #0]
 800cac4:	4b3d      	ldr	r3, [pc, #244]	; (800cbbc <xTaskIncrementTick+0x158>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	3301      	adds	r3, #1
 800caca:	4a3c      	ldr	r2, [pc, #240]	; (800cbbc <xTaskIncrementTick+0x158>)
 800cacc:	6013      	str	r3, [r2, #0]
 800cace:	f000 fad1 	bl	800d074 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cad2:	4b3b      	ldr	r3, [pc, #236]	; (800cbc0 <xTaskIncrementTick+0x15c>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	693a      	ldr	r2, [r7, #16]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d348      	bcc.n	800cb6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cadc:	4b35      	ldr	r3, [pc, #212]	; (800cbb4 <xTaskIncrementTick+0x150>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d104      	bne.n	800caf0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cae6:	4b36      	ldr	r3, [pc, #216]	; (800cbc0 <xTaskIncrementTick+0x15c>)
 800cae8:	f04f 32ff 	mov.w	r2, #4294967295
 800caec:	601a      	str	r2, [r3, #0]
					break;
 800caee:	e03e      	b.n	800cb6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caf0:	4b30      	ldr	r3, [pc, #192]	; (800cbb4 <xTaskIncrementTick+0x150>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d203      	bcs.n	800cb10 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb08:	4a2d      	ldr	r2, [pc, #180]	; (800cbc0 <xTaskIncrementTick+0x15c>)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb0e:	e02e      	b.n	800cb6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	3304      	adds	r3, #4
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fe feb0 	bl	800b87a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d004      	beq.n	800cb2c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	3318      	adds	r3, #24
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fe fea7 	bl	800b87a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb30:	2201      	movs	r2, #1
 800cb32:	409a      	lsls	r2, r3
 800cb34:	4b23      	ldr	r3, [pc, #140]	; (800cbc4 <xTaskIncrementTick+0x160>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	4a22      	ldr	r2, [pc, #136]	; (800cbc4 <xTaskIncrementTick+0x160>)
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb42:	4613      	mov	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	4413      	add	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	4a1f      	ldr	r2, [pc, #124]	; (800cbc8 <xTaskIncrementTick+0x164>)
 800cb4c:	441a      	add	r2, r3
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	3304      	adds	r3, #4
 800cb52:	4619      	mov	r1, r3
 800cb54:	4610      	mov	r0, r2
 800cb56:	f7fe fe33 	bl	800b7c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb5e:	4b1b      	ldr	r3, [pc, #108]	; (800cbcc <xTaskIncrementTick+0x168>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d3b9      	bcc.n	800cadc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb6c:	e7b6      	b.n	800cadc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cb6e:	4b17      	ldr	r3, [pc, #92]	; (800cbcc <xTaskIncrementTick+0x168>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb74:	4914      	ldr	r1, [pc, #80]	; (800cbc8 <xTaskIncrementTick+0x164>)
 800cb76:	4613      	mov	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4413      	add	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	440b      	add	r3, r1
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d907      	bls.n	800cb96 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800cb86:	2301      	movs	r3, #1
 800cb88:	617b      	str	r3, [r7, #20]
 800cb8a:	e004      	b.n	800cb96 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cb8c:	4b10      	ldr	r3, [pc, #64]	; (800cbd0 <xTaskIncrementTick+0x16c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	3301      	adds	r3, #1
 800cb92:	4a0f      	ldr	r2, [pc, #60]	; (800cbd0 <xTaskIncrementTick+0x16c>)
 800cb94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cb96:	4b0f      	ldr	r3, [pc, #60]	; (800cbd4 <xTaskIncrementTick+0x170>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d001      	beq.n	800cba2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cba2:	697b      	ldr	r3, [r7, #20]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3718      	adds	r7, #24
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	200005c4 	.word	0x200005c4
 800cbb0:	200005a0 	.word	0x200005a0
 800cbb4:	20000554 	.word	0x20000554
 800cbb8:	20000558 	.word	0x20000558
 800cbbc:	200005b4 	.word	0x200005b4
 800cbc0:	200005bc 	.word	0x200005bc
 800cbc4:	200005a4 	.word	0x200005a4
 800cbc8:	200004a0 	.word	0x200004a0
 800cbcc:	2000049c 	.word	0x2000049c
 800cbd0:	200005ac 	.word	0x200005ac
 800cbd4:	200005b0 	.word	0x200005b0

0800cbd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b088      	sub	sp, #32
 800cbdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cbde:	4b3a      	ldr	r3, [pc, #232]	; (800ccc8 <vTaskSwitchContext+0xf0>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d003      	beq.n	800cbee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cbe6:	4b39      	ldr	r3, [pc, #228]	; (800cccc <vTaskSwitchContext+0xf4>)
 800cbe8:	2201      	movs	r2, #1
 800cbea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cbec:	e068      	b.n	800ccc0 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800cbee:	4b37      	ldr	r3, [pc, #220]	; (800cccc <vTaskSwitchContext+0xf4>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cbf4:	4b36      	ldr	r3, [pc, #216]	; (800ccd0 <vTaskSwitchContext+0xf8>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbfa:	61fb      	str	r3, [r7, #28]
 800cbfc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cc00:	61bb      	str	r3, [r7, #24]
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	69ba      	ldr	r2, [r7, #24]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d111      	bne.n	800cc30 <vTaskSwitchContext+0x58>
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	3304      	adds	r3, #4
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	69ba      	ldr	r2, [r7, #24]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d10b      	bne.n	800cc30 <vTaskSwitchContext+0x58>
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	69ba      	ldr	r2, [r7, #24]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d105      	bne.n	800cc30 <vTaskSwitchContext+0x58>
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	330c      	adds	r3, #12
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	69ba      	ldr	r2, [r7, #24]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d008      	beq.n	800cc42 <vTaskSwitchContext+0x6a>
 800cc30:	4b27      	ldr	r3, [pc, #156]	; (800ccd0 <vTaskSwitchContext+0xf8>)
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	4b26      	ldr	r3, [pc, #152]	; (800ccd0 <vTaskSwitchContext+0xf8>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3334      	adds	r3, #52	; 0x34
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	4610      	mov	r0, r2
 800cc3e:	f7f3 fc6a 	bl	8000516 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc42:	4b24      	ldr	r3, [pc, #144]	; (800ccd4 <vTaskSwitchContext+0xfc>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	fab3 f383 	clz	r3, r3
 800cc4e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cc50:	7afb      	ldrb	r3, [r7, #11]
 800cc52:	f1c3 031f 	rsb	r3, r3, #31
 800cc56:	617b      	str	r3, [r7, #20]
 800cc58:	491f      	ldr	r1, [pc, #124]	; (800ccd8 <vTaskSwitchContext+0x100>)
 800cc5a:	697a      	ldr	r2, [r7, #20]
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	4413      	add	r3, r2
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	440b      	add	r3, r1
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d10c      	bne.n	800cc86 <vTaskSwitchContext+0xae>
	__asm volatile
 800cc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc70:	b672      	cpsid	i
 800cc72:	f383 8811 	msr	BASEPRI, r3
 800cc76:	f3bf 8f6f 	isb	sy
 800cc7a:	f3bf 8f4f 	dsb	sy
 800cc7e:	b662      	cpsie	i
 800cc80:	607b      	str	r3, [r7, #4]
}
 800cc82:	bf00      	nop
 800cc84:	e7fe      	b.n	800cc84 <vTaskSwitchContext+0xac>
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	4413      	add	r3, r2
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	4a11      	ldr	r2, [pc, #68]	; (800ccd8 <vTaskSwitchContext+0x100>)
 800cc92:	4413      	add	r3, r2
 800cc94:	613b      	str	r3, [r7, #16]
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	685a      	ldr	r2, [r3, #4]
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	605a      	str	r2, [r3, #4]
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	685a      	ldr	r2, [r3, #4]
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	3308      	adds	r3, #8
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d104      	bne.n	800ccb6 <vTaskSwitchContext+0xde>
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	685a      	ldr	r2, [r3, #4]
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	605a      	str	r2, [r3, #4]
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	4a04      	ldr	r2, [pc, #16]	; (800ccd0 <vTaskSwitchContext+0xf8>)
 800ccbe:	6013      	str	r3, [r2, #0]
}
 800ccc0:	bf00      	nop
 800ccc2:	3720      	adds	r7, #32
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	200005c4 	.word	0x200005c4
 800cccc:	200005b0 	.word	0x200005b0
 800ccd0:	2000049c 	.word	0x2000049c
 800ccd4:	200005a4 	.word	0x200005a4
 800ccd8:	200004a0 	.word	0x200004a0

0800ccdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d10c      	bne.n	800cd06 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ccec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf0:	b672      	cpsid	i
 800ccf2:	f383 8811 	msr	BASEPRI, r3
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	b662      	cpsie	i
 800cd00:	60fb      	str	r3, [r7, #12]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd06:	4b07      	ldr	r3, [pc, #28]	; (800cd24 <vTaskPlaceOnEventList+0x48>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	3318      	adds	r3, #24
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7fe fd7a 	bl	800b808 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd14:	2101      	movs	r1, #1
 800cd16:	6838      	ldr	r0, [r7, #0]
 800cd18:	f000 fba6 	bl	800d468 <prvAddCurrentTaskToDelayedList>
}
 800cd1c:	bf00      	nop
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	2000049c 	.word	0x2000049c

0800cd28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10c      	bne.n	800cd58 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd42:	b672      	cpsid	i
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	b662      	cpsie	i
 800cd52:	60fb      	str	r3, [r7, #12]
}
 800cd54:	bf00      	nop
 800cd56:	e7fe      	b.n	800cd56 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	3318      	adds	r3, #24
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7fe fd8c 	bl	800b87a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd62:	4b1d      	ldr	r3, [pc, #116]	; (800cdd8 <xTaskRemoveFromEventList+0xb0>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d11c      	bne.n	800cda4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fe fd83 	bl	800b87a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd78:	2201      	movs	r2, #1
 800cd7a:	409a      	lsls	r2, r3
 800cd7c:	4b17      	ldr	r3, [pc, #92]	; (800cddc <xTaskRemoveFromEventList+0xb4>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	4a16      	ldr	r2, [pc, #88]	; (800cddc <xTaskRemoveFromEventList+0xb4>)
 800cd84:	6013      	str	r3, [r2, #0]
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4a13      	ldr	r2, [pc, #76]	; (800cde0 <xTaskRemoveFromEventList+0xb8>)
 800cd94:	441a      	add	r2, r3
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	3304      	adds	r3, #4
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	4610      	mov	r0, r2
 800cd9e:	f7fe fd0f 	bl	800b7c0 <vListInsertEnd>
 800cda2:	e005      	b.n	800cdb0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	3318      	adds	r3, #24
 800cda8:	4619      	mov	r1, r3
 800cdaa:	480e      	ldr	r0, [pc, #56]	; (800cde4 <xTaskRemoveFromEventList+0xbc>)
 800cdac:	f7fe fd08 	bl	800b7c0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb4:	4b0c      	ldr	r3, [pc, #48]	; (800cde8 <xTaskRemoveFromEventList+0xc0>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d905      	bls.n	800cdca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cdc2:	4b0a      	ldr	r3, [pc, #40]	; (800cdec <xTaskRemoveFromEventList+0xc4>)
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	601a      	str	r2, [r3, #0]
 800cdc8:	e001      	b.n	800cdce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cdce:	697b      	ldr	r3, [r7, #20]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3718      	adds	r7, #24
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	200005c4 	.word	0x200005c4
 800cddc:	200005a4 	.word	0x200005a4
 800cde0:	200004a0 	.word	0x200004a0
 800cde4:	2000055c 	.word	0x2000055c
 800cde8:	2000049c 	.word	0x2000049c
 800cdec:	200005b0 	.word	0x200005b0

0800cdf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cdf8:	4b06      	ldr	r3, [pc, #24]	; (800ce14 <vTaskInternalSetTimeOutState+0x24>)
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce00:	4b05      	ldr	r3, [pc, #20]	; (800ce18 <vTaskInternalSetTimeOutState+0x28>)
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	605a      	str	r2, [r3, #4]
}
 800ce08:	bf00      	nop
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr
 800ce14:	200005b4 	.word	0x200005b4
 800ce18:	200005a0 	.word	0x200005a0

0800ce1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b088      	sub	sp, #32
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d10c      	bne.n	800ce46 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ce2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce30:	b672      	cpsid	i
 800ce32:	f383 8811 	msr	BASEPRI, r3
 800ce36:	f3bf 8f6f 	isb	sy
 800ce3a:	f3bf 8f4f 	dsb	sy
 800ce3e:	b662      	cpsie	i
 800ce40:	613b      	str	r3, [r7, #16]
}
 800ce42:	bf00      	nop
 800ce44:	e7fe      	b.n	800ce44 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10c      	bne.n	800ce66 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ce4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce50:	b672      	cpsid	i
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	b662      	cpsie	i
 800ce60:	60fb      	str	r3, [r7, #12]
}
 800ce62:	bf00      	nop
 800ce64:	e7fe      	b.n	800ce64 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ce66:	f000 fc71 	bl	800d74c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ce6a:	4b1d      	ldr	r3, [pc, #116]	; (800cee0 <xTaskCheckForTimeOut+0xc4>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	1ad3      	subs	r3, r2, r3
 800ce78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce82:	d102      	bne.n	800ce8a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ce84:	2300      	movs	r3, #0
 800ce86:	61fb      	str	r3, [r7, #28]
 800ce88:	e023      	b.n	800ced2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	4b15      	ldr	r3, [pc, #84]	; (800cee4 <xTaskCheckForTimeOut+0xc8>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d007      	beq.n	800cea6 <xTaskCheckForTimeOut+0x8a>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	69ba      	ldr	r2, [r7, #24]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d302      	bcc.n	800cea6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cea0:	2301      	movs	r3, #1
 800cea2:	61fb      	str	r3, [r7, #28]
 800cea4:	e015      	b.n	800ced2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	697a      	ldr	r2, [r7, #20]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d20b      	bcs.n	800cec8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	1ad2      	subs	r2, r2, r3
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7ff ff97 	bl	800cdf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cec2:	2300      	movs	r3, #0
 800cec4:	61fb      	str	r3, [r7, #28]
 800cec6:	e004      	b.n	800ced2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	2200      	movs	r2, #0
 800cecc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cece:	2301      	movs	r3, #1
 800ced0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ced2:	f000 fc6f 	bl	800d7b4 <vPortExitCritical>

	return xReturn;
 800ced6:	69fb      	ldr	r3, [r7, #28]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3720      	adds	r7, #32
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	200005a0 	.word	0x200005a0
 800cee4:	200005b4 	.word	0x200005b4

0800cee8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cee8:	b480      	push	{r7}
 800ceea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ceec:	4b03      	ldr	r3, [pc, #12]	; (800cefc <vTaskMissedYield+0x14>)
 800ceee:	2201      	movs	r2, #1
 800cef0:	601a      	str	r2, [r3, #0]
}
 800cef2:	bf00      	nop
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	200005b0 	.word	0x200005b0

0800cf00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf08:	f000 f854 	bl	800cfb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf0c:	4b07      	ldr	r3, [pc, #28]	; (800cf2c <prvIdleTask+0x2c>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d907      	bls.n	800cf24 <prvIdleTask+0x24>
			{
				taskYIELD();
 800cf14:	4b06      	ldr	r3, [pc, #24]	; (800cf30 <prvIdleTask+0x30>)
 800cf16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf1a:	601a      	str	r2, [r3, #0]
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800cf24:	f7f3 faf0 	bl	8000508 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800cf28:	e7ee      	b.n	800cf08 <prvIdleTask+0x8>
 800cf2a:	bf00      	nop
 800cf2c:	200004a0 	.word	0x200004a0
 800cf30:	e000ed04 	.word	0xe000ed04

0800cf34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	607b      	str	r3, [r7, #4]
 800cf3e:	e00c      	b.n	800cf5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	4613      	mov	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4413      	add	r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	4a12      	ldr	r2, [pc, #72]	; (800cf94 <prvInitialiseTaskLists+0x60>)
 800cf4c:	4413      	add	r3, r2
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fe fc09 	bl	800b766 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	3301      	adds	r3, #1
 800cf58:	607b      	str	r3, [r7, #4]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b06      	cmp	r3, #6
 800cf5e:	d9ef      	bls.n	800cf40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cf60:	480d      	ldr	r0, [pc, #52]	; (800cf98 <prvInitialiseTaskLists+0x64>)
 800cf62:	f7fe fc00 	bl	800b766 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf66:	480d      	ldr	r0, [pc, #52]	; (800cf9c <prvInitialiseTaskLists+0x68>)
 800cf68:	f7fe fbfd 	bl	800b766 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf6c:	480c      	ldr	r0, [pc, #48]	; (800cfa0 <prvInitialiseTaskLists+0x6c>)
 800cf6e:	f7fe fbfa 	bl	800b766 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf72:	480c      	ldr	r0, [pc, #48]	; (800cfa4 <prvInitialiseTaskLists+0x70>)
 800cf74:	f7fe fbf7 	bl	800b766 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf78:	480b      	ldr	r0, [pc, #44]	; (800cfa8 <prvInitialiseTaskLists+0x74>)
 800cf7a:	f7fe fbf4 	bl	800b766 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf7e:	4b0b      	ldr	r3, [pc, #44]	; (800cfac <prvInitialiseTaskLists+0x78>)
 800cf80:	4a05      	ldr	r2, [pc, #20]	; (800cf98 <prvInitialiseTaskLists+0x64>)
 800cf82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf84:	4b0a      	ldr	r3, [pc, #40]	; (800cfb0 <prvInitialiseTaskLists+0x7c>)
 800cf86:	4a05      	ldr	r2, [pc, #20]	; (800cf9c <prvInitialiseTaskLists+0x68>)
 800cf88:	601a      	str	r2, [r3, #0]
}
 800cf8a:	bf00      	nop
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	200004a0 	.word	0x200004a0
 800cf98:	2000052c 	.word	0x2000052c
 800cf9c:	20000540 	.word	0x20000540
 800cfa0:	2000055c 	.word	0x2000055c
 800cfa4:	20000570 	.word	0x20000570
 800cfa8:	20000588 	.word	0x20000588
 800cfac:	20000554 	.word	0x20000554
 800cfb0:	20000558 	.word	0x20000558

0800cfb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cfba:	e019      	b.n	800cff0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cfbc:	f000 fbc6 	bl	800d74c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfc0:	4b10      	ldr	r3, [pc, #64]	; (800d004 <prvCheckTasksWaitingTermination+0x50>)
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3304      	adds	r3, #4
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7fe fc54 	bl	800b87a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cfd2:	4b0d      	ldr	r3, [pc, #52]	; (800d008 <prvCheckTasksWaitingTermination+0x54>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	4a0b      	ldr	r2, [pc, #44]	; (800d008 <prvCheckTasksWaitingTermination+0x54>)
 800cfda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cfdc:	4b0b      	ldr	r3, [pc, #44]	; (800d00c <prvCheckTasksWaitingTermination+0x58>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	3b01      	subs	r3, #1
 800cfe2:	4a0a      	ldr	r2, [pc, #40]	; (800d00c <prvCheckTasksWaitingTermination+0x58>)
 800cfe4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cfe6:	f000 fbe5 	bl	800d7b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 f810 	bl	800d010 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cff0:	4b06      	ldr	r3, [pc, #24]	; (800d00c <prvCheckTasksWaitingTermination+0x58>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d1e1      	bne.n	800cfbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cff8:	bf00      	nop
 800cffa:	bf00      	nop
 800cffc:	3708      	adds	r7, #8
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	20000570 	.word	0x20000570
 800d008:	2000059c 	.word	0x2000059c
 800d00c:	20000584 	.word	0x20000584

0800d010 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d108      	bne.n	800d034 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d026:	4618      	mov	r0, r3
 800d028:	f000 fd48 	bl	800dabc <vPortFree>
				vPortFree( pxTCB );
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 fd45 	bl	800dabc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d032:	e01a      	b.n	800d06a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d103      	bne.n	800d046 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fd3c 	bl	800dabc <vPortFree>
	}
 800d044:	e011      	b.n	800d06a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d00c      	beq.n	800d06a <prvDeleteTCB+0x5a>
	__asm volatile
 800d050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d054:	b672      	cpsid	i
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	b662      	cpsie	i
 800d064:	60fb      	str	r3, [r7, #12]
}
 800d066:	bf00      	nop
 800d068:	e7fe      	b.n	800d068 <prvDeleteTCB+0x58>
	}
 800d06a:	bf00      	nop
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
	...

0800d074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d07a:	4b0c      	ldr	r3, [pc, #48]	; (800d0ac <prvResetNextTaskUnblockTime+0x38>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d104      	bne.n	800d08e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d084:	4b0a      	ldr	r3, [pc, #40]	; (800d0b0 <prvResetNextTaskUnblockTime+0x3c>)
 800d086:	f04f 32ff 	mov.w	r2, #4294967295
 800d08a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d08c:	e008      	b.n	800d0a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d08e:	4b07      	ldr	r3, [pc, #28]	; (800d0ac <prvResetNextTaskUnblockTime+0x38>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	4a04      	ldr	r2, [pc, #16]	; (800d0b0 <prvResetNextTaskUnblockTime+0x3c>)
 800d09e:	6013      	str	r3, [r2, #0]
}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr
 800d0ac:	20000554 	.word	0x20000554
 800d0b0:	200005bc 	.word	0x200005bc

0800d0b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d0ba:	4b0b      	ldr	r3, [pc, #44]	; (800d0e8 <xTaskGetSchedulerState+0x34>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d102      	bne.n	800d0c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	607b      	str	r3, [r7, #4]
 800d0c6:	e008      	b.n	800d0da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0c8:	4b08      	ldr	r3, [pc, #32]	; (800d0ec <xTaskGetSchedulerState+0x38>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d102      	bne.n	800d0d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d0d0:	2302      	movs	r3, #2
 800d0d2:	607b      	str	r3, [r7, #4]
 800d0d4:	e001      	b.n	800d0da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d0da:	687b      	ldr	r3, [r7, #4]
	}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	370c      	adds	r7, #12
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr
 800d0e8:	200005a8 	.word	0x200005a8
 800d0ec:	200005c4 	.word	0x200005c4

0800d0f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d069      	beq.n	800d1da <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d10a:	4b36      	ldr	r3, [pc, #216]	; (800d1e4 <xTaskPriorityInherit+0xf4>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d110:	429a      	cmp	r2, r3
 800d112:	d259      	bcs.n	800d1c8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	699b      	ldr	r3, [r3, #24]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	db06      	blt.n	800d12a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d11c:	4b31      	ldr	r3, [pc, #196]	; (800d1e4 <xTaskPriorityInherit+0xf4>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d122:	f1c3 0207 	rsb	r2, r3, #7
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	6959      	ldr	r1, [r3, #20]
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d132:	4613      	mov	r3, r2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	4413      	add	r3, r2
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	4a2b      	ldr	r2, [pc, #172]	; (800d1e8 <xTaskPriorityInherit+0xf8>)
 800d13c:	4413      	add	r3, r2
 800d13e:	4299      	cmp	r1, r3
 800d140:	d13a      	bne.n	800d1b8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	3304      	adds	r3, #4
 800d146:	4618      	mov	r0, r3
 800d148:	f7fe fb97 	bl	800b87a <uxListRemove>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d115      	bne.n	800d17e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d156:	4924      	ldr	r1, [pc, #144]	; (800d1e8 <xTaskPriorityInherit+0xf8>)
 800d158:	4613      	mov	r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4413      	add	r3, r2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	440b      	add	r3, r1
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10a      	bne.n	800d17e <xTaskPriorityInherit+0x8e>
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16c:	2201      	movs	r2, #1
 800d16e:	fa02 f303 	lsl.w	r3, r2, r3
 800d172:	43da      	mvns	r2, r3
 800d174:	4b1d      	ldr	r3, [pc, #116]	; (800d1ec <xTaskPriorityInherit+0xfc>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4013      	ands	r3, r2
 800d17a:	4a1c      	ldr	r2, [pc, #112]	; (800d1ec <xTaskPriorityInherit+0xfc>)
 800d17c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d17e:	4b19      	ldr	r3, [pc, #100]	; (800d1e4 <xTaskPriorityInherit+0xf4>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18c:	2201      	movs	r2, #1
 800d18e:	409a      	lsls	r2, r3
 800d190:	4b16      	ldr	r3, [pc, #88]	; (800d1ec <xTaskPriorityInherit+0xfc>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4313      	orrs	r3, r2
 800d196:	4a15      	ldr	r2, [pc, #84]	; (800d1ec <xTaskPriorityInherit+0xfc>)
 800d198:	6013      	str	r3, [r2, #0]
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d19e:	4613      	mov	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4413      	add	r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	4a10      	ldr	r2, [pc, #64]	; (800d1e8 <xTaskPriorityInherit+0xf8>)
 800d1a8:	441a      	add	r2, r3
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	f7fe fb05 	bl	800b7c0 <vListInsertEnd>
 800d1b6:	e004      	b.n	800d1c2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d1b8:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <xTaskPriorityInherit+0xf4>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	60fb      	str	r3, [r7, #12]
 800d1c6:	e008      	b.n	800d1da <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1cc:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <xTaskPriorityInherit+0xf4>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d201      	bcs.n	800d1da <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d1da:	68fb      	ldr	r3, [r7, #12]
	}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	2000049c 	.word	0x2000049c
 800d1e8:	200004a0 	.word	0x200004a0
 800d1ec:	200005a4 	.word	0x200005a4

0800d1f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d072      	beq.n	800d2ec <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d206:	4b3c      	ldr	r3, [pc, #240]	; (800d2f8 <xTaskPriorityDisinherit+0x108>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	693a      	ldr	r2, [r7, #16]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d00c      	beq.n	800d22a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d214:	b672      	cpsid	i
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	b662      	cpsie	i
 800d224:	60fb      	str	r3, [r7, #12]
}
 800d226:	bf00      	nop
 800d228:	e7fe      	b.n	800d228 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10c      	bne.n	800d24c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d236:	b672      	cpsid	i
 800d238:	f383 8811 	msr	BASEPRI, r3
 800d23c:	f3bf 8f6f 	isb	sy
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	b662      	cpsie	i
 800d246:	60bb      	str	r3, [r7, #8]
}
 800d248:	bf00      	nop
 800d24a:	e7fe      	b.n	800d24a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d250:	1e5a      	subs	r2, r3, #1
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d25e:	429a      	cmp	r2, r3
 800d260:	d044      	beq.n	800d2ec <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d266:	2b00      	cmp	r3, #0
 800d268:	d140      	bne.n	800d2ec <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	3304      	adds	r3, #4
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe fb03 	bl	800b87a <uxListRemove>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d115      	bne.n	800d2a6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d27e:	491f      	ldr	r1, [pc, #124]	; (800d2fc <xTaskPriorityDisinherit+0x10c>)
 800d280:	4613      	mov	r3, r2
 800d282:	009b      	lsls	r3, r3, #2
 800d284:	4413      	add	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	440b      	add	r3, r1
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d10a      	bne.n	800d2a6 <xTaskPriorityDisinherit+0xb6>
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d294:	2201      	movs	r2, #1
 800d296:	fa02 f303 	lsl.w	r3, r2, r3
 800d29a:	43da      	mvns	r2, r3
 800d29c:	4b18      	ldr	r3, [pc, #96]	; (800d300 <xTaskPriorityDisinherit+0x110>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	4a17      	ldr	r2, [pc, #92]	; (800d300 <xTaskPriorityDisinherit+0x110>)
 800d2a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b2:	f1c3 0207 	rsb	r2, r3, #7
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2be:	2201      	movs	r2, #1
 800d2c0:	409a      	lsls	r2, r3
 800d2c2:	4b0f      	ldr	r3, [pc, #60]	; (800d300 <xTaskPriorityDisinherit+0x110>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	4a0d      	ldr	r2, [pc, #52]	; (800d300 <xTaskPriorityDisinherit+0x110>)
 800d2ca:	6013      	str	r3, [r2, #0]
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	4a08      	ldr	r2, [pc, #32]	; (800d2fc <xTaskPriorityDisinherit+0x10c>)
 800d2da:	441a      	add	r2, r3
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	3304      	adds	r3, #4
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	f7fe fa6c 	bl	800b7c0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2ec:	697b      	ldr	r3, [r7, #20]
	}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3718      	adds	r7, #24
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	2000049c 	.word	0x2000049c
 800d2fc:	200004a0 	.word	0x200004a0
 800d300:	200005a4 	.word	0x200005a4

0800d304 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d304:	b580      	push	{r7, lr}
 800d306:	b088      	sub	sp, #32
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d312:	2301      	movs	r3, #1
 800d314:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f000 8087 	beq.w	800d42c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d31e:	69bb      	ldr	r3, [r7, #24]
 800d320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d322:	2b00      	cmp	r3, #0
 800d324:	d10c      	bne.n	800d340 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800d326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32a:	b672      	cpsid	i
 800d32c:	f383 8811 	msr	BASEPRI, r3
 800d330:	f3bf 8f6f 	isb	sy
 800d334:	f3bf 8f4f 	dsb	sy
 800d338:	b662      	cpsie	i
 800d33a:	60fb      	str	r3, [r7, #12]
}
 800d33c:	bf00      	nop
 800d33e:	e7fe      	b.n	800d33e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d344:	683a      	ldr	r2, [r7, #0]
 800d346:	429a      	cmp	r2, r3
 800d348:	d902      	bls.n	800d350 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	61fb      	str	r3, [r7, #28]
 800d34e:	e002      	b.n	800d356 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d354:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35a:	69fa      	ldr	r2, [r7, #28]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d065      	beq.n	800d42c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d364:	697a      	ldr	r2, [r7, #20]
 800d366:	429a      	cmp	r2, r3
 800d368:	d160      	bne.n	800d42c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d36a:	4b32      	ldr	r3, [pc, #200]	; (800d434 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	69ba      	ldr	r2, [r7, #24]
 800d370:	429a      	cmp	r2, r3
 800d372:	d10c      	bne.n	800d38e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800d374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d378:	b672      	cpsid	i
 800d37a:	f383 8811 	msr	BASEPRI, r3
 800d37e:	f3bf 8f6f 	isb	sy
 800d382:	f3bf 8f4f 	dsb	sy
 800d386:	b662      	cpsie	i
 800d388:	60bb      	str	r3, [r7, #8]
}
 800d38a:	bf00      	nop
 800d38c:	e7fe      	b.n	800d38c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d392:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	69fa      	ldr	r2, [r7, #28]
 800d398:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	db04      	blt.n	800d3ac <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	f1c3 0207 	rsb	r2, r3, #7
 800d3a8:	69bb      	ldr	r3, [r7, #24]
 800d3aa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	6959      	ldr	r1, [r3, #20]
 800d3b0:	693a      	ldr	r2, [r7, #16]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4413      	add	r3, r2
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	4a1f      	ldr	r2, [pc, #124]	; (800d438 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d3bc:	4413      	add	r3, r2
 800d3be:	4299      	cmp	r1, r3
 800d3c0:	d134      	bne.n	800d42c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fe fa57 	bl	800b87a <uxListRemove>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d115      	bne.n	800d3fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d6:	4918      	ldr	r1, [pc, #96]	; (800d438 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d3d8:	4613      	mov	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	440b      	add	r3, r1
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d10a      	bne.n	800d3fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d3f2:	43da      	mvns	r2, r3
 800d3f4:	4b11      	ldr	r3, [pc, #68]	; (800d43c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4013      	ands	r3, r2
 800d3fa:	4a10      	ldr	r2, [pc, #64]	; (800d43c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d3fc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d402:	2201      	movs	r2, #1
 800d404:	409a      	lsls	r2, r3
 800d406:	4b0d      	ldr	r3, [pc, #52]	; (800d43c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4313      	orrs	r3, r2
 800d40c:	4a0b      	ldr	r2, [pc, #44]	; (800d43c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d40e:	6013      	str	r3, [r2, #0]
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d414:	4613      	mov	r3, r2
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	4413      	add	r3, r2
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	4a06      	ldr	r2, [pc, #24]	; (800d438 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d41e:	441a      	add	r2, r3
 800d420:	69bb      	ldr	r3, [r7, #24]
 800d422:	3304      	adds	r3, #4
 800d424:	4619      	mov	r1, r3
 800d426:	4610      	mov	r0, r2
 800d428:	f7fe f9ca 	bl	800b7c0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d42c:	bf00      	nop
 800d42e:	3720      	adds	r7, #32
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	2000049c 	.word	0x2000049c
 800d438:	200004a0 	.word	0x200004a0
 800d43c:	200005a4 	.word	0x200005a4

0800d440 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d440:	b480      	push	{r7}
 800d442:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d444:	4b07      	ldr	r3, [pc, #28]	; (800d464 <pvTaskIncrementMutexHeldCount+0x24>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d004      	beq.n	800d456 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d44c:	4b05      	ldr	r3, [pc, #20]	; (800d464 <pvTaskIncrementMutexHeldCount+0x24>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d452:	3201      	adds	r2, #1
 800d454:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d456:	4b03      	ldr	r3, [pc, #12]	; (800d464 <pvTaskIncrementMutexHeldCount+0x24>)
 800d458:	681b      	ldr	r3, [r3, #0]
	}
 800d45a:	4618      	mov	r0, r3
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr
 800d464:	2000049c 	.word	0x2000049c

0800d468 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d472:	4b29      	ldr	r3, [pc, #164]	; (800d518 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d478:	4b28      	ldr	r3, [pc, #160]	; (800d51c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	3304      	adds	r3, #4
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fe f9fb 	bl	800b87a <uxListRemove>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d10b      	bne.n	800d4a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d48a:	4b24      	ldr	r3, [pc, #144]	; (800d51c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d490:	2201      	movs	r2, #1
 800d492:	fa02 f303 	lsl.w	r3, r2, r3
 800d496:	43da      	mvns	r2, r3
 800d498:	4b21      	ldr	r3, [pc, #132]	; (800d520 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4013      	ands	r3, r2
 800d49e:	4a20      	ldr	r2, [pc, #128]	; (800d520 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d4a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a8:	d10a      	bne.n	800d4c0 <prvAddCurrentTaskToDelayedList+0x58>
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d007      	beq.n	800d4c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4b0:	4b1a      	ldr	r3, [pc, #104]	; (800d51c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3304      	adds	r3, #4
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	481a      	ldr	r0, [pc, #104]	; (800d524 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d4ba:	f7fe f981 	bl	800b7c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d4be:	e026      	b.n	800d50e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d4c8:	4b14      	ldr	r3, [pc, #80]	; (800d51c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	68ba      	ldr	r2, [r7, #8]
 800d4ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d4d0:	68ba      	ldr	r2, [r7, #8]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d209      	bcs.n	800d4ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4d8:	4b13      	ldr	r3, [pc, #76]	; (800d528 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	4b0f      	ldr	r3, [pc, #60]	; (800d51c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	f7fe f98f 	bl	800b808 <vListInsert>
}
 800d4ea:	e010      	b.n	800d50e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4ec:	4b0f      	ldr	r3, [pc, #60]	; (800d52c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	4b0a      	ldr	r3, [pc, #40]	; (800d51c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	4610      	mov	r0, r2
 800d4fa:	f7fe f985 	bl	800b808 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d4fe:	4b0c      	ldr	r3, [pc, #48]	; (800d530 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	68ba      	ldr	r2, [r7, #8]
 800d504:	429a      	cmp	r2, r3
 800d506:	d202      	bcs.n	800d50e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d508:	4a09      	ldr	r2, [pc, #36]	; (800d530 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	6013      	str	r3, [r2, #0]
}
 800d50e:	bf00      	nop
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	200005a0 	.word	0x200005a0
 800d51c:	2000049c 	.word	0x2000049c
 800d520:	200005a4 	.word	0x200005a4
 800d524:	20000588 	.word	0x20000588
 800d528:	20000558 	.word	0x20000558
 800d52c:	20000554 	.word	0x20000554
 800d530:	200005bc 	.word	0x200005bc

0800d534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	3b04      	subs	r3, #4
 800d544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d54c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	3b04      	subs	r3, #4
 800d552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	f023 0201 	bic.w	r2, r3, #1
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	3b04      	subs	r3, #4
 800d562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d564:	4a0c      	ldr	r2, [pc, #48]	; (800d598 <pxPortInitialiseStack+0x64>)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	3b14      	subs	r3, #20
 800d56e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	3b04      	subs	r3, #4
 800d57a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f06f 0202 	mvn.w	r2, #2
 800d582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	3b20      	subs	r3, #32
 800d588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d58a:	68fb      	ldr	r3, [r7, #12]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3714      	adds	r7, #20
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr
 800d598:	0800d59d 	.word	0x0800d59d

0800d59c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d59c:	b480      	push	{r7}
 800d59e:	b085      	sub	sp, #20
 800d5a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d5a6:	4b14      	ldr	r3, [pc, #80]	; (800d5f8 <prvTaskExitError+0x5c>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ae:	d00c      	beq.n	800d5ca <prvTaskExitError+0x2e>
	__asm volatile
 800d5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b4:	b672      	cpsid	i
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	b662      	cpsie	i
 800d5c4:	60fb      	str	r3, [r7, #12]
}
 800d5c6:	bf00      	nop
 800d5c8:	e7fe      	b.n	800d5c8 <prvTaskExitError+0x2c>
	__asm volatile
 800d5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ce:	b672      	cpsid	i
 800d5d0:	f383 8811 	msr	BASEPRI, r3
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	f3bf 8f4f 	dsb	sy
 800d5dc:	b662      	cpsie	i
 800d5de:	60bb      	str	r3, [r7, #8]
}
 800d5e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d5e2:	bf00      	nop
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d0fc      	beq.n	800d5e4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d5ea:	bf00      	nop
 800d5ec:	bf00      	nop
 800d5ee:	3714      	adds	r7, #20
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	20000054 	.word	0x20000054
 800d5fc:	00000000 	.word	0x00000000

0800d600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d600:	4b07      	ldr	r3, [pc, #28]	; (800d620 <pxCurrentTCBConst2>)
 800d602:	6819      	ldr	r1, [r3, #0]
 800d604:	6808      	ldr	r0, [r1, #0]
 800d606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60a:	f380 8809 	msr	PSP, r0
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f04f 0000 	mov.w	r0, #0
 800d616:	f380 8811 	msr	BASEPRI, r0
 800d61a:	4770      	bx	lr
 800d61c:	f3af 8000 	nop.w

0800d620 <pxCurrentTCBConst2>:
 800d620:	2000049c 	.word	0x2000049c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d624:	bf00      	nop
 800d626:	bf00      	nop

0800d628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d628:	4808      	ldr	r0, [pc, #32]	; (800d64c <prvPortStartFirstTask+0x24>)
 800d62a:	6800      	ldr	r0, [r0, #0]
 800d62c:	6800      	ldr	r0, [r0, #0]
 800d62e:	f380 8808 	msr	MSP, r0
 800d632:	f04f 0000 	mov.w	r0, #0
 800d636:	f380 8814 	msr	CONTROL, r0
 800d63a:	b662      	cpsie	i
 800d63c:	b661      	cpsie	f
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	f3bf 8f6f 	isb	sy
 800d646:	df00      	svc	0
 800d648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d64a:	bf00      	nop
 800d64c:	e000ed08 	.word	0xe000ed08

0800d650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d656:	4b37      	ldr	r3, [pc, #220]	; (800d734 <xPortStartScheduler+0xe4>)
 800d658:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	22ff      	movs	r2, #255	; 0xff
 800d666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d670:	78fb      	ldrb	r3, [r7, #3]
 800d672:	b2db      	uxtb	r3, r3
 800d674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d678:	b2da      	uxtb	r2, r3
 800d67a:	4b2f      	ldr	r3, [pc, #188]	; (800d738 <xPortStartScheduler+0xe8>)
 800d67c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d67e:	4b2f      	ldr	r3, [pc, #188]	; (800d73c <xPortStartScheduler+0xec>)
 800d680:	2207      	movs	r2, #7
 800d682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d684:	e009      	b.n	800d69a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d686:	4b2d      	ldr	r3, [pc, #180]	; (800d73c <xPortStartScheduler+0xec>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	3b01      	subs	r3, #1
 800d68c:	4a2b      	ldr	r2, [pc, #172]	; (800d73c <xPortStartScheduler+0xec>)
 800d68e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d690:	78fb      	ldrb	r3, [r7, #3]
 800d692:	b2db      	uxtb	r3, r3
 800d694:	005b      	lsls	r3, r3, #1
 800d696:	b2db      	uxtb	r3, r3
 800d698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d69a:	78fb      	ldrb	r3, [r7, #3]
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6a2:	2b80      	cmp	r3, #128	; 0x80
 800d6a4:	d0ef      	beq.n	800d686 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d6a6:	4b25      	ldr	r3, [pc, #148]	; (800d73c <xPortStartScheduler+0xec>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f1c3 0307 	rsb	r3, r3, #7
 800d6ae:	2b04      	cmp	r3, #4
 800d6b0:	d00c      	beq.n	800d6cc <xPortStartScheduler+0x7c>
	__asm volatile
 800d6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b6:	b672      	cpsid	i
 800d6b8:	f383 8811 	msr	BASEPRI, r3
 800d6bc:	f3bf 8f6f 	isb	sy
 800d6c0:	f3bf 8f4f 	dsb	sy
 800d6c4:	b662      	cpsie	i
 800d6c6:	60bb      	str	r3, [r7, #8]
}
 800d6c8:	bf00      	nop
 800d6ca:	e7fe      	b.n	800d6ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d6cc:	4b1b      	ldr	r3, [pc, #108]	; (800d73c <xPortStartScheduler+0xec>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	021b      	lsls	r3, r3, #8
 800d6d2:	4a1a      	ldr	r2, [pc, #104]	; (800d73c <xPortStartScheduler+0xec>)
 800d6d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d6d6:	4b19      	ldr	r3, [pc, #100]	; (800d73c <xPortStartScheduler+0xec>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d6de:	4a17      	ldr	r2, [pc, #92]	; (800d73c <xPortStartScheduler+0xec>)
 800d6e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	b2da      	uxtb	r2, r3
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d6ea:	4b15      	ldr	r3, [pc, #84]	; (800d740 <xPortStartScheduler+0xf0>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4a14      	ldr	r2, [pc, #80]	; (800d740 <xPortStartScheduler+0xf0>)
 800d6f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d6f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d6f6:	4b12      	ldr	r3, [pc, #72]	; (800d740 <xPortStartScheduler+0xf0>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a11      	ldr	r2, [pc, #68]	; (800d740 <xPortStartScheduler+0xf0>)
 800d6fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d700:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d702:	f000 f8dd 	bl	800d8c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d706:	4b0f      	ldr	r3, [pc, #60]	; (800d744 <xPortStartScheduler+0xf4>)
 800d708:	2200      	movs	r2, #0
 800d70a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d70c:	f000 f8fc 	bl	800d908 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d710:	4b0d      	ldr	r3, [pc, #52]	; (800d748 <xPortStartScheduler+0xf8>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a0c      	ldr	r2, [pc, #48]	; (800d748 <xPortStartScheduler+0xf8>)
 800d716:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d71a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d71c:	f7ff ff84 	bl	800d628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d720:	f7ff fa5a 	bl	800cbd8 <vTaskSwitchContext>
	prvTaskExitError();
 800d724:	f7ff ff3a 	bl	800d59c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	e000e400 	.word	0xe000e400
 800d738:	200005c8 	.word	0x200005c8
 800d73c:	200005cc 	.word	0x200005cc
 800d740:	e000ed20 	.word	0xe000ed20
 800d744:	20000054 	.word	0x20000054
 800d748:	e000ef34 	.word	0xe000ef34

0800d74c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
	__asm volatile
 800d752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d756:	b672      	cpsid	i
 800d758:	f383 8811 	msr	BASEPRI, r3
 800d75c:	f3bf 8f6f 	isb	sy
 800d760:	f3bf 8f4f 	dsb	sy
 800d764:	b662      	cpsie	i
 800d766:	607b      	str	r3, [r7, #4]
}
 800d768:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d76a:	4b10      	ldr	r3, [pc, #64]	; (800d7ac <vPortEnterCritical+0x60>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	3301      	adds	r3, #1
 800d770:	4a0e      	ldr	r2, [pc, #56]	; (800d7ac <vPortEnterCritical+0x60>)
 800d772:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d774:	4b0d      	ldr	r3, [pc, #52]	; (800d7ac <vPortEnterCritical+0x60>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d111      	bne.n	800d7a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d77c:	4b0c      	ldr	r3, [pc, #48]	; (800d7b0 <vPortEnterCritical+0x64>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	b2db      	uxtb	r3, r3
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00c      	beq.n	800d7a0 <vPortEnterCritical+0x54>
	__asm volatile
 800d786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78a:	b672      	cpsid	i
 800d78c:	f383 8811 	msr	BASEPRI, r3
 800d790:	f3bf 8f6f 	isb	sy
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	b662      	cpsie	i
 800d79a:	603b      	str	r3, [r7, #0]
}
 800d79c:	bf00      	nop
 800d79e:	e7fe      	b.n	800d79e <vPortEnterCritical+0x52>
	}
}
 800d7a0:	bf00      	nop
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr
 800d7ac:	20000054 	.word	0x20000054
 800d7b0:	e000ed04 	.word	0xe000ed04

0800d7b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d7ba:	4b13      	ldr	r3, [pc, #76]	; (800d808 <vPortExitCritical+0x54>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10c      	bne.n	800d7dc <vPortExitCritical+0x28>
	__asm volatile
 800d7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c6:	b672      	cpsid	i
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	b662      	cpsie	i
 800d7d6:	607b      	str	r3, [r7, #4]
}
 800d7d8:	bf00      	nop
 800d7da:	e7fe      	b.n	800d7da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d7dc:	4b0a      	ldr	r3, [pc, #40]	; (800d808 <vPortExitCritical+0x54>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	4a09      	ldr	r2, [pc, #36]	; (800d808 <vPortExitCritical+0x54>)
 800d7e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d7e6:	4b08      	ldr	r3, [pc, #32]	; (800d808 <vPortExitCritical+0x54>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d105      	bne.n	800d7fa <vPortExitCritical+0x46>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d7f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d7fa:	bf00      	nop
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	20000054 	.word	0x20000054
 800d80c:	00000000 	.word	0x00000000

0800d810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d810:	f3ef 8009 	mrs	r0, PSP
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	4b15      	ldr	r3, [pc, #84]	; (800d870 <pxCurrentTCBConst>)
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	f01e 0f10 	tst.w	lr, #16
 800d820:	bf08      	it	eq
 800d822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82a:	6010      	str	r0, [r2, #0]
 800d82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d830:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d834:	b672      	cpsid	i
 800d836:	f380 8811 	msr	BASEPRI, r0
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	f3bf 8f6f 	isb	sy
 800d842:	b662      	cpsie	i
 800d844:	f7ff f9c8 	bl	800cbd8 <vTaskSwitchContext>
 800d848:	f04f 0000 	mov.w	r0, #0
 800d84c:	f380 8811 	msr	BASEPRI, r0
 800d850:	bc09      	pop	{r0, r3}
 800d852:	6819      	ldr	r1, [r3, #0]
 800d854:	6808      	ldr	r0, [r1, #0]
 800d856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d85a:	f01e 0f10 	tst.w	lr, #16
 800d85e:	bf08      	it	eq
 800d860:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d864:	f380 8809 	msr	PSP, r0
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop

0800d870 <pxCurrentTCBConst>:
 800d870:	2000049c 	.word	0x2000049c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d874:	bf00      	nop
 800d876:	bf00      	nop

0800d878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
	__asm volatile
 800d87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d882:	b672      	cpsid	i
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	b662      	cpsie	i
 800d892:	607b      	str	r3, [r7, #4]
}
 800d894:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d896:	f7ff f8e5 	bl	800ca64 <xTaskIncrementTick>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d003      	beq.n	800d8a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d8a0:	4b06      	ldr	r3, [pc, #24]	; (800d8bc <SysTick_Handler+0x44>)
 800d8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	f383 8811 	msr	BASEPRI, r3
}
 800d8b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d8b4:	bf00      	nop
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	e000ed04 	.word	0xe000ed04

0800d8c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d8c4:	4b0b      	ldr	r3, [pc, #44]	; (800d8f4 <vPortSetupTimerInterrupt+0x34>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d8ca:	4b0b      	ldr	r3, [pc, #44]	; (800d8f8 <vPortSetupTimerInterrupt+0x38>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d8d0:	4b0a      	ldr	r3, [pc, #40]	; (800d8fc <vPortSetupTimerInterrupt+0x3c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a0a      	ldr	r2, [pc, #40]	; (800d900 <vPortSetupTimerInterrupt+0x40>)
 800d8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d8da:	099b      	lsrs	r3, r3, #6
 800d8dc:	4a09      	ldr	r2, [pc, #36]	; (800d904 <vPortSetupTimerInterrupt+0x44>)
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d8e2:	4b04      	ldr	r3, [pc, #16]	; (800d8f4 <vPortSetupTimerInterrupt+0x34>)
 800d8e4:	2207      	movs	r2, #7
 800d8e6:	601a      	str	r2, [r3, #0]
}
 800d8e8:	bf00      	nop
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	e000e010 	.word	0xe000e010
 800d8f8:	e000e018 	.word	0xe000e018
 800d8fc:	20000048 	.word	0x20000048
 800d900:	10624dd3 	.word	0x10624dd3
 800d904:	e000e014 	.word	0xe000e014

0800d908 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d908:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d918 <vPortEnableVFP+0x10>
 800d90c:	6801      	ldr	r1, [r0, #0]
 800d90e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d912:	6001      	str	r1, [r0, #0]
 800d914:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d916:	bf00      	nop
 800d918:	e000ed88 	.word	0xe000ed88

0800d91c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b08a      	sub	sp, #40	; 0x28
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d924:	2300      	movs	r3, #0
 800d926:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d928:	f7fe ffe0 	bl	800c8ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d92c:	4b5e      	ldr	r3, [pc, #376]	; (800daa8 <pvPortMalloc+0x18c>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d101      	bne.n	800d938 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d934:	f000 f920 	bl	800db78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d938:	4b5c      	ldr	r3, [pc, #368]	; (800daac <pvPortMalloc+0x190>)
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	4013      	ands	r3, r2
 800d940:	2b00      	cmp	r3, #0
 800d942:	f040 8092 	bne.w	800da6a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d01f      	beq.n	800d98c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d94c:	2208      	movs	r2, #8
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	4413      	add	r3, r2
 800d952:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f003 0307 	and.w	r3, r3, #7
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d016      	beq.n	800d98c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f023 0307 	bic.w	r3, r3, #7
 800d964:	3308      	adds	r3, #8
 800d966:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f003 0307 	and.w	r3, r3, #7
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00c      	beq.n	800d98c <pvPortMalloc+0x70>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	b672      	cpsid	i
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	b662      	cpsie	i
 800d986:	617b      	str	r3, [r7, #20]
}
 800d988:	bf00      	nop
 800d98a:	e7fe      	b.n	800d98a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d06b      	beq.n	800da6a <pvPortMalloc+0x14e>
 800d992:	4b47      	ldr	r3, [pc, #284]	; (800dab0 <pvPortMalloc+0x194>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d866      	bhi.n	800da6a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d99c:	4b45      	ldr	r3, [pc, #276]	; (800dab4 <pvPortMalloc+0x198>)
 800d99e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d9a0:	4b44      	ldr	r3, [pc, #272]	; (800dab4 <pvPortMalloc+0x198>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9a6:	e004      	b.n	800d9b2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9aa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d903      	bls.n	800d9c4 <pvPortMalloc+0xa8>
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d1f1      	bne.n	800d9a8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d9c4:	4b38      	ldr	r3, [pc, #224]	; (800daa8 <pvPortMalloc+0x18c>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d04d      	beq.n	800da6a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d9ce:	6a3b      	ldr	r3, [r7, #32]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2208      	movs	r2, #8
 800d9d4:	4413      	add	r3, r2
 800d9d6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	6a3b      	ldr	r3, [r7, #32]
 800d9de:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	685a      	ldr	r2, [r3, #4]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	1ad2      	subs	r2, r2, r3
 800d9e8:	2308      	movs	r3, #8
 800d9ea:	005b      	lsls	r3, r3, #1
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d921      	bls.n	800da34 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d9f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	f003 0307 	and.w	r3, r3, #7
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00c      	beq.n	800da1c <pvPortMalloc+0x100>
	__asm volatile
 800da02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da06:	b672      	cpsid	i
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	b662      	cpsie	i
 800da16:	613b      	str	r3, [r7, #16]
}
 800da18:	bf00      	nop
 800da1a:	e7fe      	b.n	800da1a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1e:	685a      	ldr	r2, [r3, #4]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	1ad2      	subs	r2, r2, r3
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da2e:	69b8      	ldr	r0, [r7, #24]
 800da30:	f000 f904 	bl	800dc3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da34:	4b1e      	ldr	r3, [pc, #120]	; (800dab0 <pvPortMalloc+0x194>)
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	1ad3      	subs	r3, r2, r3
 800da3e:	4a1c      	ldr	r2, [pc, #112]	; (800dab0 <pvPortMalloc+0x194>)
 800da40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da42:	4b1b      	ldr	r3, [pc, #108]	; (800dab0 <pvPortMalloc+0x194>)
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	4b1c      	ldr	r3, [pc, #112]	; (800dab8 <pvPortMalloc+0x19c>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d203      	bcs.n	800da56 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da4e:	4b18      	ldr	r3, [pc, #96]	; (800dab0 <pvPortMalloc+0x194>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	4a19      	ldr	r2, [pc, #100]	; (800dab8 <pvPortMalloc+0x19c>)
 800da54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	685a      	ldr	r2, [r3, #4]
 800da5a:	4b14      	ldr	r3, [pc, #80]	; (800daac <pvPortMalloc+0x190>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	431a      	orrs	r2, r3
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	2200      	movs	r2, #0
 800da68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da6a:	f7fe ff4d 	bl	800c908 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d101      	bne.n	800da78 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800da74:	f7f2 fd5a 	bl	800052c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da78:	69fb      	ldr	r3, [r7, #28]
 800da7a:	f003 0307 	and.w	r3, r3, #7
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00c      	beq.n	800da9c <pvPortMalloc+0x180>
	__asm volatile
 800da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da86:	b672      	cpsid	i
 800da88:	f383 8811 	msr	BASEPRI, r3
 800da8c:	f3bf 8f6f 	isb	sy
 800da90:	f3bf 8f4f 	dsb	sy
 800da94:	b662      	cpsie	i
 800da96:	60fb      	str	r3, [r7, #12]
}
 800da98:	bf00      	nop
 800da9a:	e7fe      	b.n	800da9a <pvPortMalloc+0x17e>
	return pvReturn;
 800da9c:	69fb      	ldr	r3, [r7, #28]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3728      	adds	r7, #40	; 0x28
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	200085d8 	.word	0x200085d8
 800daac:	200085e4 	.word	0x200085e4
 800dab0:	200085dc 	.word	0x200085dc
 800dab4:	200085d0 	.word	0x200085d0
 800dab8:	200085e0 	.word	0x200085e0

0800dabc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b086      	sub	sp, #24
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d04c      	beq.n	800db68 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dace:	2308      	movs	r3, #8
 800dad0:	425b      	negs	r3, r3
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	4413      	add	r3, r2
 800dad6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	685a      	ldr	r2, [r3, #4]
 800dae0:	4b23      	ldr	r3, [pc, #140]	; (800db70 <vPortFree+0xb4>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4013      	ands	r3, r2
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d10c      	bne.n	800db04 <vPortFree+0x48>
	__asm volatile
 800daea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daee:	b672      	cpsid	i
 800daf0:	f383 8811 	msr	BASEPRI, r3
 800daf4:	f3bf 8f6f 	isb	sy
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	b662      	cpsie	i
 800dafe:	60fb      	str	r3, [r7, #12]
}
 800db00:	bf00      	nop
 800db02:	e7fe      	b.n	800db02 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d00c      	beq.n	800db26 <vPortFree+0x6a>
	__asm volatile
 800db0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db10:	b672      	cpsid	i
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	b662      	cpsie	i
 800db20:	60bb      	str	r3, [r7, #8]
}
 800db22:	bf00      	nop
 800db24:	e7fe      	b.n	800db24 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	685a      	ldr	r2, [r3, #4]
 800db2a:	4b11      	ldr	r3, [pc, #68]	; (800db70 <vPortFree+0xb4>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	4013      	ands	r3, r2
 800db30:	2b00      	cmp	r3, #0
 800db32:	d019      	beq.n	800db68 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d115      	bne.n	800db68 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	4b0b      	ldr	r3, [pc, #44]	; (800db70 <vPortFree+0xb4>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	43db      	mvns	r3, r3
 800db46:	401a      	ands	r2, r3
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db4c:	f7fe fece 	bl	800c8ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	685a      	ldr	r2, [r3, #4]
 800db54:	4b07      	ldr	r3, [pc, #28]	; (800db74 <vPortFree+0xb8>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4413      	add	r3, r2
 800db5a:	4a06      	ldr	r2, [pc, #24]	; (800db74 <vPortFree+0xb8>)
 800db5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db5e:	6938      	ldr	r0, [r7, #16]
 800db60:	f000 f86c 	bl	800dc3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800db64:	f7fe fed0 	bl	800c908 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db68:	bf00      	nop
 800db6a:	3718      	adds	r7, #24
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	200085e4 	.word	0x200085e4
 800db74:	200085dc 	.word	0x200085dc

0800db78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db84:	4b27      	ldr	r3, [pc, #156]	; (800dc24 <prvHeapInit+0xac>)
 800db86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f003 0307 	and.w	r3, r3, #7
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00c      	beq.n	800dbac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	3307      	adds	r3, #7
 800db96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f023 0307 	bic.w	r3, r3, #7
 800db9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	1ad3      	subs	r3, r2, r3
 800dba6:	4a1f      	ldr	r2, [pc, #124]	; (800dc24 <prvHeapInit+0xac>)
 800dba8:	4413      	add	r3, r2
 800dbaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dbb0:	4a1d      	ldr	r2, [pc, #116]	; (800dc28 <prvHeapInit+0xb0>)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dbb6:	4b1c      	ldr	r3, [pc, #112]	; (800dc28 <prvHeapInit+0xb0>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	68ba      	ldr	r2, [r7, #8]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dbc4:	2208      	movs	r2, #8
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	1a9b      	subs	r3, r3, r2
 800dbca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f023 0307 	bic.w	r3, r3, #7
 800dbd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	4a15      	ldr	r2, [pc, #84]	; (800dc2c <prvHeapInit+0xb4>)
 800dbd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dbda:	4b14      	ldr	r3, [pc, #80]	; (800dc2c <prvHeapInit+0xb4>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dbe2:	4b12      	ldr	r3, [pc, #72]	; (800dc2c <prvHeapInit+0xb4>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	1ad2      	subs	r2, r2, r3
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dbf8:	4b0c      	ldr	r3, [pc, #48]	; (800dc2c <prvHeapInit+0xb4>)
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	4a0a      	ldr	r2, [pc, #40]	; (800dc30 <prvHeapInit+0xb8>)
 800dc06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	4a09      	ldr	r2, [pc, #36]	; (800dc34 <prvHeapInit+0xbc>)
 800dc0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc10:	4b09      	ldr	r3, [pc, #36]	; (800dc38 <prvHeapInit+0xc0>)
 800dc12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc16:	601a      	str	r2, [r3, #0]
}
 800dc18:	bf00      	nop
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	200005d0 	.word	0x200005d0
 800dc28:	200085d0 	.word	0x200085d0
 800dc2c:	200085d8 	.word	0x200085d8
 800dc30:	200085e0 	.word	0x200085e0
 800dc34:	200085dc 	.word	0x200085dc
 800dc38:	200085e4 	.word	0x200085e4

0800dc3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc44:	4b28      	ldr	r3, [pc, #160]	; (800dce8 <prvInsertBlockIntoFreeList+0xac>)
 800dc46:	60fb      	str	r3, [r7, #12]
 800dc48:	e002      	b.n	800dc50 <prvInsertBlockIntoFreeList+0x14>
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	60fb      	str	r3, [r7, #12]
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d8f7      	bhi.n	800dc4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	68ba      	ldr	r2, [r7, #8]
 800dc64:	4413      	add	r3, r2
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d108      	bne.n	800dc7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	685a      	ldr	r2, [r3, #4]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	441a      	add	r2, r3
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	441a      	add	r2, r3
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d118      	bne.n	800dcc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	4b15      	ldr	r3, [pc, #84]	; (800dcec <prvInsertBlockIntoFreeList+0xb0>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d00d      	beq.n	800dcba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	685a      	ldr	r2, [r3, #4]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	441a      	add	r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	601a      	str	r2, [r3, #0]
 800dcb8:	e008      	b.n	800dccc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dcba:	4b0c      	ldr	r3, [pc, #48]	; (800dcec <prvInsertBlockIntoFreeList+0xb0>)
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	601a      	str	r2, [r3, #0]
 800dcc2:	e003      	b.n	800dccc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d002      	beq.n	800dcda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcda:	bf00      	nop
 800dcdc:	3714      	adds	r7, #20
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	200085d0 	.word	0x200085d0
 800dcec:	200085d8 	.word	0x200085d8

0800dcf0 <__libc_init_array>:
 800dcf0:	b570      	push	{r4, r5, r6, lr}
 800dcf2:	4d0d      	ldr	r5, [pc, #52]	; (800dd28 <__libc_init_array+0x38>)
 800dcf4:	4c0d      	ldr	r4, [pc, #52]	; (800dd2c <__libc_init_array+0x3c>)
 800dcf6:	1b64      	subs	r4, r4, r5
 800dcf8:	10a4      	asrs	r4, r4, #2
 800dcfa:	2600      	movs	r6, #0
 800dcfc:	42a6      	cmp	r6, r4
 800dcfe:	d109      	bne.n	800dd14 <__libc_init_array+0x24>
 800dd00:	4d0b      	ldr	r5, [pc, #44]	; (800dd30 <__libc_init_array+0x40>)
 800dd02:	4c0c      	ldr	r4, [pc, #48]	; (800dd34 <__libc_init_array+0x44>)
 800dd04:	f000 f82e 	bl	800dd64 <_init>
 800dd08:	1b64      	subs	r4, r4, r5
 800dd0a:	10a4      	asrs	r4, r4, #2
 800dd0c:	2600      	movs	r6, #0
 800dd0e:	42a6      	cmp	r6, r4
 800dd10:	d105      	bne.n	800dd1e <__libc_init_array+0x2e>
 800dd12:	bd70      	pop	{r4, r5, r6, pc}
 800dd14:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd18:	4798      	blx	r3
 800dd1a:	3601      	adds	r6, #1
 800dd1c:	e7ee      	b.n	800dcfc <__libc_init_array+0xc>
 800dd1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd22:	4798      	blx	r3
 800dd24:	3601      	adds	r6, #1
 800dd26:	e7f2      	b.n	800dd0e <__libc_init_array+0x1e>
 800dd28:	0800fd8c 	.word	0x0800fd8c
 800dd2c:	0800fd8c 	.word	0x0800fd8c
 800dd30:	0800fd8c 	.word	0x0800fd8c
 800dd34:	0800fd90 	.word	0x0800fd90

0800dd38 <memcpy>:
 800dd38:	440a      	add	r2, r1
 800dd3a:	4291      	cmp	r1, r2
 800dd3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd40:	d100      	bne.n	800dd44 <memcpy+0xc>
 800dd42:	4770      	bx	lr
 800dd44:	b510      	push	{r4, lr}
 800dd46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd4e:	4291      	cmp	r1, r2
 800dd50:	d1f9      	bne.n	800dd46 <memcpy+0xe>
 800dd52:	bd10      	pop	{r4, pc}

0800dd54 <memset>:
 800dd54:	4402      	add	r2, r0
 800dd56:	4603      	mov	r3, r0
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d100      	bne.n	800dd5e <memset+0xa>
 800dd5c:	4770      	bx	lr
 800dd5e:	f803 1b01 	strb.w	r1, [r3], #1
 800dd62:	e7f9      	b.n	800dd58 <memset+0x4>

0800dd64 <_init>:
 800dd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd66:	bf00      	nop
 800dd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6a:	bc08      	pop	{r3}
 800dd6c:	469e      	mov	lr, r3
 800dd6e:	4770      	bx	lr

0800dd70 <_fini>:
 800dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd72:	bf00      	nop
 800dd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd76:	bc08      	pop	{r3}
 800dd78:	469e      	mov	lr, r3
 800dd7a:	4770      	bx	lr

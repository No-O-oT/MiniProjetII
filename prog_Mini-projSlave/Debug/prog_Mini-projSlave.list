
prog_Mini-projSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002008  0800dd2c  0800dd2c  0001dd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd34  0800fd34  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd34  0800fd34  0001fd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd3c  0800fd3c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd3c  0800fd3c  0001fd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd40  0800fd40  0001fd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800fd44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c7c  20000058  0800fd9c  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008cd4  0800fd9c  00028cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e42e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ac2  00000000  00000000  0004e4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025d0  00000000  00000000  00053f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002348  00000000  00000000  00056548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dfb0  00000000  00000000  00058890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a1a9  00000000  00000000  00086840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114863  00000000  00000000  000b09e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c524c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a028  00000000  00000000  001c52a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000058 	.word	0x20000058
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dd14 	.word	0x0800dd14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000005c 	.word	0x2000005c
 800020c:	0800dd14 	.word	0x0800dd14

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4a07      	ldr	r2, [pc, #28]	; (8000568 <vApplicationGetIdleTaskMemory+0x2c>)
 800054c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <vApplicationGetIdleTaskMemory+0x30>)
 8000552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000074 	.word	0x20000074
 800056c:	200000cc 	.word	0x200000cc

08000570 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800057a:	20c8      	movs	r0, #200	; 0xc8
 800057c:	f001 ffa6 	bl	80024cc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000580:	f000 f9b4 	bl	80008ec <ft5336_I2C_InitializeIfRequired>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	4603      	mov	r3, r0
 80005aa:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005b4:	2300      	movs	r3, #0
 80005b6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005b8:	f000 f998 	bl	80008ec <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e010      	b.n	80005e4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	21a8      	movs	r1, #168	; 0xa8
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 ff61 	bl	8002490 <TS_IO_Read>
 80005ce:	4603      	mov	r3, r0
 80005d0:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80005d2:	7b7b      	ldrb	r3, [r7, #13]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b51      	cmp	r3, #81	; 0x51
 80005d8:	d101      	bne.n	80005de <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3301      	adds	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d802      	bhi.n	80005f0 <ft5336_ReadID+0x4e>
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0e8      	beq.n	80005c2 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005f0:	7b7b      	ldrb	r3, [r7, #13]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	b29b      	uxth	r3, r3
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f97e 	bl	800090c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f932 	bl	800087c <ft5336_TS_DisableIT>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2102      	movs	r1, #2
 8000634:	4618      	mov	r0, r3
 8000636:	f001 ff2b 	bl	8002490 <TS_IO_Read>
 800063a:	4603      	mov	r3, r0
 800063c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	b2db      	uxtb	r3, r3
 8000648:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b05      	cmp	r3, #5
 8000650:	d901      	bls.n	8000656 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <ft5336_TS_DetectTouch+0x50>)
 800065c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <ft5336_TS_DetectTouch+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	b2db      	uxtb	r3, r3
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200002cc 	.word	0x200002cc

08000674 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000696:	4b6d      	ldr	r3, [pc, #436]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 8000698:	789a      	ldrb	r2, [r3, #2]
 800069a:	4b6c      	ldr	r3, [pc, #432]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 800069c:	785b      	ldrb	r3, [r3, #1]
 800069e:	429a      	cmp	r2, r3
 80006a0:	f080 80cf 	bcs.w	8000842 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006a4:	4b69      	ldr	r3, [pc, #420]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	2b09      	cmp	r3, #9
 80006aa:	d871      	bhi.n	8000790 <ft5336_TS_GetXY+0x11c>
 80006ac:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <ft5336_TS_GetXY+0x40>)
 80006ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b2:	bf00      	nop
 80006b4:	080006dd 	.word	0x080006dd
 80006b8:	080006ef 	.word	0x080006ef
 80006bc:	08000701 	.word	0x08000701
 80006c0:	08000713 	.word	0x08000713
 80006c4:	08000725 	.word	0x08000725
 80006c8:	08000737 	.word	0x08000737
 80006cc:	08000749 	.word	0x08000749
 80006d0:	0800075b 	.word	0x0800075b
 80006d4:	0800076d 	.word	0x0800076d
 80006d8:	0800077f 	.word	0x0800077f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006dc:	2304      	movs	r3, #4
 80006de:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006e0:	2303      	movs	r3, #3
 80006e2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006e4:	2306      	movs	r3, #6
 80006e6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006e8:	2305      	movs	r3, #5
 80006ea:	753b      	strb	r3, [r7, #20]
      break;
 80006ec:	e051      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ee:	230a      	movs	r3, #10
 80006f0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006f2:	2309      	movs	r3, #9
 80006f4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006f6:	230c      	movs	r3, #12
 80006f8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006fa:	230b      	movs	r3, #11
 80006fc:	753b      	strb	r3, [r7, #20]
      break;
 80006fe:	e048      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000700:	2310      	movs	r3, #16
 8000702:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000704:	230f      	movs	r3, #15
 8000706:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000708:	2312      	movs	r3, #18
 800070a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800070c:	2311      	movs	r3, #17
 800070e:	753b      	strb	r3, [r7, #20]
      break;
 8000710:	e03f      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000712:	2316      	movs	r3, #22
 8000714:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000716:	2315      	movs	r3, #21
 8000718:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800071a:	2318      	movs	r3, #24
 800071c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800071e:	2317      	movs	r3, #23
 8000720:	753b      	strb	r3, [r7, #20]
      break;
 8000722:	e036      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000724:	231c      	movs	r3, #28
 8000726:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000728:	231b      	movs	r3, #27
 800072a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800072c:	231e      	movs	r3, #30
 800072e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000730:	231d      	movs	r3, #29
 8000732:	753b      	strb	r3, [r7, #20]
      break;
 8000734:	e02d      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000736:	2322      	movs	r3, #34	; 0x22
 8000738:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800073a:	2321      	movs	r3, #33	; 0x21
 800073c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800073e:	2324      	movs	r3, #36	; 0x24
 8000740:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000742:	2323      	movs	r3, #35	; 0x23
 8000744:	753b      	strb	r3, [r7, #20]
      break;
 8000746:	e024      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000748:	2328      	movs	r3, #40	; 0x28
 800074a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800074c:	2327      	movs	r3, #39	; 0x27
 800074e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000750:	232a      	movs	r3, #42	; 0x2a
 8000752:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000754:	2329      	movs	r3, #41	; 0x29
 8000756:	753b      	strb	r3, [r7, #20]
      break;
 8000758:	e01b      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800075a:	232e      	movs	r3, #46	; 0x2e
 800075c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800075e:	232d      	movs	r3, #45	; 0x2d
 8000760:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000762:	2330      	movs	r3, #48	; 0x30
 8000764:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000766:	232f      	movs	r3, #47	; 0x2f
 8000768:	753b      	strb	r3, [r7, #20]
      break;
 800076a:	e012      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800076c:	2334      	movs	r3, #52	; 0x34
 800076e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000770:	2333      	movs	r3, #51	; 0x33
 8000772:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000774:	2336      	movs	r3, #54	; 0x36
 8000776:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000778:	2335      	movs	r3, #53	; 0x35
 800077a:	753b      	strb	r3, [r7, #20]
      break;
 800077c:	e009      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800077e:	233a      	movs	r3, #58	; 0x3a
 8000780:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000782:	2339      	movs	r3, #57	; 0x39
 8000784:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000786:	233c      	movs	r3, #60	; 0x3c
 8000788:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800078a:	233b      	movs	r3, #59	; 0x3b
 800078c:	753b      	strb	r3, [r7, #20]
      break;
 800078e:	e000      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000790:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	7dfa      	ldrb	r2, [r7, #23]
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fe78 	bl	8002490 <TS_IO_Read>
 80007a0:	4603      	mov	r3, r0
 80007a2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007ac:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ae:	89fb      	ldrh	r3, [r7, #14]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	7dba      	ldrb	r2, [r7, #22]
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fe6a 	bl	8002490 <TS_IO_Read>
 80007bc:	4603      	mov	r3, r0
 80007be:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007c0:	7cfb      	ldrb	r3, [r7, #19]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007da:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007de:	881a      	ldrh	r2, [r3, #0]
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007e4:	89fb      	ldrh	r3, [r7, #14]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	7d7a      	ldrb	r2, [r7, #21]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fe4f 	bl	8002490 <TS_IO_Read>
 80007f2:	4603      	mov	r3, r0
 80007f4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007f6:	7cfb      	ldrb	r3, [r7, #19]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007fe:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	7d3a      	ldrb	r2, [r7, #20]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fe41 	bl	8002490 <TS_IO_Read>
 800080e:	4603      	mov	r3, r0
 8000810:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000812:	7cfb      	ldrb	r3, [r7, #19]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b21b      	sxth	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	b21b      	sxth	r3, r3
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 800082c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 8000830:	881a      	ldrh	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 8000838:	789b      	ldrb	r3, [r3, #2]
 800083a:	3301      	adds	r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b03      	ldr	r3, [pc, #12]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 8000840:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200002cc 	.word	0x200002cc
 8000850:	200002d0 	.word	0x200002d0

08000854 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	7bfa      	ldrb	r2, [r7, #15]
 800086c:	21a4      	movs	r1, #164	; 0xa4
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fdf4 	bl	800245c <TS_IO_Write>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	21a4      	movs	r1, #164	; 0xa4
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fde0 	bl	800245c <TS_IO_Write>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80008da:	781b      	ldrb	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	200002cc 	.word	0x200002cc

080008ec <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80008f0:	f7ff fff0 	bl	80008d4 <ft5336_Get_I2C_InitializedStatus>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d104      	bne.n	8000904 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80008fa:	f001 fda5 	bl	8002448 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80008fe:	4b02      	ldr	r3, [pc, #8]	; (8000908 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
  }
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200002cc 	.word	0x200002cc

0800090c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b5b0      	push	{r4, r5, r7, lr}
 800092a:	b0a2      	sub	sp, #136	; 0x88
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f003 ffac 	bl	800488a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f8e7 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f000 ff59 	bl	80017ec <MX_GPIO_Init>
  MX_I2C1_Init();
 800093a:	f000 fa93 	bl	8000e64 <MX_I2C1_Init>
  MX_I2C3_Init();
 800093e:	f000 fad1 	bl	8000ee4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000942:	f000 fb0f 	bl	8000f64 <MX_LTDC_Init>
  MX_RTC_Init();
 8000946:	f000 fb8f 	bl	8001068 <MX_RTC_Init>
  MX_SPI2_Init();
 800094a:	f000 fc33 	bl	80011b4 <MX_SPI2_Init>
  MX_TIM1_Init();
 800094e:	f000 fc6f 	bl	8001230 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000952:	f000 fcc1 	bl	80012d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000956:	f000 fd0d 	bl	8001374 <MX_TIM3_Init>
  MX_TIM5_Init();
 800095a:	f000 fd71 	bl	8001440 <MX_TIM5_Init>
  MX_TIM8_Init();
 800095e:	f000 fdbd 	bl	80014dc <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000962:	f000 fe95 	bl	8001690 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000966:	f000 fec3 	bl	80016f0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800096a:	f000 f97b 	bl	8000c64 <MX_ADC1_Init>
  MX_DAC_Init();
 800096e:	f000 fa1d 	bl	8000dac <MX_DAC_Init>
  MX_UART7_Init();
 8000972:	f000 fe5d 	bl	8001630 <MX_UART7_Init>
  MX_FMC_Init();
 8000976:	f000 feeb 	bl	8001750 <MX_FMC_Init>
  MX_DMA2D_Init();
 800097a:	f000 fa41 	bl	8000e00 <MX_DMA2D_Init>
  MX_ADC3_Init();
 800097e:	f000 f9c3 	bl	8000d08 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000982:	f001 fdaf 	bl	80024e4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000986:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800098a:	2000      	movs	r0, #0
 800098c:	f001 fe42 	bl	8002614 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000990:	f001 fe18 	bl	80025c4 <BSP_LCD_GetXSize>
 8000994:	4604      	mov	r4, r0
 8000996:	f001 fe29 	bl	80025ec <BSP_LCD_GetYSize>
 800099a:	4603      	mov	r3, r0
 800099c:	fb03 f304 	mul.w	r3, r3, r4
 80009a0:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4619      	mov	r1, r3
 80009a8:	2001      	movs	r0, #1
 80009aa:	f001 fe33 	bl	8002614 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80009ae:	f002 fca9 	bl	8003304 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f001 fe8e 	bl	80026d4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80009b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009bc:	f001 fefc 	bl	80027b8 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 80009c0:	4842      	ldr	r0, [pc, #264]	; (8000acc <main+0x1a4>)
 80009c2:	f001 fec9 	bl	8002758 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80009c6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ca:	f001 fe93 	bl	80026f4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80009ce:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009d2:	f001 fea7 	bl	8002724 <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80009d6:	f001 fdf5 	bl	80025c4 <BSP_LCD_GetXSize>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29c      	uxth	r4, r3
 80009de:	f001 fe05 	bl	80025ec <BSP_LCD_GetYSize>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4619      	mov	r1, r3
 80009e8:	4620      	mov	r0, r4
 80009ea:	f003 f919 	bl	8003c20 <BSP_TS_Init>
	HAL_UART_Receive_IT(&huart7,rxbuffer,6);
 80009ee:	2206      	movs	r2, #6
 80009f0:	4937      	ldr	r1, [pc, #220]	; (8000ad0 <main+0x1a8>)
 80009f2:	4838      	ldr	r0, [pc, #224]	; (8000ad4 <main+0x1ac>)
 80009f4:	f009 fd5c 	bl	800a4b0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex_LCD */
  osMutexDef(myMutex_LCD);
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  myMutex_LCDHandle = osMutexCreate(osMutex(myMutex_LCD));
 8000a04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f00a fe40 	bl	800b68e <osMutexCreate>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a31      	ldr	r2, [pc, #196]	; (8000ad8 <main+0x1b0>)
 8000a12:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 1, uint8_t);
 8000a14:	4b31      	ldr	r3, [pc, #196]	; (8000adc <main+0x1b4>)
 8000a16:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 8000a20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00a fe49 	bl	800b6be <osMessageCreate>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <main+0x1b8>)
 8000a30:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000a32:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <main+0x1bc>)
 8000a34:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a38:	461d      	mov	r5, r3
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00a fdbe 	bl	800b5ce <osThreadCreate>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <main+0x1c0>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* definition and creation of RRacket */
  osThreadDef(RRacket, StartRRacket, osPriorityAboveNormal, 0, 1024);
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <main+0x1c4>)
 8000a5a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a5e:	461d      	mov	r5, r3
 8000a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RRacketHandle = osThreadCreate(osThread(RRacket), NULL);
 8000a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00a fdab 	bl	800b5ce <osThreadCreate>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <main+0x1c8>)
 8000a7c:	6013      	str	r3, [r2, #0]

  /* definition and creation of BallDisplay */
  osThreadDef(BallDisplay, StartBall, osPriorityHigh, 0, 1024);
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <main+0x1cc>)
 8000a80:	f107 041c 	add.w	r4, r7, #28
 8000a84:	461d      	mov	r5, r3
 8000a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BallDisplayHandle = osThreadCreate(osThread(BallDisplay), NULL);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00a fd98 	bl	800b5ce <osThreadCreate>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <main+0x1d0>)
 8000aa2:	6013      	str	r3, [r2, #0]

  /* definition and creation of BgChanger */
  osThreadDef(BgChanger, StartBgChanger, osPriorityBelowNormal, 0, 1024);
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <main+0x1d4>)
 8000aa6:	463c      	mov	r4, r7
 8000aa8:	461d      	mov	r5, r3
 8000aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BgChangerHandle = osThreadCreate(osThread(BgChanger), NULL);
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a fd87 	bl	800b5ce <osThreadCreate>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <main+0x1d8>)
 8000ac4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ac6:	f00a fd7b 	bl	800b5c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000aca:	e7fe      	b.n	8000aca <main+0x1a2>
 8000acc:	2000003c 	.word	0x2000003c
 8000ad0:	20008ba0 	.word	0x20008ba0
 8000ad4:	2000869c 	.word	0x2000869c
 8000ad8:	20008b9c 	.word	0x20008b9c
 8000adc:	0800dd58 	.word	0x0800dd58
 8000ae0:	20008bb0 	.word	0x20008bb0
 8000ae4:	0800dd68 	.word	0x0800dd68
 8000ae8:	200085e8 	.word	0x200085e8
 8000aec:	0800dd84 	.word	0x0800dd84
 8000af0:	20008a18 	.word	0x20008a18
 8000af4:	0800dda0 	.word	0x0800dda0
 8000af8:	20008bac 	.word	0x20008bac
 8000afc:	0800ddbc 	.word	0x0800ddbc
 8000b00:	20008960 	.word	0x20008960

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0b4      	sub	sp, #208	; 0xd0
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b0e:	2230      	movs	r2, #48	; 0x30
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f00d f8f6 	bl	800dd04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	2284      	movs	r2, #132	; 0x84
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00d f8e7 	bl	800dd04 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b36:	f006 fd01 	bl	800753c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b47      	ldr	r3, [pc, #284]	; (8000c58 <SystemClock_Config+0x154>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a46      	ldr	r2, [pc, #280]	; (8000c58 <SystemClock_Config+0x154>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b44      	ldr	r3, [pc, #272]	; (8000c58 <SystemClock_Config+0x154>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b52:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <SystemClock_Config+0x158>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a41      	ldr	r2, [pc, #260]	; (8000c5c <SystemClock_Config+0x158>)
 8000b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	4b3f      	ldr	r3, [pc, #252]	; (8000c5c <SystemClock_Config+0x158>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b6a:	2309      	movs	r3, #9
 8000b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b8c:	2319      	movs	r3, #25
 8000b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000b92:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ba0:	2309      	movs	r3, #9
 8000ba2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 fd26 	bl	80075fc <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bb6:	f001 faeb 	bl	8002190 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bba:	f006 fccf 	bl	800755c <HAL_PWREx_EnableOverDrive>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bc4:	f001 fae4 	bl	8002190 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc8:	230f      	movs	r3, #15
 8000bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bee:	2106      	movs	r1, #6
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f006 ffa7 	bl	8007b44 <HAL_RCC_ClockConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000bfc:	f001 fac8 	bl	8002190 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <SystemClock_Config+0x15c>)
 8000c02:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c08:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c12:	2303      	movs	r3, #3
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c26:	2300      	movs	r3, #0
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f007 f988 	bl	8007f54 <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000c4a:	f001 faa1 	bl	8002190 <Error_Handler>
  }
}
 8000c4e:	bf00      	nop
 8000c50:	37d0      	adds	r7, #208	; 0xd0
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40007000 	.word	0x40007000
 8000c60:	00015868 	.word	0x00015868

08000c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <MX_ADC1_Init+0x9c>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <MX_ADC1_Init+0xa0>)
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cc6:	f003 fe31 	bl	800492c <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cd0:	f001 fa5e 	bl	8002190 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ce6:	f003 ffb7 	bl	8004c58 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cf0:	f001 fa4e 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200088d0 	.word	0x200088d0
 8000d00:	40012000 	.word	0x40012000
 8000d04:	0f000001 	.word	0x0f000001

08000d08 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0e:	463b      	mov	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d1c:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <MX_ADC3_Init+0x9c>)
 8000d1e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d26:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <MX_ADC3_Init+0xa0>)
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d6a:	f003 fddf 	bl	800492c <HAL_ADC_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d74:	f001 fa0c 	bl	8002190 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d8a:	f003 ff65 	bl	8004c58 <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000d94:	f001 f9fc 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20008918 	.word	0x20008918
 8000da4:	40012200 	.word	0x40012200
 8000da8:	0f000001 	.word	0x0f000001

08000dac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_DAC_Init+0x4c>)
 8000dbc:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <MX_DAC_Init+0x50>)
 8000dbe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_DAC_Init+0x4c>)
 8000dc2:	f004 fa6f 	bl	80052a4 <HAL_DAC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000dcc:	f001 f9e0 	bl	8002190 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_DAC_Init+0x4c>)
 8000de0:	f004 fad6 	bl	8005390 <HAL_DAC_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000dea:	f001 f9d1 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200089e4 	.word	0x200089e4
 8000dfc:	40007400 	.word	0x40007400

08000e00 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e06:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <MX_DMA2D_Init+0x60>)
 8000e08:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e36:	f004 fce3 	bl	8005800 <HAL_DMA2D_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000e40:	f001 f9a6 	bl	8002190 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e44:	2101      	movs	r1, #1
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e48:	f004 fe38 	bl	8005abc <HAL_DMA2D_ConfigLayer>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000e52:	f001 f99d 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20008ae8 	.word	0x20008ae8
 8000e60:	4002b000 	.word	0x4002b000

08000e64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_I2C1_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000ea0:	f005 fa24 	bl	80062ec <HAL_I2C_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eaa:	f001 f971 	bl	8002190 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000eb2:	f005 ff33 	bl	8006d1c <HAL_I2CEx_ConfigAnalogFilter>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ebc:	f001 f968 	bl	8002190 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000ec4:	f005 ff75 	bl	8006db2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f001 f95f 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000875c 	.word	0x2000875c
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	00c0eaff 	.word	0x00c0eaff

08000ee4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000eea:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <MX_I2C3_Init+0x78>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <MX_I2C3_Init+0x7c>)
 8000ef2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f20:	f005 f9e4 	bl	80062ec <HAL_I2C_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f2a:	f001 f931 	bl	8002190 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f32:	f005 fef3 	bl	8006d1c <HAL_I2CEx_ConfigAnalogFilter>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f001 f928 	bl	8002190 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f44:	f005 ff35 	bl	8006db2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f001 f91f 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200085ec 	.word	0x200085ec
 8000f5c:	40005c00 	.word	0x40005c00
 8000f60:	00c0eaff 	.word	0x00c0eaff

08000f64 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	; 0x38
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2234      	movs	r2, #52	; 0x34
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f00c fec7 	bl	800dd04 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f78:	4a3a      	ldr	r2, [pc, #232]	; (8001064 <MX_LTDC_Init+0x100>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f7c:	4b38      	ldr	r3, [pc, #224]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f88:	4b35      	ldr	r3, [pc, #212]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f8e:	4b34      	ldr	r3, [pc, #208]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000f94:	4b32      	ldr	r3, [pc, #200]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f96:	2228      	movs	r2, #40	; 0x28
 8000f98:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f9c:	2209      	movs	r2, #9
 8000f9e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fa2:	2235      	movs	r2, #53	; 0x35
 8000fa4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fa8:	220b      	movs	r2, #11
 8000faa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fae:	f240 2215 	movw	r2, #533	; 0x215
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fb6:	f240 121b 	movw	r2, #283	; 0x11b
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fbe:	f240 2235 	movw	r2, #565	; 0x235
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fc6:	f240 121d 	movw	r2, #285	; 0x11d
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fe4:	481e      	ldr	r0, [pc, #120]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fe6:	f005 ff31 	bl	8006e4c <HAL_LTDC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ff0:	f001 f8ce 	bl	8002190 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ff8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ffc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001002:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001006:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001008:	2302      	movs	r3, #2
 800100a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800100c:	23ff      	movs	r3, #255	; 0xff
 800100e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001014:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001018:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800101a:	2307      	movs	r3, #7
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800101e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001024:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800102a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_LTDC_Init+0xfc>)
 800104a:	f006 f891 	bl	8007170 <HAL_LTDC_ConfigLayer>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001054:	f001 f89c 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3738      	adds	r7, #56	; 0x38
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20008828 	.word	0x20008828
 8001064:	40016800 	.word	0x40016800

08001068 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b092      	sub	sp, #72	; 0x48
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800106e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001084:	463b      	mov	r3, r7
 8001086:	222c      	movs	r2, #44	; 0x2c
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f00c fe3a 	bl	800dd04 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001090:	4b46      	ldr	r3, [pc, #280]	; (80011ac <MX_RTC_Init+0x144>)
 8001092:	4a47      	ldr	r2, [pc, #284]	; (80011b0 <MX_RTC_Init+0x148>)
 8001094:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001096:	4b45      	ldr	r3, [pc, #276]	; (80011ac <MX_RTC_Init+0x144>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800109c:	4b43      	ldr	r3, [pc, #268]	; (80011ac <MX_RTC_Init+0x144>)
 800109e:	227f      	movs	r2, #127	; 0x7f
 80010a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010a2:	4b42      	ldr	r3, [pc, #264]	; (80011ac <MX_RTC_Init+0x144>)
 80010a4:	22ff      	movs	r2, #255	; 0xff
 80010a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010a8:	4b40      	ldr	r3, [pc, #256]	; (80011ac <MX_RTC_Init+0x144>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ae:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <MX_RTC_Init+0x144>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <MX_RTC_Init+0x144>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010ba:	483c      	ldr	r0, [pc, #240]	; (80011ac <MX_RTC_Init+0x144>)
 80010bc:	f007 fb38 	bl	8008730 <HAL_RTC_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80010c6:	f001 f863 	bl	8002190 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	2201      	movs	r2, #1
 80010ea:	4619      	mov	r1, r3
 80010ec:	482f      	ldr	r0, [pc, #188]	; (80011ac <MX_RTC_Init+0x144>)
 80010ee:	f007 fb9b 	bl	8008828 <HAL_RTC_SetTime>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80010f8:	f001 f84a 	bl	8002190 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010fc:	2301      	movs	r3, #1
 80010fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001102:	2301      	movs	r3, #1
 8001104:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001108:	2301      	movs	r3, #1
 800110a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	4823      	ldr	r0, [pc, #140]	; (80011ac <MX_RTC_Init+0x144>)
 800111e:	f007 fc41 	bl	80089a4 <HAL_RTC_SetDate>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001128:	f001 f832 	bl	8002190 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800112c:	2300      	movs	r3, #0
 800112e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001130:	2300      	movs	r3, #0
 8001132:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001134:	2300      	movs	r3, #0
 8001136:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001150:	2301      	movs	r3, #1
 8001152:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	2201      	movs	r2, #1
 8001160:	4619      	mov	r1, r3
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <MX_RTC_Init+0x144>)
 8001164:	f007 fcc6 	bl	8008af4 <HAL_RTC_SetAlarm>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800116e:	f001 f80f 	bl	8002190 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <MX_RTC_Init+0x144>)
 8001180:	f007 fcb8 	bl	8008af4 <HAL_RTC_SetAlarm>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800118a:	f001 f801 	bl	8002190 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800118e:	2202      	movs	r2, #2
 8001190:	2100      	movs	r1, #0
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_RTC_Init+0x144>)
 8001194:	f007 fe38 	bl	8008e08 <HAL_RTCEx_SetTimeStamp>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800119e:	f000 fff7 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3748      	adds	r7, #72	; 0x48
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200089f8 	.word	0x200089f8
 80011b0:	40002800 	.word	0x40002800

080011b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_SPI2_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <MX_SPI2_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_SPI2_Init+0x74>)
 80011c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_SPI2_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_SPI2_Init+0x74>)
 80011ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_SPI2_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_SPI2_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_SPI2_Init+0x74>)
 80011e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_SPI2_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_SPI2_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_SPI2_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_SPI2_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_SPI2_Init+0x74>)
 8001202:	2207      	movs	r2, #7
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_SPI2_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_SPI2_Init+0x74>)
 800120e:	2208      	movs	r2, #8
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_SPI2_Init+0x74>)
 8001214:	f007 fecd 	bl	8008fb2 <HAL_SPI_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800121e:	f000 ffb7 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20008638 	.word	0x20008638
 800122c:	40003800 	.word	0x40003800

08001230 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001250:	4a20      	ldr	r2, [pc, #128]	; (80012d4 <MX_TIM1_Init+0xa4>)
 8001252:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_TIM1_Init+0xa0>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001266:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM1_Init+0xa0>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800127a:	4815      	ldr	r0, [pc, #84]	; (80012d0 <MX_TIM1_Init+0xa0>)
 800127c:	f007 ff2b 	bl	80090d6 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001286:	f000 ff83 	bl	8002190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	480e      	ldr	r0, [pc, #56]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001298:	f008 f9de 	bl	8009658 <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012a2:	f000 ff75 	bl	8002190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_TIM1_Init+0xa0>)
 80012b8:	f008 ff26 	bl	800a108 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012c2:	f000 ff65 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20008a1c 	.word	0x20008a1c
 80012d4:	40010000 	.word	0x40010000

080012d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_TIM2_Init+0x98>)
 80012f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM2_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM2_Init+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_TIM2_Init+0x98>)
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_TIM2_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM2_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_TIM2_Init+0x98>)
 8001320:	f007 fed9 	bl	80090d6 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800132a:	f000 ff31 	bl	8002190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_TIM2_Init+0x98>)
 800133c:	f008 f98c 	bl	8009658 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001346:	f000 ff23 	bl	8002190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_TIM2_Init+0x98>)
 8001358:	f008 fed6 	bl	800a108 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001362:	f000 ff15 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20008b28 	.word	0x20008b28

08001374 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013a2:	4b25      	ldr	r3, [pc, #148]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013a4:	4a25      	ldr	r2, [pc, #148]	; (800143c <MX_TIM3_Init+0xc8>)
 80013a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013c8:	481b      	ldr	r0, [pc, #108]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013ca:	f007 fe84 	bl	80090d6 <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80013d4:	f000 fedc 	bl	8002190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	4619      	mov	r1, r3
 80013e4:	4814      	ldr	r0, [pc, #80]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013e6:	f008 f937 	bl	8009658 <HAL_TIM_ConfigClockSource>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80013f0:	f000 fece 	bl	8002190 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4619      	mov	r1, r3
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_TIM3_Init+0xc4>)
 8001404:	f008 f9ee 	bl	80097e4 <HAL_TIM_SlaveConfigSynchro>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800140e:	f000 febf 	bl	8002190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_TIM3_Init+0xc4>)
 8001420:	f008 fe72 	bl	800a108 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800142a:	f000 feb1 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3730      	adds	r7, #48	; 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200087e8 	.word	0x200087e8
 800143c:	40000400 	.word	0x40000400

08001440 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001460:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <MX_TIM5_Init+0x98>)
 8001462:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_TIM5_Init+0x94>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001472:	f04f 32ff 	mov.w	r2, #4294967295
 8001476:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_TIM5_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001484:	4813      	ldr	r0, [pc, #76]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001486:	f007 fe26 	bl	80090d6 <HAL_TIM_Base_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001490:	f000 fe7e 	bl	8002190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001498:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	4619      	mov	r1, r3
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <MX_TIM5_Init+0x94>)
 80014a2:	f008 f8d9 	bl	8009658 <HAL_TIM_ConfigClockSource>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80014ac:	f000 fe70 	bl	8002190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_TIM5_Init+0x94>)
 80014be:	f008 fe23 	bl	800a108 <HAL_TIMEx_MasterConfigSynchronization>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80014c8:	f000 fe62 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200087a8 	.word	0x200087a8
 80014d8:	40000c00 	.word	0x40000c00

080014dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09a      	sub	sp, #104	; 0x68
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]
 800150e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	222c      	movs	r2, #44	; 0x2c
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f00c fbf4 	bl	800dd04 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800151c:	4b42      	ldr	r3, [pc, #264]	; (8001628 <MX_TIM8_Init+0x14c>)
 800151e:	4a43      	ldr	r2, [pc, #268]	; (800162c <MX_TIM8_Init+0x150>)
 8001520:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <MX_TIM8_Init+0x14c>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800152e:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001534:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800153c:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <MX_TIM8_Init+0x14c>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001548:	4837      	ldr	r0, [pc, #220]	; (8001628 <MX_TIM8_Init+0x14c>)
 800154a:	f007 fdc4 	bl	80090d6 <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 fe1c 	bl	8002190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800155e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001562:	4619      	mov	r1, r3
 8001564:	4830      	ldr	r0, [pc, #192]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001566:	f008 f877 	bl	8009658 <HAL_TIM_ConfigClockSource>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001570:	f000 fe0e 	bl	8002190 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001574:	482c      	ldr	r0, [pc, #176]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001576:	f007 fe03 	bl	8009180 <HAL_TIM_PWM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001580:	f000 fe06 	bl	8002190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001590:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001594:	4619      	mov	r1, r3
 8001596:	4824      	ldr	r0, [pc, #144]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001598:	f008 fdb6 	bl	800a108 <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80015a2:	f000 fdf5 	bl	8002190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	; 0x60
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ae:	2300      	movs	r3, #0
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c2:	220c      	movs	r2, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <MX_TIM8_Init+0x14c>)
 80015c8:	f007 ff2e 	bl	8009428 <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80015d2:	f000 fddd 	bl	8002190 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4807      	ldr	r0, [pc, #28]	; (8001628 <MX_TIM8_Init+0x14c>)
 800160c:	f008 fe0a 	bl	800a224 <HAL_TIMEx_ConfigBreakDeadTime>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001616:	f000 fdbb 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <MX_TIM8_Init+0x14c>)
 800161c:	f002 feb4 	bl	8004388 <HAL_TIM_MspPostInit>

}
 8001620:	bf00      	nop
 8001622:	3768      	adds	r7, #104	; 0x68
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000871c 	.word	0x2000871c
 800162c:	40010400 	.word	0x40010400

08001630 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_UART7_Init+0x58>)
 8001636:	4a15      	ldr	r2, [pc, #84]	; (800168c <MX_UART7_Init+0x5c>)
 8001638:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <MX_UART7_Init+0x58>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_UART7_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_UART7_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_UART7_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_UART7_Init+0x58>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_UART7_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_UART7_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_UART7_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_UART7_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_UART7_Init+0x58>)
 8001674:	f008 fe72 	bl	800a35c <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800167e:	f000 fd87 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000869c 	.word	0x2000869c
 800168c:	40007800 	.word	0x40007800

08001690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 8001696:	4a15      	ldr	r2, [pc, #84]	; (80016ec <MX_USART1_UART_Init+0x5c>)
 8001698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016d4:	f008 fe42 	bl	800a35c <HAL_UART_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016de:	f000 fd57 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20008964 	.word	0x20008964
 80016ec:	40011000 	.word	0x40011000

080016f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_USART6_UART_Init+0x58>)
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <MX_USART6_UART_Init+0x5c>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_USART6_UART_Init+0x58>)
 80016fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001700:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_USART6_UART_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART6_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART6_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001734:	f008 fe12 	bl	800a35c <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 fd27 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20008a68 	.word	0x20008a68
 800174c:	40011400 	.word	0x40011400

08001750 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
 8001764:	615a      	str	r2, [r3, #20]
 8001766:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <MX_FMC_Init+0x94>)
 800176a:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <MX_FMC_Init+0x98>)
 800176c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_FMC_Init+0x94>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_FMC_Init+0x94>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_FMC_Init+0x94>)
 800177c:	2204      	movs	r2, #4
 800177e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_FMC_Init+0x94>)
 8001782:	2210      	movs	r2, #16
 8001784:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <MX_FMC_Init+0x94>)
 8001788:	2240      	movs	r2, #64	; 0x40
 800178a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <MX_FMC_Init+0x94>)
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_FMC_Init+0x94>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <MX_FMC_Init+0x94>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_FMC_Init+0x94>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_FMC_Init+0x94>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80017aa:	2310      	movs	r3, #16
 80017ac:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80017ae:	2310      	movs	r3, #16
 80017b0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80017b2:	2310      	movs	r3, #16
 80017b4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80017b6:	2310      	movs	r3, #16
 80017b8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80017ba:	2310      	movs	r3, #16
 80017bc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80017be:	2310      	movs	r3, #16
 80017c0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80017c2:	2310      	movs	r3, #16
 80017c4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <MX_FMC_Init+0x94>)
 80017cc:	f007 fb72 	bl	8008eb4 <HAL_SDRAM_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80017d6:	f000 fcdb 	bl	8002190 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017da:	bf00      	nop
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20008b68 	.word	0x20008b68
 80017e8:	a0000140 	.word	0xa0000140

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b090      	sub	sp, #64	; 0x40
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001802:	4bb0      	ldr	r3, [pc, #704]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4aaf      	ldr	r2, [pc, #700]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4bad      	ldr	r3, [pc, #692]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
 8001818:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4baa      	ldr	r3, [pc, #680]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4aa9      	ldr	r2, [pc, #676]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4ba7      	ldr	r3, [pc, #668]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	4ba4      	ldr	r3, [pc, #656]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4aa3      	ldr	r2, [pc, #652]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4ba1      	ldr	r3, [pc, #644]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800184a:	4b9e      	ldr	r3, [pc, #632]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a9d      	ldr	r2, [pc, #628]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b9b      	ldr	r3, [pc, #620]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001862:	4b98      	ldr	r3, [pc, #608]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a97      	ldr	r2, [pc, #604]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b95      	ldr	r3, [pc, #596]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	4b92      	ldr	r3, [pc, #584]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a91      	ldr	r2, [pc, #580]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b8f      	ldr	r3, [pc, #572]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001892:	4b8c      	ldr	r3, [pc, #560]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a8b      	ldr	r2, [pc, #556]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018aa:	4b86      	ldr	r3, [pc, #536]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a85      	ldr	r2, [pc, #532]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b83      	ldr	r3, [pc, #524]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b7d      	ldr	r3, [pc, #500]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018da:	4b7a      	ldr	r3, [pc, #488]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a79      	ldr	r2, [pc, #484]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b77      	ldr	r3, [pc, #476]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f2:	4b74      	ldr	r3, [pc, #464]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a73      	ldr	r2, [pc, #460]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b71      	ldr	r3, [pc, #452]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2110      	movs	r1, #16
 800190e:	486e      	ldr	r0, [pc, #440]	; (8001ac8 <MX_GPIO_Init+0x2dc>)
 8001910:	f004 fcd2 	bl	80062b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	2160      	movs	r1, #96	; 0x60
 8001918:	486c      	ldr	r0, [pc, #432]	; (8001acc <MX_GPIO_Init+0x2e0>)
 800191a:	f004 fccd 	bl	80062b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	2120      	movs	r1, #32
 8001922:	486b      	ldr	r0, [pc, #428]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001924:	f004 fcc8 	bl	80062b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2108      	movs	r1, #8
 800192c:	4868      	ldr	r0, [pc, #416]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 800192e:	f004 fcc3 	bl	80062b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2108      	movs	r1, #8
 8001936:	4867      	ldr	r0, [pc, #412]	; (8001ad4 <MX_GPIO_Init+0x2e8>)
 8001938:	f004 fcbe 	bl	80062b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	2108      	movs	r1, #8
 8001940:	4865      	ldr	r0, [pc, #404]	; (8001ad8 <MX_GPIO_Init+0x2ec>)
 8001942:	f004 fcb9 	bl	80062b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194c:	4861      	ldr	r0, [pc, #388]	; (8001ad4 <MX_GPIO_Init+0x2e8>)
 800194e:	f004 fcb3 	bl	80062b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001952:	2200      	movs	r2, #0
 8001954:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001958:	4860      	ldr	r0, [pc, #384]	; (8001adc <MX_GPIO_Init+0x2f0>)
 800195a:	f004 fcad 	bl	80062b8 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2108      	movs	r1, #8
 8001962:	485f      	ldr	r0, [pc, #380]	; (8001ae0 <MX_GPIO_Init+0x2f4>)
 8001964:	f004 fca8 	bl	80062b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001968:	2308      	movs	r3, #8
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196c:	2300      	movs	r3, #0
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001978:	4619      	mov	r1, r3
 800197a:	4854      	ldr	r0, [pc, #336]	; (8001acc <MX_GPIO_Init+0x2e0>)
 800197c:	f004 f9cc 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001980:	f643 0323 	movw	r3, #14371	; 0x3823
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001992:	230a      	movs	r3, #10
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199a:	4619      	mov	r1, r3
 800199c:	484a      	ldr	r0, [pc, #296]	; (8001ac8 <MX_GPIO_Init+0x2dc>)
 800199e:	f004 f9bb 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80019a2:	2310      	movs	r3, #16
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b6:	4619      	mov	r1, r3
 80019b8:	4843      	ldr	r0, [pc, #268]	; (8001ac8 <MX_GPIO_Init+0x2dc>)
 80019ba:	f004 f9ad 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 80019be:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d0:	4619      	mov	r1, r3
 80019d2:	4844      	ldr	r0, [pc, #272]	; (8001ae4 <MX_GPIO_Init+0x2f8>)
 80019d4:	f004 f9a0 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80019d8:	2360      	movs	r3, #96	; 0x60
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4837      	ldr	r0, [pc, #220]	; (8001acc <MX_GPIO_Init+0x2e0>)
 80019f0:	f004 f992 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fa:	2300      	movs	r3, #0
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a06:	4619      	mov	r1, r3
 8001a08:	4837      	ldr	r0, [pc, #220]	; (8001ae8 <MX_GPIO_Init+0x2fc>)
 8001a0a:	f004 f985 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a0e:	2340      	movs	r3, #64	; 0x40
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a12:	4b36      	ldr	r3, [pc, #216]	; (8001aec <MX_GPIO_Init+0x300>)
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	482b      	ldr	r0, [pc, #172]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001a22:	f004 f979 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001a26:	2328      	movs	r3, #40	; 0x28
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4824      	ldr	r0, [pc, #144]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001a3e:	f004 f96b 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001a42:	f241 0308 	movw	r3, #4104	; 0x1008
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	481e      	ldr	r0, [pc, #120]	; (8001ad4 <MX_GPIO_Init+0x2e8>)
 8001a5c:	f004 f95c 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a72:	4619      	mov	r1, r3
 8001a74:	481e      	ldr	r0, [pc, #120]	; (8001af0 <MX_GPIO_Init+0x304>)
 8001a76:	f004 f94f 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <MX_GPIO_Init+0x2ec>)
 8001a92:	f004 f941 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a96:	2310      	movs	r3, #16
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001aaa:	f004 f935 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001aae:	f248 0304 	movw	r3, #32772	; 0x8004
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	e017      	b.n	8001af4 <MX_GPIO_Init+0x308>
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40022800 	.word	0x40022800
 8001adc:	40021c00 	.word	0x40021c00
 8001ae0:	40021800 	.word	0x40021800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40022400 	.word	0x40022400
 8001aec:	10120000 	.word	0x10120000
 8001af0:	40020800 	.word	0x40020800
 8001af4:	4836      	ldr	r0, [pc, #216]	; (8001bd0 <MX_GPIO_Init+0x3e4>)
 8001af6:	f004 f90f 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001afa:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b10:	4619      	mov	r1, r3
 8001b12:	482f      	ldr	r0, [pc, #188]	; (8001bd0 <MX_GPIO_Init+0x3e4>)
 8001b14:	f004 f900 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <MX_GPIO_Init+0x3e8>)
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	482a      	ldr	r0, [pc, #168]	; (8001bd8 <MX_GPIO_Init+0x3ec>)
 8001b2e:	f004 f8f3 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b32:	2310      	movs	r3, #16
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b42:	230a      	movs	r3, #10
 8001b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4820      	ldr	r0, [pc, #128]	; (8001bd0 <MX_GPIO_Init+0x3e4>)
 8001b4e:	f004 f8e3 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001b52:	2384      	movs	r3, #132	; 0x84
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	481d      	ldr	r0, [pc, #116]	; (8001bdc <MX_GPIO_Init+0x3f0>)
 8001b66:	f004 f8d7 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b82:	4619      	mov	r1, r3
 8001b84:	4816      	ldr	r0, [pc, #88]	; (8001be0 <MX_GPIO_Init+0x3f4>)
 8001b86:	f004 f8c7 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480e      	ldr	r0, [pc, #56]	; (8001bdc <MX_GPIO_Init+0x3f0>)
 8001ba2:	f004 f8b9 	bl	8005d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001ba6:	2328      	movs	r3, #40	; 0x28
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bb6:	230a      	movs	r3, #10
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4808      	ldr	r0, [pc, #32]	; (8001be4 <MX_GPIO_Init+0x3f8>)
 8001bc2:	f004 f8a9 	bl	8005d18 <HAL_GPIO_Init>

}
 8001bc6:	bf00      	nop
 8001bc8:	3740      	adds	r7, #64	; 0x40
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021c00 	.word	0x40021c00
 8001bd4:	10120000 	.word	0x10120000
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020000 	.word	0x40020000

08001be8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	uint16_t x_ballemaster;
	//Réception du rayon de la balle, des coordonnées de la balle, du drapeau de perte
	r_balle = rxbuffer[0];
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_UART_RxCpltCallback+0x74>)
 8001bf8:	801a      	strh	r2, [r3, #0]
	x_ballemaster = (((uint16_t)rxbuffer[1] << 8) | rxbuffer[2]);
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001c04:	789b      	ldrb	r3, [r3, #2]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	81fb      	strh	r3, [r7, #14]
	y_balle = (((uint16_t)rxbuffer[3] << 8) | rxbuffer[4]);
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001c10:	78db      	ldrb	r3, [r3, #3]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001c18:	791b      	ldrb	r3, [r3, #4]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_UART_RxCpltCallback+0x78>)
 8001c24:	801a      	strh	r2, [r3, #0]
	lost = rxbuffer[5];
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001c28:	795b      	ldrb	r3, [r3, #5]
 8001c2a:	b25a      	sxtb	r2, r3
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_UART_RxCpltCallback+0x7c>)
 8001c2e:	701a      	strb	r2, [r3, #0]

	//Offset et cadrage des coordonées de la raquette droite
	x_balle = x_ballemaster-480;
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_UART_RxCpltCallback+0x80>)
 8001c3c:	801a      	strh	r2, [r3, #0]
	r_balle = 8; //Forçage temporaire
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <HAL_UART_RxCpltCallback+0x74>)
 8001c40:	2208      	movs	r2, #8
 8001c42:	801a      	strh	r2, [r3, #0]

	//Attente d'une nouvelle réception sur interruption
	HAL_UART_Receive_IT(&huart7, rxbuffer, 6);
 8001c44:	2206      	movs	r2, #6
 8001c46:	4904      	ldr	r1, [pc, #16]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <HAL_UART_RxCpltCallback+0x84>)
 8001c4a:	f008 fc31 	bl	800a4b0 <HAL_UART_Receive_IT>

}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20008ba0 	.word	0x20008ba0
 8001c5c:	20000030 	.word	0x20000030
 8001c60:	2000002e 	.word	0x2000002e
 8001c64:	200002d2 	.word	0x200002d2
 8001c68:	2000002c 	.word	0x2000002c
 8001c6c:	2000869c 	.word	0x2000869c

08001c70 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(200);
 8001c78:	20c8      	movs	r0, #200	; 0xc8
 8001c7a:	f009 fcf4 	bl	800b666 <osDelay>
 8001c7e:	e7fb      	b.n	8001c78 <StartDefaultTask+0x8>

08001c80 <StartRRacket>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRRacket */
void StartRRacket(void const * argument)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRRacket */

	//Initialisation des variables pour le joystick
	int32_t joystick_h, joystick_v;
	joystick_h = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
	joystick_v = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]

	//Initialisation du stockage des coordonnées de la raquette droite
	int16_t x_RRacket_hold =479-50-width_rackets/2;
 8001c90:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001c94:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t y_RRacket_hold = 136-height_rackets/2;
 8001c96:	236f      	movs	r3, #111	; 0x6f
 8001c98:	84bb      	strh	r3, [r7, #36]	; 0x24

	//Initialisation du CAN du joystick (ADC_CHANNEL_8)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4871      	ldr	r0, [pc, #452]	; (8001e7c <StartRRacket+0x1fc>)
 8001cb8:	f002 ffce 	bl	8004c58 <HAL_ADC_ConfigChannel>

	/* Infinite loop */
	for(;;){
		//Capture des valeurs des joysticks sur ADC_CHANNEL_8
		sConfig.Channel = ADC_CHANNEL_8;
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	60fb      	str	r3, [r7, #12]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	486d      	ldr	r0, [pc, #436]	; (8001e7c <StartRRacket+0x1fc>)
 8001cc8:	f002 ffc6 	bl	8004c58 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001ccc:	486b      	ldr	r0, [pc, #428]	; (8001e7c <StartRRacket+0x1fc>)
 8001cce:	f002 fe71 	bl	80049b4 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001cd2:	bf00      	nop
 8001cd4:	2164      	movs	r1, #100	; 0x64
 8001cd6:	4869      	ldr	r0, [pc, #420]	; (8001e7c <StartRRacket+0x1fc>)
 8001cd8:	f002 ff2c 	bl	8004b34 <HAL_ADC_PollForConversion>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f8      	bne.n	8001cd4 <StartRRacket+0x54>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001ce2:	4866      	ldr	r0, [pc, #408]	; (8001e7c <StartRRacket+0x1fc>)
 8001ce4:	f002 ffaa 	bl	8004c3c <HAL_ADC_GetValue>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	61fb      	str	r3, [r7, #28]
		HAL_ADC_Start(&hadc1);
 8001cec:	4864      	ldr	r0, [pc, #400]	; (8001e80 <StartRRacket+0x200>)
 8001cee:	f002 fe61 	bl	80049b4 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001cf2:	bf00      	nop
 8001cf4:	2164      	movs	r1, #100	; 0x64
 8001cf6:	4862      	ldr	r0, [pc, #392]	; (8001e80 <StartRRacket+0x200>)
 8001cf8:	f002 ff1c 	bl	8004b34 <HAL_ADC_PollForConversion>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f8      	bne.n	8001cf4 <StartRRacket+0x74>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001d02:	485f      	ldr	r0, [pc, #380]	; (8001e80 <StartRRacket+0x200>)
 8001d04:	f002 ff9a 	bl	8004c3c <HAL_ADC_GetValue>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	623b      	str	r3, [r7, #32]

		//Actualisation des coordonnées de la raquette droite, le joystick
		//horizontal nécessite une corrcetion pour ne pas dériver
		x_RRacket -= (joystick_h - 2018)/250;
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f2a3 73e2 	subw	r3, r3, #2018	; 0x7e2
 8001d12:	4a5c      	ldr	r2, [pc, #368]	; (8001e84 <StartRRacket+0x204>)
 8001d14:	fb82 1203 	smull	r1, r2, r2, r3
 8001d18:	1112      	asrs	r2, r2, #4
 8001d1a:	17db      	asrs	r3, r3, #31
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <StartRRacket+0x208>)
 8001d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	b21a      	sxth	r2, r3
 8001d2e:	4b56      	ldr	r3, [pc, #344]	; (8001e88 <StartRRacket+0x208>)
 8001d30:	801a      	strh	r2, [r3, #0]
		y_RRacket -= (joystick_v - 2080)/150;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001d38:	4a54      	ldr	r2, [pc, #336]	; (8001e8c <StartRRacket+0x20c>)
 8001d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d3e:	1112      	asrs	r2, r2, #4
 8001d40:	17db      	asrs	r3, r3, #31
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <StartRRacket+0x210>)
 8001d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <StartRRacket+0x210>)
 8001d56:	801a      	strh	r2, [r3, #0]

		// Cadrage des coordonnées RRacket
		if (x_RRacket <= 240) x_RRacket = 240;
 8001d58:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <StartRRacket+0x208>)
 8001d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5e:	2bf0      	cmp	r3, #240	; 0xf0
 8001d60:	dc02      	bgt.n	8001d68 <StartRRacket+0xe8>
 8001d62:	4b49      	ldr	r3, [pc, #292]	; (8001e88 <StartRRacket+0x208>)
 8001d64:	22f0      	movs	r2, #240	; 0xf0
 8001d66:	801a      	strh	r2, [r3, #0]
		if (x_RRacket >= 479 - width_rackets) x_RRacket = 479 - width_rackets;
 8001d68:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <StartRRacket+0x208>)
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8001d72:	dd03      	ble.n	8001d7c <StartRRacket+0xfc>
 8001d74:	4b44      	ldr	r3, [pc, #272]	; (8001e88 <StartRRacket+0x208>)
 8001d76:	f240 12d7 	movw	r2, #471	; 0x1d7
 8001d7a:	801a      	strh	r2, [r3, #0]
		if (y_RRacket <= 0) y_RRacket = 0;
 8001d7c:	4b44      	ldr	r3, [pc, #272]	; (8001e90 <StartRRacket+0x210>)
 8001d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	dc02      	bgt.n	8001d8c <StartRRacket+0x10c>
 8001d86:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <StartRRacket+0x210>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	801a      	strh	r2, [r3, #0]
		if (y_RRacket + height_rackets >= 272) y_RRacket = 272 - height_rackets;
 8001d8c:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <StartRRacket+0x210>)
 8001d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d92:	2bdd      	cmp	r3, #221	; 0xdd
 8001d94:	dd02      	ble.n	8001d9c <StartRRacket+0x11c>
 8001d96:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <StartRRacket+0x210>)
 8001d98:	22de      	movs	r2, #222	; 0xde
 8001d9a:	801a      	strh	r2, [r3, #0]

		//Tracé de RRacket
		//Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <StartRRacket+0x214>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00a f807 	bl	800bdb8 <xQueueSemaphoreTake>

		//Effaçage du précedent rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001daa:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <StartRRacket+0x218>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <StartRRacket+0x138>
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e001      	b.n	8001dbc <StartRRacket+0x13c>
 8001db8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 fc99 	bl	80026f4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_RRacket_hold, y_RRacket_hold, width_rackets,
 8001dc2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001dc4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001dc6:	2332      	movs	r3, #50	; 0x32
 8001dc8:	2208      	movs	r2, #8
 8001dca:	f001 f89d 	bl	8002f08 <BSP_LCD_FillRect>
				height_rackets);

		//Création du nouveau rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001dce:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <StartRRacket+0x218>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <StartRRacket+0x15c>
 8001dd6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001dda:	e001      	b.n	8001de0 <StartRRacket+0x160>
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fc87 	bl	80026f4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_RRacket, y_RRacket, width_rackets, height_rackets);
 8001de6:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <StartRRacket+0x208>)
 8001de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dec:	b298      	uxth	r0, r3
 8001dee:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <StartRRacket+0x210>)
 8001df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df4:	b299      	uxth	r1, r3
 8001df6:	2332      	movs	r3, #50	; 0x32
 8001df8:	2208      	movs	r2, #8
 8001dfa:	f001 f885 	bl	8002f08 <BSP_LCD_FillRect>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <StartRRacket+0x214>)
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	f009 fed0 	bl	800bbac <xQueueGenericSend>

		if((x_RRacket!=x_RRacket_hold) || (y_RRacket!=y_RRacket_hold)){
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <StartRRacket+0x208>)
 8001e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e12:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d106      	bne.n	8001e28 <StartRRacket+0x1a8>
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <StartRRacket+0x210>)
 8001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e20:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d01e      	beq.n	8001e66 <StartRRacket+0x1e6>
			//Si la raquette a bougé, on envoie les nouvelles coordonnées par liaison série
			txbuffer[0]=(x_RRacket & 0xFF00) >> 8;
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <StartRRacket+0x208>)
 8001e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2e:	121b      	asrs	r3, r3, #8
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <StartRRacket+0x21c>)
 8001e34:	701a      	strb	r2, [r3, #0]
			txbuffer[1]= x_RRacket & 0x00FF;
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <StartRRacket+0x208>)
 8001e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <StartRRacket+0x21c>)
 8001e40:	705a      	strb	r2, [r3, #1]
			txbuffer[2]=(y_RRacket & 0xFF00) >> 8;
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <StartRRacket+0x210>)
 8001e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e48:	121b      	asrs	r3, r3, #8
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <StartRRacket+0x21c>)
 8001e4e:	709a      	strb	r2, [r3, #2]
			txbuffer[3]=y_RRacket & 0x00FF;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <StartRRacket+0x210>)
 8001e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <StartRRacket+0x21c>)
 8001e5a:	70da      	strb	r2, [r3, #3]

			HAL_UART_Transmit_IT(&huart7,txbuffer,4);
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	490f      	ldr	r1, [pc, #60]	; (8001e9c <StartRRacket+0x21c>)
 8001e60:	480f      	ldr	r0, [pc, #60]	; (8001ea0 <StartRRacket+0x220>)
 8001e62:	f008 fac9 	bl	800a3f8 <HAL_UART_Transmit_IT>
		}


		//Stockage des dernières coordonnées de la raquette droite
		x_RRacket_hold = x_RRacket;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <StartRRacket+0x208>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	84fb      	strh	r3, [r7, #38]	; 0x26
		y_RRacket_hold = y_RRacket;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <StartRRacket+0x210>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	84bb      	strh	r3, [r7, #36]	; 0x24
		osDelay(40);
 8001e72:	2028      	movs	r0, #40	; 0x28
 8001e74:	f009 fbf7 	bl	800b666 <osDelay>
		sConfig.Channel = ADC_CHANNEL_8;
 8001e78:	e720      	b.n	8001cbc <StartRRacket+0x3c>
 8001e7a:	bf00      	nop
 8001e7c:	20008918 	.word	0x20008918
 8001e80:	200088d0 	.word	0x200088d0
 8001e84:	10624dd3 	.word	0x10624dd3
 8001e88:	20000028 	.word	0x20000028
 8001e8c:	1b4e81b5 	.word	0x1b4e81b5
 8001e90:	2000002a 	.word	0x2000002a
 8001e94:	20008b9c 	.word	0x20008b9c
 8001e98:	20000032 	.word	0x20000032
 8001e9c:	20008a5c 	.word	0x20008a5c
 8001ea0:	2000869c 	.word	0x2000869c

08001ea4 <StartBall>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBall */
void StartBall(void const * argument)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b092      	sub	sp, #72	; 0x48
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBall */

	//Initialisation de la régularité de lancement de la tache
	TickType_t xFrequency=15;
 8001eac:	230f      	movs	r3, #15
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8001eb0:	f00a fd9c 	bl	800c9ec <xTaskGetTickCount>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Initialisation des anciennes coordonnées de la balle
	int16_t x_balle_hold = 8;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t y_balle_hold = 136;
 8001ebe:	2388      	movs	r3, #136	; 0x88
 8001ec0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  /* Infinite loop */
  for(;;)
  {
	  if(lost == 1){
 8001ec4:	4b65      	ldr	r3, [pc, #404]	; (800205c <StartBall+0x1b8>)
 8001ec6:	f993 3000 	ldrsb.w	r3, [r3]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d116      	bne.n	8001efc <StartBall+0x58>
		  //Si la balle touche le bord gauche de l'écran, on a perdu
		  //Capture de la ressource
		  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001ece:	4b64      	ldr	r3, [pc, #400]	; (8002060 <StartBall+0x1bc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 ff6e 	bl	800bdb8 <xQueueSemaphoreTake>

		  //Affichage du message de perte sous le chronomètre
		  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Perdu");
 8001edc:	4961      	ldr	r1, [pc, #388]	; (8002064 <StartBall+0x1c0>)
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f000 fd9e 	bl	8002a20 <BSP_LCD_DisplayStringAtLine>

		  //Libération de la ressource
		  xSemaphoreGive(myMutex_LCDHandle);
 8001ee4:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <StartBall+0x1bc>)
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	f009 fe5d 	bl	800bbac <xQueueGenericSend>

		  //Mise en pause du déplacement de la balle
		  vTaskSuspend(BallDisplayHandle);
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <StartBall+0x1c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f00a fbd4 	bl	800c6a4 <vTaskSuspend>
	  }

	  //Capture de la ressource
	  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001efc:	4b58      	ldr	r3, [pc, #352]	; (8002060 <StartBall+0x1bc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	4618      	mov	r0, r3
 8001f06:	f009 ff57 	bl	800bdb8 <xQueueSemaphoreTake>

	  //Effaçage des anciens dessins
	  if(x_balle_hold >= 0){
 8001f0a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db15      	blt.n	8001f3e <StartBall+0x9a>
		  //Effaçage de l'ancienne balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001f12:	4b56      	ldr	r3, [pc, #344]	; (800206c <StartBall+0x1c8>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <StartBall+0x7c>
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	e001      	b.n	8001f24 <StartBall+0x80>
 8001f20:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fbe5 	bl	80026f4 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle_hold, y_balle_hold, r_balle);
 8001f2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f2e:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8001f32:	4a4f      	ldr	r2, [pc, #316]	; (8002070 <StartBall+0x1cc>)
 8001f34:	8812      	ldrh	r2, [r2, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f001 f860 	bl	8002ffc <BSP_LCD_FillCircle>
 8001f3c:	e02c      	b.n	8001f98 <StartBall+0xf4>
	  }
	  else{
		  //Effaçage de l'ancien triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001f3e:	4b4b      	ldr	r3, [pc, #300]	; (800206c <StartBall+0x1c8>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <StartBall+0xa8>
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e001      	b.n	8001f50 <StartBall+0xac>
 8001f4c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fbcf 	bl	80026f4 <BSP_LCD_SetTextColor>
		  Point Point1 = {6,y_balle_hold+3};
 8001f56:	2306      	movs	r3, #6
 8001f58:	873b      	strh	r3, [r7, #56]	; 0x38
 8001f5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f5e:	3303      	adds	r3, #3
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	877b      	strh	r3, [r7, #58]	; 0x3a
		  Point Point2 = {0,y_balle_hold};
 8001f66:	2300      	movs	r3, #0
 8001f68:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001f6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f6e:	86fb      	strh	r3, [r7, #54]	; 0x36
		  Point Point3 = {6,y_balle_hold-3};
 8001f70:	2306      	movs	r3, #6
 8001f72:	863b      	strh	r3, [r7, #48]	; 0x30
 8001f74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f78:	3b03      	subs	r3, #3
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	867b      	strh	r3, [r7, #50]	; 0x32

		  Point Points[3] = {Point1, Point2, Point3};
 8001f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
 8001f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		  BSP_LCD_FillPolygon(Points,3);
 8001f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f90:	2103      	movs	r1, #3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 f8d2 	bl	800313c <BSP_LCD_FillPolygon>
	  }

	  //Affichage des nouveaux dessins
	  if(x_balle >= 0){
 8001f98:	4b36      	ldr	r3, [pc, #216]	; (8002074 <StartBall+0x1d0>)
 8001f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db17      	blt.n	8001fd2 <StartBall+0x12e>
		  //Affichage de la nouvelle balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001fa2:	4b32      	ldr	r3, [pc, #200]	; (800206c <StartBall+0x1c8>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <StartBall+0x10c>
 8001faa:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001fae:	e001      	b.n	8001fb4 <StartBall+0x110>
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fb9d 	bl	80026f4 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle, y_balle, r_balle);
 8001fba:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <StartBall+0x1d0>)
 8001fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4a2d      	ldr	r2, [pc, #180]	; (8002078 <StartBall+0x1d4>)
 8001fc4:	8811      	ldrh	r1, [r2, #0]
 8001fc6:	4a2a      	ldr	r2, [pc, #168]	; (8002070 <StartBall+0x1cc>)
 8001fc8:	8812      	ldrh	r2, [r2, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 f816 	bl	8002ffc <BSP_LCD_FillCircle>
 8001fd0:	e02d      	b.n	800202e <StartBall+0x18a>
	  }
	  else{
		  //Affichage du nouveau triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <StartBall+0x1c8>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <StartBall+0x13c>
 8001fda:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001fde:	e001      	b.n	8001fe4 <StartBall+0x140>
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fb85 	bl	80026f4 <BSP_LCD_SetTextColor>
		  Point Point1 = {6,y_balle+3};
 8001fea:	2306      	movs	r3, #6
 8001fec:	843b      	strh	r3, [r7, #32]
 8001fee:	4b22      	ldr	r3, [pc, #136]	; (8002078 <StartBall+0x1d4>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	3303      	adds	r3, #3
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	847b      	strh	r3, [r7, #34]	; 0x22
		  Point Point2 = {0,y_balle};
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	83bb      	strh	r3, [r7, #28]
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <StartBall+0x1d4>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b21b      	sxth	r3, r3
 8002004:	83fb      	strh	r3, [r7, #30]
		  Point Point3 = {6,y_balle-3};
 8002006:	2306      	movs	r3, #6
 8002008:	833b      	strh	r3, [r7, #24]
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <StartBall+0x1d4>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	3b03      	subs	r3, #3
 8002010:	b29b      	uxth	r3, r3
 8002012:	b21b      	sxth	r3, r3
 8002014:	837b      	strh	r3, [r7, #26]

		  Point Points[3] = {Point1, Point2, Point3};
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	617b      	str	r3, [r7, #20]
		  BSP_LCD_FillPolygon(Points,3);
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	2103      	movs	r1, #3
 8002028:	4618      	mov	r0, r3
 800202a:	f001 f887 	bl	800313c <BSP_LCD_FillPolygon>
	  }

	  //Libération de la ressource
	 xSemaphoreGive(myMutex_LCDHandle);
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <StartBall+0x1bc>)
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	2300      	movs	r3, #0
 8002034:	2200      	movs	r2, #0
 8002036:	2100      	movs	r1, #0
 8002038:	f009 fdb8 	bl	800bbac <xQueueGenericSend>

	 //Stockage du dernier emplacement de dessin
	 x_balle_hold=x_balle;
 800203c:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <StartBall+0x1d0>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	 y_balle_hold=y_balle;
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <StartBall+0x1d4>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44


	 vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800204c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002052:	4618      	mov	r0, r3
 8002054:	f00a fa6c 	bl	800c530 <vTaskDelayUntil>
	  if(lost == 1){
 8002058:	e734      	b.n	8001ec4 <StartBall+0x20>
 800205a:	bf00      	nop
 800205c:	200002d2 	.word	0x200002d2
 8002060:	20008b9c 	.word	0x20008b9c
 8002064:	0800ddd8 	.word	0x0800ddd8
 8002068:	20008bac 	.word	0x20008bac
 800206c:	20000032 	.word	0x20000032
 8002070:	20000030 	.word	0x20000030
 8002074:	2000002c 	.word	0x2000002c
 8002078:	2000002e 	.word	0x2000002e

0800207c <StartBgChanger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBgChanger */
void StartBgChanger(void const * argument)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBgChanger */
	//Initialisation de l'état de BP1 et de l'état
	uint8_t BP1=1;
 8002084:	2301      	movs	r3, #1
 8002086:	73bb      	strb	r3, [r7, #14]
	uint8_t state=0;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  //Lecture de l'état du BP1
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 800208c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002090:	4833      	ldr	r0, [pc, #204]	; (8002160 <StartBgChanger+0xe4>)
 8002092:	f004 f8f9 	bl	8006288 <HAL_GPIO_ReadPin>
 8002096:	4603      	mov	r3, r0
 8002098:	73bb      	strb	r3, [r7, #14]

	  //Machine à états
	  switch(state){
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d052      	beq.n	8002146 <StartBgChanger+0xca>
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	dc59      	bgt.n	8002158 <StartBgChanger+0xdc>
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <StartBgChanger+0x32>
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d006      	beq.n	80020ba <StartBgChanger+0x3e>
 80020ac:	e054      	b.n	8002158 <StartBgChanger+0xdc>
		  case 0:
			  //Attente d'un changement d'état (d'un appui sur BP1)
			  if(!BP1) state = 1;
 80020ae:	7bbb      	ldrb	r3, [r7, #14]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d14e      	bne.n	8002152 <StartBgChanger+0xd6>
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
			  break;
 80020b8:	e04b      	b.n	8002152 <StartBgChanger+0xd6>
		  case 1:
			  //Changement de la couleur
			  couleur = !couleur;
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <StartBgChanger+0xe8>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <StartBgChanger+0xe8>)
 80020cc:	701a      	strb	r2, [r3, #0]
			  if(couleur==0){
 80020ce:	4b25      	ldr	r3, [pc, #148]	; (8002164 <StartBgChanger+0xe8>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d11a      	bne.n	800210c <StartBgChanger+0x90>
				  //Capture de la ressource
				  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80020d6:	4b24      	ldr	r3, [pc, #144]	; (8002168 <StartBgChanger+0xec>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f04f 31ff 	mov.w	r1, #4294967295
 80020de:	4618      	mov	r0, r3
 80020e0:	f009 fe6a 	bl	800bdb8 <xQueueSemaphoreTake>

				  //Nettoyage et recoloration du LCD en noir sur fond blanc
				  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f000 fb66 	bl	80027b8 <BSP_LCD_Clear>
				  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80020ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80020f0:	f000 fb00 	bl	80026f4 <BSP_LCD_SetTextColor>
				  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f000 fb14 	bl	8002724 <BSP_LCD_SetBackColor>

				  //Libération de la ressource
				  xSemaphoreGive(myMutex_LCDHandle);
 80020fc:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <StartBgChanger+0xec>)
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	2300      	movs	r3, #0
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	f009 fd51 	bl	800bbac <xQueueGenericSend>
 800210a:	e019      	b.n	8002140 <StartBgChanger+0xc4>
			  }
			  else{
				  //Capture de la ressource
				  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <StartBgChanger+0xec>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	4618      	mov	r0, r3
 8002116:	f009 fe4f 	bl	800bdb8 <xQueueSemaphoreTake>

				  //Nettoyage et recoloration du LCD en blanc sur fond noir
				  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800211a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800211e:	f000 fb4b 	bl	80027b8 <BSP_LCD_Clear>
				  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002122:	f04f 30ff 	mov.w	r0, #4294967295
 8002126:	f000 fae5 	bl	80026f4 <BSP_LCD_SetTextColor>
				  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800212a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800212e:	f000 faf9 	bl	8002724 <BSP_LCD_SetBackColor>

				  //Libération de la ressource
				  xSemaphoreGive(myMutex_LCDHandle);
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <StartBgChanger+0xec>)
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	2300      	movs	r3, #0
 8002138:	2200      	movs	r2, #0
 800213a:	2100      	movs	r1, #0
 800213c:	f009 fd36 	bl	800bbac <xQueueGenericSend>
			  }

			  //Changement d'état
			  state = 2;
 8002140:	2302      	movs	r3, #2
 8002142:	73fb      	strb	r3, [r7, #15]
			  break;
 8002144:	e008      	b.n	8002158 <StartBgChanger+0xdc>
		  case 2:
			  //Attente d'un changement d'état (relachement du bouton BP1)
			  if(BP1) state = 0;
 8002146:	7bbb      	ldrb	r3, [r7, #14]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d004      	beq.n	8002156 <StartBgChanger+0xda>
 800214c:	2300      	movs	r3, #0
 800214e:	73fb      	strb	r3, [r7, #15]
			  break;
 8002150:	e001      	b.n	8002156 <StartBgChanger+0xda>
			  break;
 8002152:	bf00      	nop
 8002154:	e000      	b.n	8002158 <StartBgChanger+0xdc>
			  break;
 8002156:	bf00      	nop
	  }
  osDelay(50);
 8002158:	2032      	movs	r0, #50	; 0x32
 800215a:	f009 fa84 	bl	800b666 <osDelay>
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 800215e:	e795      	b.n	800208c <StartBgChanger+0x10>
 8002160:	40020000 	.word	0x40020000
 8002164:	20000032 	.word	0x20000032
 8002168:	20008b9c 	.word	0x20008b9c

0800216c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800217e:	f002 fb91 	bl	80048a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40001000 	.word	0x40001000

08002190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002194:	b672      	cpsid	i
}
 8002196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002198:	e7fe      	b.n	8002198 <Error_Handler+0x8>
	...

0800219c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	; 0x30
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a51      	ldr	r2, [pc, #324]	; (80022ec <I2Cx_MspInit+0x150>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d14d      	bne.n	8002248 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <I2Cx_MspInit+0x154>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4a4f      	ldr	r2, [pc, #316]	; (80022f0 <I2Cx_MspInit+0x154>)
 80021b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
 80021b8:	4b4d      	ldr	r3, [pc, #308]	; (80022f0 <I2Cx_MspInit+0x154>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80021c8:	2312      	movs	r3, #18
 80021ca:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80021d0:	2302      	movs	r3, #2
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80021d4:	2304      	movs	r3, #4
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	4619      	mov	r1, r3
 80021de:	4845      	ldr	r0, [pc, #276]	; (80022f4 <I2Cx_MspInit+0x158>)
 80021e0:	f003 fd9a 	bl	8005d18 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80021e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80021ea:	f107 031c 	add.w	r3, r7, #28
 80021ee:	4619      	mov	r1, r3
 80021f0:	4840      	ldr	r0, [pc, #256]	; (80022f4 <I2Cx_MspInit+0x158>)
 80021f2:	f003 fd91 	bl	8005d18 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80021f6:	4b3e      	ldr	r3, [pc, #248]	; (80022f0 <I2Cx_MspInit+0x154>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a3d      	ldr	r2, [pc, #244]	; (80022f0 <I2Cx_MspInit+0x154>)
 80021fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <I2Cx_MspInit+0x154>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800220e:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <I2Cx_MspInit+0x154>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a37      	ldr	r2, [pc, #220]	; (80022f0 <I2Cx_MspInit+0x154>)
 8002214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002218:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800221a:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <I2Cx_MspInit+0x154>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a34      	ldr	r2, [pc, #208]	; (80022f0 <I2Cx_MspInit+0x154>)
 8002220:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002224:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	210f      	movs	r1, #15
 800222a:	2048      	movs	r0, #72	; 0x48
 800222c:	f003 f810 	bl	8005250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002230:	2048      	movs	r0, #72	; 0x48
 8002232:	f003 f829 	bl	8005288 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	210f      	movs	r1, #15
 800223a:	2049      	movs	r0, #73	; 0x49
 800223c:	f003 f808 	bl	8005250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002240:	2049      	movs	r0, #73	; 0x49
 8002242:	f003 f821 	bl	8005288 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002246:	e04d      	b.n	80022e4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <I2Cx_MspInit+0x154>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <I2Cx_MspInit+0x154>)
 800224e:	f043 0302 	orr.w	r3, r3, #2
 8002252:	6313      	str	r3, [r2, #48]	; 0x30
 8002254:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <I2Cx_MspInit+0x154>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002264:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002266:	2312      	movs	r3, #18
 8002268:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800226e:	2302      	movs	r3, #2
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002272:	2304      	movs	r3, #4
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	481e      	ldr	r0, [pc, #120]	; (80022f8 <I2Cx_MspInit+0x15c>)
 800227e:	f003 fd4b 	bl	8005d18 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002288:	f107 031c 	add.w	r3, r7, #28
 800228c:	4619      	mov	r1, r3
 800228e:	481a      	ldr	r0, [pc, #104]	; (80022f8 <I2Cx_MspInit+0x15c>)
 8002290:	f003 fd42 	bl	8005d18 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <I2Cx_MspInit+0x154>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <I2Cx_MspInit+0x154>)
 800229a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800229e:	6413      	str	r3, [r2, #64]	; 0x40
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <I2Cx_MspInit+0x154>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <I2Cx_MspInit+0x154>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a0f      	ldr	r2, [pc, #60]	; (80022f0 <I2Cx_MspInit+0x154>)
 80022b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022b6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <I2Cx_MspInit+0x154>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <I2Cx_MspInit+0x154>)
 80022be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022c2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80022c4:	2200      	movs	r2, #0
 80022c6:	210f      	movs	r1, #15
 80022c8:	201f      	movs	r0, #31
 80022ca:	f002 ffc1 	bl	8005250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80022ce:	201f      	movs	r0, #31
 80022d0:	f002 ffda 	bl	8005288 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	210f      	movs	r1, #15
 80022d8:	2020      	movs	r0, #32
 80022da:	f002 ffb9 	bl	8005250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80022de:	2020      	movs	r0, #32
 80022e0:	f002 ffd2 	bl	8005288 <HAL_NVIC_EnableIRQ>
}
 80022e4:	bf00      	nop
 80022e6:	3730      	adds	r7, #48	; 0x30
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	200002d4 	.word	0x200002d4
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40021c00 	.word	0x40021c00
 80022f8:	40020400 	.word	0x40020400

080022fc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f004 fadf 	bl	80068c8 <HAL_I2C_GetState>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d125      	bne.n	800235c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a14      	ldr	r2, [pc, #80]	; (8002364 <I2Cx_Init+0x68>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <I2Cx_Init+0x6c>)
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e002      	b.n	8002326 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <I2Cx_Init+0x70>)
 8002324:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a11      	ldr	r2, [pc, #68]	; (8002370 <I2Cx_Init+0x74>)
 800232a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff23 	bl	800219c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f003 ffc8 	bl	80062ec <HAL_I2C_Init>
  }
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	200002d4 	.word	0x200002d4
 8002368:	40005c00 	.word	0x40005c00
 800236c:	40005400 	.word	0x40005400
 8002370:	40912732 	.word	0x40912732

08002374 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af04      	add	r7, sp, #16
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	4608      	mov	r0, r1
 800237e:	4611      	mov	r1, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4603      	mov	r3, r0
 8002384:	72fb      	strb	r3, [r7, #11]
 8002386:	460b      	mov	r3, r1
 8002388:	813b      	strh	r3, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	b299      	uxth	r1, r3
 8002396:	88f8      	ldrh	r0, [r7, #6]
 8002398:	893a      	ldrh	r2, [r7, #8]
 800239a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239e:	9302      	str	r3, [sp, #8]
 80023a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4603      	mov	r3, r0
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f004 f972 	bl	8006694 <HAL_I2C_Mem_Read>
 80023b0:	4603      	mov	r3, r0
 80023b2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80023ba:	7afb      	ldrb	r3, [r7, #11]
 80023bc:	4619      	mov	r1, r3
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f832 	bl	8002428 <I2Cx_Error>
  }
  return status;    
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b08a      	sub	sp, #40	; 0x28
 80023d2:	af04      	add	r7, sp, #16
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	4608      	mov	r0, r1
 80023d8:	4611      	mov	r1, r2
 80023da:	461a      	mov	r2, r3
 80023dc:	4603      	mov	r3, r0
 80023de:	72fb      	strb	r3, [r7, #11]
 80023e0:	460b      	mov	r3, r1
 80023e2:	813b      	strh	r3, [r7, #8]
 80023e4:	4613      	mov	r3, r2
 80023e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80023ec:	7afb      	ldrb	r3, [r7, #11]
 80023ee:	b299      	uxth	r1, r3
 80023f0:	88f8      	ldrh	r0, [r7, #6]
 80023f2:	893a      	ldrh	r2, [r7, #8]
 80023f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	4603      	mov	r3, r0
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f004 f831 	bl	800646c <HAL_I2C_Mem_Write>
 800240a:	4603      	mov	r3, r0
 800240c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d004      	beq.n	800241e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002414:	7afb      	ldrb	r3, [r7, #11]
 8002416:	4619      	mov	r1, r3
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f805 	bl	8002428 <I2Cx_Error>
  }
  return status;
 800241e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f003 ffe9 	bl	800640c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ff5e 	bl	80022fc <I2Cx_Init>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <TS_IO_Init+0x10>)
 800244e:	f7ff ff55 	bl	80022fc <I2Cx_Init>
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200002d4 	.word	0x200002d4

0800245c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af02      	add	r7, sp, #8
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
 8002466:	460b      	mov	r3, r1
 8002468:	71bb      	strb	r3, [r7, #6]
 800246a:	4613      	mov	r3, r2
 800246c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800246e:	79bb      	ldrb	r3, [r7, #6]
 8002470:	b29a      	uxth	r2, r3
 8002472:	79f9      	ldrb	r1, [r7, #7]
 8002474:	2301      	movs	r3, #1
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	1d7b      	adds	r3, r7, #5
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2301      	movs	r3, #1
 800247e:	4803      	ldr	r0, [pc, #12]	; (800248c <TS_IO_Write+0x30>)
 8002480:	f7ff ffa5 	bl	80023ce <I2Cx_WriteMultiple>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	200002d4 	.word	0x200002d4

08002490 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af02      	add	r7, sp, #8
 8002496:	4603      	mov	r3, r0
 8002498:	460a      	mov	r2, r1
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	4613      	mov	r3, r2
 800249e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80024a4:	79bb      	ldrb	r3, [r7, #6]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	79f9      	ldrb	r1, [r7, #7]
 80024aa:	2301      	movs	r3, #1
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	f107 030f 	add.w	r3, r7, #15
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2301      	movs	r3, #1
 80024b6:	4804      	ldr	r0, [pc, #16]	; (80024c8 <TS_IO_Read+0x38>)
 80024b8:	f7ff ff5c 	bl	8002374 <I2Cx_ReadMultiple>

  return read_value;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200002d4 	.word	0x200002d4

080024cc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f002 fa05 	bl	80048e4 <HAL_Delay>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <BSP_LCD_Init+0xcc>)
 80024ea:	2228      	movs	r2, #40	; 0x28
 80024ec:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <BSP_LCD_Init+0xcc>)
 80024f0:	2209      	movs	r2, #9
 80024f2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80024f4:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <BSP_LCD_Init+0xcc>)
 80024f6:	2235      	movs	r2, #53	; 0x35
 80024f8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <BSP_LCD_Init+0xcc>)
 80024fc:	220b      	movs	r2, #11
 80024fe:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002500:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <BSP_LCD_Init+0xcc>)
 8002502:	f240 121b 	movw	r2, #283	; 0x11b
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <BSP_LCD_Init+0xcc>)
 800250a:	f240 2215 	movw	r2, #533	; 0x215
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <BSP_LCD_Init+0xcc>)
 8002512:	f240 121d 	movw	r2, #285	; 0x11d
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <BSP_LCD_Init+0xcc>)
 800251a:	f240 2235 	movw	r2, #565	; 0x235
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002520:	2100      	movs	r1, #0
 8002522:	4823      	ldr	r0, [pc, #140]	; (80025b0 <BSP_LCD_Init+0xcc>)
 8002524:	f000 ffe6 	bl	80034f4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <BSP_LCD_Init+0xcc>)
 800252a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800252e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <BSP_LCD_Init+0xcc>)
 8002532:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002536:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <BSP_LCD_Init+0xcc>)
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <BSP_LCD_Init+0xcc>)
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <BSP_LCD_Init+0xcc>)
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <BSP_LCD_Init+0xcc>)
 8002552:	2200      	movs	r2, #0
 8002554:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <BSP_LCD_Init+0xcc>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <BSP_LCD_Init+0xcc>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <BSP_LCD_Init+0xcc>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <BSP_LCD_Init+0xcc>)
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <BSP_LCD_Init+0xd0>)
 800256c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800256e:	4810      	ldr	r0, [pc, #64]	; (80025b0 <BSP_LCD_Init+0xcc>)
 8002570:	f004 fe3c 	bl	80071ec <HAL_LTDC_GetState>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800257a:	2100      	movs	r1, #0
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <BSP_LCD_Init+0xcc>)
 800257e:	f000 fedf 	bl	8003340 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002582:	480b      	ldr	r0, [pc, #44]	; (80025b0 <BSP_LCD_Init+0xcc>)
 8002584:	f004 fc62 	bl	8006e4c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002588:	2201      	movs	r2, #1
 800258a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800258e:	480a      	ldr	r0, [pc, #40]	; (80025b8 <BSP_LCD_Init+0xd4>)
 8002590:	f003 fe92 	bl	80062b8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002594:	2201      	movs	r2, #1
 8002596:	2108      	movs	r1, #8
 8002598:	4808      	ldr	r0, [pc, #32]	; (80025bc <BSP_LCD_Init+0xd8>)
 800259a:	f003 fe8d 	bl	80062b8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800259e:	f001 f989 	bl	80038b4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80025a2:	4807      	ldr	r0, [pc, #28]	; (80025c0 <BSP_LCD_Init+0xdc>)
 80025a4:	f000 f8d8 	bl	8002758 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20008bb4 	.word	0x20008bb4
 80025b4:	40016800 	.word	0x40016800
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40022800 	.word	0x40022800
 80025c0:	20000034 	.word	0x20000034

080025c4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <BSP_LCD_GetXSize+0x20>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <BSP_LCD_GetXSize+0x24>)
 80025ce:	2134      	movs	r1, #52	; 0x34
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	3360      	adds	r3, #96	; 0x60
 80025d8:	681b      	ldr	r3, [r3, #0]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	20000360 	.word	0x20000360
 80025e8:	20008bb4 	.word	0x20008bb4

080025ec <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <BSP_LCD_GetYSize+0x20>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a06      	ldr	r2, [pc, #24]	; (8002610 <BSP_LCD_GetYSize+0x24>)
 80025f6:	2134      	movs	r1, #52	; 0x34
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	3364      	adds	r3, #100	; 0x64
 8002600:	681b      	ldr	r3, [r3, #0]
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	20000360 	.word	0x20000360
 8002610:	20008bb4 	.word	0x20008bb4

08002614 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002614:	b580      	push	{r7, lr}
 8002616:	b090      	sub	sp, #64	; 0x40
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002624:	f7ff ffce 	bl	80025c4 <BSP_LCD_GetXSize>
 8002628:	4603      	mov	r3, r0
 800262a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002630:	f7ff ffdc 	bl	80025ec <BSP_LCD_GetYSize>
 8002634:	4603      	mov	r3, r0
 8002636:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002640:	23ff      	movs	r3, #255	; 0xff
 8002642:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800265a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002660:	2307      	movs	r3, #7
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002664:	f7ff ffae 	bl	80025c4 <BSP_LCD_GetXSize>
 8002668:	4603      	mov	r3, r0
 800266a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800266c:	f7ff ffbe 	bl	80025ec <BSP_LCD_GetYSize>
 8002670:	4603      	mov	r3, r0
 8002672:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	4619      	mov	r1, r3
 800267c:	4812      	ldr	r0, [pc, #72]	; (80026c8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800267e:	f004 fd77 	bl	8007170 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002682:	88fa      	ldrh	r2, [r7, #6]
 8002684:	4911      	ldr	r1, [pc, #68]	; (80026cc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	3304      	adds	r3, #4
 8002692:	f04f 32ff 	mov.w	r2, #4294967295
 8002696:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002698:	88fa      	ldrh	r2, [r7, #6]
 800269a:	490c      	ldr	r1, [pc, #48]	; (80026cc <BSP_LCD_LayerDefaultInit+0xb8>)
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3308      	adds	r3, #8
 80026a8:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80026aa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80026ac:	88fa      	ldrh	r2, [r7, #6]
 80026ae:	4907      	ldr	r1, [pc, #28]	; (80026cc <BSP_LCD_LayerDefaultInit+0xb8>)
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80026be:	601a      	str	r2, [r3, #0]
}
 80026c0:	bf00      	nop
 80026c2:	3740      	adds	r7, #64	; 0x40
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20008bb4 	.word	0x20008bb4
 80026cc:	20000364 	.word	0x20000364
 80026d0:	20000034 	.word	0x20000034

080026d4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80026dc:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <BSP_LCD_SelectLayer+0x1c>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
} 
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000360 	.word	0x20000360

080026f4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <BSP_LCD_SetTextColor+0x28>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4907      	ldr	r1, [pc, #28]	; (8002720 <BSP_LCD_SetTextColor+0x2c>)
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	601a      	str	r2, [r3, #0]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	20000360 	.word	0x20000360
 8002720:	20000364 	.word	0x20000364

08002724 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <BSP_LCD_SetBackColor+0x2c>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4908      	ldr	r1, [pc, #32]	; (8002754 <BSP_LCD_SetBackColor+0x30>)
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	3304      	adds	r3, #4
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000360 	.word	0x20000360
 8002754:	20000364 	.word	0x20000364

08002758 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <BSP_LCD_SetFont+0x2c>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4908      	ldr	r1, [pc, #32]	; (8002788 <BSP_LCD_SetFont+0x30>)
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3308      	adds	r3, #8
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	601a      	str	r2, [r3, #0]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000360 	.word	0x20000360
 8002788:	20000364 	.word	0x20000364

0800278c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <BSP_LCD_GetFont+0x24>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4907      	ldr	r1, [pc, #28]	; (80027b4 <BSP_LCD_GetFont+0x28>)
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	3308      	adds	r3, #8
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000360 	.word	0x20000360
 80027b4:	20000364 	.word	0x20000364

080027b8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80027b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af02      	add	r7, sp, #8
 80027be:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <BSP_LCD_Clear+0x48>)
 80027c2:	681c      	ldr	r4, [r3, #0]
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <BSP_LCD_Clear+0x48>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <BSP_LCD_Clear+0x4c>)
 80027ca:	2134      	movs	r1, #52	; 0x34
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	335c      	adds	r3, #92	; 0x5c
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461e      	mov	r6, r3
 80027d8:	f7ff fef4 	bl	80025c4 <BSP_LCD_GetXSize>
 80027dc:	4605      	mov	r5, r0
 80027de:	f7ff ff05 	bl	80025ec <BSP_LCD_GetYSize>
 80027e2:	4602      	mov	r2, r0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	2300      	movs	r3, #0
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	4613      	mov	r3, r2
 80027ee:	462a      	mov	r2, r5
 80027f0:	4631      	mov	r1, r6
 80027f2:	4620      	mov	r0, r4
 80027f4:	f001 f812 	bl	800381c <LL_FillBuffer>
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002800:	20000360 	.word	0x20000360
 8002804:	20008bb4 	.word	0x20008bb4

08002808 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]
 8002812:	460b      	mov	r3, r1
 8002814:	80bb      	strh	r3, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <BSP_LCD_DisplayChar+0x80>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	491b      	ldr	r1, [pc, #108]	; (800288c <BSP_LCD_DisplayChar+0x84>)
 8002820:	4613      	mov	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	3308      	adds	r3, #8
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002836:	4b14      	ldr	r3, [pc, #80]	; (8002888 <BSP_LCD_DisplayChar+0x80>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4c14      	ldr	r4, [pc, #80]	; (800288c <BSP_LCD_DisplayChar+0x84>)
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4423      	add	r3, r4
 8002846:	3308      	adds	r3, #8
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800284c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <BSP_LCD_DisplayChar+0x80>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4c0d      	ldr	r4, [pc, #52]	; (800288c <BSP_LCD_DisplayChar+0x84>)
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4423      	add	r3, r4
 8002860:	3308      	adds	r3, #8
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	889b      	ldrh	r3, [r3, #4]
 8002866:	3307      	adds	r3, #7
 8002868:	2b00      	cmp	r3, #0
 800286a:	da00      	bge.n	800286e <BSP_LCD_DisplayChar+0x66>
 800286c:	3307      	adds	r3, #7
 800286e:	10db      	asrs	r3, r3, #3
 8002870:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002874:	18ca      	adds	r2, r1, r3
 8002876:	88b9      	ldrh	r1, [r7, #4]
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fe56 	bl	800352c <DrawChar>
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}
 8002888:	20000360 	.word	0x20000360
 800288c:	20000364 	.word	0x20000364

08002890 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002890:	b5b0      	push	{r4, r5, r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	60ba      	str	r2, [r7, #8]
 8002898:	461a      	mov	r2, r3
 800289a:	4603      	mov	r3, r0
 800289c:	81fb      	strh	r3, [r7, #14]
 800289e:	460b      	mov	r3, r1
 80028a0:	81bb      	strh	r3, [r7, #12]
 80028a2:	4613      	mov	r3, r2
 80028a4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80028a6:	2301      	movs	r3, #1
 80028a8:	83fb      	strh	r3, [r7, #30]
 80028aa:	2300      	movs	r3, #0
 80028ac:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80028ba:	e002      	b.n	80028c2 <BSP_LCD_DisplayStringAt+0x32>
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	3301      	adds	r3, #1
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	617a      	str	r2, [r7, #20]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f6      	bne.n	80028bc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80028ce:	f7ff fe79 	bl	80025c4 <BSP_LCD_GetXSize>
 80028d2:	4601      	mov	r1, r0
 80028d4:	4b50      	ldr	r3, [pc, #320]	; (8002a18 <BSP_LCD_DisplayStringAt+0x188>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4850      	ldr	r0, [pc, #320]	; (8002a1c <BSP_LCD_DisplayStringAt+0x18c>)
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4403      	add	r3, r0
 80028e4:	3308      	adds	r3, #8
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	889b      	ldrh	r3, [r3, #4]
 80028ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ee:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d01c      	beq.n	8002930 <BSP_LCD_DisplayStringAt+0xa0>
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	dc33      	bgt.n	8002962 <BSP_LCD_DisplayStringAt+0xd2>
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d002      	beq.n	8002904 <BSP_LCD_DisplayStringAt+0x74>
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d019      	beq.n	8002936 <BSP_LCD_DisplayStringAt+0xa6>
 8002902:	e02e      	b.n	8002962 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad1      	subs	r1, r2, r3
 800290a:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <BSP_LCD_DisplayStringAt+0x188>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4843      	ldr	r0, [pc, #268]	; (8002a1c <BSP_LCD_DisplayStringAt+0x18c>)
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4403      	add	r3, r0
 800291a:	3308      	adds	r3, #8
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	889b      	ldrh	r3, [r3, #4]
 8002920:	fb03 f301 	mul.w	r3, r3, r1
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	89fb      	ldrh	r3, [r7, #14]
 800292a:	4413      	add	r3, r2
 800292c:	83fb      	strh	r3, [r7, #30]
      break;
 800292e:	e01b      	b.n	8002968 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002930:	89fb      	ldrh	r3, [r7, #14]
 8002932:	83fb      	strh	r3, [r7, #30]
      break;
 8002934:	e018      	b.n	8002968 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	b299      	uxth	r1, r3
 800293e:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <BSP_LCD_DisplayStringAt+0x188>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4836      	ldr	r0, [pc, #216]	; (8002a1c <BSP_LCD_DisplayStringAt+0x18c>)
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4403      	add	r3, r0
 800294e:	3308      	adds	r3, #8
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	889b      	ldrh	r3, [r3, #4]
 8002954:	fb11 f303 	smulbb	r3, r1, r3
 8002958:	b29a      	uxth	r2, r3
 800295a:	89fb      	ldrh	r3, [r7, #14]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	83fb      	strh	r3, [r7, #30]
      break;
 8002960:	e002      	b.n	8002968 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	83fb      	strh	r3, [r7, #30]
      break;
 8002966:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002968:	8bfb      	ldrh	r3, [r7, #30]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <BSP_LCD_DisplayStringAt+0xe6>
 800296e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002972:	2b00      	cmp	r3, #0
 8002974:	da1d      	bge.n	80029b2 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002976:	2301      	movs	r3, #1
 8002978:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800297a:	e01a      	b.n	80029b2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	89b9      	ldrh	r1, [r7, #12]
 8002982:	8bfb      	ldrh	r3, [r7, #30]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff3f 	bl	8002808 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <BSP_LCD_DisplayStringAt+0x188>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4923      	ldr	r1, [pc, #140]	; (8002a1c <BSP_LCD_DisplayStringAt+0x18c>)
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3308      	adds	r3, #8
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	889a      	ldrh	r2, [r3, #4]
 80029a0:	8bfb      	ldrh	r3, [r7, #30]
 80029a2:	4413      	add	r3, r2
 80029a4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3301      	adds	r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
    i++;
 80029ac:	8bbb      	ldrh	r3, [r7, #28]
 80029ae:	3301      	adds	r3, #1
 80029b0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	bf14      	ite	ne
 80029ba:	2301      	movne	r3, #1
 80029bc:	2300      	moveq	r3, #0
 80029be:	b2dc      	uxtb	r4, r3
 80029c0:	f7ff fe00 	bl	80025c4 <BSP_LCD_GetXSize>
 80029c4:	8bb9      	ldrh	r1, [r7, #28]
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <BSP_LCD_DisplayStringAt+0x188>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4d14      	ldr	r5, [pc, #80]	; (8002a1c <BSP_LCD_DisplayStringAt+0x18c>)
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	442b      	add	r3, r5
 80029d6:	3308      	adds	r3, #8
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	889b      	ldrh	r3, [r3, #4]
 80029dc:	fb03 f301 	mul.w	r3, r3, r1
 80029e0:	1ac3      	subs	r3, r0, r3
 80029e2:	b299      	uxth	r1, r3
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <BSP_LCD_DisplayStringAt+0x188>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	480c      	ldr	r0, [pc, #48]	; (8002a1c <BSP_LCD_DisplayStringAt+0x18c>)
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4403      	add	r3, r0
 80029f4:	3308      	adds	r3, #8
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	889b      	ldrh	r3, [r3, #4]
 80029fa:	4299      	cmp	r1, r3
 80029fc:	bf2c      	ite	cs
 80029fe:	2301      	movcs	r3, #1
 8002a00:	2300      	movcc	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	4023      	ands	r3, r4
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1b7      	bne.n	800297c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bdb0      	pop	{r4, r5, r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000360 	.word	0x20000360
 8002a1c:	20000364 	.word	0x20000364

08002a20 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002a2c:	f7ff feae 	bl	800278c <BSP_LCD_GetFont>
 8002a30:	4603      	mov	r3, r0
 8002a32:	88db      	ldrh	r3, [r3, #6]
 8002a34:	88fa      	ldrh	r2, [r7, #6]
 8002a36:	fb12 f303 	smulbb	r3, r2, r3
 8002a3a:	b299      	uxth	r1, r3
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff ff25 	bl	8002890 <BSP_LCD_DisplayStringAt>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a50:	b5b0      	push	{r4, r5, r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	80bb      	strh	r3, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <BSP_LCD_DrawHLine+0xb0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a26      	ldr	r2, [pc, #152]	; (8002b04 <BSP_LCD_DrawHLine+0xb4>)
 8002a6c:	2134      	movs	r1, #52	; 0x34
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3348      	adds	r3, #72	; 0x48
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d114      	bne.n	8002aa6 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <BSP_LCD_DrawHLine+0xb0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <BSP_LCD_DrawHLine+0xb4>)
 8002a82:	2134      	movs	r1, #52	; 0x34
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	335c      	adds	r3, #92	; 0x5c
 8002a8c:	681c      	ldr	r4, [r3, #0]
 8002a8e:	f7ff fd99 	bl	80025c4 <BSP_LCD_GetXSize>
 8002a92:	4602      	mov	r2, r0
 8002a94:	88bb      	ldrh	r3, [r7, #4]
 8002a96:	fb03 f202 	mul.w	r2, r3, r2
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4423      	add	r3, r4
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e013      	b.n	8002ace <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <BSP_LCD_DrawHLine+0xb0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <BSP_LCD_DrawHLine+0xb4>)
 8002aac:	2134      	movs	r1, #52	; 0x34
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	335c      	adds	r3, #92	; 0x5c
 8002ab6:	681c      	ldr	r4, [r3, #0]
 8002ab8:	f7ff fd84 	bl	80025c4 <BSP_LCD_GetXSize>
 8002abc:	4602      	mov	r2, r0
 8002abe:	88bb      	ldrh	r3, [r7, #4]
 8002ac0:	fb03 f202 	mul.w	r2, r3, r2
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4423      	add	r3, r4
 8002acc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <BSP_LCD_DrawHLine+0xb0>)
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	887c      	ldrh	r4, [r7, #2]
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <BSP_LCD_DrawHLine+0xb0>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4d0b      	ldr	r5, [pc, #44]	; (8002b08 <BSP_LCD_DrawHLine+0xb8>)
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	442b      	add	r3, r5
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	2300      	movs	r3, #0
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2301      	movs	r3, #1
 8002af0:	4622      	mov	r2, r4
 8002af2:	f000 fe93 	bl	800381c <LL_FillBuffer>
}
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bdb0      	pop	{r4, r5, r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000360 	.word	0x20000360
 8002b04:	20008bb4 	.word	0x20008bb4
 8002b08:	20000364 	.word	0x20000364

08002b0c <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b08b      	sub	sp, #44	; 0x2c
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4604      	mov	r4, r0
 8002b14:	4608      	mov	r0, r1
 8002b16:	4611      	mov	r1, r2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4623      	mov	r3, r4
 8002b1c:	80fb      	strh	r3, [r7, #6]
 8002b1e:	4603      	mov	r3, r0
 8002b20:	80bb      	strh	r3, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	807b      	strh	r3, [r7, #2]
 8002b26:	4613      	mov	r3, r2
 8002b28:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	823b      	strh	r3, [r7, #16]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	81fb      	strh	r3, [r7, #14]
 8002b32:	2300      	movs	r3, #0
 8002b34:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b36:	2300      	movs	r3, #0
 8002b38:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b3e:	2300      	movs	r3, #0
 8002b40:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8002b42:	2300      	movs	r3, #0
 8002b44:	83fb      	strh	r3, [r7, #30]
 8002b46:	2300      	movs	r3, #0
 8002b48:	83bb      	strh	r3, [r7, #28]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	837b      	strh	r3, [r7, #26]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	833b      	strh	r3, [r7, #24]
 8002b52:	2300      	movs	r3, #0
 8002b54:	82fb      	strh	r3, [r7, #22]
 8002b56:	2300      	movs	r3, #0
 8002b58:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bfb8      	it	lt
 8002b68:	425b      	neglt	r3, r3
 8002b6a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002b6c:	883a      	ldrh	r2, [r7, #0]
 8002b6e:	88bb      	ldrh	r3, [r7, #4]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bfb8      	it	lt
 8002b76:	425b      	neglt	r3, r3
 8002b78:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8002b7e:	88bb      	ldrh	r3, [r7, #4]
 8002b80:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d304      	bcc.n	8002b94 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	843b      	strh	r3, [r7, #32]
 8002b92:	e005      	b.n	8002ba0 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002b94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b98:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b9e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8002ba0:	883a      	ldrh	r2, [r7, #0]
 8002ba2:	88bb      	ldrh	r3, [r7, #4]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d304      	bcc.n	8002bb2 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002bac:	2301      	movs	r3, #1
 8002bae:	83bb      	strh	r3, [r7, #28]
 8002bb0:	e005      	b.n	8002bbe <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb6:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bbc:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002bbe:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002bc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	db11      	blt.n	8002bee <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002bca:	2300      	movs	r3, #0
 8002bcc:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002bce:	2300      	movs	r3, #0
 8002bd0:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002bd2:	8a3b      	ldrh	r3, [r7, #16]
 8002bd4:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002bd6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	da00      	bge.n	8002be0 <BSP_LCD_DrawLine+0xd4>
 8002bde:	3301      	adds	r3, #1
 8002be0:	105b      	asrs	r3, r3, #1
 8002be2:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8002be8:	8a3b      	ldrh	r3, [r7, #16]
 8002bea:	82bb      	strh	r3, [r7, #20]
 8002bec:	e010      	b.n	8002c10 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002bee:	2300      	movs	r3, #0
 8002bf0:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002bf6:	89fb      	ldrh	r3, [r7, #14]
 8002bf8:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	da00      	bge.n	8002c04 <BSP_LCD_DrawLine+0xf8>
 8002c02:	3301      	adds	r3, #1
 8002c04:	105b      	asrs	r3, r3, #1
 8002c06:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8002c08:	8a3b      	ldrh	r3, [r7, #16]
 8002c0a:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8002c0c:	89fb      	ldrh	r3, [r7, #14]
 8002c0e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	827b      	strh	r3, [r7, #18]
 8002c14:	e037      	b.n	8002c86 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002c16:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002c18:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <BSP_LCD_DrawLine+0x190>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4c20      	ldr	r4, [pc, #128]	; (8002ca0 <BSP_LCD_DrawLine+0x194>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4423      	add	r3, r4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f000 f923 	bl	8002e78 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002c32:	8b3a      	ldrh	r2, [r7, #24]
 8002c34:	8afb      	ldrh	r3, [r7, #22]
 8002c36:	4413      	add	r3, r2
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002c3c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002c40:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	db0e      	blt.n	8002c66 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002c48:	8b3a      	ldrh	r2, [r7, #24]
 8002c4a:	8b7b      	ldrh	r3, [r7, #26]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002c52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c56:	4413      	add	r3, r2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002c5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c5e:	8bfb      	ldrh	r3, [r7, #30]
 8002c60:	4413      	add	r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002c66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c68:	8c3b      	ldrh	r3, [r7, #32]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002c70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c72:	8bbb      	ldrh	r3, [r7, #28]
 8002c74:	4413      	add	r3, r2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002c7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	827b      	strh	r3, [r7, #18]
 8002c86:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	ddc1      	ble.n	8002c16 <BSP_LCD_DrawLine+0x10a>
  }
}
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
 8002c96:	372c      	adds	r7, #44	; 0x2c
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd90      	pop	{r4, r7, pc}
 8002c9c:	20000360 	.word	0x20000360
 8002ca0:	20000364 	.word	0x20000364

08002ca4 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	80fb      	strh	r3, [r7, #6]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	80bb      	strh	r3, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002cb6:	887b      	ldrh	r3, [r7, #2]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	f1c3 0303 	rsb	r3, r3, #3
 8002cbe:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002cc8:	e0c7      	b.n	8002e5a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	b298      	uxth	r0, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	88ba      	ldrh	r2, [r7, #4]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	b299      	uxth	r1, r3
 8002cde:	4b64      	ldr	r3, [pc, #400]	; (8002e70 <BSP_LCD_DrawCircle+0x1cc>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4c64      	ldr	r4, [pc, #400]	; (8002e74 <BSP_LCD_DrawCircle+0x1d0>)
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4423      	add	r3, r4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f000 f8c1 	bl	8002e78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	88fa      	ldrh	r2, [r7, #6]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	b298      	uxth	r0, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	88ba      	ldrh	r2, [r7, #4]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	b299      	uxth	r1, r3
 8002d0a:	4b59      	ldr	r3, [pc, #356]	; (8002e70 <BSP_LCD_DrawCircle+0x1cc>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4c59      	ldr	r4, [pc, #356]	; (8002e74 <BSP_LCD_DrawCircle+0x1d0>)
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4423      	add	r3, r4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f000 f8ab 	bl	8002e78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	4413      	add	r3, r2
 8002d2a:	b298      	uxth	r0, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	88ba      	ldrh	r2, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	b299      	uxth	r1, r3
 8002d36:	4b4e      	ldr	r3, [pc, #312]	; (8002e70 <BSP_LCD_DrawCircle+0x1cc>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4c4e      	ldr	r4, [pc, #312]	; (8002e74 <BSP_LCD_DrawCircle+0x1d0>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4423      	add	r3, r4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f000 f895 	bl	8002e78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	b298      	uxth	r0, r3
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	88ba      	ldrh	r2, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	b299      	uxth	r1, r3
 8002d62:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <BSP_LCD_DrawCircle+0x1cc>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4c43      	ldr	r4, [pc, #268]	; (8002e74 <BSP_LCD_DrawCircle+0x1d0>)
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4423      	add	r3, r4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	f000 f87f 	bl	8002e78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	4413      	add	r3, r2
 8002d82:	b298      	uxth	r0, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	88bb      	ldrh	r3, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	b299      	uxth	r1, r3
 8002d8e:	4b38      	ldr	r3, [pc, #224]	; (8002e70 <BSP_LCD_DrawCircle+0x1cc>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4c38      	ldr	r4, [pc, #224]	; (8002e74 <BSP_LCD_DrawCircle+0x1d0>)
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4423      	add	r3, r4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f000 f869 	bl	8002e78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	b298      	uxth	r0, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	88bb      	ldrh	r3, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	b299      	uxth	r1, r3
 8002dba:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <BSP_LCD_DrawCircle+0x1cc>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4c2d      	ldr	r4, [pc, #180]	; (8002e74 <BSP_LCD_DrawCircle+0x1d0>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4423      	add	r3, r4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f000 f853 	bl	8002e78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	4413      	add	r3, r2
 8002dda:	b298      	uxth	r0, r3
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	88bb      	ldrh	r3, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	b299      	uxth	r1, r3
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <BSP_LCD_DrawCircle+0x1cc>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4c22      	ldr	r4, [pc, #136]	; (8002e74 <BSP_LCD_DrawCircle+0x1d0>)
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4423      	add	r3, r4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f000 f83d 	bl	8002e78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	88fa      	ldrh	r2, [r7, #6]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	b298      	uxth	r0, r3
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	88bb      	ldrh	r3, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	b299      	uxth	r1, r3
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <BSP_LCD_DrawCircle+0x1cc>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4c17      	ldr	r4, [pc, #92]	; (8002e74 <BSP_LCD_DrawCircle+0x1d0>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4423      	add	r3, r4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f000 f827 	bl	8002e78 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	da06      	bge.n	8002e3e <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	009a      	lsls	r2, r3, #2
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	4413      	add	r3, r2
 8002e38:	3306      	adds	r3, #6
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e00a      	b.n	8002e54 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	009a      	lsls	r2, r3, #2
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	4413      	add	r3, r2
 8002e4a:	330a      	adds	r3, #10
 8002e4c:	617b      	str	r3, [r7, #20]
      current_y--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	3301      	adds	r3, #1
 8002e58:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	f67f af33 	bls.w	8002cca <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd90      	pop	{r4, r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000360 	.word	0x20000360
 8002e74:	20000364 	.word	0x20000364

08002e78 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002e78:	b5b0      	push	{r4, r5, r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	603a      	str	r2, [r7, #0]
 8002e82:	80fb      	strh	r3, [r7, #6]
 8002e84:	460b      	mov	r3, r1
 8002e86:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <BSP_LCD_DrawPixel+0x88>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <BSP_LCD_DrawPixel+0x8c>)
 8002e8e:	2134      	movs	r1, #52	; 0x34
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	3348      	adds	r3, #72	; 0x48
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d116      	bne.n	8002ecc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <BSP_LCD_DrawPixel+0x88>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <BSP_LCD_DrawPixel+0x8c>)
 8002ea4:	2134      	movs	r1, #52	; 0x34
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	335c      	adds	r3, #92	; 0x5c
 8002eae:	681c      	ldr	r4, [r3, #0]
 8002eb0:	88bd      	ldrh	r5, [r7, #4]
 8002eb2:	f7ff fb87 	bl	80025c4 <BSP_LCD_GetXSize>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	fb03 f205 	mul.w	r2, r3, r5
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4423      	add	r3, r4
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	b292      	uxth	r2, r2
 8002ec8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002eca:	e015      	b.n	8002ef8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <BSP_LCD_DrawPixel+0x88>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0c      	ldr	r2, [pc, #48]	; (8002f04 <BSP_LCD_DrawPixel+0x8c>)
 8002ed2:	2134      	movs	r1, #52	; 0x34
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	335c      	adds	r3, #92	; 0x5c
 8002edc:	681c      	ldr	r4, [r3, #0]
 8002ede:	88bd      	ldrh	r5, [r7, #4]
 8002ee0:	f7ff fb70 	bl	80025c4 <BSP_LCD_GetXSize>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	fb03 f205 	mul.w	r2, r3, r5
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4423      	add	r3, r4
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bdb0      	pop	{r4, r5, r7, pc}
 8002f00:	20000360 	.word	0x20000360
 8002f04:	20008bb4 	.word	0x20008bb4

08002f08 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0c:	b086      	sub	sp, #24
 8002f0e:	af02      	add	r7, sp, #8
 8002f10:	4604      	mov	r4, r0
 8002f12:	4608      	mov	r0, r1
 8002f14:	4611      	mov	r1, r2
 8002f16:	461a      	mov	r2, r3
 8002f18:	4623      	mov	r3, r4
 8002f1a:	80fb      	strh	r3, [r7, #6]
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	80bb      	strh	r3, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002f2c:	4b30      	ldr	r3, [pc, #192]	; (8002ff0 <BSP_LCD_FillRect+0xe8>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4930      	ldr	r1, [pc, #192]	; (8002ff4 <BSP_LCD_FillRect+0xec>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fbd8 	bl	80026f4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002f44:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <BSP_LCD_FillRect+0xe8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a2b      	ldr	r2, [pc, #172]	; (8002ff8 <BSP_LCD_FillRect+0xf0>)
 8002f4a:	2134      	movs	r1, #52	; 0x34
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3348      	adds	r3, #72	; 0x48
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d114      	bne.n	8002f84 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f5a:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <BSP_LCD_FillRect+0xe8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <BSP_LCD_FillRect+0xf0>)
 8002f60:	2134      	movs	r1, #52	; 0x34
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	335c      	adds	r3, #92	; 0x5c
 8002f6a:	681c      	ldr	r4, [r3, #0]
 8002f6c:	f7ff fb2a 	bl	80025c4 <BSP_LCD_GetXSize>
 8002f70:	4602      	mov	r2, r0
 8002f72:	88bb      	ldrh	r3, [r7, #4]
 8002f74:	fb03 f202 	mul.w	r2, r3, r2
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4423      	add	r3, r4
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e013      	b.n	8002fac <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <BSP_LCD_FillRect+0xe8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <BSP_LCD_FillRect+0xf0>)
 8002f8a:	2134      	movs	r1, #52	; 0x34
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	335c      	adds	r3, #92	; 0x5c
 8002f94:	681c      	ldr	r4, [r3, #0]
 8002f96:	f7ff fb15 	bl	80025c4 <BSP_LCD_GetXSize>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	88bb      	ldrh	r3, [r7, #4]
 8002f9e:	fb03 f202 	mul.w	r2, r3, r2
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4423      	add	r3, r4
 8002faa:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002fac:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <BSP_LCD_FillRect+0xe8>)
 8002fae:	681c      	ldr	r4, [r3, #0]
 8002fb0:	68fd      	ldr	r5, [r7, #12]
 8002fb2:	887e      	ldrh	r6, [r7, #2]
 8002fb4:	f8b7 8000 	ldrh.w	r8, [r7]
 8002fb8:	f7ff fb04 	bl	80025c4 <BSP_LCD_GetXSize>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	1ad1      	subs	r1, r2, r3
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <BSP_LCD_FillRect+0xe8>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	480b      	ldr	r0, [pc, #44]	; (8002ff4 <BSP_LCD_FillRect+0xec>)
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4403      	add	r3, r0
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	9100      	str	r1, [sp, #0]
 8002fd8:	4643      	mov	r3, r8
 8002fda:	4632      	mov	r2, r6
 8002fdc:	4629      	mov	r1, r5
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f000 fc1c 	bl	800381c <LL_FillBuffer>
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000360 	.word	0x20000360
 8002ff4:	20000364 	.word	0x20000364
 8002ff8:	20008bb4 	.word	0x20008bb4

08002ffc <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	80fb      	strh	r3, [r7, #6]
 8003006:	460b      	mov	r3, r1
 8003008:	80bb      	strh	r3, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	f1c3 0303 	rsb	r3, r3, #3
 8003016:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003020:	4b44      	ldr	r3, [pc, #272]	; (8003134 <BSP_LCD_FillCircle+0x138>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4944      	ldr	r1, [pc, #272]	; (8003138 <BSP_LCD_FillCircle+0x13c>)
 8003026:	4613      	mov	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fb5e 	bl	80026f4 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003038:	e061      	b.n	80030fe <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d021      	beq.n	8003084 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	b29b      	uxth	r3, r3
 8003044:	88fa      	ldrh	r2, [r7, #6]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	b298      	uxth	r0, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	b29a      	uxth	r2, r3
 800304e:	88bb      	ldrh	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	b299      	uxth	r1, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	b29b      	uxth	r3, r3
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	f7ff fcf7 	bl	8002a50 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	b29b      	uxth	r3, r3
 8003066:	88fa      	ldrh	r2, [r7, #6]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	b298      	uxth	r0, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	b29b      	uxth	r3, r3
 8003070:	88ba      	ldrh	r2, [r7, #4]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	b299      	uxth	r1, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	b29b      	uxth	r3, r3
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	b29b      	uxth	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	f7ff fce6 	bl	8002a50 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d021      	beq.n	80030ce <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	b29b      	uxth	r3, r3
 800308e:	88fa      	ldrh	r2, [r7, #6]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	b298      	uxth	r0, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	b29b      	uxth	r3, r3
 8003098:	88ba      	ldrh	r2, [r7, #4]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	b299      	uxth	r1, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	f7ff fcd2 	bl	8002a50 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	88fa      	ldrh	r2, [r7, #6]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	b298      	uxth	r0, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	88bb      	ldrh	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	b299      	uxth	r1, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	f7ff fcc1 	bl	8002a50 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da06      	bge.n	80030e2 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	009a      	lsls	r2, r3, #2
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	4413      	add	r3, r2
 80030dc:	3306      	adds	r3, #6
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e00a      	b.n	80030f8 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	009a      	lsls	r2, r3, #2
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	4413      	add	r3, r2
 80030ee:	330a      	adds	r3, #10
 80030f0:	617b      	str	r3, [r7, #20]
      current_y--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	3301      	adds	r3, #1
 80030fc:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	429a      	cmp	r2, r3
 8003104:	d999      	bls.n	800303a <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <BSP_LCD_FillCircle+0x138>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	490b      	ldr	r1, [pc, #44]	; (8003138 <BSP_LCD_FillCircle+0x13c>)
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff faeb 	bl	80026f4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	88b9      	ldrh	r1, [r7, #4]
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fdbd 	bl	8002ca4 <BSP_LCD_DrawCircle>
}
 800312a:	bf00      	nop
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000360 	.word	0x20000360
 8003138:	20000364 	.word	0x20000364

0800313c <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 800313c:	b5b0      	push	{r4, r5, r7, lr}
 800313e:	b08c      	sub	sp, #48	; 0x30
 8003140:	af02      	add	r7, sp, #8
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	833b      	strh	r3, [r7, #24]
 800314c:	2300      	movs	r3, #0
 800314e:	82fb      	strh	r3, [r7, #22]
 8003150:	2300      	movs	r3, #0
 8003152:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003154:	2300      	movs	r3, #0
 8003156:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003158:	2300      	movs	r3, #0
 800315a:	82bb      	strh	r3, [r7, #20]
 800315c:	2300      	movs	r3, #0
 800315e:	827b      	strh	r3, [r7, #18]
 8003160:	2300      	movs	r3, #0
 8003162:	823b      	strh	r3, [r7, #16]
 8003164:	2300      	movs	r3, #0
 8003166:	81fb      	strh	r3, [r7, #14]
 8003168:	2300      	movs	r3, #0
 800316a:	81bb      	strh	r3, [r7, #12]
 800316c:	2300      	movs	r3, #0
 800316e:	817b      	strh	r3, [r7, #10]
 8003170:	2300      	movs	r3, #0
 8003172:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	843b      	strh	r3, [r7, #32]
 8003178:	2300      	movs	r3, #0
 800317a:	83fb      	strh	r3, [r7, #30]
 800317c:	2300      	movs	r3, #0
 800317e:	83bb      	strh	r3, [r7, #28]
 8003180:	2300      	movs	r3, #0
 8003182:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800318a:	83fb      	strh	r3, [r7, #30]
 800318c:	8bfb      	ldrh	r3, [r7, #30]
 800318e:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003196:	837b      	strh	r3, [r7, #26]
 8003198:	8b7b      	ldrh	r3, [r7, #26]
 800319a:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 800319c:	2301      	movs	r3, #1
 800319e:	847b      	strh	r3, [r7, #34]	; 0x22
 80031a0:	e02f      	b.n	8003202 <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 80031a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 80031b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80031b4:	8c3b      	ldrh	r3, [r7, #32]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	da01      	bge.n	80031be <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 80031ba:	89bb      	ldrh	r3, [r7, #12]
 80031bc:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 80031be:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80031c2:	8bfb      	ldrh	r3, [r7, #30]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	dd01      	ble.n	80031cc <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 80031c8:	89bb      	ldrh	r3, [r7, #12]
 80031ca:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 80031cc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	885b      	ldrh	r3, [r3, #2]
 80031d8:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 80031da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80031de:	8bbb      	ldrh	r3, [r7, #28]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	da01      	bge.n	80031e8 <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 80031e4:	897b      	ldrh	r3, [r7, #10]
 80031e6:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 80031e8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80031ec:	8b7b      	ldrh	r3, [r7, #26]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	dd01      	ble.n	80031f6 <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 80031f2:	897b      	ldrh	r3, [r7, #10]
 80031f4:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 80031f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	b29b      	uxth	r3, r3
 8003200:	847b      	strh	r3, [r7, #34]	; 0x22
 8003202:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	429a      	cmp	r2, r3
 800320a:	dbca      	blt.n	80031a2 <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 800320c:	887b      	ldrh	r3, [r7, #2]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d974      	bls.n	80032fc <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 8003212:	8c3a      	ldrh	r2, [r7, #32]
 8003214:	8bfb      	ldrh	r3, [r7, #30]
 8003216:	4413      	add	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	da00      	bge.n	800321e <BSP_LCD_FillPolygon+0xe2>
 800321c:	3301      	adds	r3, #1
 800321e:	105b      	asrs	r3, r3, #1
 8003220:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 8003222:	8b7a      	ldrh	r2, [r7, #26]
 8003224:	8bbb      	ldrh	r3, [r7, #28]
 8003226:	4413      	add	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	da00      	bge.n	800322e <BSP_LCD_FillPolygon+0xf2>
 800322c:	3301      	adds	r3, #1
 800322e:	105b      	asrs	r3, r3, #1
 8003230:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	885b      	ldrh	r3, [r3, #2]
 800323c:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 800323e:	e032      	b.n	80032a6 <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	885b      	ldrh	r3, [r3, #2]
 800324a:	82fb      	strh	r3, [r7, #22]
    Points++;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	885b      	ldrh	r3, [r3, #2]
 800325c:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800325e:	8b38      	ldrh	r0, [r7, #24]
 8003260:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8003262:	8abc      	ldrh	r4, [r7, #20]
 8003264:	8afd      	ldrh	r5, [r7, #22]
 8003266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003268:	8a7a      	ldrh	r2, [r7, #18]
 800326a:	9201      	str	r2, [sp, #4]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	462b      	mov	r3, r5
 8003270:	4622      	mov	r2, r4
 8003272:	f000 fa13 	bl	800369c <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8003276:	8b38      	ldrh	r0, [r7, #24]
 8003278:	8ab9      	ldrh	r1, [r7, #20]
 800327a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800327c:	8afd      	ldrh	r5, [r7, #22]
 800327e:	8a7b      	ldrh	r3, [r7, #18]
 8003280:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003282:	9201      	str	r2, [sp, #4]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	462b      	mov	r3, r5
 8003288:	4622      	mov	r2, r4
 800328a:	f000 fa07 	bl	800369c <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 800328e:	8ab8      	ldrh	r0, [r7, #20]
 8003290:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8003292:	8b3c      	ldrh	r4, [r7, #24]
 8003294:	8a7d      	ldrh	r5, [r7, #18]
 8003296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003298:	8afa      	ldrh	r2, [r7, #22]
 800329a:	9201      	str	r2, [sp, #4]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	462b      	mov	r3, r5
 80032a0:	4622      	mov	r2, r4
 80032a2:	f000 f9fb 	bl	800369c <FillTriangle>
  while(--PointCount)
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	807b      	strh	r3, [r7, #2]
 80032ac:	887b      	ldrh	r3, [r7, #2]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1c6      	bne.n	8003240 <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 80032b2:	8a38      	ldrh	r0, [r7, #16]
 80032b4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80032b6:	8abc      	ldrh	r4, [r7, #20]
 80032b8:	89fd      	ldrh	r5, [r7, #14]
 80032ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032bc:	8a7a      	ldrh	r2, [r7, #18]
 80032be:	9201      	str	r2, [sp, #4]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	462b      	mov	r3, r5
 80032c4:	4622      	mov	r2, r4
 80032c6:	f000 f9e9 	bl	800369c <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 80032ca:	8a38      	ldrh	r0, [r7, #16]
 80032cc:	8ab9      	ldrh	r1, [r7, #20]
 80032ce:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80032d0:	89fd      	ldrh	r5, [r7, #14]
 80032d2:	8a7b      	ldrh	r3, [r7, #18]
 80032d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032d6:	9201      	str	r2, [sp, #4]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	462b      	mov	r3, r5
 80032dc:	4622      	mov	r2, r4
 80032de:	f000 f9dd 	bl	800369c <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 80032e2:	8ab8      	ldrh	r0, [r7, #20]
 80032e4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80032e6:	8a3c      	ldrh	r4, [r7, #16]
 80032e8:	8a7d      	ldrh	r5, [r7, #18]
 80032ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032ec:	89fa      	ldrh	r2, [r7, #14]
 80032ee:	9201      	str	r2, [sp, #4]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	462b      	mov	r3, r5
 80032f4:	4622      	mov	r2, r4
 80032f6:	f000 f9d1 	bl	800369c <FillTriangle>
 80032fa:	e000      	b.n	80032fe <BSP_LCD_FillPolygon+0x1c2>
    return;
 80032fc:	bf00      	nop
}
 80032fe:	3728      	adds	r7, #40	; 0x28
 8003300:	46bd      	mov	sp, r7
 8003302:	bdb0      	pop	{r4, r5, r7, pc}

08003304 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <BSP_LCD_DisplayOn+0x30>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <BSP_LCD_DisplayOn+0x30>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003318:	2201      	movs	r2, #1
 800331a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800331e:	4806      	ldr	r0, [pc, #24]	; (8003338 <BSP_LCD_DisplayOn+0x34>)
 8003320:	f002 ffca 	bl	80062b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003324:	2201      	movs	r2, #1
 8003326:	2108      	movs	r1, #8
 8003328:	4804      	ldr	r0, [pc, #16]	; (800333c <BSP_LCD_DisplayOn+0x38>)
 800332a:	f002 ffc5 	bl	80062b8 <HAL_GPIO_WritePin>
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20008bb4 	.word	0x20008bb4
 8003338:	40022000 	.word	0x40022000
 800333c:	40022800 	.word	0x40022800

08003340 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b090      	sub	sp, #64	; 0x40
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800334a:	4b64      	ldr	r3, [pc, #400]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	4a63      	ldr	r2, [pc, #396]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 8003350:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003354:	6453      	str	r3, [r2, #68]	; 0x44
 8003356:	4b61      	ldr	r3, [pc, #388]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003360:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003362:	4b5e      	ldr	r3, [pc, #376]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a5d      	ldr	r2, [pc, #372]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 8003368:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b5b      	ldr	r3, [pc, #364]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800337a:	4b58      	ldr	r3, [pc, #352]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a57      	ldr	r2, [pc, #348]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 8003380:	f043 0310 	orr.w	r3, r3, #16
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b55      	ldr	r3, [pc, #340]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003392:	4b52      	ldr	r3, [pc, #328]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	4a51      	ldr	r2, [pc, #324]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 8003398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800339c:	6313      	str	r3, [r2, #48]	; 0x30
 800339e:	4b4f      	ldr	r3, [pc, #316]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80033aa:	4b4c      	ldr	r3, [pc, #304]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4a4b      	ldr	r2, [pc, #300]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4b49      	ldr	r3, [pc, #292]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033c2:	4b46      	ldr	r3, [pc, #280]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	4a45      	ldr	r2, [pc, #276]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 80033c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033cc:	6313      	str	r3, [r2, #48]	; 0x30
 80033ce:	4b43      	ldr	r3, [pc, #268]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80033da:	4b40      	ldr	r3, [pc, #256]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a3f      	ldr	r2, [pc, #252]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 80033e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80033f2:	4b3a      	ldr	r3, [pc, #232]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	4a39      	ldr	r2, [pc, #228]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 80033f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fc:	6313      	str	r3, [r2, #48]	; 0x30
 80033fe:	4b37      	ldr	r3, [pc, #220]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800340a:	4b34      	ldr	r3, [pc, #208]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a33      	ldr	r2, [pc, #204]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 8003410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b31      	ldr	r3, [pc, #196]	; (80034dc <BSP_LCD_MspInit+0x19c>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003422:	2310      	movs	r3, #16
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800342e:	2302      	movs	r3, #2
 8003430:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003432:	230e      	movs	r3, #14
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800343a:	4619      	mov	r1, r3
 800343c:	4828      	ldr	r0, [pc, #160]	; (80034e0 <BSP_LCD_MspInit+0x1a0>)
 800343e:	f002 fc6b 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003446:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003448:	2302      	movs	r3, #2
 800344a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800344c:	2309      	movs	r3, #9
 800344e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003454:	4619      	mov	r1, r3
 8003456:	4823      	ldr	r0, [pc, #140]	; (80034e4 <BSP_LCD_MspInit+0x1a4>)
 8003458:	f002 fc5e 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800345c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003466:	230e      	movs	r3, #14
 8003468:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800346a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800346e:	4619      	mov	r1, r3
 8003470:	481d      	ldr	r0, [pc, #116]	; (80034e8 <BSP_LCD_MspInit+0x1a8>)
 8003472:	f002 fc51 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003476:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800347c:	2302      	movs	r3, #2
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003480:	230e      	movs	r3, #14
 8003482:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003484:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003488:	4619      	mov	r1, r3
 800348a:	4818      	ldr	r0, [pc, #96]	; (80034ec <BSP_LCD_MspInit+0x1ac>)
 800348c:	f002 fc44 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003490:	23f7      	movs	r3, #247	; 0xf7
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003498:	230e      	movs	r3, #14
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800349c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034a0:	4619      	mov	r1, r3
 80034a2:	4813      	ldr	r0, [pc, #76]	; (80034f0 <BSP_LCD_MspInit+0x1b0>)
 80034a4:	f002 fc38 	bl	8005d18 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80034a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80034ae:	2301      	movs	r3, #1
 80034b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80034b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034b6:	4619      	mov	r1, r3
 80034b8:	480b      	ldr	r0, [pc, #44]	; (80034e8 <BSP_LCD_MspInit+0x1a8>)
 80034ba:	f002 fc2d 	bl	8005d18 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80034be:	2308      	movs	r3, #8
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80034c2:	2301      	movs	r3, #1
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80034c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ca:	4619      	mov	r1, r3
 80034cc:	4808      	ldr	r0, [pc, #32]	; (80034f0 <BSP_LCD_MspInit+0x1b0>)
 80034ce:	f002 fc23 	bl	8005d18 <HAL_GPIO_Init>
}
 80034d2:	bf00      	nop
 80034d4:	3740      	adds	r7, #64	; 0x40
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40021800 	.word	0x40021800
 80034e8:	40022000 	.word	0x40022000
 80034ec:	40022400 	.word	0x40022400
 80034f0:	40022800 	.word	0x40022800

080034f4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <BSP_LCD_ClockConfig+0x34>)
 8003500:	2208      	movs	r2, #8
 8003502:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <BSP_LCD_ClockConfig+0x34>)
 8003506:	22c0      	movs	r2, #192	; 0xc0
 8003508:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <BSP_LCD_ClockConfig+0x34>)
 800350c:	2205      	movs	r2, #5
 800350e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <BSP_LCD_ClockConfig+0x34>)
 8003512:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <BSP_LCD_ClockConfig+0x34>)
 800351a:	f004 fd1b 	bl	8007f54 <HAL_RCCEx_PeriphCLKConfig>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	2000037c 	.word	0x2000037c

0800352c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	603a      	str	r2, [r7, #0]
 8003536:	80fb      	strh	r3, [r7, #6]
 8003538:	460b      	mov	r3, r1
 800353a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003544:	4b53      	ldr	r3, [pc, #332]	; (8003694 <DrawChar+0x168>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4953      	ldr	r1, [pc, #332]	; (8003698 <DrawChar+0x16c>)
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3308      	adds	r3, #8
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	88db      	ldrh	r3, [r3, #6]
 800355a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800355c:	4b4d      	ldr	r3, [pc, #308]	; (8003694 <DrawChar+0x168>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	494d      	ldr	r1, [pc, #308]	; (8003698 <DrawChar+0x16c>)
 8003562:	4613      	mov	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	3308      	adds	r3, #8
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	889b      	ldrh	r3, [r3, #4]
 8003572:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003574:	8a3b      	ldrh	r3, [r7, #16]
 8003576:	3307      	adds	r3, #7
 8003578:	2b00      	cmp	r3, #0
 800357a:	da00      	bge.n	800357e <DrawChar+0x52>
 800357c:	3307      	adds	r3, #7
 800357e:	10db      	asrs	r3, r3, #3
 8003580:	b2db      	uxtb	r3, r3
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	b2da      	uxtb	r2, r3
 8003586:	8a3b      	ldrh	r3, [r7, #16]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	e076      	b.n	8003682 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003594:	8a3b      	ldrh	r3, [r7, #16]
 8003596:	3307      	adds	r3, #7
 8003598:	2b00      	cmp	r3, #0
 800359a:	da00      	bge.n	800359e <DrawChar+0x72>
 800359c:	3307      	adds	r3, #7
 800359e:	10db      	asrs	r3, r3, #3
 80035a0:	461a      	mov	r2, r3
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	fb03 f302 	mul.w	r3, r3, r2
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	4413      	add	r3, r2
 80035ac:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80035ae:	8a3b      	ldrh	r3, [r7, #16]
 80035b0:	3307      	adds	r3, #7
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da00      	bge.n	80035b8 <DrawChar+0x8c>
 80035b6:	3307      	adds	r3, #7
 80035b8:	10db      	asrs	r3, r3, #3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d002      	beq.n	80035c4 <DrawChar+0x98>
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d004      	beq.n	80035cc <DrawChar+0xa0>
 80035c2:	e00c      	b.n	80035de <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	617b      	str	r3, [r7, #20]
      break;
 80035ca:	e016      	b.n	80035fa <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	3201      	adds	r2, #1
 80035d6:	7812      	ldrb	r2, [r2, #0]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
      break;
 80035dc:	e00d      	b.n	80035fa <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	041a      	lsls	r2, r3, #16
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	3301      	adds	r3, #1
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	4313      	orrs	r3, r2
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	3202      	adds	r2, #2
 80035f2:	7812      	ldrb	r2, [r2, #0]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
      break;
 80035f8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e036      	b.n	800366e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003600:	8a3a      	ldrh	r2, [r7, #16]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	1ad2      	subs	r2, r2, r3
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	4413      	add	r3, r2
 800360a:	3b01      	subs	r3, #1
 800360c:	2201      	movs	r2, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	461a      	mov	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d012      	beq.n	8003642 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	b29a      	uxth	r2, r3
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	4413      	add	r3, r2
 8003624:	b298      	uxth	r0, r3
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <DrawChar+0x168>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	491b      	ldr	r1, [pc, #108]	; (8003698 <DrawChar+0x16c>)
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	88bb      	ldrh	r3, [r7, #4]
 800363a:	4619      	mov	r1, r3
 800363c:	f7ff fc1c 	bl	8002e78 <BSP_LCD_DrawPixel>
 8003640:	e012      	b.n	8003668 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	b29a      	uxth	r2, r3
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	4413      	add	r3, r2
 800364a:	b298      	uxth	r0, r3
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <DrawChar+0x168>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4911      	ldr	r1, [pc, #68]	; (8003698 <DrawChar+0x16c>)
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3304      	adds	r3, #4
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	88bb      	ldrh	r3, [r7, #4]
 8003662:	4619      	mov	r1, r3
 8003664:	f7ff fc08 	bl	8002e78 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	3301      	adds	r3, #1
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	8a3b      	ldrh	r3, [r7, #16]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	429a      	cmp	r2, r3
 8003674:	d3c4      	bcc.n	8003600 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003676:	88bb      	ldrh	r3, [r7, #4]
 8003678:	3301      	adds	r3, #1
 800367a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	8a7b      	ldrh	r3, [r7, #18]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	429a      	cmp	r2, r3
 8003688:	d384      	bcc.n	8003594 <DrawChar+0x68>
  }
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000360 	.word	0x20000360
 8003698:	20000364 	.word	0x20000364

0800369c <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b08b      	sub	sp, #44	; 0x2c
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4604      	mov	r4, r0
 80036a4:	4608      	mov	r0, r1
 80036a6:	4611      	mov	r1, r2
 80036a8:	461a      	mov	r2, r3
 80036aa:	4623      	mov	r3, r4
 80036ac:	80fb      	strh	r3, [r7, #6]
 80036ae:	4603      	mov	r3, r0
 80036b0:	80bb      	strh	r3, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	807b      	strh	r3, [r7, #2]
 80036b6:	4613      	mov	r3, r2
 80036b8:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80036ba:	2300      	movs	r3, #0
 80036bc:	823b      	strh	r3, [r7, #16]
 80036be:	2300      	movs	r3, #0
 80036c0:	81fb      	strh	r3, [r7, #14]
 80036c2:	2300      	movs	r3, #0
 80036c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80036c6:	2300      	movs	r3, #0
 80036c8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80036ca:	2300      	movs	r3, #0
 80036cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80036ce:	2300      	movs	r3, #0
 80036d0:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 80036d2:	2300      	movs	r3, #0
 80036d4:	83fb      	strh	r3, [r7, #30]
 80036d6:	2300      	movs	r3, #0
 80036d8:	83bb      	strh	r3, [r7, #28]
 80036da:	2300      	movs	r3, #0
 80036dc:	837b      	strh	r3, [r7, #26]
 80036de:	2300      	movs	r3, #0
 80036e0:	833b      	strh	r3, [r7, #24]
 80036e2:	2300      	movs	r3, #0
 80036e4:	82fb      	strh	r3, [r7, #22]
 80036e6:	2300      	movs	r3, #0
 80036e8:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80036ee:	88ba      	ldrh	r2, [r7, #4]
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bfb8      	it	lt
 80036f8:	425b      	neglt	r3, r3
 80036fa:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80036fc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80036fe:	883b      	ldrh	r3, [r7, #0]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	bfb8      	it	lt
 8003706:	425b      	neglt	r3, r3
 8003708:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800370e:	883b      	ldrh	r3, [r7, #0]
 8003710:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8003712:	88ba      	ldrh	r2, [r7, #4]
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	429a      	cmp	r2, r3
 8003718:	d304      	bcc.n	8003724 <FillTriangle+0x88>
  {
    xinc1 = 1;
 800371a:	2301      	movs	r3, #1
 800371c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800371e:	2301      	movs	r3, #1
 8003720:	843b      	strh	r3, [r7, #32]
 8003722:	e005      	b.n	8003730 <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003728:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800372a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800372e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003730:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003732:	883b      	ldrh	r3, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d304      	bcc.n	8003742 <FillTriangle+0xa6>
  {
    yinc1 = 1;
 8003738:	2301      	movs	r3, #1
 800373a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 800373c:	2301      	movs	r3, #1
 800373e:	83bb      	strh	r3, [r7, #28]
 8003740:	e005      	b.n	800374e <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003746:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800374c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800374e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003752:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003756:	429a      	cmp	r2, r3
 8003758:	db11      	blt.n	800377e <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800375a:	2300      	movs	r3, #0
 800375c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800375e:	2300      	movs	r3, #0
 8003760:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003762:	8a3b      	ldrh	r3, [r7, #16]
 8003764:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003766:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	da00      	bge.n	8003770 <FillTriangle+0xd4>
 800376e:	3301      	adds	r3, #1
 8003770:	105b      	asrs	r3, r3, #1
 8003772:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8003774:	89fb      	ldrh	r3, [r7, #14]
 8003776:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8003778:	8a3b      	ldrh	r3, [r7, #16]
 800377a:	82bb      	strh	r3, [r7, #20]
 800377c:	e010      	b.n	80037a0 <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800377e:	2300      	movs	r3, #0
 8003780:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003782:	2300      	movs	r3, #0
 8003784:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003786:	89fb      	ldrh	r3, [r7, #14]
 8003788:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800378a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800378e:	2b00      	cmp	r3, #0
 8003790:	da00      	bge.n	8003794 <FillTriangle+0xf8>
 8003792:	3301      	adds	r3, #1
 8003794:	105b      	asrs	r3, r3, #1
 8003796:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8003798:	8a3b      	ldrh	r3, [r7, #16]
 800379a:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 800379c:	89fb      	ldrh	r3, [r7, #14]
 800379e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	827b      	strh	r3, [r7, #18]
 80037a4:	e02f      	b.n	8003806 <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 80037a6:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80037a8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80037aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80037ac:	887a      	ldrh	r2, [r7, #2]
 80037ae:	f7ff f9ad 	bl	8002b0c <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80037b2:	8b3a      	ldrh	r2, [r7, #24]
 80037b4:	8afb      	ldrh	r3, [r7, #22]
 80037b6:	4413      	add	r3, r2
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 80037bc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80037c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	db0e      	blt.n	80037e6 <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 80037c8:	8b3a      	ldrh	r2, [r7, #24]
 80037ca:	8b7b      	ldrh	r3, [r7, #26]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 80037d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80037d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037d6:	4413      	add	r3, r2
 80037d8:	b29b      	uxth	r3, r3
 80037da:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 80037dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037de:	8bfb      	ldrh	r3, [r7, #30]
 80037e0:	4413      	add	r3, r2
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 80037e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80037e8:	8c3b      	ldrh	r3, [r7, #32]
 80037ea:	4413      	add	r3, r2
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 80037f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037f2:	8bbb      	ldrh	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80037fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3301      	adds	r3, #1
 8003802:	b29b      	uxth	r3, r3
 8003804:	827b      	strh	r3, [r7, #18]
 8003806:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800380a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800380e:	429a      	cmp	r2, r3
 8003810:	ddc9      	ble.n	80037a6 <FillTriangle+0x10a>
  } 
}
 8003812:	bf00      	nop
 8003814:	bf00      	nop
 8003816:	372c      	adds	r7, #44	; 0x2c
 8003818:	46bd      	mov	sp, r7
 800381a:	bd90      	pop	{r4, r7, pc}

0800381c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800382a:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <LL_FillBuffer+0x88>)
 800382c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003830:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <LL_FillBuffer+0x8c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <LL_FillBuffer+0x90>)
 8003838:	2134      	movs	r1, #52	; 0x34
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	4413      	add	r3, r2
 8003840:	3348      	adds	r3, #72	; 0x48
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d103      	bne.n	8003850 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <LL_FillBuffer+0x88>)
 800384a:	2202      	movs	r2, #2
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	e002      	b.n	8003856 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003850:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <LL_FillBuffer+0x88>)
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003856:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <LL_FillBuffer+0x88>)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <LL_FillBuffer+0x88>)
 800385e:	4a14      	ldr	r2, [pc, #80]	; (80038b0 <LL_FillBuffer+0x94>)
 8003860:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003862:	4810      	ldr	r0, [pc, #64]	; (80038a4 <LL_FillBuffer+0x88>)
 8003864:	f001 ffcc 	bl	8005800 <HAL_DMA2D_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d115      	bne.n	800389a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800386e:	68f9      	ldr	r1, [r7, #12]
 8003870:	480c      	ldr	r0, [pc, #48]	; (80038a4 <LL_FillBuffer+0x88>)
 8003872:	f002 f923 	bl	8005abc <HAL_DMA2D_ConfigLayer>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10e      	bne.n	800389a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69f9      	ldr	r1, [r7, #28]
 8003886:	4807      	ldr	r0, [pc, #28]	; (80038a4 <LL_FillBuffer+0x88>)
 8003888:	f002 f804 	bl	8005894 <HAL_DMA2D_Start>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003892:	210a      	movs	r1, #10
 8003894:	4803      	ldr	r0, [pc, #12]	; (80038a4 <LL_FillBuffer+0x88>)
 8003896:	f002 f828 	bl	80058ea <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000320 	.word	0x20000320
 80038a8:	20000360 	.word	0x20000360
 80038ac:	20008bb4 	.word	0x20008bb4
 80038b0:	4002b000 	.word	0x4002b000

080038b4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80038b8:	4b29      	ldr	r3, [pc, #164]	; (8003960 <BSP_SDRAM_Init+0xac>)
 80038ba:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <BSP_SDRAM_Init+0xb0>)
 80038bc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80038be:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <BSP_SDRAM_Init+0xb4>)
 80038c0:	2202      	movs	r2, #2
 80038c2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80038c4:	4b28      	ldr	r3, [pc, #160]	; (8003968 <BSP_SDRAM_Init+0xb4>)
 80038c6:	2207      	movs	r2, #7
 80038c8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80038ca:	4b27      	ldr	r3, [pc, #156]	; (8003968 <BSP_SDRAM_Init+0xb4>)
 80038cc:	2204      	movs	r2, #4
 80038ce:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <BSP_SDRAM_Init+0xb4>)
 80038d2:	2207      	movs	r2, #7
 80038d4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80038d6:	4b24      	ldr	r3, [pc, #144]	; (8003968 <BSP_SDRAM_Init+0xb4>)
 80038d8:	2202      	movs	r2, #2
 80038da:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80038dc:	4b22      	ldr	r3, [pc, #136]	; (8003968 <BSP_SDRAM_Init+0xb4>)
 80038de:	2202      	movs	r2, #2
 80038e0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80038e2:	4b21      	ldr	r3, [pc, #132]	; (8003968 <BSP_SDRAM_Init+0xb4>)
 80038e4:	2202      	movs	r2, #2
 80038e6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <BSP_SDRAM_Init+0xac>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80038ee:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <BSP_SDRAM_Init+0xac>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80038f4:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <BSP_SDRAM_Init+0xac>)
 80038f6:	2204      	movs	r2, #4
 80038f8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80038fa:	4b19      	ldr	r3, [pc, #100]	; (8003960 <BSP_SDRAM_Init+0xac>)
 80038fc:	2210      	movs	r2, #16
 80038fe:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003900:	4b17      	ldr	r3, [pc, #92]	; (8003960 <BSP_SDRAM_Init+0xac>)
 8003902:	2240      	movs	r2, #64	; 0x40
 8003904:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003906:	4b16      	ldr	r3, [pc, #88]	; (8003960 <BSP_SDRAM_Init+0xac>)
 8003908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800390c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800390e:	4b14      	ldr	r3, [pc, #80]	; (8003960 <BSP_SDRAM_Init+0xac>)
 8003910:	2200      	movs	r2, #0
 8003912:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <BSP_SDRAM_Init+0xac>)
 8003916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800391a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800391c:	4b10      	ldr	r3, [pc, #64]	; (8003960 <BSP_SDRAM_Init+0xac>)
 800391e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003922:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003924:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <BSP_SDRAM_Init+0xac>)
 8003926:	2200      	movs	r2, #0
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800392a:	2100      	movs	r1, #0
 800392c:	480c      	ldr	r0, [pc, #48]	; (8003960 <BSP_SDRAM_Init+0xac>)
 800392e:	f000 f87f 	bl	8003a30 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003932:	490d      	ldr	r1, [pc, #52]	; (8003968 <BSP_SDRAM_Init+0xb4>)
 8003934:	480a      	ldr	r0, [pc, #40]	; (8003960 <BSP_SDRAM_Init+0xac>)
 8003936:	f005 fabd 	bl	8008eb4 <HAL_SDRAM_Init>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <BSP_SDRAM_Init+0xb8>)
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e002      	b.n	800394e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <BSP_SDRAM_Init+0xb8>)
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800394e:	f240 6003 	movw	r0, #1539	; 0x603
 8003952:	f000 f80d 	bl	8003970 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <BSP_SDRAM_Init+0xb8>)
 8003958:	781b      	ldrb	r3, [r3, #0]
}
 800395a:	4618      	mov	r0, r3
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20008c5c 	.word	0x20008c5c
 8003964:	a0000140 	.word	0xa0000140
 8003968:	20000400 	.word	0x20000400
 800396c:	20000044 	.word	0x20000044

08003970 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800397c:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003982:	4b29      	ldr	r3, [pc, #164]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003984:	2210      	movs	r2, #16
 8003986:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800398a:	2201      	movs	r2, #1
 800398c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003990:	2200      	movs	r2, #0
 8003992:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003998:	4923      	ldr	r1, [pc, #140]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800399a:	4824      	ldr	r0, [pc, #144]	; (8003a2c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800399c:	f005 fabe 	bl	8008f1c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80039a0:	2001      	movs	r0, #1
 80039a2:	f000 ff9f 	bl	80048e4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039a8:	2202      	movs	r2, #2
 80039aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039ac:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039ae:	2210      	movs	r2, #16
 80039b0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80039b8:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80039be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039c2:	4919      	ldr	r1, [pc, #100]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039c4:	4819      	ldr	r0, [pc, #100]	; (8003a2c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039c6:	f005 faa9 	bl	8008f1c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80039ca:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039cc:	2203      	movs	r2, #3
 80039ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039d0:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039d2:	2210      	movs	r2, #16
 80039d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039d8:	2208      	movs	r2, #8
 80039da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039de:	2200      	movs	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80039e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039e6:	4910      	ldr	r1, [pc, #64]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039e8:	4810      	ldr	r0, [pc, #64]	; (8003a2c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039ea:	f005 fa97 	bl	8008f1c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80039ee:	f44f 7308 	mov.w	r3, #544	; 0x220
 80039f2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039f6:	2204      	movs	r2, #4
 80039f8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039fa:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039fc:	2210      	movs	r2, #16
 80039fe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a07      	ldr	r2, [pc, #28]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a0a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a10:	4905      	ldr	r1, [pc, #20]	; (8003a28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a12:	4806      	ldr	r0, [pc, #24]	; (8003a2c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a14:	f005 fa82 	bl	8008f1c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4804      	ldr	r0, [pc, #16]	; (8003a2c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a1c:	f005 faa9 	bl	8008f72 <HAL_SDRAM_ProgramRefreshRate>
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	2000041c 	.word	0x2000041c
 8003a2c:	20008c5c 	.word	0x20008c5c

08003a30 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b090      	sub	sp, #64	; 0x40
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003a3a:	4b70      	ldr	r3, [pc, #448]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	4a6f      	ldr	r2, [pc, #444]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6393      	str	r3, [r2, #56]	; 0x38
 8003a46:	4b6d      	ldr	r3, [pc, #436]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003a52:	4b6a      	ldr	r3, [pc, #424]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	4a69      	ldr	r2, [pc, #420]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5e:	4b67      	ldr	r3, [pc, #412]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a6a:	4b64      	ldr	r3, [pc, #400]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a63      	ldr	r2, [pc, #396]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b61      	ldr	r3, [pc, #388]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	623b      	str	r3, [r7, #32]
 8003a80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a82:	4b5e      	ldr	r3, [pc, #376]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a5d      	ldr	r2, [pc, #372]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a88:	f043 0308 	orr.w	r3, r3, #8
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b5b      	ldr	r3, [pc, #364]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a9a:	4b58      	ldr	r3, [pc, #352]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	4a57      	ldr	r2, [pc, #348]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003aa0:	f043 0310 	orr.w	r3, r3, #16
 8003aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa6:	4b55      	ldr	r3, [pc, #340]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ab2:	4b52      	ldr	r3, [pc, #328]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a51      	ldr	r2, [pc, #324]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003ab8:	f043 0320 	orr.w	r3, r3, #32
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b4f      	ldr	r3, [pc, #316]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003aca:	4b4c      	ldr	r3, [pc, #304]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a4b      	ldr	r2, [pc, #300]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	4b49      	ldr	r3, [pc, #292]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ae2:	4b46      	ldr	r3, [pc, #280]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a45      	ldr	r2, [pc, #276]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b43      	ldr	r3, [pc, #268]	; (8003bfc <BSP_SDRAM_MspInit+0x1cc>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003afa:	2302      	movs	r3, #2
 8003afc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003afe:	2301      	movs	r3, #1
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003b02:	2302      	movs	r3, #2
 8003b04:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003b06:	230c      	movs	r3, #12
 8003b08:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b12:	4619      	mov	r1, r3
 8003b14:	483a      	ldr	r0, [pc, #232]	; (8003c00 <BSP_SDRAM_MspInit+0x1d0>)
 8003b16:	f002 f8ff 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003b1a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b24:	4619      	mov	r1, r3
 8003b26:	4837      	ldr	r0, [pc, #220]	; (8003c04 <BSP_SDRAM_MspInit+0x1d4>)
 8003b28:	f002 f8f6 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003b2c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b36:	4619      	mov	r1, r3
 8003b38:	4833      	ldr	r0, [pc, #204]	; (8003c08 <BSP_SDRAM_MspInit+0x1d8>)
 8003b3a:	f002 f8ed 	bl	8005d18 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003b3e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4830      	ldr	r0, [pc, #192]	; (8003c0c <BSP_SDRAM_MspInit+0x1dc>)
 8003b4c:	f002 f8e4 	bl	8005d18 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003b50:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	482c      	ldr	r0, [pc, #176]	; (8003c10 <BSP_SDRAM_MspInit+0x1e0>)
 8003b5e:	f002 f8db 	bl	8005d18 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003b62:	2328      	movs	r3, #40	; 0x28
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4829      	ldr	r0, [pc, #164]	; (8003c14 <BSP_SDRAM_MspInit+0x1e4>)
 8003b6e:	f002 f8d3 	bl	8005d18 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003b72:	4b29      	ldr	r3, [pc, #164]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003b78:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003b7a:	2280      	movs	r2, #128	; 0x80
 8003b7c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003b7e:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b84:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003b86:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b8c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b8e:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003b90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b94:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003b96:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003b98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b9c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003ba4:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003ba6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003baa:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003bac:	4b1a      	ldr	r3, [pc, #104]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003bb2:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003bb8:	4b17      	ldr	r3, [pc, #92]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003bbe:	4b16      	ldr	r3, [pc, #88]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003bc6:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <BSP_SDRAM_MspInit+0x1ec>)
 8003bc8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd0:	4a11      	ldr	r2, [pc, #68]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003bd6:	4810      	ldr	r0, [pc, #64]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003bd8:	f001 fce0 	bl	800559c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003bdc:	480e      	ldr	r0, [pc, #56]	; (8003c18 <BSP_SDRAM_MspInit+0x1e8>)
 8003bde:	f001 fc2f 	bl	8005440 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003be2:	2200      	movs	r2, #0
 8003be4:	210f      	movs	r1, #15
 8003be6:	2038      	movs	r0, #56	; 0x38
 8003be8:	f001 fb32 	bl	8005250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003bec:	2038      	movs	r0, #56	; 0x38
 8003bee:	f001 fb4b 	bl	8005288 <HAL_NVIC_EnableIRQ>
}
 8003bf2:	bf00      	nop
 8003bf4:	3740      	adds	r7, #64	; 0x40
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40020800 	.word	0x40020800
 8003c04:	40020c00 	.word	0x40020c00
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40021400 	.word	0x40021400
 8003c10:	40021800 	.word	0x40021800
 8003c14:	40021c00 	.word	0x40021c00
 8003c18:	2000042c 	.word	0x2000042c
 8003c1c:	40026410 	.word	0x40026410

08003c20 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	460a      	mov	r2, r1
 8003c2a:	80fb      	strh	r3, [r7, #6]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003c34:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <BSP_TS_Init+0x68>)
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003c3a:	4a14      	ldr	r2, [pc, #80]	; (8003c8c <BSP_TS_Init+0x6c>)
 8003c3c:	88bb      	ldrh	r3, [r7, #4]
 8003c3e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003c40:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <BSP_TS_Init+0x70>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2070      	movs	r0, #112	; 0x70
 8003c46:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <BSP_TS_Init+0x70>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2070      	movs	r0, #112	; 0x70
 8003c4e:	4798      	blx	r3
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b51      	cmp	r3, #81	; 0x51
 8003c54:	d111      	bne.n	8003c7a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003c56:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <BSP_TS_Init+0x74>)
 8003c58:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <BSP_TS_Init+0x70>)
 8003c5a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <BSP_TS_Init+0x78>)
 8003c5e:	2270      	movs	r2, #112	; 0x70
 8003c60:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <BSP_TS_Init+0x7c>)
 8003c64:	2208      	movs	r2, #8
 8003c66:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003c68:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <BSP_TS_Init+0x74>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <BSP_TS_Init+0x78>)
 8003c70:	7812      	ldrb	r2, [r2, #0]
 8003c72:	b292      	uxth	r2, r2
 8003c74:	4610      	mov	r0, r2
 8003c76:	4798      	blx	r3
 8003c78:	e001      	b.n	8003c7e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000490 	.word	0x20000490
 8003c8c:	20000492 	.word	0x20000492
 8003c90:	20000000 	.word	0x20000000
 8003c94:	2000048c 	.word	0x2000048c
 8003c98:	20000495 	.word	0x20000495
 8003c9c:	20000494 	.word	0x20000494

08003ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_MspInit+0x4c>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a10      	ldr	r2, [pc, #64]	; (8003cec <HAL_MspInit+0x4c>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_MspInit+0x4c>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	607b      	str	r3, [r7, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_MspInit+0x4c>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <HAL_MspInit+0x4c>)
 8003cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <HAL_MspInit+0x4c>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	210f      	movs	r1, #15
 8003cda:	f06f 0001 	mvn.w	r0, #1
 8003cde:	f001 fab7 	bl	8005250 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800

08003cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08c      	sub	sp, #48	; 0x30
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf8:	f107 031c 	add.w	r3, r7, #28
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2a      	ldr	r2, [pc, #168]	; (8003db8 <HAL_ADC_MspInit+0xc8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d124      	bne.n	8003d5c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d12:	4b2a      	ldr	r3, [pc, #168]	; (8003dbc <HAL_ADC_MspInit+0xcc>)
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	4a29      	ldr	r2, [pc, #164]	; (8003dbc <HAL_ADC_MspInit+0xcc>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d1e:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <HAL_ADC_MspInit+0xcc>)
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <HAL_ADC_MspInit+0xcc>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <HAL_ADC_MspInit+0xcc>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6313      	str	r3, [r2, #48]	; 0x30
 8003d36:	4b21      	ldr	r3, [pc, #132]	; (8003dbc <HAL_ADC_MspInit+0xcc>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d46:	2303      	movs	r3, #3
 8003d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4e:	f107 031c 	add.w	r3, r7, #28
 8003d52:	4619      	mov	r1, r3
 8003d54:	481a      	ldr	r0, [pc, #104]	; (8003dc0 <HAL_ADC_MspInit+0xd0>)
 8003d56:	f001 ffdf 	bl	8005d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003d5a:	e029      	b.n	8003db0 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <HAL_ADC_MspInit+0xd4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d124      	bne.n	8003db0 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003d66:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_ADC_MspInit+0xcc>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	4a14      	ldr	r2, [pc, #80]	; (8003dbc <HAL_ADC_MspInit+0xcc>)
 8003d6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d70:	6453      	str	r3, [r2, #68]	; 0x44
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <HAL_ADC_MspInit+0xcc>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <HAL_ADC_MspInit+0xcc>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <HAL_ADC_MspInit+0xcc>)
 8003d84:	f043 0320 	orr.w	r3, r3, #32
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <HAL_ADC_MspInit+0xcc>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003da4:	f107 031c 	add.w	r3, r7, #28
 8003da8:	4619      	mov	r1, r3
 8003daa:	4807      	ldr	r0, [pc, #28]	; (8003dc8 <HAL_ADC_MspInit+0xd8>)
 8003dac:	f001 ffb4 	bl	8005d18 <HAL_GPIO_Init>
}
 8003db0:	bf00      	nop
 8003db2:	3730      	adds	r7, #48	; 0x30
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40012000 	.word	0x40012000
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	40012200 	.word	0x40012200
 8003dc8:	40021400 	.word	0x40021400

08003dcc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	; 0x28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd4:	f107 0314 	add.w	r3, r7, #20
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <HAL_DAC_MspInit+0x84>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d12b      	bne.n	8003e46 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003dee:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_DAC_MspInit+0x88>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <HAL_DAC_MspInit+0x88>)
 8003df4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003df8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfa:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <HAL_DAC_MspInit+0x88>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <HAL_DAC_MspInit+0x88>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <HAL_DAC_MspInit+0x88>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	6313      	str	r3, [r2, #48]	; 0x30
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <HAL_DAC_MspInit+0x88>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e1e:	2310      	movs	r3, #16
 8003e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e22:	2303      	movs	r3, #3
 8003e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e2a:	f107 0314 	add.w	r3, r7, #20
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4809      	ldr	r0, [pc, #36]	; (8003e58 <HAL_DAC_MspInit+0x8c>)
 8003e32:	f001 ff71 	bl	8005d18 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2100      	movs	r1, #0
 8003e3a:	2036      	movs	r0, #54	; 0x36
 8003e3c:	f001 fa08 	bl	8005250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e40:	2036      	movs	r0, #54	; 0x36
 8003e42:	f001 fa21 	bl	8005288 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003e46:	bf00      	nop
 8003e48:	3728      	adds	r7, #40	; 0x28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40007400 	.word	0x40007400
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40020000 	.word	0x40020000

08003e5c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <HAL_DMA2D_MspInit+0x38>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d10b      	bne.n	8003e86 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <HAL_DMA2D_MspInit+0x3c>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <HAL_DMA2D_MspInit+0x3c>)
 8003e74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7a:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <HAL_DMA2D_MspInit+0x3c>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	4002b000 	.word	0x4002b000
 8003e98:	40023800 	.word	0x40023800

08003e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	; 0x30
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea4:	f107 031c 	add.w	r3, r7, #28
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2f      	ldr	r2, [pc, #188]	; (8003f78 <HAL_I2C_MspInit+0xdc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d129      	bne.n	8003f12 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ebe:	4b2f      	ldr	r3, [pc, #188]	; (8003f7c <HAL_I2C_MspInit+0xe0>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4a2e      	ldr	r2, [pc, #184]	; (8003f7c <HAL_I2C_MspInit+0xe0>)
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eca:	4b2c      	ldr	r3, [pc, #176]	; (8003f7c <HAL_I2C_MspInit+0xe0>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003ed6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003edc:	2312      	movs	r3, #18
 8003ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ee8:	2304      	movs	r3, #4
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eec:	f107 031c 	add.w	r3, r7, #28
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4823      	ldr	r0, [pc, #140]	; (8003f80 <HAL_I2C_MspInit+0xe4>)
 8003ef4:	f001 ff10 	bl	8005d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ef8:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_I2C_MspInit+0xe0>)
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_I2C_MspInit+0xe0>)
 8003efe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f02:	6413      	str	r3, [r2, #64]	; 0x40
 8003f04:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <HAL_I2C_MspInit+0xe0>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003f10:	e02d      	b.n	8003f6e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <HAL_I2C_MspInit+0xe8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d128      	bne.n	8003f6e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f1c:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <HAL_I2C_MspInit+0xe0>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <HAL_I2C_MspInit+0xe0>)
 8003f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f26:	6313      	str	r3, [r2, #48]	; 0x30
 8003f28:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <HAL_I2C_MspInit+0xe0>)
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003f34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f3a:	2312      	movs	r3, #18
 8003f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f42:	2303      	movs	r3, #3
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f46:	2304      	movs	r3, #4
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003f4a:	f107 031c 	add.w	r3, r7, #28
 8003f4e:	4619      	mov	r1, r3
 8003f50:	480d      	ldr	r0, [pc, #52]	; (8003f88 <HAL_I2C_MspInit+0xec>)
 8003f52:	f001 fee1 	bl	8005d18 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_I2C_MspInit+0xe0>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <HAL_I2C_MspInit+0xe0>)
 8003f5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_I2C_MspInit+0xe0>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
}
 8003f6e:	bf00      	nop
 8003f70:	3730      	adds	r7, #48	; 0x30
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40005400 	.word	0x40005400
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40020400 	.word	0x40020400
 8003f84:	40005c00 	.word	0x40005c00
 8003f88:	40021c00 	.word	0x40021c00

08003f8c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a15      	ldr	r2, [pc, #84]	; (8003ff0 <HAL_I2C_MspDeInit+0x64>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d110      	bne.n	8003fc0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <HAL_I2C_MspDeInit+0x68>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <HAL_I2C_MspDeInit+0x68>)
 8003fa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fa8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8003faa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fae:	4812      	ldr	r0, [pc, #72]	; (8003ff8 <HAL_I2C_MspDeInit+0x6c>)
 8003fb0:	f002 f85e 	bl	8006070 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fb8:	480f      	ldr	r0, [pc, #60]	; (8003ff8 <HAL_I2C_MspDeInit+0x6c>)
 8003fba:	f002 f859 	bl	8006070 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003fbe:	e013      	b.n	8003fe8 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	; (8003ffc <HAL_I2C_MspDeInit+0x70>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10e      	bne.n	8003fe8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <HAL_I2C_MspDeInit+0x68>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	4a09      	ldr	r2, [pc, #36]	; (8003ff4 <HAL_I2C_MspDeInit+0x68>)
 8003fd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fd4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003fd6:	2180      	movs	r1, #128	; 0x80
 8003fd8:	4809      	ldr	r0, [pc, #36]	; (8004000 <HAL_I2C_MspDeInit+0x74>)
 8003fda:	f002 f849 	bl	8006070 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fe2:	4807      	ldr	r0, [pc, #28]	; (8004000 <HAL_I2C_MspDeInit+0x74>)
 8003fe4:	f002 f844 	bl	8006070 <HAL_GPIO_DeInit>
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40005400 	.word	0x40005400
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	40020400 	.word	0x40020400
 8003ffc:	40005c00 	.word	0x40005c00
 8004000:	40021c00 	.word	0x40021c00

08004004 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08e      	sub	sp, #56	; 0x38
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800400c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a55      	ldr	r2, [pc, #340]	; (8004178 <HAL_LTDC_MspInit+0x174>)
 8004022:	4293      	cmp	r3, r2
 8004024:	f040 80a3 	bne.w	800416e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004028:	4b54      	ldr	r3, [pc, #336]	; (800417c <HAL_LTDC_MspInit+0x178>)
 800402a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402c:	4a53      	ldr	r2, [pc, #332]	; (800417c <HAL_LTDC_MspInit+0x178>)
 800402e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004032:	6453      	str	r3, [r2, #68]	; 0x44
 8004034:	4b51      	ldr	r3, [pc, #324]	; (800417c <HAL_LTDC_MspInit+0x178>)
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800403c:	623b      	str	r3, [r7, #32]
 800403e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004040:	4b4e      	ldr	r3, [pc, #312]	; (800417c <HAL_LTDC_MspInit+0x178>)
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	4a4d      	ldr	r2, [pc, #308]	; (800417c <HAL_LTDC_MspInit+0x178>)
 8004046:	f043 0310 	orr.w	r3, r3, #16
 800404a:	6313      	str	r3, [r2, #48]	; 0x30
 800404c:	4b4b      	ldr	r3, [pc, #300]	; (800417c <HAL_LTDC_MspInit+0x178>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004058:	4b48      	ldr	r3, [pc, #288]	; (800417c <HAL_LTDC_MspInit+0x178>)
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	4a47      	ldr	r2, [pc, #284]	; (800417c <HAL_LTDC_MspInit+0x178>)
 800405e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004062:	6313      	str	r3, [r2, #48]	; 0x30
 8004064:	4b45      	ldr	r3, [pc, #276]	; (800417c <HAL_LTDC_MspInit+0x178>)
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004070:	4b42      	ldr	r3, [pc, #264]	; (800417c <HAL_LTDC_MspInit+0x178>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	4a41      	ldr	r2, [pc, #260]	; (800417c <HAL_LTDC_MspInit+0x178>)
 8004076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800407a:	6313      	str	r3, [r2, #48]	; 0x30
 800407c:	4b3f      	ldr	r3, [pc, #252]	; (800417c <HAL_LTDC_MspInit+0x178>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004088:	4b3c      	ldr	r3, [pc, #240]	; (800417c <HAL_LTDC_MspInit+0x178>)
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	4a3b      	ldr	r2, [pc, #236]	; (800417c <HAL_LTDC_MspInit+0x178>)
 800408e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004092:	6313      	str	r3, [r2, #48]	; 0x30
 8004094:	4b39      	ldr	r3, [pc, #228]	; (800417c <HAL_LTDC_MspInit+0x178>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80040a0:	4b36      	ldr	r3, [pc, #216]	; (800417c <HAL_LTDC_MspInit+0x178>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	4a35      	ldr	r2, [pc, #212]	; (800417c <HAL_LTDC_MspInit+0x178>)
 80040a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040aa:	6313      	str	r3, [r2, #48]	; 0x30
 80040ac:	4b33      	ldr	r3, [pc, #204]	; (800417c <HAL_LTDC_MspInit+0x178>)
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80040b8:	2310      	movs	r3, #16
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040bc:	2302      	movs	r3, #2
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c4:	2300      	movs	r3, #0
 80040c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040c8:	230e      	movs	r3, #14
 80040ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80040cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d0:	4619      	mov	r1, r3
 80040d2:	482b      	ldr	r0, [pc, #172]	; (8004180 <HAL_LTDC_MspInit+0x17c>)
 80040d4:	f001 fe20 	bl	8005d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80040d8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040de:	2302      	movs	r3, #2
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e6:	2300      	movs	r3, #0
 80040e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040ea:	230e      	movs	r3, #14
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80040ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040f2:	4619      	mov	r1, r3
 80040f4:	4823      	ldr	r0, [pc, #140]	; (8004184 <HAL_LTDC_MspInit+0x180>)
 80040f6:	f001 fe0f 	bl	8005d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80040fa:	23f7      	movs	r3, #247	; 0xf7
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fe:	2302      	movs	r3, #2
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004102:	2300      	movs	r3, #0
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004106:	2300      	movs	r3, #0
 8004108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800410a:	230e      	movs	r3, #14
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800410e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004112:	4619      	mov	r1, r3
 8004114:	481c      	ldr	r0, [pc, #112]	; (8004188 <HAL_LTDC_MspInit+0x184>)
 8004116:	f001 fdff 	bl	8005d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800411a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004120:	2302      	movs	r3, #2
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004124:	2300      	movs	r3, #0
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004128:	2300      	movs	r3, #0
 800412a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800412c:	2309      	movs	r3, #9
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004134:	4619      	mov	r1, r3
 8004136:	4815      	ldr	r0, [pc, #84]	; (800418c <HAL_LTDC_MspInit+0x188>)
 8004138:	f001 fdee 	bl	8005d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800413c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004142:	2302      	movs	r3, #2
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004146:	2300      	movs	r3, #0
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414a:	2300      	movs	r3, #0
 800414c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800414e:	230e      	movs	r3, #14
 8004150:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004156:	4619      	mov	r1, r3
 8004158:	480d      	ldr	r0, [pc, #52]	; (8004190 <HAL_LTDC_MspInit+0x18c>)
 800415a:	f001 fddd 	bl	8005d18 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800415e:	2200      	movs	r2, #0
 8004160:	2105      	movs	r1, #5
 8004162:	2058      	movs	r0, #88	; 0x58
 8004164:	f001 f874 	bl	8005250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004168:	2058      	movs	r0, #88	; 0x58
 800416a:	f001 f88d 	bl	8005288 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800416e:	bf00      	nop
 8004170:	3738      	adds	r7, #56	; 0x38
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40016800 	.word	0x40016800
 800417c:	40023800 	.word	0x40023800
 8004180:	40021000 	.word	0x40021000
 8004184:	40022400 	.word	0x40022400
 8004188:	40022800 	.word	0x40022800
 800418c:	40021800 	.word	0x40021800
 8004190:	40022000 	.word	0x40022000

08004194 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <HAL_RTC_MspInit+0x2c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d105      	bne.n	80041b2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80041a6:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <HAL_RTC_MspInit+0x30>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	4a06      	ldr	r2, [pc, #24]	; (80041c4 <HAL_RTC_MspInit+0x30>)
 80041ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40002800 	.word	0x40002800
 80041c4:	40023800 	.word	0x40023800

080041c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2d      	ldr	r2, [pc, #180]	; (800429c <HAL_SPI_MspInit+0xd4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d154      	bne.n	8004294 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80041ea:	4b2d      	ldr	r3, [pc, #180]	; (80042a0 <HAL_SPI_MspInit+0xd8>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	4a2c      	ldr	r2, [pc, #176]	; (80042a0 <HAL_SPI_MspInit+0xd8>)
 80041f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041f4:	6413      	str	r3, [r2, #64]	; 0x40
 80041f6:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <HAL_SPI_MspInit+0xd8>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004202:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_SPI_MspInit+0xd8>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <HAL_SPI_MspInit+0xd8>)
 8004208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420c:	6313      	str	r3, [r2, #48]	; 0x30
 800420e:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <HAL_SPI_MspInit+0xd8>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800421a:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <HAL_SPI_MspInit+0xd8>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	4a20      	ldr	r2, [pc, #128]	; (80042a0 <HAL_SPI_MspInit+0xd8>)
 8004220:	f043 0302 	orr.w	r3, r3, #2
 8004224:	6313      	str	r3, [r2, #48]	; 0x30
 8004226:	4b1e      	ldr	r3, [pc, #120]	; (80042a0 <HAL_SPI_MspInit+0xd8>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004232:	2302      	movs	r3, #2
 8004234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004236:	2302      	movs	r3, #2
 8004238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423e:	2300      	movs	r3, #0
 8004240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004242:	2305      	movs	r3, #5
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004246:	f107 0314 	add.w	r3, r7, #20
 800424a:	4619      	mov	r1, r3
 800424c:	4815      	ldr	r0, [pc, #84]	; (80042a4 <HAL_SPI_MspInit+0xdc>)
 800424e:	f001 fd63 	bl	8005d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004252:	2301      	movs	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004256:	2302      	movs	r3, #2
 8004258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800425e:	2303      	movs	r3, #3
 8004260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004262:	2305      	movs	r3, #5
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004266:	f107 0314 	add.w	r3, r7, #20
 800426a:	4619      	mov	r1, r3
 800426c:	480d      	ldr	r0, [pc, #52]	; (80042a4 <HAL_SPI_MspInit+0xdc>)
 800426e:	f001 fd53 	bl	8005d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004272:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004278:	2302      	movs	r3, #2
 800427a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004280:	2303      	movs	r3, #3
 8004282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004284:	2305      	movs	r3, #5
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	4619      	mov	r1, r3
 800428e:	4806      	ldr	r0, [pc, #24]	; (80042a8 <HAL_SPI_MspInit+0xe0>)
 8004290:	f001 fd42 	bl	8005d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004294:	bf00      	nop
 8004296:	3728      	adds	r7, #40	; 0x28
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40003800 	.word	0x40003800
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40022000 	.word	0x40022000
 80042a8:	40020400 	.word	0x40020400

080042ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	; 0x24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a2e      	ldr	r2, [pc, #184]	; (8004374 <HAL_TIM_Base_MspInit+0xc8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d10c      	bne.n	80042d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042be:	4b2e      	ldr	r3, [pc, #184]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	4a2d      	ldr	r2, [pc, #180]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	6453      	str	r3, [r2, #68]	; 0x44
 80042ca:	4b2b      	ldr	r3, [pc, #172]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80042d6:	e046      	b.n	8004366 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d10c      	bne.n	80042fc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042e2:	4b25      	ldr	r3, [pc, #148]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	4a24      	ldr	r2, [pc, #144]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	6413      	str	r3, [r2, #64]	; 0x40
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	61bb      	str	r3, [r7, #24]
 80042f8:	69bb      	ldr	r3, [r7, #24]
}
 80042fa:	e034      	b.n	8004366 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1e      	ldr	r2, [pc, #120]	; (800437c <HAL_TIM_Base_MspInit+0xd0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d10c      	bne.n	8004320 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004306:	4b1c      	ldr	r3, [pc, #112]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 800430c:	f043 0302 	orr.w	r3, r3, #2
 8004310:	6413      	str	r3, [r2, #64]	; 0x40
 8004312:	4b19      	ldr	r3, [pc, #100]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	697b      	ldr	r3, [r7, #20]
}
 800431e:	e022      	b.n	8004366 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a16      	ldr	r2, [pc, #88]	; (8004380 <HAL_TIM_Base_MspInit+0xd4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d10c      	bne.n	8004344 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	4a12      	ldr	r2, [pc, #72]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 8004330:	f043 0308 	orr.w	r3, r3, #8
 8004334:	6413      	str	r3, [r2, #64]	; 0x40
 8004336:	4b10      	ldr	r3, [pc, #64]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]
}
 8004342:	e010      	b.n	8004366 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0e      	ldr	r2, [pc, #56]	; (8004384 <HAL_TIM_Base_MspInit+0xd8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10b      	bne.n	8004366 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 8004354:	f043 0302 	orr.w	r3, r3, #2
 8004358:	6453      	str	r3, [r2, #68]	; 0x44
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <HAL_TIM_Base_MspInit+0xcc>)
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
}
 8004366:	bf00      	nop
 8004368:	3724      	adds	r7, #36	; 0x24
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40010000 	.word	0x40010000
 8004378:	40023800 	.word	0x40023800
 800437c:	40000400 	.word	0x40000400
 8004380:	40000c00 	.word	0x40000c00
 8004384:	40010400 	.word	0x40010400

08004388 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004390:	f107 030c 	add.w	r3, r7, #12
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	609a      	str	r2, [r3, #8]
 800439c:	60da      	str	r2, [r3, #12]
 800439e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a11      	ldr	r2, [pc, #68]	; (80043ec <HAL_TIM_MspPostInit+0x64>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d11b      	bne.n	80043e2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80043aa:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <HAL_TIM_MspPostInit+0x68>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	4a10      	ldr	r2, [pc, #64]	; (80043f0 <HAL_TIM_MspPostInit+0x68>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	6313      	str	r3, [r2, #48]	; 0x30
 80043b6:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <HAL_TIM_MspPostInit+0x68>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	60bb      	str	r3, [r7, #8]
 80043c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI2     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043c2:	2304      	movs	r3, #4
 80043c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c6:	2302      	movs	r3, #2
 80043c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80043d2:	2303      	movs	r3, #3
 80043d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80043d6:	f107 030c 	add.w	r3, r7, #12
 80043da:	4619      	mov	r1, r3
 80043dc:	4805      	ldr	r0, [pc, #20]	; (80043f4 <HAL_TIM_MspPostInit+0x6c>)
 80043de:	f001 fc9b 	bl	8005d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80043e2:	bf00      	nop
 80043e4:	3720      	adds	r7, #32
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40010400 	.word	0x40010400
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40022000 	.word	0x40022000

080043f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08e      	sub	sp, #56	; 0x38
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	60da      	str	r2, [r3, #12]
 800440e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a5b      	ldr	r2, [pc, #364]	; (8004584 <HAL_UART_MspInit+0x18c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d130      	bne.n	800447c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800441a:	4b5b      	ldr	r3, [pc, #364]	; (8004588 <HAL_UART_MspInit+0x190>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	4a5a      	ldr	r2, [pc, #360]	; (8004588 <HAL_UART_MspInit+0x190>)
 8004420:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004424:	6413      	str	r3, [r2, #64]	; 0x40
 8004426:	4b58      	ldr	r3, [pc, #352]	; (8004588 <HAL_UART_MspInit+0x190>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800442e:	623b      	str	r3, [r7, #32]
 8004430:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004432:	4b55      	ldr	r3, [pc, #340]	; (8004588 <HAL_UART_MspInit+0x190>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	4a54      	ldr	r2, [pc, #336]	; (8004588 <HAL_UART_MspInit+0x190>)
 8004438:	f043 0320 	orr.w	r3, r3, #32
 800443c:	6313      	str	r3, [r2, #48]	; 0x30
 800443e:	4b52      	ldr	r3, [pc, #328]	; (8004588 <HAL_UART_MspInit+0x190>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	61fb      	str	r3, [r7, #28]
 8004448:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800444a:	23c0      	movs	r3, #192	; 0xc0
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444e:	2302      	movs	r3, #2
 8004450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004452:	2300      	movs	r3, #0
 8004454:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004456:	2303      	movs	r3, #3
 8004458:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800445a:	2308      	movs	r3, #8
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800445e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004462:	4619      	mov	r1, r3
 8004464:	4849      	ldr	r0, [pc, #292]	; (800458c <HAL_UART_MspInit+0x194>)
 8004466:	f001 fc57 	bl	8005d18 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800446a:	2200      	movs	r2, #0
 800446c:	2105      	movs	r1, #5
 800446e:	2052      	movs	r0, #82	; 0x52
 8004470:	f000 feee 	bl	8005250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004474:	2052      	movs	r0, #82	; 0x52
 8004476:	f000 ff07 	bl	8005288 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800447a:	e07f      	b.n	800457c <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a43      	ldr	r2, [pc, #268]	; (8004590 <HAL_UART_MspInit+0x198>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d14d      	bne.n	8004522 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004486:	4b40      	ldr	r3, [pc, #256]	; (8004588 <HAL_UART_MspInit+0x190>)
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	4a3f      	ldr	r2, [pc, #252]	; (8004588 <HAL_UART_MspInit+0x190>)
 800448c:	f043 0310 	orr.w	r3, r3, #16
 8004490:	6453      	str	r3, [r2, #68]	; 0x44
 8004492:	4b3d      	ldr	r3, [pc, #244]	; (8004588 <HAL_UART_MspInit+0x190>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800449e:	4b3a      	ldr	r3, [pc, #232]	; (8004588 <HAL_UART_MspInit+0x190>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	4a39      	ldr	r2, [pc, #228]	; (8004588 <HAL_UART_MspInit+0x190>)
 80044a4:	f043 0302 	orr.w	r3, r3, #2
 80044a8:	6313      	str	r3, [r2, #48]	; 0x30
 80044aa:	4b37      	ldr	r3, [pc, #220]	; (8004588 <HAL_UART_MspInit+0x190>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b6:	4b34      	ldr	r3, [pc, #208]	; (8004588 <HAL_UART_MspInit+0x190>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	4a33      	ldr	r2, [pc, #204]	; (8004588 <HAL_UART_MspInit+0x190>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	6313      	str	r3, [r2, #48]	; 0x30
 80044c2:	4b31      	ldr	r3, [pc, #196]	; (8004588 <HAL_UART_MspInit+0x190>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d2:	2302      	movs	r3, #2
 80044d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044da:	2300      	movs	r3, #0
 80044dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044de:	2307      	movs	r3, #7
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80044e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044e6:	4619      	mov	r1, r3
 80044e8:	482a      	ldr	r0, [pc, #168]	; (8004594 <HAL_UART_MspInit+0x19c>)
 80044ea:	f001 fc15 	bl	8005d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80044ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f4:	2302      	movs	r3, #2
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fc:	2300      	movs	r3, #0
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004500:	2307      	movs	r3, #7
 8004502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004508:	4619      	mov	r1, r3
 800450a:	4823      	ldr	r0, [pc, #140]	; (8004598 <HAL_UART_MspInit+0x1a0>)
 800450c:	f001 fc04 	bl	8005d18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8004510:	2200      	movs	r2, #0
 8004512:	2107      	movs	r1, #7
 8004514:	2025      	movs	r0, #37	; 0x25
 8004516:	f000 fe9b 	bl	8005250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800451a:	2025      	movs	r0, #37	; 0x25
 800451c:	f000 feb4 	bl	8005288 <HAL_NVIC_EnableIRQ>
}
 8004520:	e02c      	b.n	800457c <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART6)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1d      	ldr	r2, [pc, #116]	; (800459c <HAL_UART_MspInit+0x1a4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d127      	bne.n	800457c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART6_CLK_ENABLE();
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <HAL_UART_MspInit+0x190>)
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	4a15      	ldr	r2, [pc, #84]	; (8004588 <HAL_UART_MspInit+0x190>)
 8004532:	f043 0320 	orr.w	r3, r3, #32
 8004536:	6453      	str	r3, [r2, #68]	; 0x44
 8004538:	4b13      	ldr	r3, [pc, #76]	; (8004588 <HAL_UART_MspInit+0x190>)
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004544:	4b10      	ldr	r3, [pc, #64]	; (8004588 <HAL_UART_MspInit+0x190>)
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	4a0f      	ldr	r2, [pc, #60]	; (8004588 <HAL_UART_MspInit+0x190>)
 800454a:	f043 0304 	orr.w	r3, r3, #4
 800454e:	6313      	str	r3, [r2, #48]	; 0x30
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <HAL_UART_MspInit+0x190>)
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800455c:	23c0      	movs	r3, #192	; 0xc0
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004560:	2302      	movs	r3, #2
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004564:	2300      	movs	r3, #0
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004568:	2303      	movs	r3, #3
 800456a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800456c:	2308      	movs	r3, #8
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004574:	4619      	mov	r1, r3
 8004576:	480a      	ldr	r0, [pc, #40]	; (80045a0 <HAL_UART_MspInit+0x1a8>)
 8004578:	f001 fbce 	bl	8005d18 <HAL_GPIO_Init>
}
 800457c:	bf00      	nop
 800457e:	3738      	adds	r7, #56	; 0x38
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40007800 	.word	0x40007800
 8004588:	40023800 	.word	0x40023800
 800458c:	40021400 	.word	0x40021400
 8004590:	40011000 	.word	0x40011000
 8004594:	40020400 	.word	0x40020400
 8004598:	40020000 	.word	0x40020000
 800459c:	40011400 	.word	0x40011400
 80045a0:	40020800 	.word	0x40020800

080045a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80045aa:	1d3b      	adds	r3, r7, #4
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80045b8:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <HAL_FMC_MspInit+0x100>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d16d      	bne.n	800469c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80045c0:	4b38      	ldr	r3, [pc, #224]	; (80046a4 <HAL_FMC_MspInit+0x100>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80045c6:	4b38      	ldr	r3, [pc, #224]	; (80046a8 <HAL_FMC_MspInit+0x104>)
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	4a37      	ldr	r2, [pc, #220]	; (80046a8 <HAL_FMC_MspInit+0x104>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	6393      	str	r3, [r2, #56]	; 0x38
 80045d2:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <HAL_FMC_MspInit+0x104>)
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80045de:	f64f 7383 	movw	r3, #65411	; 0xff83
 80045e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e4:	2302      	movs	r3, #2
 80045e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ec:	2303      	movs	r3, #3
 80045ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045f0:	230c      	movs	r3, #12
 80045f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	4619      	mov	r1, r3
 80045f8:	482c      	ldr	r0, [pc, #176]	; (80046ac <HAL_FMC_MspInit+0x108>)
 80045fa:	f001 fb8d 	bl	8005d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80045fe:	f248 1333 	movw	r3, #33075	; 0x8133
 8004602:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004604:	2302      	movs	r3, #2
 8004606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800460c:	2303      	movs	r3, #3
 800460e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004610:	230c      	movs	r3, #12
 8004612:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	4619      	mov	r1, r3
 8004618:	4825      	ldr	r0, [pc, #148]	; (80046b0 <HAL_FMC_MspInit+0x10c>)
 800461a:	f001 fb7d 	bl	8005d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800461e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004622:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004624:	2302      	movs	r3, #2
 8004626:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462c:	2303      	movs	r3, #3
 800462e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004630:	230c      	movs	r3, #12
 8004632:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004634:	1d3b      	adds	r3, r7, #4
 8004636:	4619      	mov	r1, r3
 8004638:	481e      	ldr	r0, [pc, #120]	; (80046b4 <HAL_FMC_MspInit+0x110>)
 800463a:	f001 fb6d 	bl	8005d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800463e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004642:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004644:	2302      	movs	r3, #2
 8004646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800464c:	2303      	movs	r3, #3
 800464e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004650:	230c      	movs	r3, #12
 8004652:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4817      	ldr	r0, [pc, #92]	; (80046b8 <HAL_FMC_MspInit+0x114>)
 800465a:	f001 fb5d 	bl	8005d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800465e:	2328      	movs	r3, #40	; 0x28
 8004660:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004662:	2302      	movs	r3, #2
 8004664:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800466a:	2303      	movs	r3, #3
 800466c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800466e:	230c      	movs	r3, #12
 8004670:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004672:	1d3b      	adds	r3, r7, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4811      	ldr	r0, [pc, #68]	; (80046bc <HAL_FMC_MspInit+0x118>)
 8004678:	f001 fb4e 	bl	8005d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800467c:	2308      	movs	r3, #8
 800467e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004680:	2302      	movs	r3, #2
 8004682:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004688:	2303      	movs	r3, #3
 800468a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800468c:	230c      	movs	r3, #12
 800468e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	4619      	mov	r1, r3
 8004694:	480a      	ldr	r0, [pc, #40]	; (80046c0 <HAL_FMC_MspInit+0x11c>)
 8004696:	f001 fb3f 	bl	8005d18 <HAL_GPIO_Init>
 800469a:	e000      	b.n	800469e <HAL_FMC_MspInit+0xfa>
    return;
 800469c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000498 	.word	0x20000498
 80046a8:	40023800 	.word	0x40023800
 80046ac:	40021000 	.word	0x40021000
 80046b0:	40021800 	.word	0x40021800
 80046b4:	40020c00 	.word	0x40020c00
 80046b8:	40021400 	.word	0x40021400
 80046bc:	40021c00 	.word	0x40021c00
 80046c0:	40020800 	.word	0x40020800

080046c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80046cc:	f7ff ff6a 	bl	80045a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08c      	sub	sp, #48	; 0x30
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80046e8:	2200      	movs	r2, #0
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	2036      	movs	r0, #54	; 0x36
 80046ee:	f000 fdaf 	bl	8005250 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80046f2:	2036      	movs	r0, #54	; 0x36
 80046f4:	f000 fdc8 	bl	8005288 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80046f8:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <HAL_InitTick+0xa0>)
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	4a1e      	ldr	r2, [pc, #120]	; (8004778 <HAL_InitTick+0xa0>)
 80046fe:	f043 0310 	orr.w	r3, r3, #16
 8004702:	6413      	str	r3, [r2, #64]	; 0x40
 8004704:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <HAL_InitTick+0xa0>)
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004710:	f107 0210 	add.w	r2, r7, #16
 8004714:	f107 0314 	add.w	r3, r7, #20
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f003 fbe8 	bl	8007ef0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004720:	f003 fbbe 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 8004724:	4603      	mov	r3, r0
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	4a13      	ldr	r2, [pc, #76]	; (800477c <HAL_InitTick+0xa4>)
 800472e:	fba2 2303 	umull	r2, r3, r2, r3
 8004732:	0c9b      	lsrs	r3, r3, #18
 8004734:	3b01      	subs	r3, #1
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004738:	4b11      	ldr	r3, [pc, #68]	; (8004780 <HAL_InitTick+0xa8>)
 800473a:	4a12      	ldr	r2, [pc, #72]	; (8004784 <HAL_InitTick+0xac>)
 800473c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_InitTick+0xa8>)
 8004740:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004744:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004746:	4a0e      	ldr	r2, [pc, #56]	; (8004780 <HAL_InitTick+0xa8>)
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <HAL_InitTick+0xa8>)
 800474e:	2200      	movs	r2, #0
 8004750:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004752:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_InitTick+0xa8>)
 8004754:	2200      	movs	r2, #0
 8004756:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004758:	4809      	ldr	r0, [pc, #36]	; (8004780 <HAL_InitTick+0xa8>)
 800475a:	f004 fcbc 	bl	80090d6 <HAL_TIM_Base_Init>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d104      	bne.n	800476e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004764:	4806      	ldr	r0, [pc, #24]	; (8004780 <HAL_InitTick+0xa8>)
 8004766:	f004 fce1 	bl	800912c <HAL_TIM_Base_Start_IT>
 800476a:	4603      	mov	r3, r0
 800476c:	e000      	b.n	8004770 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
}
 8004770:	4618      	mov	r0, r3
 8004772:	3730      	adds	r7, #48	; 0x30
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40023800 	.word	0x40023800
 800477c:	431bde83 	.word	0x431bde83
 8004780:	20008c90 	.word	0x20008c90
 8004784:	40001000 	.word	0x40001000

08004788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800478c:	e7fe      	b.n	800478c <NMI_Handler+0x4>

0800478e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004792:	e7fe      	b.n	8004792 <HardFault_Handler+0x4>

08004794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004798:	e7fe      	b.n	8004798 <MemManage_Handler+0x4>

0800479a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800479a:	b480      	push	{r7}
 800479c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800479e:	e7fe      	b.n	800479e <BusFault_Handler+0x4>

080047a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047a4:	e7fe      	b.n	80047a4 <UsageFault_Handler+0x4>

080047a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047a6:	b480      	push	{r7}
 80047a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80047b8:	4802      	ldr	r0, [pc, #8]	; (80047c4 <USART1_IRQHandler+0x10>)
 80047ba:	f005 ff1b 	bl	800a5f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20008964 	.word	0x20008964

080047c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80047cc:	4803      	ldr	r0, [pc, #12]	; (80047dc <TIM6_DAC_IRQHandler+0x14>)
 80047ce:	f000 fd8b 	bl	80052e8 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80047d2:	4803      	ldr	r0, [pc, #12]	; (80047e0 <TIM6_DAC_IRQHandler+0x18>)
 80047d4:	f004 fd09 	bl	80091ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80047d8:	bf00      	nop
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	200089e4 	.word	0x200089e4
 80047e0:	20008c90 	.word	0x20008c90

080047e4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80047e8:	4802      	ldr	r0, [pc, #8]	; (80047f4 <UART7_IRQHandler+0x10>)
 80047ea:	f005 ff03 	bl	800a5f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80047ee:	bf00      	nop
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	2000869c 	.word	0x2000869c

080047f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80047fc:	4802      	ldr	r0, [pc, #8]	; (8004808 <LTDC_IRQHandler+0x10>)
 80047fe:	f002 fbf5 	bl	8006fec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004802:	bf00      	nop
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20008828 	.word	0x20008828

0800480c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004810:	4b08      	ldr	r3, [pc, #32]	; (8004834 <SystemInit+0x28>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	4a07      	ldr	r2, [pc, #28]	; (8004834 <SystemInit+0x28>)
 8004818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800481c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004820:	4b04      	ldr	r3, [pc, #16]	; (8004834 <SystemInit+0x28>)
 8004822:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004826:	609a      	str	r2, [r3, #8]
#endif
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	e000ed00 	.word	0xe000ed00

08004838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004870 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800483c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800483e:	e003      	b.n	8004848 <LoopCopyDataInit>

08004840 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004842:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004844:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004846:	3104      	adds	r1, #4

08004848 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004848:	480b      	ldr	r0, [pc, #44]	; (8004878 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800484c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800484e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004850:	d3f6      	bcc.n	8004840 <CopyDataInit>
  ldr  r2, =_sbss
 8004852:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004854:	e002      	b.n	800485c <LoopFillZerobss>

08004856 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004856:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004858:	f842 3b04 	str.w	r3, [r2], #4

0800485c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800485c:	4b09      	ldr	r3, [pc, #36]	; (8004884 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800485e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004860:	d3f9      	bcc.n	8004856 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004862:	f7ff ffd3 	bl	800480c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004866:	f009 fa1b 	bl	800dca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800486a:	f7fc f85d 	bl	8000928 <main>
  bx  lr    
 800486e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004870:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004874:	0800fd44 	.word	0x0800fd44
  ldr  r0, =_sdata
 8004878:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800487c:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 8004880:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 8004884:	20008cd4 	.word	0x20008cd4

08004888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004888:	e7fe      	b.n	8004888 <ADC_IRQHandler>

0800488a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800488e:	2003      	movs	r0, #3
 8004890:	f000 fcd3 	bl	800523a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004894:	2000      	movs	r0, #0
 8004896:	f7ff ff1f 	bl	80046d8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800489a:	f7ff fa01 	bl	8003ca0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048a8:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_IncTick+0x20>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_IncTick+0x24>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4413      	add	r3, r2
 80048b4:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <HAL_IncTick+0x24>)
 80048b6:	6013      	str	r3, [r2, #0]
}
 80048b8:	bf00      	nop
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000050 	.word	0x20000050
 80048c8:	20008cd0 	.word	0x20008cd0

080048cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return uwTick;
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <HAL_GetTick+0x14>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20008cd0 	.word	0x20008cd0

080048e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048ec:	f7ff ffee 	bl	80048cc <HAL_GetTick>
 80048f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d005      	beq.n	800490a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <HAL_Delay+0x44>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800490a:	bf00      	nop
 800490c:	f7ff ffde 	bl	80048cc <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	429a      	cmp	r2, r3
 800491a:	d8f7      	bhi.n	800490c <HAL_Delay+0x28>
  {
  }
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000050 	.word	0x20000050

0800492c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e031      	b.n	80049a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff f9d0 	bl	8003cf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b00      	cmp	r3, #0
 8004968:	d116      	bne.n	8004998 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_ADC_Init+0x84>)
 8004970:	4013      	ands	r3, r2
 8004972:	f043 0202 	orr.w	r2, r3, #2
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fab6 	bl	8004eec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
 8004996:	e001      	b.n	800499c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	ffffeefd 	.word	0xffffeefd

080049b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_Start+0x1a>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e0a0      	b.n	8004b10 <HAL_ADC_Start+0x15c>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d018      	beq.n	8004a16 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80049f4:	4b49      	ldr	r3, [pc, #292]	; (8004b1c <HAL_ADC_Start+0x168>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a49      	ldr	r2, [pc, #292]	; (8004b20 <HAL_ADC_Start+0x16c>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	0c9a      	lsrs	r2, r3, #18
 8004a00:	4613      	mov	r3, r2
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	4413      	add	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a08:	e002      	b.n	8004a10 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f9      	bne.n	8004a0a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d174      	bne.n	8004b0e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a28:	4b3e      	ldr	r3, [pc, #248]	; (8004b24 <HAL_ADC_Start+0x170>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5e:	d106      	bne.n	8004a6e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	f023 0206 	bic.w	r2, r3, #6
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	645a      	str	r2, [r3, #68]	; 0x44
 8004a6c:	e002      	b.n	8004a74 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004a84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004a86:	4b28      	ldr	r3, [pc, #160]	; (8004b28 <HAL_ADC_Start+0x174>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d136      	bne.n	8004b0e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004aae:	609a      	str	r2, [r3, #8]
 8004ab0:	e02d      	b.n	8004b0e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1d      	ldr	r2, [pc, #116]	; (8004b2c <HAL_ADC_Start+0x178>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d10e      	bne.n	8004ada <HAL_ADC_Start+0x126>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d107      	bne.n	8004ada <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ad8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004ada:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <HAL_ADC_Start+0x174>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d113      	bne.n	8004b0e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a11      	ldr	r2, [pc, #68]	; (8004b30 <HAL_ADC_Start+0x17c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10e      	bne.n	8004b0e <HAL_ADC_Start+0x15a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d107      	bne.n	8004b0e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b0c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	20000048 	.word	0x20000048
 8004b20:	431bde83 	.word	0x431bde83
 8004b24:	fffff8fe 	.word	0xfffff8fe
 8004b28:	40012300 	.word	0x40012300
 8004b2c:	40012000 	.word	0x40012000
 8004b30:	40012200 	.word	0x40012200

08004b34 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b50:	d113      	bne.n	8004b7a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b60:	d10b      	bne.n	8004b7a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f043 0220 	orr.w	r2, r3, #32
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e05c      	b.n	8004c34 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004b7a:	f7ff fea7 	bl	80048cc <HAL_GetTick>
 8004b7e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b80:	e01a      	b.n	8004bb8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d016      	beq.n	8004bb8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <HAL_ADC_PollForConversion+0x6c>
 8004b90:	f7ff fe9c 	bl	80048cc <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d20b      	bcs.n	8004bb8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	f043 0204 	orr.w	r2, r3, #4
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e03d      	b.n	8004c34 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d1dd      	bne.n	8004b82 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f06f 0212 	mvn.w	r2, #18
 8004bce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d123      	bne.n	8004c32 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d11f      	bne.n	8004c32 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d111      	bne.n	8004c32 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d105      	bne.n	8004c32 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f043 0201 	orr.w	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0x1c>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e12a      	b.n	8004eca <HAL_ADC_ConfigChannel+0x272>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b09      	cmp	r3, #9
 8004c82:	d93a      	bls.n	8004cfa <HAL_ADC_ConfigChannel+0xa2>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c8c:	d035      	beq.n	8004cfa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68d9      	ldr	r1, [r3, #12]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3b1e      	subs	r3, #30
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43da      	mvns	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a87      	ldr	r2, [pc, #540]	; (8004ed8 <HAL_ADC_ConfigChannel+0x280>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d10a      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68d9      	ldr	r1, [r3, #12]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	061a      	lsls	r2, r3, #24
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cd2:	e035      	b.n	8004d40 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68d9      	ldr	r1, [r3, #12]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4403      	add	r3, r0
 8004cec:	3b1e      	subs	r3, #30
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cf8:	e022      	b.n	8004d40 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6919      	ldr	r1, [r3, #16]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	461a      	mov	r2, r3
 8004d08:	4613      	mov	r3, r2
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	4413      	add	r3, r2
 8004d0e:	2207      	movs	r2, #7
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	43da      	mvns	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	400a      	ands	r2, r1
 8004d1c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6919      	ldr	r1, [r3, #16]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	4618      	mov	r0, r3
 8004d30:	4603      	mov	r3, r0
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	4403      	add	r3, r0
 8004d36:	409a      	lsls	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b06      	cmp	r3, #6
 8004d46:	d824      	bhi.n	8004d92 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	3b05      	subs	r3, #5
 8004d5a:	221f      	movs	r2, #31
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43da      	mvns	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	400a      	ands	r2, r1
 8004d68:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	4618      	mov	r0, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	3b05      	subs	r3, #5
 8004d84:	fa00 f203 	lsl.w	r2, r0, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	635a      	str	r2, [r3, #52]	; 0x34
 8004d90:	e04c      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	d824      	bhi.n	8004de4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	3b23      	subs	r3, #35	; 0x23
 8004dac:	221f      	movs	r2, #31
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43da      	mvns	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	400a      	ands	r2, r1
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	4618      	mov	r0, r3
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3b23      	subs	r3, #35	; 0x23
 8004dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
 8004de2:	e023      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	3b41      	subs	r3, #65	; 0x41
 8004df6:	221f      	movs	r2, #31
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43da      	mvns	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	400a      	ands	r2, r1
 8004e04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	4618      	mov	r0, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3b41      	subs	r3, #65	; 0x41
 8004e20:	fa00 f203 	lsl.w	r2, r0, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <HAL_ADC_ConfigChannel+0x284>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d10a      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x1f4>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e3e:	d105      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004e40:	4b27      	ldr	r3, [pc, #156]	; (8004ee0 <HAL_ADC_ConfigChannel+0x288>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4a26      	ldr	r2, [pc, #152]	; (8004ee0 <HAL_ADC_ConfigChannel+0x288>)
 8004e46:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004e4a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a22      	ldr	r2, [pc, #136]	; (8004edc <HAL_ADC_ConfigChannel+0x284>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d109      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x212>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b12      	cmp	r3, #18
 8004e5c:	d105      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004e5e:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <HAL_ADC_ConfigChannel+0x288>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4a1f      	ldr	r2, [pc, #124]	; (8004ee0 <HAL_ADC_ConfigChannel+0x288>)
 8004e64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e68:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1b      	ldr	r2, [pc, #108]	; (8004edc <HAL_ADC_ConfigChannel+0x284>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d125      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x268>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a17      	ldr	r2, [pc, #92]	; (8004ed8 <HAL_ADC_ConfigChannel+0x280>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <HAL_ADC_ConfigChannel+0x22e>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b11      	cmp	r3, #17
 8004e84:	d11c      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004e86:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <HAL_ADC_ConfigChannel+0x288>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <HAL_ADC_ConfigChannel+0x288>)
 8004e8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e90:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <HAL_ADC_ConfigChannel+0x280>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d111      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004e9c:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <HAL_ADC_ConfigChannel+0x28c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a11      	ldr	r2, [pc, #68]	; (8004ee8 <HAL_ADC_ConfigChannel+0x290>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	0c9a      	lsrs	r2, r3, #18
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004eb2:	e002      	b.n	8004eba <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f9      	bne.n	8004eb4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	10000012 	.word	0x10000012
 8004edc:	40012000 	.word	0x40012000
 8004ee0:	40012300 	.word	0x40012300
 8004ee4:	20000048 	.word	0x20000048
 8004ee8:	431bde83 	.word	0x431bde83

08004eec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004ef4:	4b78      	ldr	r3, [pc, #480]	; (80050d8 <ADC_Init+0x1ec>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	4a77      	ldr	r2, [pc, #476]	; (80050d8 <ADC_Init+0x1ec>)
 8004efa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004efe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004f00:	4b75      	ldr	r3, [pc, #468]	; (80050d8 <ADC_Init+0x1ec>)
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	4973      	ldr	r1, [pc, #460]	; (80050d8 <ADC_Init+0x1ec>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6859      	ldr	r1, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	021a      	lsls	r2, r3, #8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6859      	ldr	r1, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6899      	ldr	r1, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	4a58      	ldr	r2, [pc, #352]	; (80050dc <ADC_Init+0x1f0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d022      	beq.n	8004fc6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6899      	ldr	r1, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6899      	ldr	r1, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	609a      	str	r2, [r3, #8]
 8004fc4:	e00f      	b.n	8004fe6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fe4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0202 	bic.w	r2, r2, #2
 8004ff4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6899      	ldr	r1, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	005a      	lsls	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01b      	beq.n	800504c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005022:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005032:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6859      	ldr	r1, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	3b01      	subs	r3, #1
 8005040:	035a      	lsls	r2, r3, #13
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	e007      	b.n	800505c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800505a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800506a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	3b01      	subs	r3, #1
 8005078:	051a      	lsls	r2, r3, #20
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005090:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6899      	ldr	r1, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800509e:	025a      	lsls	r2, r3, #9
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6899      	ldr	r1, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	029a      	lsls	r2, r3, #10
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	609a      	str	r2, [r3, #8]
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40012300 	.word	0x40012300
 80050dc:	0f000001 	.word	0x0f000001

080050e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <__NVIC_SetPriorityGrouping+0x40>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050fc:	4013      	ands	r3, r2
 80050fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <__NVIC_SetPriorityGrouping+0x44>)
 800510a:	4313      	orrs	r3, r2
 800510c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800510e:	4a04      	ldr	r2, [pc, #16]	; (8005120 <__NVIC_SetPriorityGrouping+0x40>)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	60d3      	str	r3, [r2, #12]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	e000ed00 	.word	0xe000ed00
 8005124:	05fa0000 	.word	0x05fa0000

08005128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800512c:	4b04      	ldr	r3, [pc, #16]	; (8005140 <__NVIC_GetPriorityGrouping+0x18>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	0a1b      	lsrs	r3, r3, #8
 8005132:	f003 0307 	and.w	r3, r3, #7
}
 8005136:	4618      	mov	r0, r3
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	e000ed00 	.word	0xe000ed00

08005144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800514e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005152:	2b00      	cmp	r3, #0
 8005154:	db0b      	blt.n	800516e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005156:	79fb      	ldrb	r3, [r7, #7]
 8005158:	f003 021f 	and.w	r2, r3, #31
 800515c:	4907      	ldr	r1, [pc, #28]	; (800517c <__NVIC_EnableIRQ+0x38>)
 800515e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	2001      	movs	r0, #1
 8005166:	fa00 f202 	lsl.w	r2, r0, r2
 800516a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	e000e100 	.word	0xe000e100

08005180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	6039      	str	r1, [r7, #0]
 800518a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800518c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005190:	2b00      	cmp	r3, #0
 8005192:	db0a      	blt.n	80051aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	b2da      	uxtb	r2, r3
 8005198:	490c      	ldr	r1, [pc, #48]	; (80051cc <__NVIC_SetPriority+0x4c>)
 800519a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519e:	0112      	lsls	r2, r2, #4
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	440b      	add	r3, r1
 80051a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051a8:	e00a      	b.n	80051c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	4908      	ldr	r1, [pc, #32]	; (80051d0 <__NVIC_SetPriority+0x50>)
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	3b04      	subs	r3, #4
 80051b8:	0112      	lsls	r2, r2, #4
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	440b      	add	r3, r1
 80051be:	761a      	strb	r2, [r3, #24]
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	e000e100 	.word	0xe000e100
 80051d0:	e000ed00 	.word	0xe000ed00

080051d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b089      	sub	sp, #36	; 0x24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f1c3 0307 	rsb	r3, r3, #7
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	bf28      	it	cs
 80051f2:	2304      	movcs	r3, #4
 80051f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	3304      	adds	r3, #4
 80051fa:	2b06      	cmp	r3, #6
 80051fc:	d902      	bls.n	8005204 <NVIC_EncodePriority+0x30>
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3b03      	subs	r3, #3
 8005202:	e000      	b.n	8005206 <NVIC_EncodePriority+0x32>
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005208:	f04f 32ff 	mov.w	r2, #4294967295
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	fa02 f303 	lsl.w	r3, r2, r3
 8005212:	43da      	mvns	r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	401a      	ands	r2, r3
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800521c:	f04f 31ff 	mov.w	r1, #4294967295
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	fa01 f303 	lsl.w	r3, r1, r3
 8005226:	43d9      	mvns	r1, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800522c:	4313      	orrs	r3, r2
         );
}
 800522e:	4618      	mov	r0, r3
 8005230:	3724      	adds	r7, #36	; 0x24
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff ff4c 	bl	80050e0 <__NVIC_SetPriorityGrouping>
}
 8005248:	bf00      	nop
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005262:	f7ff ff61 	bl	8005128 <__NVIC_GetPriorityGrouping>
 8005266:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	6978      	ldr	r0, [r7, #20]
 800526e:	f7ff ffb1 	bl	80051d4 <NVIC_EncodePriority>
 8005272:	4602      	mov	r2, r0
 8005274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005278:	4611      	mov	r1, r2
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff ff80 	bl	8005180 <__NVIC_SetPriority>
}
 8005280:	bf00      	nop
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff ff54 	bl	8005144 <__NVIC_EnableIRQ>
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e014      	b.n	80052e0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	791b      	ldrb	r3, [r3, #4]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d105      	bne.n	80052cc <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fe fd80 	bl	8003dcc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fe:	d118      	bne.n	8005332 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2204      	movs	r2, #4
 8005304:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f043 0201 	orr.w	r2, r3, #1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800531a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800532a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f825 	bl	800537c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800533c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005340:	d118      	bne.n	8005374 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2204      	movs	r2, #4
 8005346:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f043 0202 	orr.w	r2, r3, #2
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800535c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800536c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f85b 	bl	800542a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8005374:	bf00      	nop
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	2300      	movs	r3, #0
 80053a2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	795b      	ldrb	r3, [r3, #5]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_DAC_ConfigChannel+0x20>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e036      	b.n	800541e <HAL_DAC_ConfigChannel+0x8e>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2202      	movs	r2, #2
 80053ba:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80053c4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4013      	ands	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6819      	ldr	r1, [r3, #0]
 80053fe:	22c0      	movs	r2, #192	; 0xc0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	43da      	mvns	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	400a      	ands	r2, r1
 800540e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
	...

08005440 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800544c:	f7ff fa3e 	bl	80048cc <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e099      	b.n	8005590 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0201 	bic.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800547c:	e00f      	b.n	800549e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800547e:	f7ff fa25 	bl	80048cc <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b05      	cmp	r3, #5
 800548a:	d908      	bls.n	800549e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2203      	movs	r2, #3
 8005496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e078      	b.n	8005590 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e8      	bne.n	800547e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	4b38      	ldr	r3, [pc, #224]	; (8005598 <HAL_DMA_Init+0x158>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d107      	bne.n	8005508 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	4313      	orrs	r3, r2
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 0307 	bic.w	r3, r3, #7
 800551e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2b04      	cmp	r3, #4
 8005530:	d117      	bne.n	8005562 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00e      	beq.n	8005562 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f8df 	bl	8005708 <DMA_CheckFifoParam>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2240      	movs	r2, #64	; 0x40
 8005554:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800555e:	2301      	movs	r3, #1
 8005560:	e016      	b.n	8005590 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f896 	bl	800569c <DMA_CalcBaseAndBitshift>
 8005570:	4603      	mov	r3, r0
 8005572:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005578:	223f      	movs	r2, #63	; 0x3f
 800557a:	409a      	lsls	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	f010803f 	.word	0xf010803f

0800559c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e050      	b.n	8005650 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d101      	bne.n	80055be <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80055ba:	2302      	movs	r3, #2
 80055bc:	e048      	b.n	8005650 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2200      	movs	r2, #0
 80055ec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2221      	movs	r2, #33	; 0x21
 80055fc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f84c 	bl	800569c <DMA_CalcBaseAndBitshift>
 8005604:	4603      	mov	r3, r0
 8005606:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560c:	223f      	movs	r2, #63	; 0x3f
 800560e:	409a      	lsls	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d004      	beq.n	8005676 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e00c      	b.n	8005690 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2205      	movs	r2, #5
 800567a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0201 	bic.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	3b10      	subs	r3, #16
 80056ac:	4a13      	ldr	r2, [pc, #76]	; (80056fc <DMA_CalcBaseAndBitshift+0x60>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	091b      	lsrs	r3, r3, #4
 80056b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056b6:	4a12      	ldr	r2, [pc, #72]	; (8005700 <DMA_CalcBaseAndBitshift+0x64>)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4413      	add	r3, r2
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d908      	bls.n	80056dc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <DMA_CalcBaseAndBitshift+0x68>)
 80056d2:	4013      	ands	r3, r2
 80056d4:	1d1a      	adds	r2, r3, #4
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	659a      	str	r2, [r3, #88]	; 0x58
 80056da:	e006      	b.n	80056ea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	4b08      	ldr	r3, [pc, #32]	; (8005704 <DMA_CalcBaseAndBitshift+0x68>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	aaaaaaab 	.word	0xaaaaaaab
 8005700:	0800fd2c 	.word	0x0800fd2c
 8005704:	fffffc00 	.word	0xfffffc00

08005708 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005718:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d11f      	bne.n	8005762 <DMA_CheckFifoParam+0x5a>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b03      	cmp	r3, #3
 8005726:	d856      	bhi.n	80057d6 <DMA_CheckFifoParam+0xce>
 8005728:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <DMA_CheckFifoParam+0x28>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	08005741 	.word	0x08005741
 8005734:	08005753 	.word	0x08005753
 8005738:	08005741 	.word	0x08005741
 800573c:	080057d7 	.word	0x080057d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d046      	beq.n	80057da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005750:	e043      	b.n	80057da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800575a:	d140      	bne.n	80057de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005760:	e03d      	b.n	80057de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576a:	d121      	bne.n	80057b0 <DMA_CheckFifoParam+0xa8>
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b03      	cmp	r3, #3
 8005770:	d837      	bhi.n	80057e2 <DMA_CheckFifoParam+0xda>
 8005772:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <DMA_CheckFifoParam+0x70>)
 8005774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005778:	08005789 	.word	0x08005789
 800577c:	0800578f 	.word	0x0800578f
 8005780:	08005789 	.word	0x08005789
 8005784:	080057a1 	.word	0x080057a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
      break;
 800578c:	e030      	b.n	80057f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d025      	beq.n	80057e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800579e:	e022      	b.n	80057e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057a8:	d11f      	bne.n	80057ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057ae:	e01c      	b.n	80057ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d903      	bls.n	80057be <DMA_CheckFifoParam+0xb6>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d003      	beq.n	80057c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057bc:	e018      	b.n	80057f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]
      break;
 80057c2:	e015      	b.n	80057f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00e      	beq.n	80057ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      break;
 80057d4:	e00b      	b.n	80057ee <DMA_CheckFifoParam+0xe6>
      break;
 80057d6:	bf00      	nop
 80057d8:	e00a      	b.n	80057f0 <DMA_CheckFifoParam+0xe8>
      break;
 80057da:	bf00      	nop
 80057dc:	e008      	b.n	80057f0 <DMA_CheckFifoParam+0xe8>
      break;
 80057de:	bf00      	nop
 80057e0:	e006      	b.n	80057f0 <DMA_CheckFifoParam+0xe8>
      break;
 80057e2:	bf00      	nop
 80057e4:	e004      	b.n	80057f0 <DMA_CheckFifoParam+0xe8>
      break;
 80057e6:	bf00      	nop
 80057e8:	e002      	b.n	80057f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <DMA_CheckFifoParam+0xe8>
      break;
 80057ee:	bf00      	nop
    }
  } 
  
  return status; 
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop

08005800 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e039      	b.n	8005886 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fe fb18 	bl	8003e5c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005850:	f023 0107 	bic.w	r1, r3, #7
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <HAL_DMA2D_Init+0x90>)
 8005868:	4013      	ands	r3, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68d1      	ldr	r1, [r2, #12]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	430b      	orrs	r3, r1
 8005874:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	ffffc000 	.word	0xffffc000

08005894 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_DMA2D_Start+0x1c>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e018      	b.n	80058e2 <HAL_DMA2D_Start+0x4e>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f988 	bl	8005be0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b086      	sub	sp, #24
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d056      	beq.n	80059b4 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005906:	f7fe ffe1 	bl	80048cc <HAL_GetTick>
 800590a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800590c:	e04b      	b.n	80059a6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800591c:	2b00      	cmp	r3, #0
 800591e:	d023      	beq.n	8005968 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	f043 0202 	orr.w	r2, r3, #2
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	f043 0201 	orr.w	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2221      	movs	r2, #33	; 0x21
 8005952:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2204      	movs	r2, #4
 8005958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0a5      	b.n	8005ab4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d01a      	beq.n	80059a6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005970:	f7fe ffac 	bl	80048cc <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <HAL_DMA2D_PollForTransfer+0x9c>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10f      	bne.n	80059a6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	f043 0220 	orr.w	r2, r3, #32
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2203      	movs	r2, #3
 8005996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e086      	b.n	8005ab4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0ac      	beq.n	800590e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d061      	beq.n	8005a9a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80059d6:	f7fe ff79 	bl	80048cc <HAL_GetTick>
 80059da:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80059dc:	e056      	b.n	8005a8c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02e      	beq.n	8005a4e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fe:	f043 0204 	orr.w	r2, r3, #4
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a14:	f043 0202 	orr.w	r2, r3, #2
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	f043 0201 	orr.w	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2229      	movs	r2, #41	; 0x29
 8005a38:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e032      	b.n	8005ab4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a54:	d01a      	beq.n	8005a8c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005a56:	f7fe ff39 	bl	80048cc <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d302      	bcc.n	8005a6c <HAL_DMA2D_PollForTransfer+0x182>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10f      	bne.n	8005a8c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a70:	f043 0220 	orr.w	r2, r3, #32
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e013      	b.n	8005ab4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0a1      	beq.n	80059de <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2212      	movs	r2, #18
 8005aa0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_DMA2D_ConfigLayer+0x20>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e079      	b.n	8005bd0 <HAL_DMA2D_ConfigLayer+0x114>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	3318      	adds	r3, #24
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	4413      	add	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	041b      	lsls	r3, r3, #16
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005b06:	4b35      	ldr	r3, [pc, #212]	; (8005bdc <HAL_DMA2D_ConfigLayer+0x120>)
 8005b08:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b0a      	cmp	r3, #10
 8005b10:	d003      	beq.n	8005b1a <HAL_DMA2D_ConfigLayer+0x5e>
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b09      	cmp	r3, #9
 8005b18:	d107      	bne.n	8005b2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	e005      	b.n	8005b36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	061b      	lsls	r3, r3, #24
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d120      	bne.n	8005b7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	ea02 0103 	and.w	r1, r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b0a      	cmp	r3, #10
 8005b64:	d003      	beq.n	8005b6e <HAL_DMA2D_ConfigLayer+0xb2>
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b09      	cmp	r3, #9
 8005b6c:	d127      	bne.n	8005bbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b7c:	e01f      	b.n	8005bbe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	43db      	mvns	r3, r3
 8005b88:	ea02 0103 	and.w	r1, r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	6812      	ldr	r2, [r2, #0]
 8005b9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b0a      	cmp	r3, #10
 8005ba6:	d003      	beq.n	8005bb0 <HAL_DMA2D_ConfigLayer+0xf4>
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b09      	cmp	r3, #9
 8005bae:	d106      	bne.n	8005bbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005bbc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	ff03000f 	.word	0xff03000f

08005be0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b08b      	sub	sp, #44	; 0x2c
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	041a      	lsls	r2, r3, #16
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c18:	d174      	bne.n	8005d04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c20:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c28:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c30:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	431a      	orrs	r2, r3
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c50:	e053      	b.n	8005cfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d106      	bne.n	8005c68 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
 8005c66:	e048      	b.n	8005cfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d111      	bne.n	8005c94 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	0cdb      	lsrs	r3, r3, #19
 8005c74:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	0a9b      	lsrs	r3, r3, #10
 8005c7a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	08db      	lsrs	r3, r3, #3
 8005c80:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	02db      	lsls	r3, r3, #11
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
 8005c92:	e032      	b.n	8005cfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d117      	bne.n	8005ccc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	0fdb      	lsrs	r3, r3, #31
 8005ca0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	0cdb      	lsrs	r3, r3, #19
 8005ca6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	0adb      	lsrs	r3, r3, #11
 8005cac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	08db      	lsrs	r3, r3, #3
 8005cb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	029b      	lsls	r3, r3, #10
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	03db      	lsls	r3, r3, #15
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cca:	e016      	b.n	8005cfa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	0f1b      	lsrs	r3, r3, #28
 8005cd0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	0d1b      	lsrs	r3, r3, #20
 8005cd6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	0b1b      	lsrs	r3, r3, #12
 8005cdc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	091b      	lsrs	r3, r3, #4
 8005ce2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	011a      	lsls	r2, r3, #4
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	431a      	orrs	r2, r3
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	031b      	lsls	r3, r3, #12
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d00:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005d02:	e003      	b.n	8005d0c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	60da      	str	r2, [r3, #12]
}
 8005d0c:	bf00      	nop
 8005d0e:	372c      	adds	r7, #44	; 0x2c
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b089      	sub	sp, #36	; 0x24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e175      	b.n	8006024 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005d38:	2201      	movs	r2, #1
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	f040 8164 	bne.w	800601e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d00b      	beq.n	8005d76 <HAL_GPIO_Init+0x5e>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d007      	beq.n	8005d76 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d6a:	2b11      	cmp	r3, #17
 8005d6c:	d003      	beq.n	8005d76 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b12      	cmp	r3, #18
 8005d74:	d130      	bne.n	8005dd8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	2203      	movs	r2, #3
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43db      	mvns	r3, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005dac:	2201      	movs	r2, #1
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	43db      	mvns	r3, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4013      	ands	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	091b      	lsrs	r3, r3, #4
 8005dc2:	f003 0201 	and.w	r2, r3, #1
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	2203      	movs	r2, #3
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	43db      	mvns	r3, r3
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	4013      	ands	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d003      	beq.n	8005e18 <HAL_GPIO_Init+0x100>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b12      	cmp	r3, #18
 8005e16:	d123      	bne.n	8005e60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	08da      	lsrs	r2, r3, #3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3208      	adds	r2, #8
 8005e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	220f      	movs	r2, #15
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	43db      	mvns	r3, r3
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	08da      	lsrs	r2, r3, #3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3208      	adds	r2, #8
 8005e5a:	69b9      	ldr	r1, [r7, #24]
 8005e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	43db      	mvns	r3, r3
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	4013      	ands	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f003 0203 	and.w	r2, r3, #3
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 80be 	beq.w	800601e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ea2:	4b66      	ldr	r3, [pc, #408]	; (800603c <HAL_GPIO_Init+0x324>)
 8005ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea6:	4a65      	ldr	r2, [pc, #404]	; (800603c <HAL_GPIO_Init+0x324>)
 8005ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005eac:	6453      	str	r3, [r2, #68]	; 0x44
 8005eae:	4b63      	ldr	r3, [pc, #396]	; (800603c <HAL_GPIO_Init+0x324>)
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005eba:	4a61      	ldr	r2, [pc, #388]	; (8006040 <HAL_GPIO_Init+0x328>)
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	089b      	lsrs	r3, r3, #2
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	220f      	movs	r2, #15
 8005ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	4013      	ands	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a58      	ldr	r2, [pc, #352]	; (8006044 <HAL_GPIO_Init+0x32c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d037      	beq.n	8005f56 <HAL_GPIO_Init+0x23e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a57      	ldr	r2, [pc, #348]	; (8006048 <HAL_GPIO_Init+0x330>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d031      	beq.n	8005f52 <HAL_GPIO_Init+0x23a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a56      	ldr	r2, [pc, #344]	; (800604c <HAL_GPIO_Init+0x334>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d02b      	beq.n	8005f4e <HAL_GPIO_Init+0x236>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a55      	ldr	r2, [pc, #340]	; (8006050 <HAL_GPIO_Init+0x338>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d025      	beq.n	8005f4a <HAL_GPIO_Init+0x232>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a54      	ldr	r2, [pc, #336]	; (8006054 <HAL_GPIO_Init+0x33c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d01f      	beq.n	8005f46 <HAL_GPIO_Init+0x22e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a53      	ldr	r2, [pc, #332]	; (8006058 <HAL_GPIO_Init+0x340>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d019      	beq.n	8005f42 <HAL_GPIO_Init+0x22a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a52      	ldr	r2, [pc, #328]	; (800605c <HAL_GPIO_Init+0x344>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <HAL_GPIO_Init+0x226>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a51      	ldr	r2, [pc, #324]	; (8006060 <HAL_GPIO_Init+0x348>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00d      	beq.n	8005f3a <HAL_GPIO_Init+0x222>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a50      	ldr	r2, [pc, #320]	; (8006064 <HAL_GPIO_Init+0x34c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d007      	beq.n	8005f36 <HAL_GPIO_Init+0x21e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a4f      	ldr	r2, [pc, #316]	; (8006068 <HAL_GPIO_Init+0x350>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d101      	bne.n	8005f32 <HAL_GPIO_Init+0x21a>
 8005f2e:	2309      	movs	r3, #9
 8005f30:	e012      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f32:	230a      	movs	r3, #10
 8005f34:	e010      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f36:	2308      	movs	r3, #8
 8005f38:	e00e      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f3a:	2307      	movs	r3, #7
 8005f3c:	e00c      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f3e:	2306      	movs	r3, #6
 8005f40:	e00a      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f42:	2305      	movs	r3, #5
 8005f44:	e008      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f46:	2304      	movs	r3, #4
 8005f48:	e006      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e004      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e002      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <HAL_GPIO_Init+0x240>
 8005f56:	2300      	movs	r3, #0
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	f002 0203 	and.w	r2, r2, #3
 8005f5e:	0092      	lsls	r2, r2, #2
 8005f60:	4093      	lsls	r3, r2
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005f68:	4935      	ldr	r1, [pc, #212]	; (8006040 <HAL_GPIO_Init+0x328>)
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	089b      	lsrs	r3, r3, #2
 8005f6e:	3302      	adds	r3, #2
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f76:	4b3d      	ldr	r3, [pc, #244]	; (800606c <HAL_GPIO_Init+0x354>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	43db      	mvns	r3, r3
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	4013      	ands	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f9a:	4a34      	ldr	r2, [pc, #208]	; (800606c <HAL_GPIO_Init+0x354>)
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005fa0:	4b32      	ldr	r3, [pc, #200]	; (800606c <HAL_GPIO_Init+0x354>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4013      	ands	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fc4:	4a29      	ldr	r2, [pc, #164]	; (800606c <HAL_GPIO_Init+0x354>)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fca:	4b28      	ldr	r3, [pc, #160]	; (800606c <HAL_GPIO_Init+0x354>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fee:	4a1f      	ldr	r2, [pc, #124]	; (800606c <HAL_GPIO_Init+0x354>)
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ff4:	4b1d      	ldr	r3, [pc, #116]	; (800606c <HAL_GPIO_Init+0x354>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	4013      	ands	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006018:	4a14      	ldr	r2, [pc, #80]	; (800606c <HAL_GPIO_Init+0x354>)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	3301      	adds	r3, #1
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	2b0f      	cmp	r3, #15
 8006028:	f67f ae86 	bls.w	8005d38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	3724      	adds	r7, #36	; 0x24
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40023800 	.word	0x40023800
 8006040:	40013800 	.word	0x40013800
 8006044:	40020000 	.word	0x40020000
 8006048:	40020400 	.word	0x40020400
 800604c:	40020800 	.word	0x40020800
 8006050:	40020c00 	.word	0x40020c00
 8006054:	40021000 	.word	0x40021000
 8006058:	40021400 	.word	0x40021400
 800605c:	40021800 	.word	0x40021800
 8006060:	40021c00 	.word	0x40021c00
 8006064:	40022000 	.word	0x40022000
 8006068:	40022400 	.word	0x40022400
 800606c:	40013c00 	.word	0x40013c00

08006070 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800607a:	2300      	movs	r3, #0
 800607c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	e0d9      	b.n	8006240 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800608c:	2201      	movs	r2, #1
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4013      	ands	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	f040 80c9 	bne.w	800623a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80060a8:	4a6b      	ldr	r2, [pc, #428]	; (8006258 <HAL_GPIO_DeInit+0x1e8>)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	089b      	lsrs	r3, r3, #2
 80060ae:	3302      	adds	r3, #2
 80060b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f003 0303 	and.w	r3, r3, #3
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	220f      	movs	r2, #15
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	4013      	ands	r3, r2
 80060c8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a63      	ldr	r2, [pc, #396]	; (800625c <HAL_GPIO_DeInit+0x1ec>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d037      	beq.n	8006142 <HAL_GPIO_DeInit+0xd2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a62      	ldr	r2, [pc, #392]	; (8006260 <HAL_GPIO_DeInit+0x1f0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d031      	beq.n	800613e <HAL_GPIO_DeInit+0xce>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a61      	ldr	r2, [pc, #388]	; (8006264 <HAL_GPIO_DeInit+0x1f4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d02b      	beq.n	800613a <HAL_GPIO_DeInit+0xca>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a60      	ldr	r2, [pc, #384]	; (8006268 <HAL_GPIO_DeInit+0x1f8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d025      	beq.n	8006136 <HAL_GPIO_DeInit+0xc6>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a5f      	ldr	r2, [pc, #380]	; (800626c <HAL_GPIO_DeInit+0x1fc>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01f      	beq.n	8006132 <HAL_GPIO_DeInit+0xc2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a5e      	ldr	r2, [pc, #376]	; (8006270 <HAL_GPIO_DeInit+0x200>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d019      	beq.n	800612e <HAL_GPIO_DeInit+0xbe>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a5d      	ldr	r2, [pc, #372]	; (8006274 <HAL_GPIO_DeInit+0x204>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <HAL_GPIO_DeInit+0xba>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a5c      	ldr	r2, [pc, #368]	; (8006278 <HAL_GPIO_DeInit+0x208>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00d      	beq.n	8006126 <HAL_GPIO_DeInit+0xb6>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a5b      	ldr	r2, [pc, #364]	; (800627c <HAL_GPIO_DeInit+0x20c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d007      	beq.n	8006122 <HAL_GPIO_DeInit+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a5a      	ldr	r2, [pc, #360]	; (8006280 <HAL_GPIO_DeInit+0x210>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d101      	bne.n	800611e <HAL_GPIO_DeInit+0xae>
 800611a:	2309      	movs	r3, #9
 800611c:	e012      	b.n	8006144 <HAL_GPIO_DeInit+0xd4>
 800611e:	230a      	movs	r3, #10
 8006120:	e010      	b.n	8006144 <HAL_GPIO_DeInit+0xd4>
 8006122:	2308      	movs	r3, #8
 8006124:	e00e      	b.n	8006144 <HAL_GPIO_DeInit+0xd4>
 8006126:	2307      	movs	r3, #7
 8006128:	e00c      	b.n	8006144 <HAL_GPIO_DeInit+0xd4>
 800612a:	2306      	movs	r3, #6
 800612c:	e00a      	b.n	8006144 <HAL_GPIO_DeInit+0xd4>
 800612e:	2305      	movs	r3, #5
 8006130:	e008      	b.n	8006144 <HAL_GPIO_DeInit+0xd4>
 8006132:	2304      	movs	r3, #4
 8006134:	e006      	b.n	8006144 <HAL_GPIO_DeInit+0xd4>
 8006136:	2303      	movs	r3, #3
 8006138:	e004      	b.n	8006144 <HAL_GPIO_DeInit+0xd4>
 800613a:	2302      	movs	r3, #2
 800613c:	e002      	b.n	8006144 <HAL_GPIO_DeInit+0xd4>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <HAL_GPIO_DeInit+0xd4>
 8006142:	2300      	movs	r3, #0
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	f002 0203 	and.w	r2, r2, #3
 800614a:	0092      	lsls	r2, r2, #2
 800614c:	4093      	lsls	r3, r2
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	429a      	cmp	r2, r3
 8006152:	d132      	bne.n	80061ba <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006154:	4b4b      	ldr	r3, [pc, #300]	; (8006284 <HAL_GPIO_DeInit+0x214>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	43db      	mvns	r3, r3
 800615c:	4949      	ldr	r1, [pc, #292]	; (8006284 <HAL_GPIO_DeInit+0x214>)
 800615e:	4013      	ands	r3, r2
 8006160:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006162:	4b48      	ldr	r3, [pc, #288]	; (8006284 <HAL_GPIO_DeInit+0x214>)
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	43db      	mvns	r3, r3
 800616a:	4946      	ldr	r1, [pc, #280]	; (8006284 <HAL_GPIO_DeInit+0x214>)
 800616c:	4013      	ands	r3, r2
 800616e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006170:	4b44      	ldr	r3, [pc, #272]	; (8006284 <HAL_GPIO_DeInit+0x214>)
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	43db      	mvns	r3, r3
 8006178:	4942      	ldr	r1, [pc, #264]	; (8006284 <HAL_GPIO_DeInit+0x214>)
 800617a:	4013      	ands	r3, r2
 800617c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800617e:	4b41      	ldr	r3, [pc, #260]	; (8006284 <HAL_GPIO_DeInit+0x214>)
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	43db      	mvns	r3, r3
 8006186:	493f      	ldr	r1, [pc, #252]	; (8006284 <HAL_GPIO_DeInit+0x214>)
 8006188:	4013      	ands	r3, r2
 800618a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	220f      	movs	r2, #15
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800619c:	4a2e      	ldr	r2, [pc, #184]	; (8006258 <HAL_GPIO_DeInit+0x1e8>)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	089b      	lsrs	r3, r3, #2
 80061a2:	3302      	adds	r3, #2
 80061a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	43da      	mvns	r2, r3
 80061ac:	482a      	ldr	r0, [pc, #168]	; (8006258 <HAL_GPIO_DeInit+0x1e8>)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	089b      	lsrs	r3, r3, #2
 80061b2:	400a      	ands	r2, r1
 80061b4:	3302      	adds	r3, #2
 80061b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	2103      	movs	r1, #3
 80061c4:	fa01 f303 	lsl.w	r3, r1, r3
 80061c8:	43db      	mvns	r3, r3
 80061ca:	401a      	ands	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	08da      	lsrs	r2, r3, #3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3208      	adds	r2, #8
 80061d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	220f      	movs	r2, #15
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	43db      	mvns	r3, r3
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	08d2      	lsrs	r2, r2, #3
 80061f0:	4019      	ands	r1, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3208      	adds	r2, #8
 80061f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	2103      	movs	r1, #3
 8006204:	fa01 f303 	lsl.w	r3, r1, r3
 8006208:	43db      	mvns	r3, r3
 800620a:	401a      	ands	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	2101      	movs	r1, #1
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	fa01 f303 	lsl.w	r3, r1, r3
 800621c:	43db      	mvns	r3, r3
 800621e:	401a      	ands	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	2103      	movs	r1, #3
 800622e:	fa01 f303 	lsl.w	r3, r1, r3
 8006232:	43db      	mvns	r3, r3
 8006234:	401a      	ands	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	3301      	adds	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2b0f      	cmp	r3, #15
 8006244:	f67f af22 	bls.w	800608c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40013800 	.word	0x40013800
 800625c:	40020000 	.word	0x40020000
 8006260:	40020400 	.word	0x40020400
 8006264:	40020800 	.word	0x40020800
 8006268:	40020c00 	.word	0x40020c00
 800626c:	40021000 	.word	0x40021000
 8006270:	40021400 	.word	0x40021400
 8006274:	40021800 	.word	0x40021800
 8006278:	40021c00 	.word	0x40021c00
 800627c:	40022000 	.word	0x40022000
 8006280:	40022400 	.word	0x40022400
 8006284:	40013c00 	.word	0x40013c00

08006288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	887b      	ldrh	r3, [r7, #2]
 800629a:	4013      	ands	r3, r2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
 80062a4:	e001      	b.n	80062aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062a6:	2300      	movs	r3, #0
 80062a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	807b      	strh	r3, [r7, #2]
 80062c4:	4613      	mov	r3, r2
 80062c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062c8:	787b      	ldrb	r3, [r7, #1]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062ce:	887a      	ldrh	r2, [r7, #2]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80062d4:	e003      	b.n	80062de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80062d6:	887b      	ldrh	r3, [r7, #2]
 80062d8:	041a      	lsls	r2, r3, #16
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	619a      	str	r2, [r3, #24]
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e07f      	b.n	80063fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fd fdc2 	bl	8003e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2224      	movs	r2, #36	; 0x24
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800633c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800634c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d107      	bne.n	8006366 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006362:	609a      	str	r2, [r3, #8]
 8006364:	e006      	b.n	8006374 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006372:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2b02      	cmp	r3, #2
 800637a:	d104      	bne.n	8006386 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006384:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6859      	ldr	r1, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4b1d      	ldr	r3, [pc, #116]	; (8006408 <HAL_I2C_Init+0x11c>)
 8006392:	430b      	orrs	r3, r1
 8006394:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691a      	ldr	r2, [r3, #16]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	ea42 0103 	orr.w	r1, r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	021a      	lsls	r2, r3, #8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	69d9      	ldr	r1, [r3, #28]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1a      	ldr	r2, [r3, #32]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	02008000 	.word	0x02008000

0800640c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e021      	b.n	8006462 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2224      	movs	r2, #36	; 0x24
 8006422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0201 	bic.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fd fda8 	bl	8003f8c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	4608      	mov	r0, r1
 8006476:	4611      	mov	r1, r2
 8006478:	461a      	mov	r2, r3
 800647a:	4603      	mov	r3, r0
 800647c:	817b      	strh	r3, [r7, #10]
 800647e:	460b      	mov	r3, r1
 8006480:	813b      	strh	r3, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b20      	cmp	r3, #32
 8006490:	f040 80f9 	bne.w	8006686 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <HAL_I2C_Mem_Write+0x34>
 800649a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800649c:	2b00      	cmp	r3, #0
 800649e:	d105      	bne.n	80064ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e0ed      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_I2C_Mem_Write+0x4e>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e0e6      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064c2:	f7fe fa03 	bl	80048cc <HAL_GetTick>
 80064c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	2319      	movs	r3, #25
 80064ce:	2201      	movs	r2, #1
 80064d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fad1 	bl	8006a7c <I2C_WaitOnFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0d1      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2221      	movs	r2, #33	; 0x21
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2240      	movs	r2, #64	; 0x40
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a3a      	ldr	r2, [r7, #32]
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800650c:	88f8      	ldrh	r0, [r7, #6]
 800650e:	893a      	ldrh	r2, [r7, #8]
 8006510:	8979      	ldrh	r1, [r7, #10]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	4603      	mov	r3, r0
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f9e1 	bl	80068e4 <I2C_RequestMemoryWrite>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0a9      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	2bff      	cmp	r3, #255	; 0xff
 800653c:	d90e      	bls.n	800655c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	22ff      	movs	r2, #255	; 0xff
 8006542:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006548:	b2da      	uxtb	r2, r3
 800654a:	8979      	ldrh	r1, [r7, #10]
 800654c:	2300      	movs	r3, #0
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 fbb3 	bl	8006cc0 <I2C_TransferConfig>
 800655a:	e00f      	b.n	800657c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	b2da      	uxtb	r2, r3
 800656c:	8979      	ldrh	r1, [r7, #10]
 800656e:	2300      	movs	r3, #0
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fba2 	bl	8006cc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fabb 	bl	8006afc <I2C_WaitOnTXISFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e07b      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d034      	beq.n	8006634 <HAL_I2C_Mem_Write+0x1c8>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d130      	bne.n	8006634 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	2200      	movs	r2, #0
 80065da:	2180      	movs	r1, #128	; 0x80
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 fa4d 	bl	8006a7c <I2C_WaitOnFlagUntilTimeout>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e04d      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2bff      	cmp	r3, #255	; 0xff
 80065f4:	d90e      	bls.n	8006614 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	22ff      	movs	r2, #255	; 0xff
 80065fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006600:	b2da      	uxtb	r2, r3
 8006602:	8979      	ldrh	r1, [r7, #10]
 8006604:	2300      	movs	r3, #0
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fb57 	bl	8006cc0 <I2C_TransferConfig>
 8006612:	e00f      	b.n	8006634 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006622:	b2da      	uxtb	r2, r3
 8006624:	8979      	ldrh	r1, [r7, #10]
 8006626:	2300      	movs	r3, #0
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 fb46 	bl	8006cc0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d19e      	bne.n	800657c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fa9a 	bl	8006b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e01a      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2220      	movs	r2, #32
 8006658:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6859      	ldr	r1, [r3, #4]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <HAL_I2C_Mem_Write+0x224>)
 8006666:	400b      	ands	r3, r1
 8006668:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	e000      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006686:	2302      	movs	r3, #2
  }
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	fe00e800 	.word	0xfe00e800

08006694 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	4608      	mov	r0, r1
 800669e:	4611      	mov	r1, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	817b      	strh	r3, [r7, #10]
 80066a6:	460b      	mov	r3, r1
 80066a8:	813b      	strh	r3, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	f040 80fd 	bne.w	80068b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_I2C_Mem_Read+0x34>
 80066c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0f1      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_I2C_Mem_Read+0x4e>
 80066de:	2302      	movs	r3, #2
 80066e0:	e0ea      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066ea:	f7fe f8ef 	bl	80048cc <HAL_GetTick>
 80066ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	2319      	movs	r3, #25
 80066f6:	2201      	movs	r2, #1
 80066f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f9bd 	bl	8006a7c <I2C_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e0d5      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2222      	movs	r2, #34	; 0x22
 8006710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2240      	movs	r2, #64	; 0x40
 8006718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a3a      	ldr	r2, [r7, #32]
 8006726:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800672c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006734:	88f8      	ldrh	r0, [r7, #6]
 8006736:	893a      	ldrh	r2, [r7, #8]
 8006738:	8979      	ldrh	r1, [r7, #10]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	4603      	mov	r3, r0
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f921 	bl	800698c <I2C_RequestMemoryRead>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0ad      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006760:	b29b      	uxth	r3, r3
 8006762:	2bff      	cmp	r3, #255	; 0xff
 8006764:	d90e      	bls.n	8006784 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	22ff      	movs	r2, #255	; 0xff
 800676a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006770:	b2da      	uxtb	r2, r3
 8006772:	8979      	ldrh	r1, [r7, #10]
 8006774:	4b52      	ldr	r3, [pc, #328]	; (80068c0 <HAL_I2C_Mem_Read+0x22c>)
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fa9f 	bl	8006cc0 <I2C_TransferConfig>
 8006782:	e00f      	b.n	80067a4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006792:	b2da      	uxtb	r2, r3
 8006794:	8979      	ldrh	r1, [r7, #10]
 8006796:	4b4a      	ldr	r3, [pc, #296]	; (80068c0 <HAL_I2C_Mem_Read+0x22c>)
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fa8e 	bl	8006cc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	2200      	movs	r2, #0
 80067ac:	2104      	movs	r1, #4
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 f964 	bl	8006a7c <I2C_WaitOnFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e07c      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d034      	beq.n	8006864 <HAL_I2C_Mem_Read+0x1d0>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d130      	bne.n	8006864 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006808:	2200      	movs	r2, #0
 800680a:	2180      	movs	r1, #128	; 0x80
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 f935 	bl	8006a7c <I2C_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e04d      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006820:	b29b      	uxth	r3, r3
 8006822:	2bff      	cmp	r3, #255	; 0xff
 8006824:	d90e      	bls.n	8006844 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	22ff      	movs	r2, #255	; 0xff
 800682a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006830:	b2da      	uxtb	r2, r3
 8006832:	8979      	ldrh	r1, [r7, #10]
 8006834:	2300      	movs	r3, #0
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 fa3f 	bl	8006cc0 <I2C_TransferConfig>
 8006842:	e00f      	b.n	8006864 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006852:	b2da      	uxtb	r2, r3
 8006854:	8979      	ldrh	r1, [r7, #10]
 8006856:	2300      	movs	r3, #0
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 fa2e 	bl	8006cc0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d19a      	bne.n	80067a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 f982 	bl	8006b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e01a      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2220      	movs	r2, #32
 8006888:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6859      	ldr	r1, [r3, #4]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <HAL_I2C_Mem_Read+0x230>)
 8006896:	400b      	ands	r3, r1
 8006898:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2220      	movs	r2, #32
 800689e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	e000      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80068b6:	2302      	movs	r3, #2
  }
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	80002400 	.word	0x80002400
 80068c4:	fe00e800 	.word	0xfe00e800

080068c8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068d6:	b2db      	uxtb	r3, r3
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	4608      	mov	r0, r1
 80068ee:	4611      	mov	r1, r2
 80068f0:	461a      	mov	r2, r3
 80068f2:	4603      	mov	r3, r0
 80068f4:	817b      	strh	r3, [r7, #10]
 80068f6:	460b      	mov	r3, r1
 80068f8:	813b      	strh	r3, [r7, #8]
 80068fa:	4613      	mov	r3, r2
 80068fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80068fe:	88fb      	ldrh	r3, [r7, #6]
 8006900:	b2da      	uxtb	r2, r3
 8006902:	8979      	ldrh	r1, [r7, #10]
 8006904:	4b20      	ldr	r3, [pc, #128]	; (8006988 <I2C_RequestMemoryWrite+0xa4>)
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 f9d7 	bl	8006cc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	69b9      	ldr	r1, [r7, #24]
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 f8f0 	bl	8006afc <I2C_WaitOnTXISFlagUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e02c      	b.n	8006980 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006926:	88fb      	ldrh	r3, [r7, #6]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d105      	bne.n	8006938 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800692c:	893b      	ldrh	r3, [r7, #8]
 800692e:	b2da      	uxtb	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	629a      	str	r2, [r3, #40]	; 0x28
 8006936:	e015      	b.n	8006964 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006938:	893b      	ldrh	r3, [r7, #8]
 800693a:	0a1b      	lsrs	r3, r3, #8
 800693c:	b29b      	uxth	r3, r3
 800693e:	b2da      	uxtb	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	69b9      	ldr	r1, [r7, #24]
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f8d6 	bl	8006afc <I2C_WaitOnTXISFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e012      	b.n	8006980 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800695a:	893b      	ldrh	r3, [r7, #8]
 800695c:	b2da      	uxtb	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	2200      	movs	r2, #0
 800696c:	2180      	movs	r1, #128	; 0x80
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f884 	bl	8006a7c <I2C_WaitOnFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	80002000 	.word	0x80002000

0800698c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af02      	add	r7, sp, #8
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	4608      	mov	r0, r1
 8006996:	4611      	mov	r1, r2
 8006998:	461a      	mov	r2, r3
 800699a:	4603      	mov	r3, r0
 800699c:	817b      	strh	r3, [r7, #10]
 800699e:	460b      	mov	r3, r1
 80069a0:	813b      	strh	r3, [r7, #8]
 80069a2:	4613      	mov	r3, r2
 80069a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	8979      	ldrh	r1, [r7, #10]
 80069ac:	4b20      	ldr	r3, [pc, #128]	; (8006a30 <I2C_RequestMemoryRead+0xa4>)
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	2300      	movs	r3, #0
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f984 	bl	8006cc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069b8:	69fa      	ldr	r2, [r7, #28]
 80069ba:	69b9      	ldr	r1, [r7, #24]
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f89d 	bl	8006afc <I2C_WaitOnTXISFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e02c      	b.n	8006a26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069cc:	88fb      	ldrh	r3, [r7, #6]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d105      	bne.n	80069de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069d2:	893b      	ldrh	r3, [r7, #8]
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	629a      	str	r2, [r3, #40]	; 0x28
 80069dc:	e015      	b.n	8006a0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069de:	893b      	ldrh	r3, [r7, #8]
 80069e0:	0a1b      	lsrs	r3, r3, #8
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	69b9      	ldr	r1, [r7, #24]
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f883 	bl	8006afc <I2C_WaitOnTXISFlagUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e012      	b.n	8006a26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a00:	893b      	ldrh	r3, [r7, #8]
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2200      	movs	r2, #0
 8006a12:	2140      	movs	r1, #64	; 0x40
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f831 	bl	8006a7c <I2C_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	80002000 	.word	0x80002000

08006a34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d103      	bne.n	8006a52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d007      	beq.n	8006a70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0201 	orr.w	r2, r2, #1
 8006a6e:	619a      	str	r2, [r3, #24]
  }
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a8c:	e022      	b.n	8006ad4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d01e      	beq.n	8006ad4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a96:	f7fd ff19 	bl	80048cc <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d302      	bcc.n	8006aac <I2C_WaitOnFlagUntilTimeout+0x30>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d113      	bne.n	8006ad4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab0:	f043 0220 	orr.w	r2, r3, #32
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e00f      	b.n	8006af4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	4013      	ands	r3, r2
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	bf0c      	ite	eq
 8006ae4:	2301      	moveq	r3, #1
 8006ae6:	2300      	movne	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d0cd      	beq.n	8006a8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b08:	e02c      	b.n	8006b64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f870 	bl	8006bf4 <I2C_IsAcknowledgeFailed>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e02a      	b.n	8006b74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b24:	d01e      	beq.n	8006b64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b26:	f7fd fed1 	bl	80048cc <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d302      	bcc.n	8006b3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d113      	bne.n	8006b64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b40:	f043 0220 	orr.w	r2, r3, #32
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e007      	b.n	8006b74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d1cb      	bne.n	8006b0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b88:	e028      	b.n	8006bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 f830 	bl	8006bf4 <I2C_IsAcknowledgeFailed>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e026      	b.n	8006bec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b9e:	f7fd fe95 	bl	80048cc <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d302      	bcc.n	8006bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d113      	bne.n	8006bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb8:	f043 0220 	orr.w	r2, r3, #32
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e007      	b.n	8006bec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d1cf      	bne.n	8006b8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	f003 0310 	and.w	r3, r3, #16
 8006c0a:	2b10      	cmp	r3, #16
 8006c0c:	d151      	bne.n	8006cb2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c0e:	e022      	b.n	8006c56 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c16:	d01e      	beq.n	8006c56 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c18:	f7fd fe58 	bl	80048cc <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d302      	bcc.n	8006c2e <I2C_IsAcknowledgeFailed+0x3a>
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d113      	bne.n	8006c56 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c32:	f043 0220 	orr.w	r2, r3, #32
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e02e      	b.n	8006cb4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	f003 0320 	and.w	r3, r3, #32
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d1d5      	bne.n	8006c10 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2210      	movs	r2, #16
 8006c6a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2220      	movs	r2, #32
 8006c72:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f7ff fedd 	bl	8006a34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6859      	ldr	r1, [r3, #4]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <I2C_IsAcknowledgeFailed+0xc8>)
 8006c86:	400b      	ands	r3, r1
 8006c88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8e:	f043 0204 	orr.w	r2, r3, #4
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	fe00e800 	.word	0xfe00e800

08006cc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	607b      	str	r3, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	817b      	strh	r3, [r7, #10]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	0d5b      	lsrs	r3, r3, #21
 8006cdc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ce0:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <I2C_TransferConfig+0x58>)
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	43db      	mvns	r3, r3
 8006ce6:	ea02 0103 	and.w	r1, r2, r3
 8006cea:	897b      	ldrh	r3, [r7, #10]
 8006cec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006cf0:	7a7b      	ldrb	r3, [r7, #9]
 8006cf2:	041b      	lsls	r3, r3, #16
 8006cf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	431a      	orrs	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	03ff63ff 	.word	0x03ff63ff

08006d1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	d138      	bne.n	8006da4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d101      	bne.n	8006d40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e032      	b.n	8006da6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2224      	movs	r2, #36	; 0x24
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6819      	ldr	r1, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e000      	b.n	8006da6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006da4:	2302      	movs	r3, #2
  }
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d139      	bne.n	8006e3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e033      	b.n	8006e3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2224      	movs	r2, #36	; 0x24
 8006de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0201 	bic.w	r2, r2, #1
 8006df4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e000      	b.n	8006e3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e3c:	2302      	movs	r3, #2
  }
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e0bf      	b.n	8006fde <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fd f8c6 	bl	8004004 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699a      	ldr	r2, [r3, #24]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006e8e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6999      	ldr	r1, [r3, #24]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ea4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6899      	ldr	r1, [r3, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b4a      	ldr	r3, [pc, #296]	; (8006fe8 <HAL_LTDC_Init+0x19c>)
 8006ec0:	400b      	ands	r3, r1
 8006ec2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	041b      	lsls	r3, r3, #16
 8006eca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6899      	ldr	r1, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68d9      	ldr	r1, [r3, #12]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	4b3e      	ldr	r3, [pc, #248]	; (8006fe8 <HAL_LTDC_Init+0x19c>)
 8006eee:	400b      	ands	r3, r1
 8006ef0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	041b      	lsls	r3, r3, #16
 8006ef8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68d9      	ldr	r1, [r3, #12]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1a      	ldr	r2, [r3, #32]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6919      	ldr	r1, [r3, #16]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b33      	ldr	r3, [pc, #204]	; (8006fe8 <HAL_LTDC_Init+0x19c>)
 8006f1c:	400b      	ands	r3, r1
 8006f1e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	041b      	lsls	r3, r3, #16
 8006f26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6919      	ldr	r1, [r3, #16]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6959      	ldr	r1, [r3, #20]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	4b27      	ldr	r3, [pc, #156]	; (8006fe8 <HAL_LTDC_Init+0x19c>)
 8006f4a:	400b      	ands	r3, r1
 8006f4c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	041b      	lsls	r3, r3, #16
 8006f54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6959      	ldr	r1, [r3, #20]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f72:	021b      	lsls	r3, r3, #8
 8006f74:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006f7c:	041b      	lsls	r3, r3, #16
 8006f7e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0206 	orr.w	r2, r2, #6
 8006fba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	f000f800 	.word	0xf000f800

08006fec <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007002:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d023      	beq.n	8007056 <HAL_LTDC_IRQHandler+0x6a>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01e      	beq.n	8007056 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0204 	bic.w	r2, r2, #4
 8007026:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2204      	movs	r2, #4
 800702e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007036:	f043 0201 	orr.w	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2204      	movs	r2, #4
 8007044:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f86f 	bl	8007134 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d023      	beq.n	80070a8 <HAL_LTDC_IRQHandler+0xbc>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01e      	beq.n	80070a8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0202 	bic.w	r2, r2, #2
 8007078:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2202      	movs	r2, #2
 8007080:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007088:	f043 0202 	orr.w	r2, r3, #2
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2204      	movs	r2, #4
 8007096:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f846 	bl	8007134 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d01b      	beq.n	80070ea <HAL_LTDC_IRQHandler+0xfe>
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d016      	beq.n	80070ea <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0201 	bic.w	r2, r2, #1
 80070ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2201      	movs	r2, #1
 80070d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f82f 	bl	8007148 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01b      	beq.n	800712c <HAL_LTDC_IRQHandler+0x140>
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d016      	beq.n	800712c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0208 	bic.w	r2, r2, #8
 800710c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2208      	movs	r2, #8
 8007114:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f818 	bl	800715c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007170:	b5b0      	push	{r4, r5, r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <HAL_LTDC_ConfigLayer+0x1a>
 8007186:	2302      	movs	r3, #2
 8007188:	e02c      	b.n	80071e4 <HAL_LTDC_ConfigLayer+0x74>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2134      	movs	r1, #52	; 0x34
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	4413      	add	r3, r2
 80071a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	4614      	mov	r4, r2
 80071ae:	461d      	mov	r5, r3
 80071b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f81f 	bl	8007208 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2201      	movs	r2, #1
 80071d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bdb0      	pop	{r4, r5, r7, pc}

080071ec <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80071fa:	b2db      	uxtb	r3, r3
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007208:	b480      	push	{r7}
 800720a:	b089      	sub	sp, #36	; 0x24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	0c1b      	lsrs	r3, r3, #16
 8007220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007224:	4413      	add	r3, r2
 8007226:	041b      	lsls	r3, r3, #16
 8007228:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	01db      	lsls	r3, r3, #7
 8007234:	4413      	add	r3, r2
 8007236:	3384      	adds	r3, #132	; 0x84
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	6812      	ldr	r2, [r2, #0]
 800723e:	4611      	mov	r1, r2
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	01d2      	lsls	r2, r2, #7
 8007244:	440a      	add	r2, r1
 8007246:	3284      	adds	r2, #132	; 0x84
 8007248:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800724c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800725e:	4413      	add	r3, r2
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4619      	mov	r1, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	01db      	lsls	r3, r3, #7
 800726c:	440b      	add	r3, r1
 800726e:	3384      	adds	r3, #132	; 0x84
 8007270:	4619      	mov	r1, r3
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4313      	orrs	r3, r2
 8007276:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007286:	4413      	add	r3, r2
 8007288:	041b      	lsls	r3, r3, #16
 800728a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	461a      	mov	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	01db      	lsls	r3, r3, #7
 8007296:	4413      	add	r3, r2
 8007298:	3384      	adds	r3, #132	; 0x84
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	4611      	mov	r1, r2
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	01d2      	lsls	r2, r2, #7
 80072a6:	440a      	add	r2, r1
 80072a8:	3284      	adds	r2, #132	; 0x84
 80072aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80072ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072be:	4413      	add	r3, r2
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4619      	mov	r1, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	01db      	lsls	r3, r3, #7
 80072cc:	440b      	add	r3, r1
 80072ce:	3384      	adds	r3, #132	; 0x84
 80072d0:	4619      	mov	r1, r3
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	461a      	mov	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	01db      	lsls	r3, r3, #7
 80072e2:	4413      	add	r3, r2
 80072e4:	3384      	adds	r3, #132	; 0x84
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	6812      	ldr	r2, [r2, #0]
 80072ec:	4611      	mov	r1, r2
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	01d2      	lsls	r2, r2, #7
 80072f2:	440a      	add	r2, r1
 80072f4:	3284      	adds	r2, #132	; 0x84
 80072f6:	f023 0307 	bic.w	r3, r3, #7
 80072fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	01db      	lsls	r3, r3, #7
 8007306:	4413      	add	r3, r2
 8007308:	3384      	adds	r3, #132	; 0x84
 800730a:	461a      	mov	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007318:	021b      	lsls	r3, r3, #8
 800731a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007322:	041b      	lsls	r3, r3, #16
 8007324:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	061b      	lsls	r3, r3, #24
 800732c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	01db      	lsls	r3, r3, #7
 8007338:	4413      	add	r3, r2
 800733a:	3384      	adds	r3, #132	; 0x84
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	01db      	lsls	r3, r3, #7
 8007348:	4413      	add	r3, r2
 800734a:	3384      	adds	r3, #132	; 0x84
 800734c:	461a      	mov	r2, r3
 800734e:	2300      	movs	r3, #0
 8007350:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007358:	461a      	mov	r2, r3
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	431a      	orrs	r2, r3
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	431a      	orrs	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4619      	mov	r1, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	01db      	lsls	r3, r3, #7
 800736c:	440b      	add	r3, r1
 800736e:	3384      	adds	r3, #132	; 0x84
 8007370:	4619      	mov	r1, r3
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	01db      	lsls	r3, r3, #7
 8007382:	4413      	add	r3, r2
 8007384:	3384      	adds	r3, #132	; 0x84
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	4611      	mov	r1, r2
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	01d2      	lsls	r2, r2, #7
 8007392:	440a      	add	r2, r1
 8007394:	3284      	adds	r2, #132	; 0x84
 8007396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800739a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	01db      	lsls	r3, r3, #7
 80073a6:	4413      	add	r3, r2
 80073a8:	3384      	adds	r3, #132	; 0x84
 80073aa:	461a      	mov	r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	01db      	lsls	r3, r3, #7
 80073bc:	4413      	add	r3, r2
 80073be:	3384      	adds	r3, #132	; 0x84
 80073c0:	69da      	ldr	r2, [r3, #28]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4619      	mov	r1, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	01db      	lsls	r3, r3, #7
 80073cc:	440b      	add	r3, r1
 80073ce:	3384      	adds	r3, #132	; 0x84
 80073d0:	4619      	mov	r1, r3
 80073d2:	4b58      	ldr	r3, [pc, #352]	; (8007534 <LTDC_SetConfig+0x32c>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	69da      	ldr	r2, [r3, #28]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	68f9      	ldr	r1, [r7, #12]
 80073e2:	6809      	ldr	r1, [r1, #0]
 80073e4:	4608      	mov	r0, r1
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	01c9      	lsls	r1, r1, #7
 80073ea:	4401      	add	r1, r0
 80073ec:	3184      	adds	r1, #132	; 0x84
 80073ee:	4313      	orrs	r3, r2
 80073f0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	01db      	lsls	r3, r3, #7
 80073fc:	4413      	add	r3, r2
 80073fe:	3384      	adds	r3, #132	; 0x84
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	01db      	lsls	r3, r3, #7
 800740c:	4413      	add	r3, r2
 800740e:	3384      	adds	r3, #132	; 0x84
 8007410:	461a      	mov	r2, r3
 8007412:	2300      	movs	r3, #0
 8007414:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	01db      	lsls	r3, r3, #7
 8007420:	4413      	add	r3, r2
 8007422:	3384      	adds	r3, #132	; 0x84
 8007424:	461a      	mov	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007434:	2304      	movs	r3, #4
 8007436:	61fb      	str	r3, [r7, #28]
 8007438:	e01b      	b.n	8007472 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d102      	bne.n	8007448 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007442:	2303      	movs	r3, #3
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	e014      	b.n	8007472 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b04      	cmp	r3, #4
 800744e:	d00b      	beq.n	8007468 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007454:	2b02      	cmp	r3, #2
 8007456:	d007      	beq.n	8007468 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800745c:	2b03      	cmp	r3, #3
 800745e:	d003      	beq.n	8007468 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007464:	2b07      	cmp	r3, #7
 8007466:	d102      	bne.n	800746e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007468:	2302      	movs	r3, #2
 800746a:	61fb      	str	r3, [r7, #28]
 800746c:	e001      	b.n	8007472 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800746e:	2301      	movs	r3, #1
 8007470:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	01db      	lsls	r3, r3, #7
 800747c:	4413      	add	r3, r2
 800747e:	3384      	adds	r3, #132	; 0x84
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	6812      	ldr	r2, [r2, #0]
 8007486:	4611      	mov	r1, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	01d2      	lsls	r2, r2, #7
 800748c:	440a      	add	r2, r1
 800748e:	3284      	adds	r2, #132	; 0x84
 8007490:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007494:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	fb02 f303 	mul.w	r3, r2, r3
 80074a0:	041a      	lsls	r2, r3, #16
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6859      	ldr	r1, [r3, #4]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	1acb      	subs	r3, r1, r3
 80074ac:	69f9      	ldr	r1, [r7, #28]
 80074ae:	fb01 f303 	mul.w	r3, r1, r3
 80074b2:	3303      	adds	r3, #3
 80074b4:	68f9      	ldr	r1, [r7, #12]
 80074b6:	6809      	ldr	r1, [r1, #0]
 80074b8:	4608      	mov	r0, r1
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	01c9      	lsls	r1, r1, #7
 80074be:	4401      	add	r1, r0
 80074c0:	3184      	adds	r1, #132	; 0x84
 80074c2:	4313      	orrs	r3, r2
 80074c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	01db      	lsls	r3, r3, #7
 80074d0:	4413      	add	r3, r2
 80074d2:	3384      	adds	r3, #132	; 0x84
 80074d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4619      	mov	r1, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	01db      	lsls	r3, r3, #7
 80074e0:	440b      	add	r3, r1
 80074e2:	3384      	adds	r3, #132	; 0x84
 80074e4:	4619      	mov	r1, r3
 80074e6:	4b14      	ldr	r3, [pc, #80]	; (8007538 <LTDC_SetConfig+0x330>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	461a      	mov	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	01db      	lsls	r3, r3, #7
 80074f6:	4413      	add	r3, r2
 80074f8:	3384      	adds	r3, #132	; 0x84
 80074fa:	461a      	mov	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	01db      	lsls	r3, r3, #7
 800750c:	4413      	add	r3, r2
 800750e:	3384      	adds	r3, #132	; 0x84
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	6812      	ldr	r2, [r2, #0]
 8007516:	4611      	mov	r1, r2
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	01d2      	lsls	r2, r2, #7
 800751c:	440a      	add	r2, r1
 800751e:	3284      	adds	r2, #132	; 0x84
 8007520:	f043 0301 	orr.w	r3, r3, #1
 8007524:	6013      	str	r3, [r2, #0]
}
 8007526:	bf00      	nop
 8007528:	3724      	adds	r7, #36	; 0x24
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	fffff8f8 	.word	0xfffff8f8
 8007538:	fffff800 	.word	0xfffff800

0800753c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a04      	ldr	r2, [pc, #16]	; (8007558 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800754a:	6013      	str	r3, [r2, #0]
}
 800754c:	bf00      	nop
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	40007000 	.word	0x40007000

0800755c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007566:	4b23      	ldr	r3, [pc, #140]	; (80075f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	4a22      	ldr	r2, [pc, #136]	; (80075f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800756c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007570:	6413      	str	r3, [r2, #64]	; 0x40
 8007572:	4b20      	ldr	r3, [pc, #128]	; (80075f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800757e:	4b1e      	ldr	r3, [pc, #120]	; (80075f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a1d      	ldr	r2, [pc, #116]	; (80075f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007588:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800758a:	f7fd f99f 	bl	80048cc <HAL_GetTick>
 800758e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007590:	e009      	b.n	80075a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007592:	f7fd f99b 	bl	80048cc <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075a0:	d901      	bls.n	80075a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e022      	b.n	80075ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80075a6:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b2:	d1ee      	bne.n	8007592 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80075b4:	4b10      	ldr	r3, [pc, #64]	; (80075f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a0f      	ldr	r2, [pc, #60]	; (80075f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075c0:	f7fd f984 	bl	80048cc <HAL_GetTick>
 80075c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075c6:	e009      	b.n	80075dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80075c8:	f7fd f980 	bl	80048cc <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075d6:	d901      	bls.n	80075dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e007      	b.n	80075ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075dc:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075e8:	d1ee      	bne.n	80075c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	40023800 	.word	0x40023800
 80075f8:	40007000 	.word	0x40007000

080075fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007604:	2300      	movs	r3, #0
 8007606:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e291      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 8087 	beq.w	800772e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007620:	4b96      	ldr	r3, [pc, #600]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f003 030c 	and.w	r3, r3, #12
 8007628:	2b04      	cmp	r3, #4
 800762a:	d00c      	beq.n	8007646 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800762c:	4b93      	ldr	r3, [pc, #588]	; (800787c <HAL_RCC_OscConfig+0x280>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f003 030c 	and.w	r3, r3, #12
 8007634:	2b08      	cmp	r3, #8
 8007636:	d112      	bne.n	800765e <HAL_RCC_OscConfig+0x62>
 8007638:	4b90      	ldr	r3, [pc, #576]	; (800787c <HAL_RCC_OscConfig+0x280>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007644:	d10b      	bne.n	800765e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007646:	4b8d      	ldr	r3, [pc, #564]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d06c      	beq.n	800772c <HAL_RCC_OscConfig+0x130>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d168      	bne.n	800772c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e26b      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007666:	d106      	bne.n	8007676 <HAL_RCC_OscConfig+0x7a>
 8007668:	4b84      	ldr	r3, [pc, #528]	; (800787c <HAL_RCC_OscConfig+0x280>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a83      	ldr	r2, [pc, #524]	; (800787c <HAL_RCC_OscConfig+0x280>)
 800766e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	e02e      	b.n	80076d4 <HAL_RCC_OscConfig+0xd8>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10c      	bne.n	8007698 <HAL_RCC_OscConfig+0x9c>
 800767e:	4b7f      	ldr	r3, [pc, #508]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a7e      	ldr	r2, [pc, #504]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	4b7c      	ldr	r3, [pc, #496]	; (800787c <HAL_RCC_OscConfig+0x280>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a7b      	ldr	r2, [pc, #492]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	e01d      	b.n	80076d4 <HAL_RCC_OscConfig+0xd8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076a0:	d10c      	bne.n	80076bc <HAL_RCC_OscConfig+0xc0>
 80076a2:	4b76      	ldr	r3, [pc, #472]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a75      	ldr	r2, [pc, #468]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80076a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	4b73      	ldr	r3, [pc, #460]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a72      	ldr	r2, [pc, #456]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80076b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	e00b      	b.n	80076d4 <HAL_RCC_OscConfig+0xd8>
 80076bc:	4b6f      	ldr	r3, [pc, #444]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a6e      	ldr	r2, [pc, #440]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80076c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	4b6c      	ldr	r3, [pc, #432]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a6b      	ldr	r2, [pc, #428]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80076ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d013      	beq.n	8007704 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076dc:	f7fd f8f6 	bl	80048cc <HAL_GetTick>
 80076e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076e2:	e008      	b.n	80076f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076e4:	f7fd f8f2 	bl	80048cc <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b64      	cmp	r3, #100	; 0x64
 80076f0:	d901      	bls.n	80076f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e21f      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076f6:	4b61      	ldr	r3, [pc, #388]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0f0      	beq.n	80076e4 <HAL_RCC_OscConfig+0xe8>
 8007702:	e014      	b.n	800772e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007704:	f7fd f8e2 	bl	80048cc <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800770a:	e008      	b.n	800771e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800770c:	f7fd f8de 	bl	80048cc <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b64      	cmp	r3, #100	; 0x64
 8007718:	d901      	bls.n	800771e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e20b      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800771e:	4b57      	ldr	r3, [pc, #348]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1f0      	bne.n	800770c <HAL_RCC_OscConfig+0x110>
 800772a:	e000      	b.n	800772e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800772c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d069      	beq.n	800780e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800773a:	4b50      	ldr	r3, [pc, #320]	; (800787c <HAL_RCC_OscConfig+0x280>)
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f003 030c 	and.w	r3, r3, #12
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00b      	beq.n	800775e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007746:	4b4d      	ldr	r3, [pc, #308]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 030c 	and.w	r3, r3, #12
 800774e:	2b08      	cmp	r3, #8
 8007750:	d11c      	bne.n	800778c <HAL_RCC_OscConfig+0x190>
 8007752:	4b4a      	ldr	r3, [pc, #296]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d116      	bne.n	800778c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800775e:	4b47      	ldr	r3, [pc, #284]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d005      	beq.n	8007776 <HAL_RCC_OscConfig+0x17a>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d001      	beq.n	8007776 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e1df      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007776:	4b41      	ldr	r3, [pc, #260]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	493d      	ldr	r1, [pc, #244]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007786:	4313      	orrs	r3, r2
 8007788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800778a:	e040      	b.n	800780e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d023      	beq.n	80077dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007794:	4b39      	ldr	r3, [pc, #228]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a38      	ldr	r2, [pc, #224]	; (800787c <HAL_RCC_OscConfig+0x280>)
 800779a:	f043 0301 	orr.w	r3, r3, #1
 800779e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a0:	f7fd f894 	bl	80048cc <HAL_GetTick>
 80077a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077a6:	e008      	b.n	80077ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077a8:	f7fd f890 	bl	80048cc <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e1bd      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077ba:	4b30      	ldr	r3, [pc, #192]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0f0      	beq.n	80077a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077c6:	4b2d      	ldr	r3, [pc, #180]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	4929      	ldr	r1, [pc, #164]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	600b      	str	r3, [r1, #0]
 80077da:	e018      	b.n	800780e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077dc:	4b27      	ldr	r3, [pc, #156]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a26      	ldr	r2, [pc, #152]	; (800787c <HAL_RCC_OscConfig+0x280>)
 80077e2:	f023 0301 	bic.w	r3, r3, #1
 80077e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e8:	f7fd f870 	bl	80048cc <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077f0:	f7fd f86c 	bl	80048cc <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e199      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007802:	4b1e      	ldr	r3, [pc, #120]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1f0      	bne.n	80077f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b00      	cmp	r3, #0
 8007818:	d038      	beq.n	800788c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d019      	beq.n	8007856 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007822:	4b16      	ldr	r3, [pc, #88]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007826:	4a15      	ldr	r2, [pc, #84]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007828:	f043 0301 	orr.w	r3, r3, #1
 800782c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800782e:	f7fd f84d 	bl	80048cc <HAL_GetTick>
 8007832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007834:	e008      	b.n	8007848 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007836:	f7fd f849 	bl	80048cc <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e176      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007848:	4b0c      	ldr	r3, [pc, #48]	; (800787c <HAL_RCC_OscConfig+0x280>)
 800784a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0f0      	beq.n	8007836 <HAL_RCC_OscConfig+0x23a>
 8007854:	e01a      	b.n	800788c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007856:	4b09      	ldr	r3, [pc, #36]	; (800787c <HAL_RCC_OscConfig+0x280>)
 8007858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800785a:	4a08      	ldr	r2, [pc, #32]	; (800787c <HAL_RCC_OscConfig+0x280>)
 800785c:	f023 0301 	bic.w	r3, r3, #1
 8007860:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007862:	f7fd f833 	bl	80048cc <HAL_GetTick>
 8007866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007868:	e00a      	b.n	8007880 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800786a:	f7fd f82f 	bl	80048cc <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d903      	bls.n	8007880 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e15c      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
 800787c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007880:	4b91      	ldr	r3, [pc, #580]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1ee      	bne.n	800786a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 80a4 	beq.w	80079e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800789a:	4b8b      	ldr	r3, [pc, #556]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10d      	bne.n	80078c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80078a6:	4b88      	ldr	r3, [pc, #544]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	4a87      	ldr	r2, [pc, #540]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 80078ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b0:	6413      	str	r3, [r2, #64]	; 0x40
 80078b2:	4b85      	ldr	r3, [pc, #532]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ba:	60bb      	str	r3, [r7, #8]
 80078bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078be:	2301      	movs	r3, #1
 80078c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078c2:	4b82      	ldr	r3, [pc, #520]	; (8007acc <HAL_RCC_OscConfig+0x4d0>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d118      	bne.n	8007900 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80078ce:	4b7f      	ldr	r3, [pc, #508]	; (8007acc <HAL_RCC_OscConfig+0x4d0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a7e      	ldr	r2, [pc, #504]	; (8007acc <HAL_RCC_OscConfig+0x4d0>)
 80078d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078da:	f7fc fff7 	bl	80048cc <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078e2:	f7fc fff3 	bl	80048cc <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b64      	cmp	r3, #100	; 0x64
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e120      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078f4:	4b75      	ldr	r3, [pc, #468]	; (8007acc <HAL_RCC_OscConfig+0x4d0>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0f0      	beq.n	80078e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d106      	bne.n	8007916 <HAL_RCC_OscConfig+0x31a>
 8007908:	4b6f      	ldr	r3, [pc, #444]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 800790a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790c:	4a6e      	ldr	r2, [pc, #440]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 800790e:	f043 0301 	orr.w	r3, r3, #1
 8007912:	6713      	str	r3, [r2, #112]	; 0x70
 8007914:	e02d      	b.n	8007972 <HAL_RCC_OscConfig+0x376>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10c      	bne.n	8007938 <HAL_RCC_OscConfig+0x33c>
 800791e:	4b6a      	ldr	r3, [pc, #424]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007922:	4a69      	ldr	r2, [pc, #420]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007924:	f023 0301 	bic.w	r3, r3, #1
 8007928:	6713      	str	r3, [r2, #112]	; 0x70
 800792a:	4b67      	ldr	r3, [pc, #412]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 800792c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792e:	4a66      	ldr	r2, [pc, #408]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007930:	f023 0304 	bic.w	r3, r3, #4
 8007934:	6713      	str	r3, [r2, #112]	; 0x70
 8007936:	e01c      	b.n	8007972 <HAL_RCC_OscConfig+0x376>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	2b05      	cmp	r3, #5
 800793e:	d10c      	bne.n	800795a <HAL_RCC_OscConfig+0x35e>
 8007940:	4b61      	ldr	r3, [pc, #388]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007944:	4a60      	ldr	r2, [pc, #384]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007946:	f043 0304 	orr.w	r3, r3, #4
 800794a:	6713      	str	r3, [r2, #112]	; 0x70
 800794c:	4b5e      	ldr	r3, [pc, #376]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 800794e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007950:	4a5d      	ldr	r2, [pc, #372]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	6713      	str	r3, [r2, #112]	; 0x70
 8007958:	e00b      	b.n	8007972 <HAL_RCC_OscConfig+0x376>
 800795a:	4b5b      	ldr	r3, [pc, #364]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 800795c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795e:	4a5a      	ldr	r2, [pc, #360]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007960:	f023 0301 	bic.w	r3, r3, #1
 8007964:	6713      	str	r3, [r2, #112]	; 0x70
 8007966:	4b58      	ldr	r3, [pc, #352]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796a:	4a57      	ldr	r2, [pc, #348]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 800796c:	f023 0304 	bic.w	r3, r3, #4
 8007970:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d015      	beq.n	80079a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800797a:	f7fc ffa7 	bl	80048cc <HAL_GetTick>
 800797e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007980:	e00a      	b.n	8007998 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007982:	f7fc ffa3 	bl	80048cc <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007990:	4293      	cmp	r3, r2
 8007992:	d901      	bls.n	8007998 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e0ce      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007998:	4b4b      	ldr	r3, [pc, #300]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 800799a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0ee      	beq.n	8007982 <HAL_RCC_OscConfig+0x386>
 80079a4:	e014      	b.n	80079d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a6:	f7fc ff91 	bl	80048cc <HAL_GetTick>
 80079aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079ac:	e00a      	b.n	80079c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ae:	f7fc ff8d 	bl	80048cc <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079bc:	4293      	cmp	r3, r2
 80079be:	d901      	bls.n	80079c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e0b8      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079c4:	4b40      	ldr	r3, [pc, #256]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 80079c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1ee      	bne.n	80079ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d105      	bne.n	80079e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079d6:	4b3c      	ldr	r3, [pc, #240]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	4a3b      	ldr	r2, [pc, #236]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 80079dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 80a4 	beq.w	8007b34 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079ec:	4b36      	ldr	r3, [pc, #216]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 030c 	and.w	r3, r3, #12
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d06b      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d149      	bne.n	8007a94 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a00:	4b31      	ldr	r3, [pc, #196]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a30      	ldr	r2, [pc, #192]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0c:	f7fc ff5e 	bl	80048cc <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a14:	f7fc ff5a 	bl	80048cc <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e087      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a26:	4b28      	ldr	r3, [pc, #160]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f0      	bne.n	8007a14 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69da      	ldr	r2, [r3, #28]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	019b      	lsls	r3, r3, #6
 8007a42:	431a      	orrs	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	041b      	lsls	r3, r3, #16
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	061b      	lsls	r3, r3, #24
 8007a56:	4313      	orrs	r3, r2
 8007a58:	4a1b      	ldr	r2, [pc, #108]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007a5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a5e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a60:	4b19      	ldr	r3, [pc, #100]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a18      	ldr	r2, [pc, #96]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a6c:	f7fc ff2e 	bl	80048cc <HAL_GetTick>
 8007a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a72:	e008      	b.n	8007a86 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a74:	f7fc ff2a 	bl	80048cc <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d901      	bls.n	8007a86 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e057      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a86:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0f0      	beq.n	8007a74 <HAL_RCC_OscConfig+0x478>
 8007a92:	e04f      	b.n	8007b34 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a94:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a0b      	ldr	r2, [pc, #44]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa0:	f7fc ff14 	bl	80048cc <HAL_GetTick>
 8007aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aa6:	e008      	b.n	8007aba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa8:	f7fc ff10 	bl	80048cc <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e03d      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aba:	4b03      	ldr	r3, [pc, #12]	; (8007ac8 <HAL_RCC_OscConfig+0x4cc>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1f0      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x4ac>
 8007ac6:	e035      	b.n	8007b34 <HAL_RCC_OscConfig+0x538>
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007ad0:	4b1b      	ldr	r3, [pc, #108]	; (8007b40 <HAL_RCC_OscConfig+0x544>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d028      	beq.n	8007b30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d121      	bne.n	8007b30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d11a      	bne.n	8007b30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b00:	4013      	ands	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d111      	bne.n	8007b30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b16:	085b      	lsrs	r3, r3, #1
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d107      	bne.n	8007b30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d001      	beq.n	8007b34 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	40023800 	.word	0x40023800

08007b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e0d0      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b5c:	4b6a      	ldr	r3, [pc, #424]	; (8007d08 <HAL_RCC_ClockConfig+0x1c4>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 030f 	and.w	r3, r3, #15
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d910      	bls.n	8007b8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b6a:	4b67      	ldr	r3, [pc, #412]	; (8007d08 <HAL_RCC_ClockConfig+0x1c4>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f023 020f 	bic.w	r2, r3, #15
 8007b72:	4965      	ldr	r1, [pc, #404]	; (8007d08 <HAL_RCC_ClockConfig+0x1c4>)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b7a:	4b63      	ldr	r3, [pc, #396]	; (8007d08 <HAL_RCC_ClockConfig+0x1c4>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d001      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e0b8      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d020      	beq.n	8007bda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ba4:	4b59      	ldr	r3, [pc, #356]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	4a58      	ldr	r2, [pc, #352]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007bae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bbc:	4b53      	ldr	r3, [pc, #332]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	4a52      	ldr	r2, [pc, #328]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bc8:	4b50      	ldr	r3, [pc, #320]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	494d      	ldr	r1, [pc, #308]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d040      	beq.n	8007c68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d107      	bne.n	8007bfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bee:	4b47      	ldr	r3, [pc, #284]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d115      	bne.n	8007c26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e07f      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d107      	bne.n	8007c16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c06:	4b41      	ldr	r3, [pc, #260]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d109      	bne.n	8007c26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e073      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c16:	4b3d      	ldr	r3, [pc, #244]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e06b      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c26:	4b39      	ldr	r3, [pc, #228]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f023 0203 	bic.w	r2, r3, #3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	4936      	ldr	r1, [pc, #216]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c38:	f7fc fe48 	bl	80048cc <HAL_GetTick>
 8007c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c3e:	e00a      	b.n	8007c56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c40:	f7fc fe44 	bl	80048cc <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e053      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c56:	4b2d      	ldr	r3, [pc, #180]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f003 020c 	and.w	r2, r3, #12
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d1eb      	bne.n	8007c40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c68:	4b27      	ldr	r3, [pc, #156]	; (8007d08 <HAL_RCC_ClockConfig+0x1c4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d210      	bcs.n	8007c98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c76:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <HAL_RCC_ClockConfig+0x1c4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f023 020f 	bic.w	r2, r3, #15
 8007c7e:	4922      	ldr	r1, [pc, #136]	; (8007d08 <HAL_RCC_ClockConfig+0x1c4>)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c86:	4b20      	ldr	r3, [pc, #128]	; (8007d08 <HAL_RCC_ClockConfig+0x1c4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 030f 	and.w	r3, r3, #15
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d001      	beq.n	8007c98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e032      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0304 	and.w	r3, r3, #4
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d008      	beq.n	8007cb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ca4:	4b19      	ldr	r3, [pc, #100]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	4916      	ldr	r1, [pc, #88]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d009      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007cc2:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	490e      	ldr	r1, [pc, #56]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007cd6:	f000 f821 	bl	8007d1c <HAL_RCC_GetSysClockFreq>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	091b      	lsrs	r3, r3, #4
 8007ce2:	f003 030f 	and.w	r3, r3, #15
 8007ce6:	490a      	ldr	r1, [pc, #40]	; (8007d10 <HAL_RCC_ClockConfig+0x1cc>)
 8007ce8:	5ccb      	ldrb	r3, [r1, r3]
 8007cea:	fa22 f303 	lsr.w	r3, r2, r3
 8007cee:	4a09      	ldr	r2, [pc, #36]	; (8007d14 <HAL_RCC_ClockConfig+0x1d0>)
 8007cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007cf2:	4b09      	ldr	r3, [pc, #36]	; (8007d18 <HAL_RCC_ClockConfig+0x1d4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fc fcee 	bl	80046d8 <HAL_InitTick>

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	40023c00 	.word	0x40023c00
 8007d0c:	40023800 	.word	0x40023800
 8007d10:	0800fd14 	.word	0x0800fd14
 8007d14:	20000048 	.word	0x20000048
 8007d18:	2000004c 	.word	0x2000004c

08007d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d1c:	b5b0      	push	{r4, r5, r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007d22:	2100      	movs	r1, #0
 8007d24:	6079      	str	r1, [r7, #4]
 8007d26:	2100      	movs	r1, #0
 8007d28:	60f9      	str	r1, [r7, #12]
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007d2e:	2100      	movs	r1, #0
 8007d30:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d32:	4952      	ldr	r1, [pc, #328]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x160>)
 8007d34:	6889      	ldr	r1, [r1, #8]
 8007d36:	f001 010c 	and.w	r1, r1, #12
 8007d3a:	2908      	cmp	r1, #8
 8007d3c:	d00d      	beq.n	8007d5a <HAL_RCC_GetSysClockFreq+0x3e>
 8007d3e:	2908      	cmp	r1, #8
 8007d40:	f200 8094 	bhi.w	8007e6c <HAL_RCC_GetSysClockFreq+0x150>
 8007d44:	2900      	cmp	r1, #0
 8007d46:	d002      	beq.n	8007d4e <HAL_RCC_GetSysClockFreq+0x32>
 8007d48:	2904      	cmp	r1, #4
 8007d4a:	d003      	beq.n	8007d54 <HAL_RCC_GetSysClockFreq+0x38>
 8007d4c:	e08e      	b.n	8007e6c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d4e:	4b4c      	ldr	r3, [pc, #304]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x164>)
 8007d50:	60bb      	str	r3, [r7, #8]
      break;
 8007d52:	e08e      	b.n	8007e72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d54:	4b4b      	ldr	r3, [pc, #300]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d56:	60bb      	str	r3, [r7, #8]
      break;
 8007d58:	e08b      	b.n	8007e72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d5a:	4948      	ldr	r1, [pc, #288]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x160>)
 8007d5c:	6849      	ldr	r1, [r1, #4]
 8007d5e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007d62:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007d64:	4945      	ldr	r1, [pc, #276]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x160>)
 8007d66:	6849      	ldr	r1, [r1, #4]
 8007d68:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	d024      	beq.n	8007dba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d70:	4942      	ldr	r1, [pc, #264]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x160>)
 8007d72:	6849      	ldr	r1, [r1, #4]
 8007d74:	0989      	lsrs	r1, r1, #6
 8007d76:	4608      	mov	r0, r1
 8007d78:	f04f 0100 	mov.w	r1, #0
 8007d7c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007d80:	f04f 0500 	mov.w	r5, #0
 8007d84:	ea00 0204 	and.w	r2, r0, r4
 8007d88:	ea01 0305 	and.w	r3, r1, r5
 8007d8c:	493d      	ldr	r1, [pc, #244]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d8e:	fb01 f003 	mul.w	r0, r1, r3
 8007d92:	2100      	movs	r1, #0
 8007d94:	fb01 f102 	mul.w	r1, r1, r2
 8007d98:	1844      	adds	r4, r0, r1
 8007d9a:	493a      	ldr	r1, [pc, #232]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d9c:	fba2 0101 	umull	r0, r1, r2, r1
 8007da0:	1863      	adds	r3, r4, r1
 8007da2:	4619      	mov	r1, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	461a      	mov	r2, r3
 8007da8:	f04f 0300 	mov.w	r3, #0
 8007dac:	f7f8 fa30 	bl	8000210 <__aeabi_uldivmod>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4613      	mov	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	e04a      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dba:	4b30      	ldr	r3, [pc, #192]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x160>)
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	099b      	lsrs	r3, r3, #6
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	f04f 0300 	mov.w	r3, #0
 8007dc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007dca:	f04f 0100 	mov.w	r1, #0
 8007dce:	ea02 0400 	and.w	r4, r2, r0
 8007dd2:	ea03 0501 	and.w	r5, r3, r1
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	4629      	mov	r1, r5
 8007dda:	f04f 0200 	mov.w	r2, #0
 8007dde:	f04f 0300 	mov.w	r3, #0
 8007de2:	014b      	lsls	r3, r1, #5
 8007de4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007de8:	0142      	lsls	r2, r0, #5
 8007dea:	4610      	mov	r0, r2
 8007dec:	4619      	mov	r1, r3
 8007dee:	1b00      	subs	r0, r0, r4
 8007df0:	eb61 0105 	sbc.w	r1, r1, r5
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	018b      	lsls	r3, r1, #6
 8007dfe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e02:	0182      	lsls	r2, r0, #6
 8007e04:	1a12      	subs	r2, r2, r0
 8007e06:	eb63 0301 	sbc.w	r3, r3, r1
 8007e0a:	f04f 0000 	mov.w	r0, #0
 8007e0e:	f04f 0100 	mov.w	r1, #0
 8007e12:	00d9      	lsls	r1, r3, #3
 8007e14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e18:	00d0      	lsls	r0, r2, #3
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	1912      	adds	r2, r2, r4
 8007e20:	eb45 0303 	adc.w	r3, r5, r3
 8007e24:	f04f 0000 	mov.w	r0, #0
 8007e28:	f04f 0100 	mov.w	r1, #0
 8007e2c:	0299      	lsls	r1, r3, #10
 8007e2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e32:	0290      	lsls	r0, r2, #10
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f04f 0300 	mov.w	r3, #0
 8007e44:	f7f8 f9e4 	bl	8000210 <__aeabi_uldivmod>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007e50:	4b0a      	ldr	r3, [pc, #40]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x160>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	0c1b      	lsrs	r3, r3, #16
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e68:	60bb      	str	r3, [r7, #8]
      break;
 8007e6a:	e002      	b.n	8007e72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e6c:	4b04      	ldr	r3, [pc, #16]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x164>)
 8007e6e:	60bb      	str	r3, [r7, #8]
      break;
 8007e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e72:	68bb      	ldr	r3, [r7, #8]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e7c:	40023800 	.word	0x40023800
 8007e80:	00f42400 	.word	0x00f42400
 8007e84:	017d7840 	.word	0x017d7840

08007e88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e8c:	4b03      	ldr	r3, [pc, #12]	; (8007e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	20000048 	.word	0x20000048

08007ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ea4:	f7ff fff0 	bl	8007e88 <HAL_RCC_GetHCLKFreq>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	0a9b      	lsrs	r3, r3, #10
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	4903      	ldr	r1, [pc, #12]	; (8007ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eb6:	5ccb      	ldrb	r3, [r1, r3]
 8007eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	40023800 	.word	0x40023800
 8007ec4:	0800fd24 	.word	0x0800fd24

08007ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ecc:	f7ff ffdc 	bl	8007e88 <HAL_RCC_GetHCLKFreq>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	0b5b      	lsrs	r3, r3, #13
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	4903      	ldr	r1, [pc, #12]	; (8007eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ede:	5ccb      	ldrb	r3, [r1, r3]
 8007ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	40023800 	.word	0x40023800
 8007eec:	0800fd24 	.word	0x0800fd24

08007ef0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	220f      	movs	r2, #15
 8007efe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f00:	4b12      	ldr	r3, [pc, #72]	; (8007f4c <HAL_RCC_GetClockConfig+0x5c>)
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f003 0203 	and.w	r2, r3, #3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007f0c:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <HAL_RCC_GetClockConfig+0x5c>)
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <HAL_RCC_GetClockConfig+0x5c>)
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007f24:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <HAL_RCC_GetClockConfig+0x5c>)
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	08db      	lsrs	r3, r3, #3
 8007f2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <HAL_RCC_GetClockConfig+0x60>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 020f 	and.w	r2, r3, #15
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	601a      	str	r2, [r3, #0]
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	40023800 	.word	0x40023800
 8007f50:	40023c00 	.word	0x40023c00

08007f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d012      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f7c:	4b69      	ldr	r3, [pc, #420]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	4a68      	ldr	r2, [pc, #416]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007f86:	6093      	str	r3, [r2, #8]
 8007f88:	4b66      	ldr	r3, [pc, #408]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f90:	4964      	ldr	r1, [pc, #400]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d017      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fae:	4b5d      	ldr	r3, [pc, #372]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbc:	4959      	ldr	r1, [pc, #356]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fcc:	d101      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d017      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007fea:	4b4e      	ldr	r3, [pc, #312]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff8:	494a      	ldr	r1, [pc, #296]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008008:	d101      	bne.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800800a:	2301      	movs	r3, #1
 800800c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008016:	2301      	movs	r3, #1
 8008018:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008026:	2301      	movs	r3, #1
 8008028:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 808b 	beq.w	800814e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008038:	4b3a      	ldr	r3, [pc, #232]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800803a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803c:	4a39      	ldr	r2, [pc, #228]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800803e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008042:	6413      	str	r3, [r2, #64]	; 0x40
 8008044:	4b37      	ldr	r3, [pc, #220]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800804c:	60bb      	str	r3, [r7, #8]
 800804e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008050:	4b35      	ldr	r3, [pc, #212]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a34      	ldr	r2, [pc, #208]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800805a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800805c:	f7fc fc36 	bl	80048cc <HAL_GetTick>
 8008060:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008062:	e008      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008064:	f7fc fc32 	bl	80048cc <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b64      	cmp	r3, #100	; 0x64
 8008070:	d901      	bls.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e355      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008076:	4b2c      	ldr	r3, [pc, #176]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0f0      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008082:	4b28      	ldr	r3, [pc, #160]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800808a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d035      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	429a      	cmp	r2, r3
 800809e:	d02e      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080a0:	4b20      	ldr	r3, [pc, #128]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80080aa:	4b1e      	ldr	r3, [pc, #120]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ae:	4a1d      	ldr	r2, [pc, #116]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080b6:	4b1b      	ldr	r3, [pc, #108]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ba:	4a1a      	ldr	r2, [pc, #104]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80080c2:	4a18      	ldr	r2, [pc, #96]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80080c8:	4b16      	ldr	r3, [pc, #88]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d114      	bne.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d4:	f7fc fbfa 	bl	80048cc <HAL_GetTick>
 80080d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080da:	e00a      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080dc:	f7fc fbf6 	bl	80048cc <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d901      	bls.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e317      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080f2:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0ee      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800810a:	d111      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800810c:	4b05      	ldr	r3, [pc, #20]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008118:	4b04      	ldr	r3, [pc, #16]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800811a:	400b      	ands	r3, r1
 800811c:	4901      	ldr	r1, [pc, #4]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800811e:	4313      	orrs	r3, r2
 8008120:	608b      	str	r3, [r1, #8]
 8008122:	e00b      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008124:	40023800 	.word	0x40023800
 8008128:	40007000 	.word	0x40007000
 800812c:	0ffffcff 	.word	0x0ffffcff
 8008130:	4bb0      	ldr	r3, [pc, #704]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	4aaf      	ldr	r2, [pc, #700]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008136:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800813a:	6093      	str	r3, [r2, #8]
 800813c:	4bad      	ldr	r3, [pc, #692]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800813e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008148:	49aa      	ldr	r1, [pc, #680]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800814a:	4313      	orrs	r3, r2
 800814c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0310 	and.w	r3, r3, #16
 8008156:	2b00      	cmp	r3, #0
 8008158:	d010      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800815a:	4ba6      	ldr	r3, [pc, #664]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800815c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008160:	4aa4      	ldr	r2, [pc, #656]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008166:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800816a:	4ba2      	ldr	r3, [pc, #648]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800816c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008174:	499f      	ldr	r1, [pc, #636]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008176:	4313      	orrs	r3, r2
 8008178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008188:	4b9a      	ldr	r3, [pc, #616]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800818a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008196:	4997      	ldr	r1, [pc, #604]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008198:	4313      	orrs	r3, r2
 800819a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081aa:	4b92      	ldr	r3, [pc, #584]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081b8:	498e      	ldr	r1, [pc, #568]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081cc:	4b89      	ldr	r3, [pc, #548]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081da:	4986      	ldr	r1, [pc, #536]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081ee:	4b81      	ldr	r3, [pc, #516]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fc:	497d      	ldr	r1, [pc, #500]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00a      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008210:	4b78      	ldr	r3, [pc, #480]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008216:	f023 0203 	bic.w	r2, r3, #3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821e:	4975      	ldr	r1, [pc, #468]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008220:	4313      	orrs	r3, r2
 8008222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00a      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008232:	4b70      	ldr	r3, [pc, #448]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008238:	f023 020c 	bic.w	r2, r3, #12
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008240:	496c      	ldr	r1, [pc, #432]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008242:	4313      	orrs	r3, r2
 8008244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00a      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008254:	4b67      	ldr	r3, [pc, #412]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800825a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008262:	4964      	ldr	r1, [pc, #400]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008264:	4313      	orrs	r3, r2
 8008266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008276:	4b5f      	ldr	r3, [pc, #380]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008284:	495b      	ldr	r1, [pc, #364]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008286:	4313      	orrs	r3, r2
 8008288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00a      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008298:	4b56      	ldr	r3, [pc, #344]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800829a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800829e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a6:	4953      	ldr	r1, [pc, #332]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80082ba:	4b4e      	ldr	r3, [pc, #312]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c8:	494a      	ldr	r1, [pc, #296]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80082dc:	4b45      	ldr	r3, [pc, #276]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ea:	4942      	ldr	r1, [pc, #264]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00a      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80082fe:	4b3d      	ldr	r3, [pc, #244]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008304:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800830c:	4939      	ldr	r1, [pc, #228]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800830e:	4313      	orrs	r3, r2
 8008310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008320:	4b34      	ldr	r3, [pc, #208]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008326:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800832e:	4931      	ldr	r1, [pc, #196]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008330:	4313      	orrs	r3, r2
 8008332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d011      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008342:	4b2c      	ldr	r3, [pc, #176]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008348:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008350:	4928      	ldr	r1, [pc, #160]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008352:	4313      	orrs	r3, r2
 8008354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008360:	d101      	bne.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008362:	2301      	movs	r3, #1
 8008364:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0308 	and.w	r3, r3, #8
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008372:	2301      	movs	r3, #1
 8008374:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008382:	4b1c      	ldr	r3, [pc, #112]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008388:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008390:	4918      	ldr	r1, [pc, #96]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008392:	4313      	orrs	r3, r2
 8008394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00b      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80083a4:	4b13      	ldr	r3, [pc, #76]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083b4:	490f      	ldr	r1, [pc, #60]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d005      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083ca:	f040 80d8 	bne.w	800857e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80083ce:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a08      	ldr	r2, [pc, #32]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083da:	f7fc fa77 	bl	80048cc <HAL_GetTick>
 80083de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083e0:	e00a      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80083e2:	f7fc fa73 	bl	80048cc <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	2b64      	cmp	r3, #100	; 0x64
 80083ee:	d903      	bls.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e196      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80083f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083f8:	4b6c      	ldr	r3, [pc, #432]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1ee      	bne.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d021      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008414:	2b00      	cmp	r3, #0
 8008416:	d11d      	bne.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008418:	4b64      	ldr	r3, [pc, #400]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800841a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800841e:	0c1b      	lsrs	r3, r3, #16
 8008420:	f003 0303 	and.w	r3, r3, #3
 8008424:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008426:	4b61      	ldr	r3, [pc, #388]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800842c:	0e1b      	lsrs	r3, r3, #24
 800842e:	f003 030f 	and.w	r3, r3, #15
 8008432:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	019a      	lsls	r2, r3, #6
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	041b      	lsls	r3, r3, #16
 800843e:	431a      	orrs	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	061b      	lsls	r3, r3, #24
 8008444:	431a      	orrs	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	071b      	lsls	r3, r3, #28
 800844c:	4957      	ldr	r1, [pc, #348]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800844e:	4313      	orrs	r3, r2
 8008450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d004      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008468:	d00a      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008472:	2b00      	cmp	r3, #0
 8008474:	d02e      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800847e:	d129      	bne.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008480:	4b4a      	ldr	r3, [pc, #296]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008486:	0c1b      	lsrs	r3, r3, #16
 8008488:	f003 0303 	and.w	r3, r3, #3
 800848c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800848e:	4b47      	ldr	r3, [pc, #284]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008494:	0f1b      	lsrs	r3, r3, #28
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	019a      	lsls	r2, r3, #6
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	041b      	lsls	r3, r3, #16
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	061b      	lsls	r3, r3, #24
 80084ae:	431a      	orrs	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	071b      	lsls	r3, r3, #28
 80084b4:	493d      	ldr	r1, [pc, #244]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80084bc:	4b3b      	ldr	r3, [pc, #236]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084c2:	f023 021f 	bic.w	r2, r3, #31
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	3b01      	subs	r3, #1
 80084cc:	4937      	ldr	r1, [pc, #220]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01d      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80084e0:	4b32      	ldr	r3, [pc, #200]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e6:	0e1b      	lsrs	r3, r3, #24
 80084e8:	f003 030f 	and.w	r3, r3, #15
 80084ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80084ee:	4b2f      	ldr	r3, [pc, #188]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084f4:	0f1b      	lsrs	r3, r3, #28
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	019a      	lsls	r2, r3, #6
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	041b      	lsls	r3, r3, #16
 8008508:	431a      	orrs	r2, r3
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	061b      	lsls	r3, r3, #24
 800850e:	431a      	orrs	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	071b      	lsls	r3, r3, #28
 8008514:	4925      	ldr	r1, [pc, #148]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008516:	4313      	orrs	r3, r2
 8008518:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d011      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	019a      	lsls	r2, r3, #6
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	041b      	lsls	r3, r3, #16
 8008534:	431a      	orrs	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	061b      	lsls	r3, r3, #24
 800853c:	431a      	orrs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	071b      	lsls	r3, r3, #28
 8008544:	4919      	ldr	r1, [pc, #100]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008546:	4313      	orrs	r3, r2
 8008548:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800854c:	4b17      	ldr	r3, [pc, #92]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a16      	ldr	r2, [pc, #88]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008558:	f7fc f9b8 	bl	80048cc <HAL_GetTick>
 800855c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800855e:	e008      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008560:	f7fc f9b4 	bl	80048cc <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b64      	cmp	r3, #100	; 0x64
 800856c:	d901      	bls.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e0d7      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008572:	4b0e      	ldr	r3, [pc, #56]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f0      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b01      	cmp	r3, #1
 8008582:	f040 80cd 	bne.w	8008720 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008586:	4b09      	ldr	r3, [pc, #36]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a08      	ldr	r2, [pc, #32]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800858c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008592:	f7fc f99b 	bl	80048cc <HAL_GetTick>
 8008596:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008598:	e00a      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800859a:	f7fc f997 	bl	80048cc <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2b64      	cmp	r3, #100	; 0x64
 80085a6:	d903      	bls.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e0ba      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80085ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80085b0:	4b5e      	ldr	r3, [pc, #376]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085bc:	d0ed      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d009      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d02e      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d12a      	bne.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80085e6:	4b51      	ldr	r3, [pc, #324]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ec:	0c1b      	lsrs	r3, r3, #16
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085f4:	4b4d      	ldr	r3, [pc, #308]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fa:	0f1b      	lsrs	r3, r3, #28
 80085fc:	f003 0307 	and.w	r3, r3, #7
 8008600:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	019a      	lsls	r2, r3, #6
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	041b      	lsls	r3, r3, #16
 800860c:	431a      	orrs	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	061b      	lsls	r3, r3, #24
 8008614:	431a      	orrs	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	071b      	lsls	r3, r3, #28
 800861a:	4944      	ldr	r1, [pc, #272]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800861c:	4313      	orrs	r3, r2
 800861e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008622:	4b42      	ldr	r3, [pc, #264]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008628:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008630:	3b01      	subs	r3, #1
 8008632:	021b      	lsls	r3, r3, #8
 8008634:	493d      	ldr	r1, [pc, #244]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008636:	4313      	orrs	r3, r2
 8008638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d022      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800864c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008650:	d11d      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008652:	4b36      	ldr	r3, [pc, #216]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008658:	0e1b      	lsrs	r3, r3, #24
 800865a:	f003 030f 	and.w	r3, r3, #15
 800865e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008660:	4b32      	ldr	r3, [pc, #200]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008666:	0f1b      	lsrs	r3, r3, #28
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	019a      	lsls	r2, r3, #6
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	041b      	lsls	r3, r3, #16
 800867a:	431a      	orrs	r2, r3
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	061b      	lsls	r3, r3, #24
 8008680:	431a      	orrs	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	071b      	lsls	r3, r3, #28
 8008686:	4929      	ldr	r1, [pc, #164]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008688:	4313      	orrs	r3, r2
 800868a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0308 	and.w	r3, r3, #8
 8008696:	2b00      	cmp	r3, #0
 8008698:	d028      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800869a:	4b24      	ldr	r3, [pc, #144]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800869c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a0:	0e1b      	lsrs	r3, r3, #24
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80086a8:	4b20      	ldr	r3, [pc, #128]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ae:	0c1b      	lsrs	r3, r3, #16
 80086b0:	f003 0303 	and.w	r3, r3, #3
 80086b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	019a      	lsls	r2, r3, #6
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	041b      	lsls	r3, r3, #16
 80086c0:	431a      	orrs	r2, r3
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	061b      	lsls	r3, r3, #24
 80086c6:	431a      	orrs	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	071b      	lsls	r3, r3, #28
 80086ce:	4917      	ldr	r1, [pc, #92]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80086d6:	4b15      	ldr	r3, [pc, #84]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	4911      	ldr	r1, [pc, #68]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80086ec:	4b0f      	ldr	r3, [pc, #60]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a0e      	ldr	r2, [pc, #56]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086f8:	f7fc f8e8 	bl	80048cc <HAL_GetTick>
 80086fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80086fe:	e008      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008700:	f7fc f8e4 	bl	80048cc <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	2b64      	cmp	r3, #100	; 0x64
 800870c:	d901      	bls.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e007      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008712:	4b06      	ldr	r3, [pc, #24]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800871a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800871e:	d1ef      	bne.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3720      	adds	r7, #32
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	40023800 	.word	0x40023800

08008730 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e06b      	b.n	800881a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	7f5b      	ldrb	r3, [r3, #29]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b00      	cmp	r3, #0
 800874a:	d105      	bne.n	8008758 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7fb fd1e 	bl	8004194 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	22ca      	movs	r2, #202	; 0xca
 8008764:	625a      	str	r2, [r3, #36]	; 0x24
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2253      	movs	r2, #83	; 0x53
 800876c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fb00 	bl	8008d74 <RTC_EnterInitMode>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d008      	beq.n	800878c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	22ff      	movs	r2, #255	; 0xff
 8008780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2204      	movs	r2, #4
 8008786:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e046      	b.n	800881a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6899      	ldr	r1, [r3, #8]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	4b23      	ldr	r3, [pc, #140]	; (8008824 <HAL_RTC_Init+0xf4>)
 8008798:	400b      	ands	r3, r1
 800879a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6899      	ldr	r1, [r3, #8]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	431a      	orrs	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	431a      	orrs	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	68d2      	ldr	r2, [r2, #12]
 80087c2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6919      	ldr	r1, [r3, #16]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	041a      	lsls	r2, r3, #16
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087e6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0208 	bic.w	r2, r2, #8
 80087f6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	699a      	ldr	r2, [r3, #24]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	22ff      	movs	r2, #255	; 0xff
 8008810:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008818:	2300      	movs	r3, #0
  }
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	ff8fffbf 	.word	0xff8fffbf

08008828 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008828:	b590      	push	{r4, r7, lr}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	7f1b      	ldrb	r3, [r3, #28]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d101      	bne.n	8008844 <HAL_RTC_SetTime+0x1c>
 8008840:	2302      	movs	r3, #2
 8008842:	e0a8      	b.n	8008996 <HAL_RTC_SetTime+0x16e>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2201      	movs	r2, #1
 8008848:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2202      	movs	r2, #2
 800884e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d126      	bne.n	80088a4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008860:	2b00      	cmp	r3, #0
 8008862:	d102      	bne.n	800886a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2200      	movs	r2, #0
 8008868:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 faac 	bl	8008dcc <RTC_ByteToBcd2>
 8008874:	4603      	mov	r3, r0
 8008876:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	785b      	ldrb	r3, [r3, #1]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 faa5 	bl	8008dcc <RTC_ByteToBcd2>
 8008882:	4603      	mov	r3, r0
 8008884:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008886:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	789b      	ldrb	r3, [r3, #2]
 800888c:	4618      	mov	r0, r3
 800888e:	f000 fa9d 	bl	8008dcc <RTC_ByteToBcd2>
 8008892:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008894:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	7b1b      	ldrb	r3, [r3, #12]
 800889c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800889e:	4313      	orrs	r3, r2
 80088a0:	617b      	str	r3, [r7, #20]
 80088a2:	e018      	b.n	80088d6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2200      	movs	r2, #0
 80088b6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80088c4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80088ca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	7b1b      	ldrb	r3, [r3, #12]
 80088d0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80088d2:	4313      	orrs	r3, r2
 80088d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	22ca      	movs	r2, #202	; 0xca
 80088dc:	625a      	str	r2, [r3, #36]	; 0x24
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2253      	movs	r2, #83	; 0x53
 80088e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 fa44 	bl	8008d74 <RTC_EnterInitMode>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00b      	beq.n	800890a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	22ff      	movs	r2, #255	; 0xff
 80088f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2204      	movs	r2, #4
 80088fe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e045      	b.n	8008996 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	6979      	ldr	r1, [r7, #20]
 8008910:	4b23      	ldr	r3, [pc, #140]	; (80089a0 <HAL_RTC_SetTime+0x178>)
 8008912:	400b      	ands	r3, r1
 8008914:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008924:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6899      	ldr	r1, [r3, #8]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	691a      	ldr	r2, [r3, #16]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	431a      	orrs	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800894c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f003 0320 	and.w	r3, r3, #32
 8008958:	2b00      	cmp	r3, #0
 800895a:	d111      	bne.n	8008980 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 f9e1 	bl	8008d24 <HAL_RTC_WaitForSynchro>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00b      	beq.n	8008980 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	22ff      	movs	r2, #255	; 0xff
 800896e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2204      	movs	r2, #4
 8008974:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e00a      	b.n	8008996 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	22ff      	movs	r2, #255	; 0xff
 8008986:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2201      	movs	r2, #1
 800898c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008994:	2300      	movs	r3, #0
  }
}
 8008996:	4618      	mov	r0, r3
 8008998:	371c      	adds	r7, #28
 800899a:	46bd      	mov	sp, r7
 800899c:	bd90      	pop	{r4, r7, pc}
 800899e:	bf00      	nop
 80089a0:	007f7f7f 	.word	0x007f7f7f

080089a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80089a4:	b590      	push	{r4, r7, lr}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	7f1b      	ldrb	r3, [r3, #28]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d101      	bne.n	80089c0 <HAL_RTC_SetDate+0x1c>
 80089bc:	2302      	movs	r3, #2
 80089be:	e092      	b.n	8008ae6 <HAL_RTC_SetDate+0x142>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2202      	movs	r2, #2
 80089ca:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10e      	bne.n	80089f0 <HAL_RTC_SetDate+0x4c>
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	785b      	ldrb	r3, [r3, #1]
 80089d6:	f003 0310 	and.w	r3, r3, #16
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d008      	beq.n	80089f0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	785b      	ldrb	r3, [r3, #1]
 80089e2:	f023 0310 	bic.w	r3, r3, #16
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	330a      	adds	r3, #10
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d11c      	bne.n	8008a30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	78db      	ldrb	r3, [r3, #3]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 f9e6 	bl	8008dcc <RTC_ByteToBcd2>
 8008a00:	4603      	mov	r3, r0
 8008a02:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	785b      	ldrb	r3, [r3, #1]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f9df 	bl	8008dcc <RTC_ByteToBcd2>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008a12:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	789b      	ldrb	r3, [r3, #2]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 f9d7 	bl	8008dcc <RTC_ByteToBcd2>
 8008a1e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008a20:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	e00e      	b.n	8008a4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	78db      	ldrb	r3, [r3, #3]
 8008a34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	785b      	ldrb	r3, [r3, #1]
 8008a3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008a3c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008a42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	22ca      	movs	r2, #202	; 0xca
 8008a54:	625a      	str	r2, [r3, #36]	; 0x24
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2253      	movs	r2, #83	; 0x53
 8008a5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f000 f988 	bl	8008d74 <RTC_EnterInitMode>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00b      	beq.n	8008a82 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	22ff      	movs	r2, #255	; 0xff
 8008a70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2204      	movs	r2, #4
 8008a76:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e031      	b.n	8008ae6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	6979      	ldr	r1, [r7, #20]
 8008a88:	4b19      	ldr	r3, [pc, #100]	; (8008af0 <HAL_RTC_SetDate+0x14c>)
 8008a8a:	400b      	ands	r3, r1
 8008a8c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68da      	ldr	r2, [r3, #12]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a9c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d111      	bne.n	8008ad0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 f939 	bl	8008d24 <HAL_RTC_WaitForSynchro>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00b      	beq.n	8008ad0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	22ff      	movs	r2, #255	; 0xff
 8008abe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2204      	movs	r2, #4
 8008ac4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e00a      	b.n	8008ae6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	22ff      	movs	r2, #255	; 0xff
 8008ad6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
  }
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	371c      	adds	r7, #28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd90      	pop	{r4, r7, pc}
 8008aee:	bf00      	nop
 8008af0:	00ffff3f 	.word	0x00ffff3f

08008af4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008af4:	b590      	push	{r4, r7, lr}
 8008af6:	b089      	sub	sp, #36	; 0x24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	61fb      	str	r3, [r7, #28]
 8008b08:	2300      	movs	r3, #0
 8008b0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	7f1b      	ldrb	r3, [r3, #28]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d101      	bne.n	8008b18 <HAL_RTC_SetAlarm+0x24>
 8008b14:	2302      	movs	r3, #2
 8008b16:	e101      	b.n	8008d1c <HAL_RTC_SetAlarm+0x228>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2202      	movs	r2, #2
 8008b22:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d137      	bne.n	8008b9a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 f942 	bl	8008dcc <RTC_ByteToBcd2>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	785b      	ldrb	r3, [r3, #1]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 f93b 	bl	8008dcc <RTC_ByteToBcd2>
 8008b56:	4603      	mov	r3, r0
 8008b58:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008b5a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	789b      	ldrb	r3, [r3, #2]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 f933 	bl	8008dcc <RTC_ByteToBcd2>
 8008b66:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008b68:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	7b1b      	ldrb	r3, [r3, #12]
 8008b70:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008b72:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 f925 	bl	8008dcc <RTC_ByteToBcd2>
 8008b82:	4603      	mov	r3, r0
 8008b84:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008b86:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008b8e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008b94:	4313      	orrs	r3, r2
 8008b96:	61fb      	str	r3, [r7, #28]
 8008b98:	e023      	b.n	8008be2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2200      	movs	r2, #0
 8008bac:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	785b      	ldrb	r3, [r3, #1]
 8008bb8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008bba:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008bc0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	7b1b      	ldrb	r3, [r3, #12]
 8008bc6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008bc8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008bd0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008bd2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008bd8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008bde:	4313      	orrs	r3, r2
 8008be0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	22ca      	movs	r2, #202	; 0xca
 8008bf4:	625a      	str	r2, [r3, #36]	; 0x24
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2253      	movs	r2, #83	; 0x53
 8008bfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c06:	d13f      	bne.n	8008c88 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c16:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c26:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c28:	f7fb fe50 	bl	80048cc <HAL_GetTick>
 8008c2c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008c2e:	e013      	b.n	8008c58 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c30:	f7fb fe4c 	bl	80048cc <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c3e:	d90b      	bls.n	8008c58 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	22ff      	movs	r2, #255	; 0xff
 8008c46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2203      	movs	r2, #3
 8008c4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e061      	b.n	8008d1c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0e4      	beq.n	8008c30 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69fa      	ldr	r2, [r7, #28]
 8008c6c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c84:	609a      	str	r2, [r3, #8]
 8008c86:	e03e      	b.n	8008d06 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c96:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689a      	ldr	r2, [r3, #8]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ca6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ca8:	f7fb fe10 	bl	80048cc <HAL_GetTick>
 8008cac:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008cae:	e013      	b.n	8008cd8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008cb0:	f7fb fe0c 	bl	80048cc <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cbe:	d90b      	bls.n	8008cd8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	22ff      	movs	r2, #255	; 0xff
 8008cc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2203      	movs	r2, #3
 8008ccc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e021      	b.n	8008d1c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0e4      	beq.n	8008cb0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	69fa      	ldr	r2, [r7, #28]
 8008cec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d04:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	22ff      	movs	r2, #255	; 0xff
 8008d0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3724      	adds	r7, #36	; 0x24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd90      	pop	{r4, r7, pc}

08008d24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d3e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d40:	f7fb fdc4 	bl	80048cc <HAL_GetTick>
 8008d44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d46:	e009      	b.n	8008d5c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d48:	f7fb fdc0 	bl	80048cc <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d56:	d901      	bls.n	8008d5c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e007      	b.n	8008d6c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f003 0320 	and.w	r3, r3, #32
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0ee      	beq.n	8008d48 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d119      	bne.n	8008dc2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f04f 32ff 	mov.w	r2, #4294967295
 8008d96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d98:	f7fb fd98 	bl	80048cc <HAL_GetTick>
 8008d9c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008d9e:	e009      	b.n	8008db4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008da0:	f7fb fd94 	bl	80048cc <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dae:	d901      	bls.n	8008db4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e007      	b.n	8008dc4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0ee      	beq.n	8008da0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008dda:	e005      	b.n	8008de8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3301      	adds	r3, #1
 8008de0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	3b0a      	subs	r3, #10
 8008de6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	2b09      	cmp	r3, #9
 8008dec:	d8f6      	bhi.n	8008ddc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	011b      	lsls	r3, r3, #4
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	b2db      	uxtb	r3, r3
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	7f1b      	ldrb	r3, [r3, #28]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d101      	bne.n	8008e24 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008e20:	2302      	movs	r3, #2
 8008e22:	e03e      	b.n	8008ea2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2201      	movs	r2, #1
 8008e28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689a      	ldr	r2, [r3, #8]
 8008e36:	4b1e      	ldr	r3, [pc, #120]	; (8008eb0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008e38:	4013      	ands	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	22ca      	movs	r2, #202	; 0xca
 8008e4a:	625a      	str	r2, [r3, #36]	; 0x24
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2253      	movs	r2, #83	; 0x53
 8008e52:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0206 	bic.w	r2, r2, #6
 8008e62:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689a      	ldr	r2, [r3, #8]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e8a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	22ff      	movs	r2, #255	; 0xff
 8008e92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2201      	movs	r2, #1
 8008e98:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	fffff7f7 	.word	0xfffff7f7

08008eb4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e025      	b.n	8008f14 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d106      	bne.n	8008ee2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7fb fbf1 	bl	80046c4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2202      	movs	r2, #2
 8008ee6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	f002 fa25 	bl	800b344 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	461a      	mov	r2, r3
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	f002 fa8f 	bl	800b428 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d101      	bne.n	8008f38 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008f34:	2302      	movs	r3, #2
 8008f36:	e018      	b.n	8008f6a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	68b9      	ldr	r1, [r7, #8]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f002 faed 	bl	800b528 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d104      	bne.n	8008f60 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2205      	movs	r2, #5
 8008f5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008f5e:	e003      	b.n	8008f68 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d101      	bne.n	8008f8c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e00e      	b.n	8008faa <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f002 fae5 	bl	800b56a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e084      	b.n	80090ce <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d106      	bne.n	8008fe4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f7fb f8f2 	bl	80041c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ffa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009004:	d902      	bls.n	800900c <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009006:	2300      	movs	r3, #0
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	e002      	b.n	8009012 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800900c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009010:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800901a:	d007      	beq.n	800902c <HAL_SPI_Init+0x7a>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009024:	d002      	beq.n	800902c <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10b      	bne.n	800904c <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800903c:	d903      	bls.n	8009046 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2202      	movs	r2, #2
 8009042:	631a      	str	r2, [r3, #48]	; 0x30
 8009044:	e002      	b.n	800904c <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	431a      	orrs	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	431a      	orrs	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	431a      	orrs	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	431a      	orrs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	ea42 0103 	orr.w	r1, r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	430a      	orrs	r2, r1
 8009084:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	0c1b      	lsrs	r3, r3, #16
 800908c:	f003 0204 	and.w	r2, r3, #4
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	431a      	orrs	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909a:	431a      	orrs	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	ea42 0103 	orr.w	r1, r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	430a      	orrs	r2, r1
 80090ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69da      	ldr	r2, [r3, #28]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e01d      	b.n	8009124 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fb f8d5 	bl	80042ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2202      	movs	r2, #2
 8009106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	3304      	adds	r3, #4
 8009112:	4619      	mov	r1, r3
 8009114:	4610      	mov	r0, r2
 8009116:	f000 fbcf 	bl	80098b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f042 0201 	orr.w	r2, r2, #1
 8009142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689a      	ldr	r2, [r3, #8]
 800914a:	4b0c      	ldr	r3, [pc, #48]	; (800917c <HAL_TIM_Base_Start_IT+0x50>)
 800914c:	4013      	ands	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b06      	cmp	r3, #6
 8009154:	d00b      	beq.n	800916e <HAL_TIM_Base_Start_IT+0x42>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800915c:	d007      	beq.n	800916e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f042 0201 	orr.w	r2, r2, #1
 800916c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	00010007 	.word	0x00010007

08009180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e01d      	b.n	80091ce <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f815 	bl	80091d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	3304      	adds	r3, #4
 80091bc:	4619      	mov	r1, r3
 80091be:	4610      	mov	r0, r2
 80091c0:	f000 fb7a 	bl	80098b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80091de:	bf00      	nop
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	f003 0302 	and.w	r3, r3, #2
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d122      	bne.n	8009246 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b02      	cmp	r3, #2
 800920c:	d11b      	bne.n	8009246 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f06f 0202 	mvn.w	r2, #2
 8009216:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	f003 0303 	and.w	r3, r3, #3
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fb25 	bl	800987c <HAL_TIM_IC_CaptureCallback>
 8009232:	e005      	b.n	8009240 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fb17 	bl	8009868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fb28 	bl	8009890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b04      	cmp	r3, #4
 8009252:	d122      	bne.n	800929a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	f003 0304 	and.w	r3, r3, #4
 800925e:	2b04      	cmp	r3, #4
 8009260:	d11b      	bne.n	800929a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f06f 0204 	mvn.w	r2, #4
 800926a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800927c:	2b00      	cmp	r3, #0
 800927e:	d003      	beq.n	8009288 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fafb 	bl	800987c <HAL_TIM_IC_CaptureCallback>
 8009286:	e005      	b.n	8009294 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 faed 	bl	8009868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fafe 	bl	8009890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	f003 0308 	and.w	r3, r3, #8
 80092a4:	2b08      	cmp	r3, #8
 80092a6:	d122      	bne.n	80092ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	f003 0308 	and.w	r3, r3, #8
 80092b2:	2b08      	cmp	r3, #8
 80092b4:	d11b      	bne.n	80092ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f06f 0208 	mvn.w	r2, #8
 80092be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2204      	movs	r2, #4
 80092c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	f003 0303 	and.w	r3, r3, #3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d003      	beq.n	80092dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fad1 	bl	800987c <HAL_TIM_IC_CaptureCallback>
 80092da:	e005      	b.n	80092e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fac3 	bl	8009868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fad4 	bl	8009890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	f003 0310 	and.w	r3, r3, #16
 80092f8:	2b10      	cmp	r3, #16
 80092fa:	d122      	bne.n	8009342 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f003 0310 	and.w	r3, r3, #16
 8009306:	2b10      	cmp	r3, #16
 8009308:	d11b      	bne.n	8009342 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f06f 0210 	mvn.w	r2, #16
 8009312:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2208      	movs	r2, #8
 8009318:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 faa7 	bl	800987c <HAL_TIM_IC_CaptureCallback>
 800932e:	e005      	b.n	800933c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fa99 	bl	8009868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 faaa 	bl	8009890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b01      	cmp	r3, #1
 800934e:	d10e      	bne.n	800936e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b01      	cmp	r3, #1
 800935c:	d107      	bne.n	800936e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f06f 0201 	mvn.w	r2, #1
 8009366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7f8 feff 	bl	800216c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009378:	2b80      	cmp	r3, #128	; 0x80
 800937a:	d10e      	bne.n	800939a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009386:	2b80      	cmp	r3, #128	; 0x80
 8009388:	d107      	bne.n	800939a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 ffcd 	bl	800a334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093a8:	d10e      	bne.n	80093c8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b4:	2b80      	cmp	r3, #128	; 0x80
 80093b6:	d107      	bne.n	80093c8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80093c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 ffc0 	bl	800a348 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d2:	2b40      	cmp	r3, #64	; 0x40
 80093d4:	d10e      	bne.n	80093f4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e0:	2b40      	cmp	r3, #64	; 0x40
 80093e2:	d107      	bne.n	80093f4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa58 	bl	80098a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	f003 0320 	and.w	r3, r3, #32
 80093fe:	2b20      	cmp	r3, #32
 8009400:	d10e      	bne.n	8009420 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	f003 0320 	and.w	r3, r3, #32
 800940c:	2b20      	cmp	r3, #32
 800940e:	d107      	bne.n	8009420 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f06f 0220 	mvn.w	r2, #32
 8009418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 ff80 	bl	800a320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009420:	bf00      	nop
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800943a:	2b01      	cmp	r3, #1
 800943c:	d101      	bne.n	8009442 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800943e:	2302      	movs	r3, #2
 8009440:	e105      	b.n	800964e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2202      	movs	r2, #2
 800944e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b14      	cmp	r3, #20
 8009456:	f200 80f0 	bhi.w	800963a <HAL_TIM_PWM_ConfigChannel+0x212>
 800945a:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009460:	080094b5 	.word	0x080094b5
 8009464:	0800963b 	.word	0x0800963b
 8009468:	0800963b 	.word	0x0800963b
 800946c:	0800963b 	.word	0x0800963b
 8009470:	080094f5 	.word	0x080094f5
 8009474:	0800963b 	.word	0x0800963b
 8009478:	0800963b 	.word	0x0800963b
 800947c:	0800963b 	.word	0x0800963b
 8009480:	08009537 	.word	0x08009537
 8009484:	0800963b 	.word	0x0800963b
 8009488:	0800963b 	.word	0x0800963b
 800948c:	0800963b 	.word	0x0800963b
 8009490:	08009577 	.word	0x08009577
 8009494:	0800963b 	.word	0x0800963b
 8009498:	0800963b 	.word	0x0800963b
 800949c:	0800963b 	.word	0x0800963b
 80094a0:	080095b9 	.word	0x080095b9
 80094a4:	0800963b 	.word	0x0800963b
 80094a8:	0800963b 	.word	0x0800963b
 80094ac:	0800963b 	.word	0x0800963b
 80094b0:	080095f9 	.word	0x080095f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68b9      	ldr	r1, [r7, #8]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fa9c 	bl	80099f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0208 	orr.w	r2, r2, #8
 80094ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	699a      	ldr	r2, [r3, #24]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f022 0204 	bic.w	r2, r2, #4
 80094de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6999      	ldr	r1, [r3, #24]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	691a      	ldr	r2, [r3, #16]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	430a      	orrs	r2, r1
 80094f0:	619a      	str	r2, [r3, #24]
      break;
 80094f2:	e0a3      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68b9      	ldr	r1, [r7, #8]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 faee 	bl	8009adc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699a      	ldr	r2, [r3, #24]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800950e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800951e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6999      	ldr	r1, [r3, #24]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	021a      	lsls	r2, r3, #8
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	430a      	orrs	r2, r1
 8009532:	619a      	str	r2, [r3, #24]
      break;
 8009534:	e082      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68b9      	ldr	r1, [r7, #8]
 800953c:	4618      	mov	r0, r3
 800953e:	f000 fb45 	bl	8009bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69da      	ldr	r2, [r3, #28]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f042 0208 	orr.w	r2, r2, #8
 8009550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69da      	ldr	r2, [r3, #28]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f022 0204 	bic.w	r2, r2, #4
 8009560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	69d9      	ldr	r1, [r3, #28]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	691a      	ldr	r2, [r3, #16]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	61da      	str	r2, [r3, #28]
      break;
 8009574:	e062      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68b9      	ldr	r1, [r7, #8]
 800957c:	4618      	mov	r0, r3
 800957e:	f000 fb9b 	bl	8009cb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69da      	ldr	r2, [r3, #28]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69da      	ldr	r2, [r3, #28]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69d9      	ldr	r1, [r3, #28]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	021a      	lsls	r2, r3, #8
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	61da      	str	r2, [r3, #28]
      break;
 80095b6:	e041      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68b9      	ldr	r1, [r7, #8]
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fbd2 	bl	8009d68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f042 0208 	orr.w	r2, r2, #8
 80095d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f022 0204 	bic.w	r2, r2, #4
 80095e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	691a      	ldr	r2, [r3, #16]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	430a      	orrs	r2, r1
 80095f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80095f6:	e021      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68b9      	ldr	r1, [r7, #8]
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 fc04 	bl	8009e0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009612:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009622:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	021a      	lsls	r2, r3, #8
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	430a      	orrs	r2, r1
 8009636:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009638:	e000      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800963a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop

08009658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009668:	2b01      	cmp	r3, #1
 800966a:	d101      	bne.n	8009670 <HAL_TIM_ConfigClockSource+0x18>
 800966c:	2302      	movs	r3, #2
 800966e:	e0b3      	b.n	80097d8 <HAL_TIM_ConfigClockSource+0x180>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	4b55      	ldr	r3, [pc, #340]	; (80097e0 <HAL_TIM_ConfigClockSource+0x188>)
 800968c:	4013      	ands	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009696:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096a8:	d03e      	beq.n	8009728 <HAL_TIM_ConfigClockSource+0xd0>
 80096aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ae:	f200 8087 	bhi.w	80097c0 <HAL_TIM_ConfigClockSource+0x168>
 80096b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096b6:	f000 8085 	beq.w	80097c4 <HAL_TIM_ConfigClockSource+0x16c>
 80096ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096be:	d87f      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x168>
 80096c0:	2b70      	cmp	r3, #112	; 0x70
 80096c2:	d01a      	beq.n	80096fa <HAL_TIM_ConfigClockSource+0xa2>
 80096c4:	2b70      	cmp	r3, #112	; 0x70
 80096c6:	d87b      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x168>
 80096c8:	2b60      	cmp	r3, #96	; 0x60
 80096ca:	d050      	beq.n	800976e <HAL_TIM_ConfigClockSource+0x116>
 80096cc:	2b60      	cmp	r3, #96	; 0x60
 80096ce:	d877      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x168>
 80096d0:	2b50      	cmp	r3, #80	; 0x50
 80096d2:	d03c      	beq.n	800974e <HAL_TIM_ConfigClockSource+0xf6>
 80096d4:	2b50      	cmp	r3, #80	; 0x50
 80096d6:	d873      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x168>
 80096d8:	2b40      	cmp	r3, #64	; 0x40
 80096da:	d058      	beq.n	800978e <HAL_TIM_ConfigClockSource+0x136>
 80096dc:	2b40      	cmp	r3, #64	; 0x40
 80096de:	d86f      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x168>
 80096e0:	2b30      	cmp	r3, #48	; 0x30
 80096e2:	d064      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x156>
 80096e4:	2b30      	cmp	r3, #48	; 0x30
 80096e6:	d86b      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x168>
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	d060      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x156>
 80096ec:	2b20      	cmp	r3, #32
 80096ee:	d867      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x168>
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d05c      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x156>
 80096f4:	2b10      	cmp	r3, #16
 80096f6:	d05a      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80096f8:	e062      	b.n	80097c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6818      	ldr	r0, [r3, #0]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	6899      	ldr	r1, [r3, #8]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f000 fcdd 	bl	800a0c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800971c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	609a      	str	r2, [r3, #8]
      break;
 8009726:	e04e      	b.n	80097c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	6899      	ldr	r1, [r3, #8]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685a      	ldr	r2, [r3, #4]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f000 fcc6 	bl	800a0c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800974a:	609a      	str	r2, [r3, #8]
      break;
 800974c:	e03b      	b.n	80097c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	6859      	ldr	r1, [r3, #4]
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	461a      	mov	r2, r3
 800975c:	f000 fc3a 	bl	8009fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2150      	movs	r1, #80	; 0x50
 8009766:	4618      	mov	r0, r3
 8009768:	f000 fc93 	bl	800a092 <TIM_ITRx_SetConfig>
      break;
 800976c:	e02b      	b.n	80097c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	6859      	ldr	r1, [r3, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	461a      	mov	r2, r3
 800977c:	f000 fc59 	bl	800a032 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2160      	movs	r1, #96	; 0x60
 8009786:	4618      	mov	r0, r3
 8009788:	f000 fc83 	bl	800a092 <TIM_ITRx_SetConfig>
      break;
 800978c:	e01b      	b.n	80097c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6818      	ldr	r0, [r3, #0]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	6859      	ldr	r1, [r3, #4]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	461a      	mov	r2, r3
 800979c:	f000 fc1a 	bl	8009fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2140      	movs	r1, #64	; 0x40
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fc73 	bl	800a092 <TIM_ITRx_SetConfig>
      break;
 80097ac:	e00b      	b.n	80097c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4619      	mov	r1, r3
 80097b8:	4610      	mov	r0, r2
 80097ba:	f000 fc6a 	bl	800a092 <TIM_ITRx_SetConfig>
      break;
 80097be:	e002      	b.n	80097c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80097c0:	bf00      	nop
 80097c2:	e000      	b.n	80097c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80097c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	fffeff88 	.word	0xfffeff88

080097e4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d101      	bne.n	80097fc <HAL_TIM_SlaveConfigSynchro+0x18>
 80097f8:	2302      	movs	r3, #2
 80097fa:	e031      	b.n	8009860 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2202      	movs	r2, #2
 8009808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fb50 	bl	8009eb4 <TIM_SlaveTimer_SetConfig>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d009      	beq.n	800982e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e018      	b.n	8009860 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68da      	ldr	r2, [r3, #12]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800983c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68da      	ldr	r2, [r3, #12]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800984c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a40      	ldr	r2, [pc, #256]	; (80099cc <TIM_Base_SetConfig+0x114>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d013      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d6:	d00f      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a3d      	ldr	r2, [pc, #244]	; (80099d0 <TIM_Base_SetConfig+0x118>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d00b      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a3c      	ldr	r2, [pc, #240]	; (80099d4 <TIM_Base_SetConfig+0x11c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d007      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a3b      	ldr	r2, [pc, #236]	; (80099d8 <TIM_Base_SetConfig+0x120>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d003      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a3a      	ldr	r2, [pc, #232]	; (80099dc <TIM_Base_SetConfig+0x124>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d108      	bne.n	800990a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4313      	orrs	r3, r2
 8009908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a2f      	ldr	r2, [pc, #188]	; (80099cc <TIM_Base_SetConfig+0x114>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d02b      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009918:	d027      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a2c      	ldr	r2, [pc, #176]	; (80099d0 <TIM_Base_SetConfig+0x118>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d023      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a2b      	ldr	r2, [pc, #172]	; (80099d4 <TIM_Base_SetConfig+0x11c>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d01f      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a2a      	ldr	r2, [pc, #168]	; (80099d8 <TIM_Base_SetConfig+0x120>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d01b      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a29      	ldr	r2, [pc, #164]	; (80099dc <TIM_Base_SetConfig+0x124>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d017      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a28      	ldr	r2, [pc, #160]	; (80099e0 <TIM_Base_SetConfig+0x128>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d013      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a27      	ldr	r2, [pc, #156]	; (80099e4 <TIM_Base_SetConfig+0x12c>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d00f      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a26      	ldr	r2, [pc, #152]	; (80099e8 <TIM_Base_SetConfig+0x130>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d00b      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a25      	ldr	r2, [pc, #148]	; (80099ec <TIM_Base_SetConfig+0x134>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d007      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a24      	ldr	r2, [pc, #144]	; (80099f0 <TIM_Base_SetConfig+0x138>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d003      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a23      	ldr	r2, [pc, #140]	; (80099f4 <TIM_Base_SetConfig+0x13c>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d108      	bne.n	800997c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	4313      	orrs	r3, r2
 800997a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	4313      	orrs	r3, r2
 8009988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a0a      	ldr	r2, [pc, #40]	; (80099cc <TIM_Base_SetConfig+0x114>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d003      	beq.n	80099b0 <TIM_Base_SetConfig+0xf8>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a0c      	ldr	r2, [pc, #48]	; (80099dc <TIM_Base_SetConfig+0x124>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d103      	bne.n	80099b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	691a      	ldr	r2, [r3, #16]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	615a      	str	r2, [r3, #20]
}
 80099be:	bf00      	nop
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	40010000 	.word	0x40010000
 80099d0:	40000400 	.word	0x40000400
 80099d4:	40000800 	.word	0x40000800
 80099d8:	40000c00 	.word	0x40000c00
 80099dc:	40010400 	.word	0x40010400
 80099e0:	40014000 	.word	0x40014000
 80099e4:	40014400 	.word	0x40014400
 80099e8:	40014800 	.word	0x40014800
 80099ec:	40001800 	.word	0x40001800
 80099f0:	40001c00 	.word	0x40001c00
 80099f4:	40002000 	.word	0x40002000

080099f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b087      	sub	sp, #28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	f023 0201 	bic.w	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	4b2b      	ldr	r3, [pc, #172]	; (8009ad0 <TIM_OC1_SetConfig+0xd8>)
 8009a24:	4013      	ands	r3, r2
 8009a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f023 0303 	bic.w	r3, r3, #3
 8009a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f023 0302 	bic.w	r3, r3, #2
 8009a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a21      	ldr	r2, [pc, #132]	; (8009ad4 <TIM_OC1_SetConfig+0xdc>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d003      	beq.n	8009a5c <TIM_OC1_SetConfig+0x64>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a20      	ldr	r2, [pc, #128]	; (8009ad8 <TIM_OC1_SetConfig+0xe0>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d10c      	bne.n	8009a76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f023 0308 	bic.w	r3, r3, #8
 8009a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f023 0304 	bic.w	r3, r3, #4
 8009a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a16      	ldr	r2, [pc, #88]	; (8009ad4 <TIM_OC1_SetConfig+0xdc>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d003      	beq.n	8009a86 <TIM_OC1_SetConfig+0x8e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a15      	ldr	r2, [pc, #84]	; (8009ad8 <TIM_OC1_SetConfig+0xe0>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d111      	bne.n	8009aaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	621a      	str	r2, [r3, #32]
}
 8009ac4:	bf00      	nop
 8009ac6:	371c      	adds	r7, #28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	fffeff8f 	.word	0xfffeff8f
 8009ad4:	40010000 	.word	0x40010000
 8009ad8:	40010400 	.word	0x40010400

08009adc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b087      	sub	sp, #28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	f023 0210 	bic.w	r2, r3, #16
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4b2e      	ldr	r3, [pc, #184]	; (8009bc0 <TIM_OC2_SetConfig+0xe4>)
 8009b08:	4013      	ands	r3, r2
 8009b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f023 0320 	bic.w	r3, r3, #32
 8009b26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	011b      	lsls	r3, r3, #4
 8009b2e:	697a      	ldr	r2, [r7, #20]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a23      	ldr	r2, [pc, #140]	; (8009bc4 <TIM_OC2_SetConfig+0xe8>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d003      	beq.n	8009b44 <TIM_OC2_SetConfig+0x68>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a22      	ldr	r2, [pc, #136]	; (8009bc8 <TIM_OC2_SetConfig+0xec>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d10d      	bne.n	8009b60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	011b      	lsls	r3, r3, #4
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a18      	ldr	r2, [pc, #96]	; (8009bc4 <TIM_OC2_SetConfig+0xe8>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d003      	beq.n	8009b70 <TIM_OC2_SetConfig+0x94>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a17      	ldr	r2, [pc, #92]	; (8009bc8 <TIM_OC2_SetConfig+0xec>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d113      	bne.n	8009b98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	695b      	ldr	r3, [r3, #20]
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685a      	ldr	r2, [r3, #4]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	621a      	str	r2, [r3, #32]
}
 8009bb2:	bf00      	nop
 8009bb4:	371c      	adds	r7, #28
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	feff8fff 	.word	0xfeff8fff
 8009bc4:	40010000 	.word	0x40010000
 8009bc8:	40010400 	.word	0x40010400

08009bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	4b2d      	ldr	r3, [pc, #180]	; (8009cac <TIM_OC3_SetConfig+0xe0>)
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f023 0303 	bic.w	r3, r3, #3
 8009c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	021b      	lsls	r3, r3, #8
 8009c1c:	697a      	ldr	r2, [r7, #20]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a22      	ldr	r2, [pc, #136]	; (8009cb0 <TIM_OC3_SetConfig+0xe4>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d003      	beq.n	8009c32 <TIM_OC3_SetConfig+0x66>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a21      	ldr	r2, [pc, #132]	; (8009cb4 <TIM_OC3_SetConfig+0xe8>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d10d      	bne.n	8009c4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	021b      	lsls	r3, r3, #8
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a17      	ldr	r2, [pc, #92]	; (8009cb0 <TIM_OC3_SetConfig+0xe4>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d003      	beq.n	8009c5e <TIM_OC3_SetConfig+0x92>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a16      	ldr	r2, [pc, #88]	; (8009cb4 <TIM_OC3_SetConfig+0xe8>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d113      	bne.n	8009c86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	685a      	ldr	r2, [r3, #4]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	621a      	str	r2, [r3, #32]
}
 8009ca0:	bf00      	nop
 8009ca2:	371c      	adds	r7, #28
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	fffeff8f 	.word	0xfffeff8f
 8009cb0:	40010000 	.word	0x40010000
 8009cb4:	40010400 	.word	0x40010400

08009cb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	4b1e      	ldr	r3, [pc, #120]	; (8009d5c <TIM_OC4_SetConfig+0xa4>)
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	021b      	lsls	r3, r3, #8
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	031b      	lsls	r3, r3, #12
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a13      	ldr	r2, [pc, #76]	; (8009d60 <TIM_OC4_SetConfig+0xa8>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d003      	beq.n	8009d20 <TIM_OC4_SetConfig+0x68>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a12      	ldr	r2, [pc, #72]	; (8009d64 <TIM_OC4_SetConfig+0xac>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d109      	bne.n	8009d34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	695b      	ldr	r3, [r3, #20]
 8009d2c:	019b      	lsls	r3, r3, #6
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	621a      	str	r2, [r3, #32]
}
 8009d4e:	bf00      	nop
 8009d50:	371c      	adds	r7, #28
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	feff8fff 	.word	0xfeff8fff
 8009d60:	40010000 	.word	0x40010000
 8009d64:	40010400 	.word	0x40010400

08009d68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4b1b      	ldr	r3, [pc, #108]	; (8009e00 <TIM_OC5_SetConfig+0x98>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009da8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	041b      	lsls	r3, r3, #16
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a12      	ldr	r2, [pc, #72]	; (8009e04 <TIM_OC5_SetConfig+0x9c>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d003      	beq.n	8009dc6 <TIM_OC5_SetConfig+0x5e>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a11      	ldr	r2, [pc, #68]	; (8009e08 <TIM_OC5_SetConfig+0xa0>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d109      	bne.n	8009dda <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	021b      	lsls	r3, r3, #8
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	685a      	ldr	r2, [r3, #4]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	621a      	str	r2, [r3, #32]
}
 8009df4:	bf00      	nop
 8009df6:	371c      	adds	r7, #28
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	fffeff8f 	.word	0xfffeff8f
 8009e04:	40010000 	.word	0x40010000
 8009e08:	40010400 	.word	0x40010400

08009e0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b087      	sub	sp, #28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	4b1c      	ldr	r3, [pc, #112]	; (8009ea8 <TIM_OC6_SetConfig+0x9c>)
 8009e38:	4013      	ands	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	021b      	lsls	r3, r3, #8
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	051b      	lsls	r3, r3, #20
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a13      	ldr	r2, [pc, #76]	; (8009eac <TIM_OC6_SetConfig+0xa0>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d003      	beq.n	8009e6c <TIM_OC6_SetConfig+0x60>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a12      	ldr	r2, [pc, #72]	; (8009eb0 <TIM_OC6_SetConfig+0xa4>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d109      	bne.n	8009e80 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	029b      	lsls	r3, r3, #10
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	621a      	str	r2, [r3, #32]
}
 8009e9a:	bf00      	nop
 8009e9c:	371c      	adds	r7, #28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	feff8fff 	.word	0xfeff8fff
 8009eac:	40010000 	.word	0x40010000
 8009eb0:	40010400 	.word	0x40010400

08009eb4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ecc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	4b3d      	ldr	r3, [pc, #244]	; (8009fd0 <TIM_SlaveTimer_SetConfig+0x11c>)
 8009edc:	4013      	ands	r3, r2
 8009ede:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	2b70      	cmp	r3, #112	; 0x70
 8009ef8:	d01a      	beq.n	8009f30 <TIM_SlaveTimer_SetConfig+0x7c>
 8009efa:	2b70      	cmp	r3, #112	; 0x70
 8009efc:	d860      	bhi.n	8009fc0 <TIM_SlaveTimer_SetConfig+0x10c>
 8009efe:	2b60      	cmp	r3, #96	; 0x60
 8009f00:	d054      	beq.n	8009fac <TIM_SlaveTimer_SetConfig+0xf8>
 8009f02:	2b60      	cmp	r3, #96	; 0x60
 8009f04:	d85c      	bhi.n	8009fc0 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f06:	2b50      	cmp	r3, #80	; 0x50
 8009f08:	d046      	beq.n	8009f98 <TIM_SlaveTimer_SetConfig+0xe4>
 8009f0a:	2b50      	cmp	r3, #80	; 0x50
 8009f0c:	d858      	bhi.n	8009fc0 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f0e:	2b40      	cmp	r3, #64	; 0x40
 8009f10:	d019      	beq.n	8009f46 <TIM_SlaveTimer_SetConfig+0x92>
 8009f12:	2b40      	cmp	r3, #64	; 0x40
 8009f14:	d854      	bhi.n	8009fc0 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f16:	2b30      	cmp	r3, #48	; 0x30
 8009f18:	d054      	beq.n	8009fc4 <TIM_SlaveTimer_SetConfig+0x110>
 8009f1a:	2b30      	cmp	r3, #48	; 0x30
 8009f1c:	d850      	bhi.n	8009fc0 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	d050      	beq.n	8009fc4 <TIM_SlaveTimer_SetConfig+0x110>
 8009f22:	2b20      	cmp	r3, #32
 8009f24:	d84c      	bhi.n	8009fc0 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d04c      	beq.n	8009fc4 <TIM_SlaveTimer_SetConfig+0x110>
 8009f2a:	2b10      	cmp	r3, #16
 8009f2c:	d04a      	beq.n	8009fc4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8009f2e:	e047      	b.n	8009fc0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6818      	ldr	r0, [r3, #0]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	68d9      	ldr	r1, [r3, #12]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	689a      	ldr	r2, [r3, #8]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	f000 f8c2 	bl	800a0c8 <TIM_ETR_SetConfig>
      break;
 8009f44:	e03f      	b.n	8009fc6 <TIM_SlaveTimer_SetConfig+0x112>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b05      	cmp	r3, #5
 8009f4c:	d101      	bne.n	8009f52 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e03a      	b.n	8009fc8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6a1b      	ldr	r3, [r3, #32]
 8009f58:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	6a1a      	ldr	r2, [r3, #32]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 0201 	bic.w	r2, r2, #1
 8009f68:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f78:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	621a      	str	r2, [r3, #32]
      break;
 8009f96:	e016      	b.n	8009fc6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6818      	ldr	r0, [r3, #0]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	6899      	ldr	r1, [r3, #8]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	f000 f815 	bl	8009fd4 <TIM_TI1_ConfigInputStage>
      break;
 8009faa:	e00c      	b.n	8009fc6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6818      	ldr	r0, [r3, #0]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	6899      	ldr	r1, [r3, #8]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	f000 f83a 	bl	800a032 <TIM_TI2_ConfigInputStage>
      break;
 8009fbe:	e002      	b.n	8009fc6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8009fc0:	bf00      	nop
 8009fc2:	e000      	b.n	8009fc6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8009fc4:	bf00      	nop
  }
  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3718      	adds	r7, #24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	fffefff8 	.word	0xfffefff8

08009fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	f023 0201 	bic.w	r2, r3, #1
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	4313      	orrs	r3, r2
 800a008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f023 030a 	bic.w	r3, r3, #10
 800a010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4313      	orrs	r3, r2
 800a018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	621a      	str	r2, [r3, #32]
}
 800a026:	bf00      	nop
 800a028:	371c      	adds	r7, #28
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a032:	b480      	push	{r7}
 800a034:	b087      	sub	sp, #28
 800a036:	af00      	add	r7, sp, #0
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	f023 0210 	bic.w	r2, r3, #16
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a05c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	031b      	lsls	r3, r3, #12
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	4313      	orrs	r3, r2
 800a066:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a06e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	011b      	lsls	r3, r3, #4
 800a074:	693a      	ldr	r2, [r7, #16]
 800a076:	4313      	orrs	r3, r2
 800a078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	621a      	str	r2, [r3, #32]
}
 800a086:	bf00      	nop
 800a088:	371c      	adds	r7, #28
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a092:	b480      	push	{r7}
 800a094:	b085      	sub	sp, #20
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	f043 0307 	orr.w	r3, r3, #7
 800a0b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	609a      	str	r2, [r3, #8]
}
 800a0bc:	bf00      	nop
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
 800a0d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	021a      	lsls	r2, r3, #8
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	609a      	str	r2, [r3, #8]
}
 800a0fc:	bf00      	nop
 800a0fe:	371c      	adds	r7, #28
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d101      	bne.n	800a120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a11c:	2302      	movs	r3, #2
 800a11e:	e06d      	b.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a30      	ldr	r2, [pc, #192]	; (800a208 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d004      	beq.n	800a154 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a2f      	ldr	r2, [pc, #188]	; (800a20c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d108      	bne.n	800a166 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a15a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	4313      	orrs	r3, r2
 800a164:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a16c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	4313      	orrs	r3, r2
 800a176:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a20      	ldr	r2, [pc, #128]	; (800a208 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d022      	beq.n	800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a192:	d01d      	beq.n	800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a1d      	ldr	r2, [pc, #116]	; (800a210 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d018      	beq.n	800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a1c      	ldr	r2, [pc, #112]	; (800a214 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d013      	beq.n	800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a1a      	ldr	r2, [pc, #104]	; (800a218 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d00e      	beq.n	800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a15      	ldr	r2, [pc, #84]	; (800a20c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d009      	beq.n	800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a16      	ldr	r2, [pc, #88]	; (800a21c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d004      	beq.n	800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a15      	ldr	r2, [pc, #84]	; (800a220 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d10c      	bne.n	800a1ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	40010000 	.word	0x40010000
 800a20c:	40010400 	.word	0x40010400
 800a210:	40000400 	.word	0x40000400
 800a214:	40000800 	.word	0x40000800
 800a218:	40000c00 	.word	0x40000c00
 800a21c:	40014000 	.word	0x40014000
 800a220:	40001800 	.word	0x40001800

0800a224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a22e:	2300      	movs	r3, #0
 800a230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d101      	bne.n	800a240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a23c:	2302      	movs	r3, #2
 800a23e:	e065      	b.n	800a30c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	4313      	orrs	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	4313      	orrs	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	4313      	orrs	r3, r2
 800a270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	4313      	orrs	r3, r2
 800a29a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	041b      	lsls	r3, r3, #16
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a16      	ldr	r2, [pc, #88]	; (800a318 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d004      	beq.n	800a2ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a14      	ldr	r2, [pc, #80]	; (800a31c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d115      	bne.n	800a2fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	051b      	lsls	r3, r3, #20
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	40010000 	.word	0x40010000
 800a31c:	40010400 	.word	0x40010400

0800a320 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e040      	b.n	800a3f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7fa f83a 	bl	80043f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2224      	movs	r2, #36	; 0x24
 800a388:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 0201 	bic.w	r2, r2, #1
 800a398:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fa6e 	bl	800a87c <UART_SetConfig>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d101      	bne.n	800a3aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e022      	b.n	800a3f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fd0e 	bl	800add4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	685a      	ldr	r2, [r3, #4]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689a      	ldr	r2, [r3, #8]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f042 0201 	orr.w	r2, r2, #1
 800a3e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fd95 	bl	800af18 <UART_CheckIdleState>
 800a3ee:	4603      	mov	r3, r0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	4613      	mov	r3, r2
 800a404:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a40a:	2b20      	cmp	r3, #32
 800a40c:	d144      	bne.n	800a498 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <HAL_UART_Transmit_IT+0x22>
 800a414:	88fb      	ldrh	r3, [r7, #6]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e03d      	b.n	800a49a <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a424:	2b01      	cmp	r3, #1
 800a426:	d101      	bne.n	800a42c <HAL_UART_Transmit_IT+0x34>
 800a428:	2302      	movs	r3, #2
 800a42a:	e036      	b.n	800a49a <HAL_UART_Transmit_IT+0xa2>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	88fa      	ldrh	r2, [r7, #6]
 800a43e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	88fa      	ldrh	r2, [r7, #6]
 800a446:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2221      	movs	r2, #33	; 0x21
 800a45a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a464:	d107      	bne.n	800a476 <HAL_UART_Transmit_IT+0x7e>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d103      	bne.n	800a476 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	4a0d      	ldr	r2, [pc, #52]	; (800a4a8 <HAL_UART_Transmit_IT+0xb0>)
 800a472:	665a      	str	r2, [r3, #100]	; 0x64
 800a474:	e002      	b.n	800a47c <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4a0c      	ldr	r2, [pc, #48]	; (800a4ac <HAL_UART_Transmit_IT+0xb4>)
 800a47a:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a492:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	e000      	b.n	800a49a <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800a498:	2302      	movs	r3, #2
  }
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	0800b14b 	.word	0x0800b14b
 800a4ac:	0800b0d9 	.word	0x0800b0d9

0800a4b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4c2:	2b20      	cmp	r3, #32
 800a4c4:	f040 808a 	bne.w	800a5dc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <HAL_UART_Receive_IT+0x24>
 800a4ce:	88fb      	ldrh	r3, [r7, #6]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e082      	b.n	800a5de <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d101      	bne.n	800a4e6 <HAL_UART_Receive_IT+0x36>
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	e07b      	b.n	800a5de <HAL_UART_Receive_IT+0x12e>
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	88fa      	ldrh	r2, [r7, #6]
 800a4f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	88fa      	ldrh	r2, [r7, #6]
 800a500:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a512:	d10e      	bne.n	800a532 <HAL_UART_Receive_IT+0x82>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d105      	bne.n	800a528 <HAL_UART_Receive_IT+0x78>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a522:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a526:	e02d      	b.n	800a584 <HAL_UART_Receive_IT+0xd4>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	22ff      	movs	r2, #255	; 0xff
 800a52c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a530:	e028      	b.n	800a584 <HAL_UART_Receive_IT+0xd4>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10d      	bne.n	800a556 <HAL_UART_Receive_IT+0xa6>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d104      	bne.n	800a54c <HAL_UART_Receive_IT+0x9c>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	22ff      	movs	r2, #255	; 0xff
 800a546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a54a:	e01b      	b.n	800a584 <HAL_UART_Receive_IT+0xd4>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	227f      	movs	r2, #127	; 0x7f
 800a550:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a554:	e016      	b.n	800a584 <HAL_UART_Receive_IT+0xd4>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a55e:	d10d      	bne.n	800a57c <HAL_UART_Receive_IT+0xcc>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d104      	bne.n	800a572 <HAL_UART_Receive_IT+0xc2>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	227f      	movs	r2, #127	; 0x7f
 800a56c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a570:	e008      	b.n	800a584 <HAL_UART_Receive_IT+0xd4>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	223f      	movs	r2, #63	; 0x3f
 800a576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a57a:	e003      	b.n	800a584 <HAL_UART_Receive_IT+0xd4>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2222      	movs	r2, #34	; 0x22
 800a58e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689a      	ldr	r2, [r3, #8]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f042 0201 	orr.w	r2, r2, #1
 800a59e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a8:	d107      	bne.n	800a5ba <HAL_UART_Receive_IT+0x10a>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d103      	bne.n	800a5ba <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4a0d      	ldr	r2, [pc, #52]	; (800a5ec <HAL_UART_Receive_IT+0x13c>)
 800a5b6:	661a      	str	r2, [r3, #96]	; 0x60
 800a5b8:	e002      	b.n	800a5c0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	4a0c      	ldr	r2, [pc, #48]	; (800a5f0 <HAL_UART_Receive_IT+0x140>)
 800a5be:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a5d6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	e000      	b.n	800a5de <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a5dc:	2302      	movs	r3, #2
  }
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3714      	adds	r7, #20
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	0800b29f 	.word	0x0800b29f
 800a5f0:	0800b1f9 	.word	0x0800b1f9

0800a5f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b088      	sub	sp, #32
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a614:	69fa      	ldr	r2, [r7, #28]
 800a616:	f640 030f 	movw	r3, #2063	; 0x80f
 800a61a:	4013      	ands	r3, r2
 800a61c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d113      	bne.n	800a64c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	f003 0320 	and.w	r3, r3, #32
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00e      	beq.n	800a64c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	f003 0320 	and.w	r3, r3, #32
 800a634:	2b00      	cmp	r3, #0
 800a636:	d009      	beq.n	800a64c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 80ff 	beq.w	800a840 <HAL_UART_IRQHandler+0x24c>
      {
        huart->RxISR(huart);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	4798      	blx	r3
      }
      return;
 800a64a:	e0f9      	b.n	800a840 <HAL_UART_IRQHandler+0x24c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f000 80d5 	beq.w	800a7fe <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d105      	bne.n	800a66a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 80ca 	beq.w	800a7fe <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00e      	beq.n	800a692 <HAL_UART_IRQHandler+0x9e>
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d009      	beq.n	800a692 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2201      	movs	r2, #1
 800a684:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a68a:	f043 0201 	orr.w	r2, r3, #1
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	f003 0302 	and.w	r3, r3, #2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00e      	beq.n	800a6ba <HAL_UART_IRQHandler+0xc6>
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	f003 0301 	and.w	r3, r3, #1
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d009      	beq.n	800a6ba <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6b2:	f043 0204 	orr.w	r2, r3, #4
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00e      	beq.n	800a6e2 <HAL_UART_IRQHandler+0xee>
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d009      	beq.n	800a6e2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2204      	movs	r2, #4
 800a6d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6da:	f043 0202 	orr.w	r2, r3, #2
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	f003 0308 	and.w	r3, r3, #8
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d013      	beq.n	800a714 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	f003 0320 	and.w	r3, r3, #32
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d104      	bne.n	800a700 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d009      	beq.n	800a714 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2208      	movs	r2, #8
 800a706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a70c:	f043 0208 	orr.w	r2, r3, #8
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00f      	beq.n	800a73e <HAL_UART_IRQHandler+0x14a>
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00a      	beq.n	800a73e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a730:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a736:	f043 0220 	orr.w	r2, r3, #32
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a742:	2b00      	cmp	r3, #0
 800a744:	d07e      	beq.n	800a844 <HAL_UART_IRQHandler+0x250>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	f003 0320 	and.w	r3, r3, #32
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00c      	beq.n	800a76a <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	f003 0320 	and.w	r3, r3, #32
 800a756:	2b00      	cmp	r3, #0
 800a758:	d007      	beq.n	800a76a <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d003      	beq.n	800a76a <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a76e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a77a:	2b40      	cmp	r3, #64	; 0x40
 800a77c:	d004      	beq.n	800a788 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a784:	2b00      	cmp	r3, #0
 800a786:	d031      	beq.n	800a7ec <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fc6f 	bl	800b06c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a798:	2b40      	cmp	r3, #64	; 0x40
 800a79a:	d123      	bne.n	800a7e4 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	689a      	ldr	r2, [r3, #8]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7aa:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d013      	beq.n	800a7dc <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7b8:	4a25      	ldr	r2, [pc, #148]	; (800a850 <HAL_UART_IRQHandler+0x25c>)
 800a7ba:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fa ff49 	bl	8005658 <HAL_DMA_Abort_IT>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d016      	beq.n	800a7fa <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a7d6:	4610      	mov	r0, r2
 800a7d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7da:	e00e      	b.n	800a7fa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f843 	bl	800a868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7e2:	e00a      	b.n	800a7fa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f83f 	bl	800a868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7ea:	e006      	b.n	800a7fa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f83b 	bl	800a868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a7f8:	e024      	b.n	800a844 <HAL_UART_IRQHandler+0x250>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7fa:	bf00      	nop
    return;
 800a7fc:	e022      	b.n	800a844 <HAL_UART_IRQHandler+0x250>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00d      	beq.n	800a824 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d008      	beq.n	800a824 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a816:	2b00      	cmp	r3, #0
 800a818:	d016      	beq.n	800a848 <HAL_UART_IRQHandler+0x254>
    {
      huart->TxISR(huart);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	4798      	blx	r3
    }
    return;
 800a822:	e011      	b.n	800a848 <HAL_UART_IRQHandler+0x254>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00d      	beq.n	800a84a <HAL_UART_IRQHandler+0x256>
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a834:	2b00      	cmp	r3, #0
 800a836:	d008      	beq.n	800a84a <HAL_UART_IRQHandler+0x256>
  {
    UART_EndTransmit_IT(huart);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fcc4 	bl	800b1c6 <UART_EndTransmit_IT>
    return;
 800a83e:	e004      	b.n	800a84a <HAL_UART_IRQHandler+0x256>
      return;
 800a840:	bf00      	nop
 800a842:	e002      	b.n	800a84a <HAL_UART_IRQHandler+0x256>
    return;
 800a844:	bf00      	nop
 800a846:	e000      	b.n	800a84a <HAL_UART_IRQHandler+0x256>
    return;
 800a848:	bf00      	nop
  }

}
 800a84a:	3720      	adds	r7, #32
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	0800b0ad 	.word	0x0800b0ad

0800a854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b088      	sub	sp, #32
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a884:	2300      	movs	r3, #0
 800a886:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	689a      	ldr	r2, [r3, #8]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	431a      	orrs	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	431a      	orrs	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	69db      	ldr	r3, [r3, #28]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	4ba7      	ldr	r3, [pc, #668]	; (800ab48 <UART_SetConfig+0x2cc>)
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	6812      	ldr	r2, [r2, #0]
 800a8b2:	6939      	ldr	r1, [r7, #16]
 800a8b4:	430b      	orrs	r3, r1
 800a8b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	68da      	ldr	r2, [r3, #12]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a1b      	ldr	r3, [r3, #32]
 800a8d8:	693a      	ldr	r2, [r7, #16]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	430a      	orrs	r2, r1
 800a8f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a95      	ldr	r2, [pc, #596]	; (800ab4c <UART_SetConfig+0x2d0>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d120      	bne.n	800a93e <UART_SetConfig+0xc2>
 800a8fc:	4b94      	ldr	r3, [pc, #592]	; (800ab50 <UART_SetConfig+0x2d4>)
 800a8fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a902:	f003 0303 	and.w	r3, r3, #3
 800a906:	2b03      	cmp	r3, #3
 800a908:	d816      	bhi.n	800a938 <UART_SetConfig+0xbc>
 800a90a:	a201      	add	r2, pc, #4	; (adr r2, 800a910 <UART_SetConfig+0x94>)
 800a90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a910:	0800a921 	.word	0x0800a921
 800a914:	0800a92d 	.word	0x0800a92d
 800a918:	0800a927 	.word	0x0800a927
 800a91c:	0800a933 	.word	0x0800a933
 800a920:	2301      	movs	r3, #1
 800a922:	77fb      	strb	r3, [r7, #31]
 800a924:	e14f      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a926:	2302      	movs	r3, #2
 800a928:	77fb      	strb	r3, [r7, #31]
 800a92a:	e14c      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a92c:	2304      	movs	r3, #4
 800a92e:	77fb      	strb	r3, [r7, #31]
 800a930:	e149      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a932:	2308      	movs	r3, #8
 800a934:	77fb      	strb	r3, [r7, #31]
 800a936:	e146      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a938:	2310      	movs	r3, #16
 800a93a:	77fb      	strb	r3, [r7, #31]
 800a93c:	e143      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a84      	ldr	r2, [pc, #528]	; (800ab54 <UART_SetConfig+0x2d8>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d132      	bne.n	800a9ae <UART_SetConfig+0x132>
 800a948:	4b81      	ldr	r3, [pc, #516]	; (800ab50 <UART_SetConfig+0x2d4>)
 800a94a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a94e:	f003 030c 	and.w	r3, r3, #12
 800a952:	2b0c      	cmp	r3, #12
 800a954:	d828      	bhi.n	800a9a8 <UART_SetConfig+0x12c>
 800a956:	a201      	add	r2, pc, #4	; (adr r2, 800a95c <UART_SetConfig+0xe0>)
 800a958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95c:	0800a991 	.word	0x0800a991
 800a960:	0800a9a9 	.word	0x0800a9a9
 800a964:	0800a9a9 	.word	0x0800a9a9
 800a968:	0800a9a9 	.word	0x0800a9a9
 800a96c:	0800a99d 	.word	0x0800a99d
 800a970:	0800a9a9 	.word	0x0800a9a9
 800a974:	0800a9a9 	.word	0x0800a9a9
 800a978:	0800a9a9 	.word	0x0800a9a9
 800a97c:	0800a997 	.word	0x0800a997
 800a980:	0800a9a9 	.word	0x0800a9a9
 800a984:	0800a9a9 	.word	0x0800a9a9
 800a988:	0800a9a9 	.word	0x0800a9a9
 800a98c:	0800a9a3 	.word	0x0800a9a3
 800a990:	2300      	movs	r3, #0
 800a992:	77fb      	strb	r3, [r7, #31]
 800a994:	e117      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a996:	2302      	movs	r3, #2
 800a998:	77fb      	strb	r3, [r7, #31]
 800a99a:	e114      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a99c:	2304      	movs	r3, #4
 800a99e:	77fb      	strb	r3, [r7, #31]
 800a9a0:	e111      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a9a2:	2308      	movs	r3, #8
 800a9a4:	77fb      	strb	r3, [r7, #31]
 800a9a6:	e10e      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a9a8:	2310      	movs	r3, #16
 800a9aa:	77fb      	strb	r3, [r7, #31]
 800a9ac:	e10b      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a69      	ldr	r2, [pc, #420]	; (800ab58 <UART_SetConfig+0x2dc>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d120      	bne.n	800a9fa <UART_SetConfig+0x17e>
 800a9b8:	4b65      	ldr	r3, [pc, #404]	; (800ab50 <UART_SetConfig+0x2d4>)
 800a9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9c2:	2b30      	cmp	r3, #48	; 0x30
 800a9c4:	d013      	beq.n	800a9ee <UART_SetConfig+0x172>
 800a9c6:	2b30      	cmp	r3, #48	; 0x30
 800a9c8:	d814      	bhi.n	800a9f4 <UART_SetConfig+0x178>
 800a9ca:	2b20      	cmp	r3, #32
 800a9cc:	d009      	beq.n	800a9e2 <UART_SetConfig+0x166>
 800a9ce:	2b20      	cmp	r3, #32
 800a9d0:	d810      	bhi.n	800a9f4 <UART_SetConfig+0x178>
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d002      	beq.n	800a9dc <UART_SetConfig+0x160>
 800a9d6:	2b10      	cmp	r3, #16
 800a9d8:	d006      	beq.n	800a9e8 <UART_SetConfig+0x16c>
 800a9da:	e00b      	b.n	800a9f4 <UART_SetConfig+0x178>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	77fb      	strb	r3, [r7, #31]
 800a9e0:	e0f1      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	77fb      	strb	r3, [r7, #31]
 800a9e6:	e0ee      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a9e8:	2304      	movs	r3, #4
 800a9ea:	77fb      	strb	r3, [r7, #31]
 800a9ec:	e0eb      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a9ee:	2308      	movs	r3, #8
 800a9f0:	77fb      	strb	r3, [r7, #31]
 800a9f2:	e0e8      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a9f4:	2310      	movs	r3, #16
 800a9f6:	77fb      	strb	r3, [r7, #31]
 800a9f8:	e0e5      	b.n	800abc6 <UART_SetConfig+0x34a>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a57      	ldr	r2, [pc, #348]	; (800ab5c <UART_SetConfig+0x2e0>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d120      	bne.n	800aa46 <UART_SetConfig+0x1ca>
 800aa04:	4b52      	ldr	r3, [pc, #328]	; (800ab50 <UART_SetConfig+0x2d4>)
 800aa06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa0e:	2bc0      	cmp	r3, #192	; 0xc0
 800aa10:	d013      	beq.n	800aa3a <UART_SetConfig+0x1be>
 800aa12:	2bc0      	cmp	r3, #192	; 0xc0
 800aa14:	d814      	bhi.n	800aa40 <UART_SetConfig+0x1c4>
 800aa16:	2b80      	cmp	r3, #128	; 0x80
 800aa18:	d009      	beq.n	800aa2e <UART_SetConfig+0x1b2>
 800aa1a:	2b80      	cmp	r3, #128	; 0x80
 800aa1c:	d810      	bhi.n	800aa40 <UART_SetConfig+0x1c4>
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d002      	beq.n	800aa28 <UART_SetConfig+0x1ac>
 800aa22:	2b40      	cmp	r3, #64	; 0x40
 800aa24:	d006      	beq.n	800aa34 <UART_SetConfig+0x1b8>
 800aa26:	e00b      	b.n	800aa40 <UART_SetConfig+0x1c4>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	77fb      	strb	r3, [r7, #31]
 800aa2c:	e0cb      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aa2e:	2302      	movs	r3, #2
 800aa30:	77fb      	strb	r3, [r7, #31]
 800aa32:	e0c8      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aa34:	2304      	movs	r3, #4
 800aa36:	77fb      	strb	r3, [r7, #31]
 800aa38:	e0c5      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aa3a:	2308      	movs	r3, #8
 800aa3c:	77fb      	strb	r3, [r7, #31]
 800aa3e:	e0c2      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aa40:	2310      	movs	r3, #16
 800aa42:	77fb      	strb	r3, [r7, #31]
 800aa44:	e0bf      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a45      	ldr	r2, [pc, #276]	; (800ab60 <UART_SetConfig+0x2e4>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d125      	bne.n	800aa9c <UART_SetConfig+0x220>
 800aa50:	4b3f      	ldr	r3, [pc, #252]	; (800ab50 <UART_SetConfig+0x2d4>)
 800aa52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa5e:	d017      	beq.n	800aa90 <UART_SetConfig+0x214>
 800aa60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa64:	d817      	bhi.n	800aa96 <UART_SetConfig+0x21a>
 800aa66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa6a:	d00b      	beq.n	800aa84 <UART_SetConfig+0x208>
 800aa6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa70:	d811      	bhi.n	800aa96 <UART_SetConfig+0x21a>
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <UART_SetConfig+0x202>
 800aa76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa7a:	d006      	beq.n	800aa8a <UART_SetConfig+0x20e>
 800aa7c:	e00b      	b.n	800aa96 <UART_SetConfig+0x21a>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	77fb      	strb	r3, [r7, #31]
 800aa82:	e0a0      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aa84:	2302      	movs	r3, #2
 800aa86:	77fb      	strb	r3, [r7, #31]
 800aa88:	e09d      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aa8a:	2304      	movs	r3, #4
 800aa8c:	77fb      	strb	r3, [r7, #31]
 800aa8e:	e09a      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aa90:	2308      	movs	r3, #8
 800aa92:	77fb      	strb	r3, [r7, #31]
 800aa94:	e097      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aa96:	2310      	movs	r3, #16
 800aa98:	77fb      	strb	r3, [r7, #31]
 800aa9a:	e094      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a30      	ldr	r2, [pc, #192]	; (800ab64 <UART_SetConfig+0x2e8>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d125      	bne.n	800aaf2 <UART_SetConfig+0x276>
 800aaa6:	4b2a      	ldr	r3, [pc, #168]	; (800ab50 <UART_SetConfig+0x2d4>)
 800aaa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aab0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aab4:	d017      	beq.n	800aae6 <UART_SetConfig+0x26a>
 800aab6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aaba:	d817      	bhi.n	800aaec <UART_SetConfig+0x270>
 800aabc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aac0:	d00b      	beq.n	800aada <UART_SetConfig+0x25e>
 800aac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aac6:	d811      	bhi.n	800aaec <UART_SetConfig+0x270>
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d003      	beq.n	800aad4 <UART_SetConfig+0x258>
 800aacc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aad0:	d006      	beq.n	800aae0 <UART_SetConfig+0x264>
 800aad2:	e00b      	b.n	800aaec <UART_SetConfig+0x270>
 800aad4:	2301      	movs	r3, #1
 800aad6:	77fb      	strb	r3, [r7, #31]
 800aad8:	e075      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aada:	2302      	movs	r3, #2
 800aadc:	77fb      	strb	r3, [r7, #31]
 800aade:	e072      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aae0:	2304      	movs	r3, #4
 800aae2:	77fb      	strb	r3, [r7, #31]
 800aae4:	e06f      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aae6:	2308      	movs	r3, #8
 800aae8:	77fb      	strb	r3, [r7, #31]
 800aaea:	e06c      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aaec:	2310      	movs	r3, #16
 800aaee:	77fb      	strb	r3, [r7, #31]
 800aaf0:	e069      	b.n	800abc6 <UART_SetConfig+0x34a>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a1c      	ldr	r2, [pc, #112]	; (800ab68 <UART_SetConfig+0x2ec>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d137      	bne.n	800ab6c <UART_SetConfig+0x2f0>
 800aafc:	4b14      	ldr	r3, [pc, #80]	; (800ab50 <UART_SetConfig+0x2d4>)
 800aafe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ab06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab0a:	d017      	beq.n	800ab3c <UART_SetConfig+0x2c0>
 800ab0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab10:	d817      	bhi.n	800ab42 <UART_SetConfig+0x2c6>
 800ab12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab16:	d00b      	beq.n	800ab30 <UART_SetConfig+0x2b4>
 800ab18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab1c:	d811      	bhi.n	800ab42 <UART_SetConfig+0x2c6>
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <UART_SetConfig+0x2ae>
 800ab22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab26:	d006      	beq.n	800ab36 <UART_SetConfig+0x2ba>
 800ab28:	e00b      	b.n	800ab42 <UART_SetConfig+0x2c6>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	77fb      	strb	r3, [r7, #31]
 800ab2e:	e04a      	b.n	800abc6 <UART_SetConfig+0x34a>
 800ab30:	2302      	movs	r3, #2
 800ab32:	77fb      	strb	r3, [r7, #31]
 800ab34:	e047      	b.n	800abc6 <UART_SetConfig+0x34a>
 800ab36:	2304      	movs	r3, #4
 800ab38:	77fb      	strb	r3, [r7, #31]
 800ab3a:	e044      	b.n	800abc6 <UART_SetConfig+0x34a>
 800ab3c:	2308      	movs	r3, #8
 800ab3e:	77fb      	strb	r3, [r7, #31]
 800ab40:	e041      	b.n	800abc6 <UART_SetConfig+0x34a>
 800ab42:	2310      	movs	r3, #16
 800ab44:	77fb      	strb	r3, [r7, #31]
 800ab46:	e03e      	b.n	800abc6 <UART_SetConfig+0x34a>
 800ab48:	efff69f3 	.word	0xefff69f3
 800ab4c:	40011000 	.word	0x40011000
 800ab50:	40023800 	.word	0x40023800
 800ab54:	40004400 	.word	0x40004400
 800ab58:	40004800 	.word	0x40004800
 800ab5c:	40004c00 	.word	0x40004c00
 800ab60:	40005000 	.word	0x40005000
 800ab64:	40011400 	.word	0x40011400
 800ab68:	40007800 	.word	0x40007800
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a94      	ldr	r2, [pc, #592]	; (800adc4 <UART_SetConfig+0x548>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d125      	bne.n	800abc2 <UART_SetConfig+0x346>
 800ab76:	4b94      	ldr	r3, [pc, #592]	; (800adc8 <UART_SetConfig+0x54c>)
 800ab78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ab80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ab84:	d017      	beq.n	800abb6 <UART_SetConfig+0x33a>
 800ab86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ab8a:	d817      	bhi.n	800abbc <UART_SetConfig+0x340>
 800ab8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab90:	d00b      	beq.n	800abaa <UART_SetConfig+0x32e>
 800ab92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab96:	d811      	bhi.n	800abbc <UART_SetConfig+0x340>
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d003      	beq.n	800aba4 <UART_SetConfig+0x328>
 800ab9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aba0:	d006      	beq.n	800abb0 <UART_SetConfig+0x334>
 800aba2:	e00b      	b.n	800abbc <UART_SetConfig+0x340>
 800aba4:	2300      	movs	r3, #0
 800aba6:	77fb      	strb	r3, [r7, #31]
 800aba8:	e00d      	b.n	800abc6 <UART_SetConfig+0x34a>
 800abaa:	2302      	movs	r3, #2
 800abac:	77fb      	strb	r3, [r7, #31]
 800abae:	e00a      	b.n	800abc6 <UART_SetConfig+0x34a>
 800abb0:	2304      	movs	r3, #4
 800abb2:	77fb      	strb	r3, [r7, #31]
 800abb4:	e007      	b.n	800abc6 <UART_SetConfig+0x34a>
 800abb6:	2308      	movs	r3, #8
 800abb8:	77fb      	strb	r3, [r7, #31]
 800abba:	e004      	b.n	800abc6 <UART_SetConfig+0x34a>
 800abbc:	2310      	movs	r3, #16
 800abbe:	77fb      	strb	r3, [r7, #31]
 800abc0:	e001      	b.n	800abc6 <UART_SetConfig+0x34a>
 800abc2:	2310      	movs	r3, #16
 800abc4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abce:	d17f      	bne.n	800acd0 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800abd0:	7ffb      	ldrb	r3, [r7, #31]
 800abd2:	2b08      	cmp	r3, #8
 800abd4:	d85c      	bhi.n	800ac90 <UART_SetConfig+0x414>
 800abd6:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <UART_SetConfig+0x360>)
 800abd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abdc:	0800ac01 	.word	0x0800ac01
 800abe0:	0800ac21 	.word	0x0800ac21
 800abe4:	0800ac41 	.word	0x0800ac41
 800abe8:	0800ac91 	.word	0x0800ac91
 800abec:	0800ac59 	.word	0x0800ac59
 800abf0:	0800ac91 	.word	0x0800ac91
 800abf4:	0800ac91 	.word	0x0800ac91
 800abf8:	0800ac91 	.word	0x0800ac91
 800abfc:	0800ac79 	.word	0x0800ac79
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac00:	f7fd f94e 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 800ac04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	005a      	lsls	r2, r3, #1
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	085b      	lsrs	r3, r3, #1
 800ac10:	441a      	add	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	61bb      	str	r3, [r7, #24]
        break;
 800ac1e:	e03a      	b.n	800ac96 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac20:	f7fd f952 	bl	8007ec8 <HAL_RCC_GetPCLK2Freq>
 800ac24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	005a      	lsls	r2, r3, #1
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	085b      	lsrs	r3, r3, #1
 800ac30:	441a      	add	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	61bb      	str	r3, [r7, #24]
        break;
 800ac3e:	e02a      	b.n	800ac96 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	085a      	lsrs	r2, r3, #1
 800ac46:	4b61      	ldr	r3, [pc, #388]	; (800adcc <UART_SetConfig+0x550>)
 800ac48:	4413      	add	r3, r2
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	6852      	ldr	r2, [r2, #4]
 800ac4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	61bb      	str	r3, [r7, #24]
        break;
 800ac56:	e01e      	b.n	800ac96 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac58:	f7fd f860 	bl	8007d1c <HAL_RCC_GetSysClockFreq>
 800ac5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	005a      	lsls	r2, r3, #1
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	085b      	lsrs	r3, r3, #1
 800ac68:	441a      	add	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	61bb      	str	r3, [r7, #24]
        break;
 800ac76:	e00e      	b.n	800ac96 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	085b      	lsrs	r3, r3, #1
 800ac7e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	61bb      	str	r3, [r7, #24]
        break;
 800ac8e:	e002      	b.n	800ac96 <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	75fb      	strb	r3, [r7, #23]
        break;
 800ac94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	2b0f      	cmp	r3, #15
 800ac9a:	d916      	bls.n	800acca <UART_SetConfig+0x44e>
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca2:	d212      	bcs.n	800acca <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	f023 030f 	bic.w	r3, r3, #15
 800acac:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	085b      	lsrs	r3, r3, #1
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	f003 0307 	and.w	r3, r3, #7
 800acb8:	b29a      	uxth	r2, r3
 800acba:	897b      	ldrh	r3, [r7, #10]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	897a      	ldrh	r2, [r7, #10]
 800acc6:	60da      	str	r2, [r3, #12]
 800acc8:	e070      	b.n	800adac <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	75fb      	strb	r3, [r7, #23]
 800acce:	e06d      	b.n	800adac <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 800acd0:	7ffb      	ldrb	r3, [r7, #31]
 800acd2:	2b08      	cmp	r3, #8
 800acd4:	d859      	bhi.n	800ad8a <UART_SetConfig+0x50e>
 800acd6:	a201      	add	r2, pc, #4	; (adr r2, 800acdc <UART_SetConfig+0x460>)
 800acd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acdc:	0800ad01 	.word	0x0800ad01
 800ace0:	0800ad1f 	.word	0x0800ad1f
 800ace4:	0800ad3d 	.word	0x0800ad3d
 800ace8:	0800ad8b 	.word	0x0800ad8b
 800acec:	0800ad55 	.word	0x0800ad55
 800acf0:	0800ad8b 	.word	0x0800ad8b
 800acf4:	0800ad8b 	.word	0x0800ad8b
 800acf8:	0800ad8b 	.word	0x0800ad8b
 800acfc:	0800ad73 	.word	0x0800ad73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad00:	f7fd f8ce 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 800ad04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	085a      	lsrs	r2, r3, #1
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	441a      	add	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	61bb      	str	r3, [r7, #24]
        break;
 800ad1c:	e038      	b.n	800ad90 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad1e:	f7fd f8d3 	bl	8007ec8 <HAL_RCC_GetPCLK2Freq>
 800ad22:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	085a      	lsrs	r2, r3, #1
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	441a      	add	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	61bb      	str	r3, [r7, #24]
        break;
 800ad3a:	e029      	b.n	800ad90 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	085a      	lsrs	r2, r3, #1
 800ad42:	4b23      	ldr	r3, [pc, #140]	; (800add0 <UART_SetConfig+0x554>)
 800ad44:	4413      	add	r3, r2
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	6852      	ldr	r2, [r2, #4]
 800ad4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	61bb      	str	r3, [r7, #24]
        break;
 800ad52:	e01d      	b.n	800ad90 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad54:	f7fc ffe2 	bl	8007d1c <HAL_RCC_GetSysClockFreq>
 800ad58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	085a      	lsrs	r2, r3, #1
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	441a      	add	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	61bb      	str	r3, [r7, #24]
        break;
 800ad70:	e00e      	b.n	800ad90 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	085b      	lsrs	r3, r3, #1
 800ad78:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	61bb      	str	r3, [r7, #24]
        break;
 800ad88:	e002      	b.n	800ad90 <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	75fb      	strb	r3, [r7, #23]
        break;
 800ad8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	2b0f      	cmp	r3, #15
 800ad94:	d908      	bls.n	800ada8 <UART_SetConfig+0x52c>
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad9c:	d204      	bcs.n	800ada8 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	69ba      	ldr	r2, [r7, #24]
 800ada4:	60da      	str	r2, [r3, #12]
 800ada6:	e001      	b.n	800adac <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800adb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3720      	adds	r7, #32
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	40007c00 	.word	0x40007c00
 800adc8:	40023800 	.word	0x40023800
 800adcc:	01e84800 	.word	0x01e84800
 800add0:	00f42400 	.word	0x00f42400

0800add4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00a      	beq.n	800adfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae02:	f003 0302 	and.w	r3, r3, #2
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00a      	beq.n	800ae20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae24:	f003 0304 	and.w	r3, r3, #4
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00a      	beq.n	800ae42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae46:	f003 0308 	and.w	r3, r3, #8
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00a      	beq.n	800ae64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	430a      	orrs	r2, r1
 800ae62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae68:	f003 0310 	and.w	r3, r3, #16
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00a      	beq.n	800ae86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8a:	f003 0320 	and.w	r3, r3, #32
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00a      	beq.n	800aea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	430a      	orrs	r2, r1
 800aea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d01a      	beq.n	800aeea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	430a      	orrs	r2, r1
 800aec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aed2:	d10a      	bne.n	800aeea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	430a      	orrs	r2, r1
 800aee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	430a      	orrs	r2, r1
 800af0a:	605a      	str	r2, [r3, #4]
  }
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af02      	add	r7, sp, #8
 800af1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800af26:	f7f9 fcd1 	bl	80048cc <HAL_GetTick>
 800af2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 0308 	and.w	r3, r3, #8
 800af36:	2b08      	cmp	r3, #8
 800af38:	d10e      	bne.n	800af58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f814 	bl	800af76 <UART_WaitOnFlagUntilTimeout>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d001      	beq.n	800af58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af54:	2303      	movs	r3, #3
 800af56:	e00a      	b.n	800af6e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2220      	movs	r2, #32
 800af5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2220      	movs	r2, #32
 800af62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	60f8      	str	r0, [r7, #12]
 800af7e:	60b9      	str	r1, [r7, #8]
 800af80:	603b      	str	r3, [r7, #0]
 800af82:	4613      	mov	r3, r2
 800af84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af86:	e05d      	b.n	800b044 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8e:	d059      	beq.n	800b044 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af90:	f7f9 fc9c 	bl	80048cc <HAL_GetTick>
 800af94:	4602      	mov	r2, r0
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	69ba      	ldr	r2, [r7, #24]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d302      	bcc.n	800afa6 <UART_WaitOnFlagUntilTimeout+0x30>
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d11b      	bne.n	800afde <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800afb4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 0201 	bic.w	r2, r2, #1
 800afc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2220      	movs	r2, #32
 800afca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2220      	movs	r2, #32
 800afd0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800afda:	2303      	movs	r3, #3
 800afdc:	e042      	b.n	800b064 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 0304 	and.w	r3, r3, #4
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d02b      	beq.n	800b044 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	69db      	ldr	r3, [r3, #28]
 800aff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800affa:	d123      	bne.n	800b044 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b004:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b014:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	689a      	ldr	r2, [r3, #8]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f022 0201 	bic.w	r2, r2, #1
 800b024:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2220      	movs	r2, #32
 800b02a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2220      	movs	r2, #32
 800b030:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2220      	movs	r2, #32
 800b036:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b040:	2303      	movs	r3, #3
 800b042:	e00f      	b.n	800b064 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	69da      	ldr	r2, [r3, #28]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	4013      	ands	r3, r2
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	429a      	cmp	r2, r3
 800b052:	bf0c      	ite	eq
 800b054:	2301      	moveq	r3, #1
 800b056:	2300      	movne	r3, #0
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	461a      	mov	r2, r3
 800b05c:	79fb      	ldrb	r3, [r7, #7]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d092      	beq.n	800af88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b082:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	689a      	ldr	r2, [r3, #8]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f022 0201 	bic.w	r2, r2, #1
 800b092:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2220      	movs	r2, #32
 800b098:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f7ff fbcc 	bl	800a868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0d0:	bf00      	nop
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0e4:	2b21      	cmp	r3, #33	; 0x21
 800b0e6:	d12a      	bne.n	800b13e <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d110      	bne.n	800b116 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b102:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b112:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b114:	e013      	b.n	800b13e <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b126:	1c5a      	adds	r2, r3, #1
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b132:	b29b      	uxth	r3, r3
 800b134:	3b01      	subs	r3, #1
 800b136:	b29a      	uxth	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b13e:	bf00      	nop
 800b140:	370c      	adds	r7, #12
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b085      	sub	sp, #20
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b156:	2b21      	cmp	r3, #33	; 0x21
 800b158:	d12f      	bne.n	800b1ba <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b160:	b29b      	uxth	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d110      	bne.n	800b188 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b174:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b184:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b186:	e018      	b.n	800b1ba <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b18c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	881b      	ldrh	r3, [r3, #0]
 800b192:	461a      	mov	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b19c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1a2:	1c9a      	adds	r2, r3, #2
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b1ba:	bf00      	nop
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b082      	sub	sp, #8
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1dc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2220      	movs	r2, #32
 800b1e2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff fb32 	bl	800a854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b206:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b20c:	2b22      	cmp	r3, #34	; 0x22
 800b20e:	d13a      	bne.n	800b286 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b216:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b218:	89bb      	ldrh	r3, [r7, #12]
 800b21a:	b2d9      	uxtb	r1, r3
 800b21c:	89fb      	ldrh	r3, [r7, #14]
 800b21e:	b2da      	uxtb	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b224:	400a      	ands	r2, r1
 800b226:	b2d2      	uxtb	r2, r2
 800b228:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	3b01      	subs	r3, #1
 800b23e:	b29a      	uxth	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d121      	bne.n	800b296 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b260:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	689a      	ldr	r2, [r3, #8]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f022 0201 	bic.w	r2, r2, #1
 800b270:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2220      	movs	r2, #32
 800b276:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f7f6 fcb2 	bl	8001be8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b284:	e007      	b.n	800b296 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	699a      	ldr	r2, [r3, #24]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f042 0208 	orr.w	r2, r2, #8
 800b294:	619a      	str	r2, [r3, #24]
}
 800b296:	bf00      	nop
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b084      	sub	sp, #16
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2ac:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2b2:	2b22      	cmp	r3, #34	; 0x22
 800b2b4:	d13a      	bne.n	800b32c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b2c4:	89ba      	ldrh	r2, [r7, #12]
 800b2c6:	89fb      	ldrh	r3, [r7, #14]
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	b29a      	uxth	r2, r3
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2d4:	1c9a      	adds	r2, r3, #2
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d121      	bne.n	800b33c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b306:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	689a      	ldr	r2, [r3, #8]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f022 0201 	bic.w	r2, r2, #1
 800b316:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2220      	movs	r2, #32
 800b31c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7f6 fc5f 	bl	8001be8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b32a:	e007      	b.n	800b33c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	699a      	ldr	r2, [r3, #24]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f042 0208 	orr.w	r2, r2, #8
 800b33a:	619a      	str	r2, [r3, #24]
}
 800b33c:	bf00      	nop
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b34e:	2300      	movs	r3, #0
 800b350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b352:	2300      	movs	r3, #0
 800b354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d027      	beq.n	800b3ae <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	4b2f      	ldr	r3, [pc, #188]	; (800b424 <FMC_SDRAM_Init+0xe0>)
 800b368:	4013      	ands	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b374:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b37a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b380:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b386:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b38c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b392:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b398:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b39e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	e032      	b.n	800b414 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b3ba:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b3c4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b3ca:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	4b12      	ldr	r3, [pc, #72]	; (800b424 <FMC_SDRAM_Init+0xe0>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3e8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b3ee:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b3f4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b3fa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b400:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	4313      	orrs	r3, r2
 800b406:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	ffff8000 	.word	0xffff8000

0800b428 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d02e      	beq.n	800b4a0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b44e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b45e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	3b01      	subs	r3, #1
 800b466:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b468:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	3b01      	subs	r3, #1
 800b470:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b472:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	3b01      	subs	r3, #1
 800b47a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b47c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	3b01      	subs	r3, #1
 800b484:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b486:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b490:	4313      	orrs	r3, r2
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	4313      	orrs	r3, r2
 800b496:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	609a      	str	r2, [r3, #8]
 800b49e:	e039      	b.n	800b514 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b4a6:	697a      	ldr	r2, [r7, #20]
 800b4a8:	4b1e      	ldr	r3, [pc, #120]	; (800b524 <FMC_SDRAM_Timing_Init+0xfc>)
 800b4aa:	4013      	ands	r3, r2
 800b4ac:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b4d2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4e2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b4ec:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b4f6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b500:	4313      	orrs	r3, r2
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	4313      	orrs	r3, r2
 800b506:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	697a      	ldr	r2, [r7, #20]
 800b50c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	371c      	adds	r7, #28
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	ff0f0fff 	.word	0xff0f0fff

0800b528 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b528:	b480      	push	{r7}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b534:	2300      	movs	r3, #0
 800b536:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b540:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	3b01      	subs	r3, #1
 800b548:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b54a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b552:	4313      	orrs	r3, r2
 800b554:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	371c      	adds	r7, #28
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr

0800b56a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b56a:	b480      	push	{r7}
 800b56c:	b083      	sub	sp, #12
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
 800b572:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	695a      	ldr	r2, [r3, #20]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	005b      	lsls	r3, r3, #1
 800b57c:	431a      	orrs	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	4603      	mov	r3, r0
 800b598:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b59a:	2300      	movs	r3, #0
 800b59c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b59e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5a2:	2b84      	cmp	r3, #132	; 0x84
 800b5a4:	d005      	beq.n	800b5b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b5a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	3303      	adds	r3, #3
 800b5b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b5c4:	f001 f902 	bl	800c7cc <vTaskStartScheduler>
  
  return osOK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b5ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5d0:	b089      	sub	sp, #36	; 0x24
 800b5d2:	af04      	add	r7, sp, #16
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	695b      	ldr	r3, [r3, #20]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d020      	beq.n	800b622 <osThreadCreate+0x54>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d01c      	beq.n	800b622 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	685c      	ldr	r4, [r3, #4]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681d      	ldr	r5, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	691e      	ldr	r6, [r3, #16]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7ff ffc8 	bl	800b590 <makeFreeRtosPriority>
 800b600:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b60a:	9202      	str	r2, [sp, #8]
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	9100      	str	r1, [sp, #0]
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	4632      	mov	r2, r6
 800b614:	4629      	mov	r1, r5
 800b616:	4620      	mov	r0, r4
 800b618:	f000 fde4 	bl	800c1e4 <xTaskCreateStatic>
 800b61c:	4603      	mov	r3, r0
 800b61e:	60fb      	str	r3, [r7, #12]
 800b620:	e01c      	b.n	800b65c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	685c      	ldr	r4, [r3, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b62e:	b29e      	uxth	r6, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff ffaa 	bl	800b590 <makeFreeRtosPriority>
 800b63c:	4602      	mov	r2, r0
 800b63e:	f107 030c 	add.w	r3, r7, #12
 800b642:	9301      	str	r3, [sp, #4]
 800b644:	9200      	str	r2, [sp, #0]
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	4632      	mov	r2, r6
 800b64a:	4629      	mov	r1, r5
 800b64c:	4620      	mov	r0, r4
 800b64e:	f000 fe2c 	bl	800c2aa <xTaskCreate>
 800b652:	4603      	mov	r3, r0
 800b654:	2b01      	cmp	r3, #1
 800b656:	d001      	beq.n	800b65c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b658:	2300      	movs	r3, #0
 800b65a:	e000      	b.n	800b65e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b65c:	68fb      	ldr	r3, [r7, #12]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b666 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b084      	sub	sp, #16
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d001      	beq.n	800b67c <osDelay+0x16>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	e000      	b.n	800b67e <osDelay+0x18>
 800b67c:	2301      	movs	r3, #1
 800b67e:	4618      	mov	r0, r3
 800b680:	f000 ffda 	bl	800c638 <vTaskDelay>
  
  return osOK;
 800b684:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b686:	4618      	mov	r0, r3
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b082      	sub	sp, #8
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d007      	beq.n	800b6ae <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	2001      	movs	r0, #1
 800b6a6:	f000 fa66 	bl	800bb76 <xQueueCreateMutexStatic>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	e003      	b.n	800b6b6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b6ae:	2001      	movs	r0, #1
 800b6b0:	f000 fa49 	bl	800bb46 <xQueueCreateMutex>
 800b6b4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b6be:	b590      	push	{r4, r7, lr}
 800b6c0:	b085      	sub	sp, #20
 800b6c2:	af02      	add	r7, sp, #8
 800b6c4:	6078      	str	r0, [r7, #4]
 800b6c6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d011      	beq.n	800b6f4 <osMessageCreate+0x36>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00d      	beq.n	800b6f4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6818      	ldr	r0, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6859      	ldr	r1, [r3, #4]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	689a      	ldr	r2, [r3, #8]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	2400      	movs	r4, #0
 800b6ea:	9400      	str	r4, [sp, #0]
 800b6ec:	f000 f92e 	bl	800b94c <xQueueGenericCreateStatic>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	e008      	b.n	800b706 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6818      	ldr	r0, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	4619      	mov	r1, r3
 800b700:	f000 f9a6 	bl	800ba50 <xQueueGenericCreate>
 800b704:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b706:	4618      	mov	r0, r3
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd90      	pop	{r4, r7, pc}

0800b70e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b70e:	b480      	push	{r7}
 800b710:	b083      	sub	sp, #12
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f103 0208 	add.w	r2, r3, #8
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f04f 32ff 	mov.w	r2, #4294967295
 800b726:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f103 0208 	add.w	r2, r3, #8
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f103 0208 	add.w	r2, r3, #8
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b742:	bf00      	nop
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr

0800b74e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b74e:	b480      	push	{r7}
 800b750:	b083      	sub	sp, #12
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	689a      	ldr	r2, [r3, #8]
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	683a      	ldr	r2, [r7, #0]
 800b792:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	1c5a      	adds	r2, r3, #1
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	601a      	str	r2, [r3, #0]
}
 800b7a4:	bf00      	nop
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c6:	d103      	bne.n	800b7d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	e00c      	b.n	800b7ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3308      	adds	r3, #8
 800b7d4:	60fb      	str	r3, [r7, #12]
 800b7d6:	e002      	b.n	800b7de <vListInsert+0x2e>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	60fb      	str	r3, [r7, #12]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d2f6      	bcs.n	800b7d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	685a      	ldr	r2, [r3, #4]
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	1c5a      	adds	r2, r3, #1
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	601a      	str	r2, [r3, #0]
}
 800b816:	bf00      	nop
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr

0800b822 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b822:	b480      	push	{r7}
 800b824:	b085      	sub	sp, #20
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	6892      	ldr	r2, [r2, #8]
 800b838:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	6852      	ldr	r2, [r2, #4]
 800b842:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d103      	bne.n	800b856 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	689a      	ldr	r2, [r3, #8]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	1e5a      	subs	r2, r3, #1
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
	...

0800b878 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10c      	bne.n	800b8a6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	b672      	cpsid	i
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	b662      	cpsie	i
 800b8a0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b8a2:	bf00      	nop
 800b8a4:	e7fe      	b.n	800b8a4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b8a6:	f001 ff29 	bl	800d6fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8b2:	68f9      	ldr	r1, [r7, #12]
 800b8b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8b6:	fb01 f303 	mul.w	r3, r1, r3
 800b8ba:	441a      	add	r2, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	68f9      	ldr	r1, [r7, #12]
 800b8da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8dc:	fb01 f303 	mul.w	r3, r1, r3
 800b8e0:	441a      	add	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	22ff      	movs	r2, #255	; 0xff
 800b8ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	22ff      	movs	r2, #255	; 0xff
 800b8f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d114      	bne.n	800b926 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d01a      	beq.n	800b93a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	3310      	adds	r3, #16
 800b908:	4618      	mov	r0, r3
 800b90a:	f001 f9e1 	bl	800ccd0 <xTaskRemoveFromEventList>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d012      	beq.n	800b93a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b914:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <xQueueGenericReset+0xd0>)
 800b916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b91a:	601a      	str	r2, [r3, #0]
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	e009      	b.n	800b93a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	3310      	adds	r3, #16
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7ff feef 	bl	800b70e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	3324      	adds	r3, #36	; 0x24
 800b934:	4618      	mov	r0, r3
 800b936:	f7ff feea 	bl	800b70e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b93a:	f001 ff13 	bl	800d764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b93e:	2301      	movs	r3, #1
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	e000ed04 	.word	0xe000ed04

0800b94c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08e      	sub	sp, #56	; 0x38
 800b950:	af02      	add	r7, sp, #8
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d10c      	bne.n	800b97a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b964:	b672      	cpsid	i
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	b662      	cpsie	i
 800b974:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b976:	bf00      	nop
 800b978:	e7fe      	b.n	800b978 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10c      	bne.n	800b99a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b984:	b672      	cpsid	i
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	b662      	cpsie	i
 800b994:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b996:	bf00      	nop
 800b998:	e7fe      	b.n	800b998 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <xQueueGenericCreateStatic+0x5a>
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <xQueueGenericCreateStatic+0x5e>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e000      	b.n	800b9ac <xQueueGenericCreateStatic+0x60>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10c      	bne.n	800b9ca <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b4:	b672      	cpsid	i
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	b662      	cpsie	i
 800b9c4:	623b      	str	r3, [r7, #32]
}
 800b9c6:	bf00      	nop
 800b9c8:	e7fe      	b.n	800b9c8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d102      	bne.n	800b9d6 <xQueueGenericCreateStatic+0x8a>
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <xQueueGenericCreateStatic+0x8e>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e000      	b.n	800b9dc <xQueueGenericCreateStatic+0x90>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10c      	bne.n	800b9fa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e4:	b672      	cpsid	i
 800b9e6:	f383 8811 	msr	BASEPRI, r3
 800b9ea:	f3bf 8f6f 	isb	sy
 800b9ee:	f3bf 8f4f 	dsb	sy
 800b9f2:	b662      	cpsie	i
 800b9f4:	61fb      	str	r3, [r7, #28]
}
 800b9f6:	bf00      	nop
 800b9f8:	e7fe      	b.n	800b9f8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b9fa:	2348      	movs	r3, #72	; 0x48
 800b9fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2b48      	cmp	r3, #72	; 0x48
 800ba02:	d00c      	beq.n	800ba1e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ba04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba08:	b672      	cpsid	i
 800ba0a:	f383 8811 	msr	BASEPRI, r3
 800ba0e:	f3bf 8f6f 	isb	sy
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	b662      	cpsie	i
 800ba18:	61bb      	str	r3, [r7, #24]
}
 800ba1a:	bf00      	nop
 800ba1c:	e7fe      	b.n	800ba1c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ba24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00d      	beq.n	800ba46 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ba36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	68b9      	ldr	r1, [r7, #8]
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f000 f847 	bl	800bad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3730      	adds	r7, #48	; 0x30
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b08a      	sub	sp, #40	; 0x28
 800ba54:	af02      	add	r7, sp, #8
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d10c      	bne.n	800ba7e <xQueueGenericCreate+0x2e>
	__asm volatile
 800ba64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba68:	b672      	cpsid	i
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	b662      	cpsie	i
 800ba78:	613b      	str	r3, [r7, #16]
}
 800ba7a:	bf00      	nop
 800ba7c:	e7fe      	b.n	800ba7c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	61fb      	str	r3, [r7, #28]
 800ba88:	e004      	b.n	800ba94 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	fb02 f303 	mul.w	r3, r2, r3
 800ba92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	3348      	adds	r3, #72	; 0x48
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f001 ff17 	bl	800d8cc <pvPortMalloc>
 800ba9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d011      	beq.n	800baca <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	3348      	adds	r3, #72	; 0x48
 800baae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bab8:	79fa      	ldrb	r2, [r7, #7]
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	4613      	mov	r3, r2
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	68b9      	ldr	r1, [r7, #8]
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f000 f805 	bl	800bad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800baca:	69bb      	ldr	r3, [r7, #24]
	}
 800bacc:	4618      	mov	r0, r3
 800bace:	3720      	adds	r7, #32
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
 800bae0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d103      	bne.n	800baf0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	69ba      	ldr	r2, [r7, #24]
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	e002      	b.n	800baf6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bafc:	69bb      	ldr	r3, [r7, #24]
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb02:	2101      	movs	r1, #1
 800bb04:	69b8      	ldr	r0, [r7, #24]
 800bb06:	f7ff feb7 	bl	800b878 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb0a:	bf00      	nop
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00e      	beq.n	800bb3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bb32:	2300      	movs	r3, #0
 800bb34:	2200      	movs	r2, #0
 800bb36:	2100      	movs	r1, #0
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 f837 	bl	800bbac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bb3e:	bf00      	nop
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b086      	sub	sp, #24
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb50:	2301      	movs	r3, #1
 800bb52:	617b      	str	r3, [r7, #20]
 800bb54:	2300      	movs	r3, #0
 800bb56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bb58:	79fb      	ldrb	r3, [r7, #7]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	6939      	ldr	r1, [r7, #16]
 800bb5e:	6978      	ldr	r0, [r7, #20]
 800bb60:	f7ff ff76 	bl	800ba50 <xQueueGenericCreate>
 800bb64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f7ff ffd3 	bl	800bb12 <prvInitialiseMutex>

		return xNewQueue;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
	}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b088      	sub	sp, #32
 800bb7a:	af02      	add	r7, sp, #8
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	6039      	str	r1, [r7, #0]
 800bb80:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb82:	2301      	movs	r3, #1
 800bb84:	617b      	str	r3, [r7, #20]
 800bb86:	2300      	movs	r3, #0
 800bb88:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bb8a:	79fb      	ldrb	r3, [r7, #7]
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2200      	movs	r2, #0
 800bb92:	6939      	ldr	r1, [r7, #16]
 800bb94:	6978      	ldr	r0, [r7, #20]
 800bb96:	f7ff fed9 	bl	800b94c <xQueueGenericCreateStatic>
 800bb9a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f7ff ffb8 	bl	800bb12 <prvInitialiseMutex>

		return xNewQueue;
 800bba2:	68fb      	ldr	r3, [r7, #12]
	}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3718      	adds	r7, #24
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b08e      	sub	sp, #56	; 0x38
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10c      	bne.n	800bbe2 <xQueueGenericSend+0x36>
	__asm volatile
 800bbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbcc:	b672      	cpsid	i
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	b662      	cpsie	i
 800bbdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bbde:	bf00      	nop
 800bbe0:	e7fe      	b.n	800bbe0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d103      	bne.n	800bbf0 <xQueueGenericSend+0x44>
 800bbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d101      	bne.n	800bbf4 <xQueueGenericSend+0x48>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e000      	b.n	800bbf6 <xQueueGenericSend+0x4a>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10c      	bne.n	800bc14 <xQueueGenericSend+0x68>
	__asm volatile
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	b672      	cpsid	i
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	b662      	cpsie	i
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc10:	bf00      	nop
 800bc12:	e7fe      	b.n	800bc12 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d103      	bne.n	800bc22 <xQueueGenericSend+0x76>
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d101      	bne.n	800bc26 <xQueueGenericSend+0x7a>
 800bc22:	2301      	movs	r3, #1
 800bc24:	e000      	b.n	800bc28 <xQueueGenericSend+0x7c>
 800bc26:	2300      	movs	r3, #0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10c      	bne.n	800bc46 <xQueueGenericSend+0x9a>
	__asm volatile
 800bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc30:	b672      	cpsid	i
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	b662      	cpsie	i
 800bc40:	623b      	str	r3, [r7, #32]
}
 800bc42:	bf00      	nop
 800bc44:	e7fe      	b.n	800bc44 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc46:	f001 fa09 	bl	800d05c <xTaskGetSchedulerState>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d102      	bne.n	800bc56 <xQueueGenericSend+0xaa>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d101      	bne.n	800bc5a <xQueueGenericSend+0xae>
 800bc56:	2301      	movs	r3, #1
 800bc58:	e000      	b.n	800bc5c <xQueueGenericSend+0xb0>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10c      	bne.n	800bc7a <xQueueGenericSend+0xce>
	__asm volatile
 800bc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc64:	b672      	cpsid	i
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	b662      	cpsie	i
 800bc74:	61fb      	str	r3, [r7, #28]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc7a:	f001 fd3f 	bl	800d6fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d302      	bcc.n	800bc90 <xQueueGenericSend+0xe4>
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d129      	bne.n	800bce4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc90:	683a      	ldr	r2, [r7, #0]
 800bc92:	68b9      	ldr	r1, [r7, #8]
 800bc94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc96:	f000 f9bb 	bl	800c010 <prvCopyDataToQueue>
 800bc9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d010      	beq.n	800bcc6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	3324      	adds	r3, #36	; 0x24
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f001 f811 	bl	800ccd0 <xTaskRemoveFromEventList>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d013      	beq.n	800bcdc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bcb4:	4b3f      	ldr	r3, [pc, #252]	; (800bdb4 <xQueueGenericSend+0x208>)
 800bcb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcba:	601a      	str	r2, [r3, #0]
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	f3bf 8f6f 	isb	sy
 800bcc4:	e00a      	b.n	800bcdc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bcc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d007      	beq.n	800bcdc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bccc:	4b39      	ldr	r3, [pc, #228]	; (800bdb4 <xQueueGenericSend+0x208>)
 800bcce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bcdc:	f001 fd42 	bl	800d764 <vPortExitCritical>
				return pdPASS;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e063      	b.n	800bdac <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d103      	bne.n	800bcf2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcea:	f001 fd3b 	bl	800d764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	e05c      	b.n	800bdac <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d106      	bne.n	800bd06 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcf8:	f107 0314 	add.w	r3, r7, #20
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f001 f84b 	bl	800cd98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd02:	2301      	movs	r3, #1
 800bd04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd06:	f001 fd2d 	bl	800d764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd0a:	f000 fdc3 	bl	800c894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd0e:	f001 fcf5 	bl	800d6fc <vPortEnterCritical>
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd18:	b25b      	sxtb	r3, r3
 800bd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd1e:	d103      	bne.n	800bd28 <xQueueGenericSend+0x17c>
 800bd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd2e:	b25b      	sxtb	r3, r3
 800bd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd34:	d103      	bne.n	800bd3e <xQueueGenericSend+0x192>
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd3e:	f001 fd11 	bl	800d764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd42:	1d3a      	adds	r2, r7, #4
 800bd44:	f107 0314 	add.w	r3, r7, #20
 800bd48:	4611      	mov	r1, r2
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f001 f83a 	bl	800cdc4 <xTaskCheckForTimeOut>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d124      	bne.n	800bda0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd58:	f000 fa2c 	bl	800c1b4 <prvIsQueueFull>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d018      	beq.n	800bd94 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd64:	3310      	adds	r3, #16
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	4611      	mov	r1, r2
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 ff8a 	bl	800cc84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd72:	f000 f9b7 	bl	800c0e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd76:	f000 fd9b 	bl	800c8b0 <xTaskResumeAll>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f47f af7c 	bne.w	800bc7a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800bd82:	4b0c      	ldr	r3, [pc, #48]	; (800bdb4 <xQueueGenericSend+0x208>)
 800bd84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	f3bf 8f6f 	isb	sy
 800bd92:	e772      	b.n	800bc7a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd96:	f000 f9a5 	bl	800c0e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd9a:	f000 fd89 	bl	800c8b0 <xTaskResumeAll>
 800bd9e:	e76c      	b.n	800bc7a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bda0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bda2:	f000 f99f 	bl	800c0e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bda6:	f000 fd83 	bl	800c8b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bdaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3738      	adds	r7, #56	; 0x38
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	e000ed04 	.word	0xe000ed04

0800bdb8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b08e      	sub	sp, #56	; 0x38
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10c      	bne.n	800bdee <xQueueSemaphoreTake+0x36>
	__asm volatile
 800bdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd8:	b672      	cpsid	i
 800bdda:	f383 8811 	msr	BASEPRI, r3
 800bdde:	f3bf 8f6f 	isb	sy
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	b662      	cpsie	i
 800bde8:	623b      	str	r3, [r7, #32]
}
 800bdea:	bf00      	nop
 800bdec:	e7fe      	b.n	800bdec <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00c      	beq.n	800be10 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800bdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfa:	b672      	cpsid	i
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	b662      	cpsie	i
 800be0a:	61fb      	str	r3, [r7, #28]
}
 800be0c:	bf00      	nop
 800be0e:	e7fe      	b.n	800be0e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be10:	f001 f924 	bl	800d05c <xTaskGetSchedulerState>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d102      	bne.n	800be20 <xQueueSemaphoreTake+0x68>
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <xQueueSemaphoreTake+0x6c>
 800be20:	2301      	movs	r3, #1
 800be22:	e000      	b.n	800be26 <xQueueSemaphoreTake+0x6e>
 800be24:	2300      	movs	r3, #0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10c      	bne.n	800be44 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800be2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2e:	b672      	cpsid	i
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	b662      	cpsie	i
 800be3e:	61bb      	str	r3, [r7, #24]
}
 800be40:	bf00      	nop
 800be42:	e7fe      	b.n	800be42 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be44:	f001 fc5a 	bl	800d6fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be50:	2b00      	cmp	r3, #0
 800be52:	d024      	beq.n	800be9e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	1e5a      	subs	r2, r3, #1
 800be58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d104      	bne.n	800be6e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800be64:	f001 fac0 	bl	800d3e8 <pvTaskIncrementMutexHeldCount>
 800be68:	4602      	mov	r2, r0
 800be6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be70:	691b      	ldr	r3, [r3, #16]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00f      	beq.n	800be96 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be78:	3310      	adds	r3, #16
 800be7a:	4618      	mov	r0, r3
 800be7c:	f000 ff28 	bl	800ccd0 <xTaskRemoveFromEventList>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d007      	beq.n	800be96 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be86:	4b55      	ldr	r3, [pc, #340]	; (800bfdc <xQueueSemaphoreTake+0x224>)
 800be88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be8c:	601a      	str	r2, [r3, #0]
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be96:	f001 fc65 	bl	800d764 <vPortExitCritical>
				return pdPASS;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e099      	b.n	800bfd2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d113      	bne.n	800becc <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00c      	beq.n	800bec4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beae:	b672      	cpsid	i
 800beb0:	f383 8811 	msr	BASEPRI, r3
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	b662      	cpsie	i
 800bebe:	617b      	str	r3, [r7, #20]
}
 800bec0:	bf00      	nop
 800bec2:	e7fe      	b.n	800bec2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bec4:	f001 fc4e 	bl	800d764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bec8:	2300      	movs	r3, #0
 800beca:	e082      	b.n	800bfd2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800becc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d106      	bne.n	800bee0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bed2:	f107 030c 	add.w	r3, r7, #12
 800bed6:	4618      	mov	r0, r3
 800bed8:	f000 ff5e 	bl	800cd98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bedc:	2301      	movs	r3, #1
 800bede:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bee0:	f001 fc40 	bl	800d764 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bee4:	f000 fcd6 	bl	800c894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bee8:	f001 fc08 	bl	800d6fc <vPortEnterCritical>
 800beec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bef2:	b25b      	sxtb	r3, r3
 800bef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef8:	d103      	bne.n	800bf02 <xQueueSemaphoreTake+0x14a>
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	2200      	movs	r2, #0
 800befe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf08:	b25b      	sxtb	r3, r3
 800bf0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0e:	d103      	bne.n	800bf18 <xQueueSemaphoreTake+0x160>
 800bf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf12:	2200      	movs	r2, #0
 800bf14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf18:	f001 fc24 	bl	800d764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf1c:	463a      	mov	r2, r7
 800bf1e:	f107 030c 	add.w	r3, r7, #12
 800bf22:	4611      	mov	r1, r2
 800bf24:	4618      	mov	r0, r3
 800bf26:	f000 ff4d 	bl	800cdc4 <xTaskCheckForTimeOut>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d132      	bne.n	800bf96 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf32:	f000 f929 	bl	800c188 <prvIsQueueEmpty>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d026      	beq.n	800bf8a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d109      	bne.n	800bf58 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800bf44:	f001 fbda 	bl	800d6fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f001 f8a3 	bl	800d098 <xTaskPriorityInherit>
 800bf52:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bf54:	f001 fc06 	bl	800d764 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5a:	3324      	adds	r3, #36	; 0x24
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	4611      	mov	r1, r2
 800bf60:	4618      	mov	r0, r3
 800bf62:	f000 fe8f 	bl	800cc84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf68:	f000 f8bc 	bl	800c0e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf6c:	f000 fca0 	bl	800c8b0 <xTaskResumeAll>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f47f af66 	bne.w	800be44 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800bf78:	4b18      	ldr	r3, [pc, #96]	; (800bfdc <xQueueSemaphoreTake+0x224>)
 800bf7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	e75c      	b.n	800be44 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bf8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf8c:	f000 f8aa 	bl	800c0e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf90:	f000 fc8e 	bl	800c8b0 <xTaskResumeAll>
 800bf94:	e756      	b.n	800be44 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bf96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf98:	f000 f8a4 	bl	800c0e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf9c:	f000 fc88 	bl	800c8b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfa2:	f000 f8f1 	bl	800c188 <prvIsQueueEmpty>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f43f af4b 	beq.w	800be44 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00d      	beq.n	800bfd0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800bfb4:	f001 fba2 	bl	800d6fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bfb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfba:	f000 f811 	bl	800bfe0 <prvGetDisinheritPriorityAfterTimeout>
 800bfbe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f001 f970 	bl	800d2ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bfcc:	f001 fbca 	bl	800d764 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bfd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3738      	adds	r7, #56	; 0x38
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	e000ed04 	.word	0xe000ed04

0800bfe0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d006      	beq.n	800bffe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f1c3 0307 	rsb	r3, r3, #7
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	e001      	b.n	800c002 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bffe:	2300      	movs	r3, #0
 800c000:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c002:	68fb      	ldr	r3, [r7, #12]
	}
 800c004:	4618      	mov	r0, r3
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c01c:	2300      	movs	r3, #0
 800c01e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c024:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10d      	bne.n	800c04a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d14d      	bne.n	800c0d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f001 f8ac 	bl	800d198 <xTaskPriorityDisinherit>
 800c040:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	609a      	str	r2, [r3, #8]
 800c048:	e043      	b.n	800c0d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d119      	bne.n	800c084 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6858      	ldr	r0, [r3, #4]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c058:	461a      	mov	r2, r3
 800c05a:	68b9      	ldr	r1, [r7, #8]
 800c05c:	f001 fe44 	bl	800dce8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c068:	441a      	add	r2, r3
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	685a      	ldr	r2, [r3, #4]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	429a      	cmp	r2, r3
 800c078:	d32b      	bcc.n	800c0d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	605a      	str	r2, [r3, #4]
 800c082:	e026      	b.n	800c0d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	68d8      	ldr	r0, [r3, #12]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08c:	461a      	mov	r2, r3
 800c08e:	68b9      	ldr	r1, [r7, #8]
 800c090:	f001 fe2a 	bl	800dce8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	68da      	ldr	r2, [r3, #12]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09c:	425b      	negs	r3, r3
 800c09e:	441a      	add	r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	68da      	ldr	r2, [r3, #12]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d207      	bcs.n	800c0c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	689a      	ldr	r2, [r3, #8]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b8:	425b      	negs	r3, r3
 800c0ba:	441a      	add	r2, r3
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d105      	bne.n	800c0d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d002      	beq.n	800c0d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	1c5a      	adds	r2, r3, #1
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c0da:	697b      	ldr	r3, [r7, #20]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c0ec:	f001 fb06 	bl	800d6fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0f8:	e011      	b.n	800c11e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d012      	beq.n	800c128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	3324      	adds	r3, #36	; 0x24
 800c106:	4618      	mov	r0, r3
 800c108:	f000 fde2 	bl	800ccd0 <xTaskRemoveFromEventList>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d001      	beq.n	800c116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c112:	f000 febd 	bl	800ce90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c116:	7bfb      	ldrb	r3, [r7, #15]
 800c118:	3b01      	subs	r3, #1
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c11e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c122:	2b00      	cmp	r3, #0
 800c124:	dce9      	bgt.n	800c0fa <prvUnlockQueue+0x16>
 800c126:	e000      	b.n	800c12a <prvUnlockQueue+0x46>
					break;
 800c128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	22ff      	movs	r2, #255	; 0xff
 800c12e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c132:	f001 fb17 	bl	800d764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c136:	f001 fae1 	bl	800d6fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c142:	e011      	b.n	800c168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	691b      	ldr	r3, [r3, #16]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d012      	beq.n	800c172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	3310      	adds	r3, #16
 800c150:	4618      	mov	r0, r3
 800c152:	f000 fdbd 	bl	800ccd0 <xTaskRemoveFromEventList>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d001      	beq.n	800c160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c15c:	f000 fe98 	bl	800ce90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c160:	7bbb      	ldrb	r3, [r7, #14]
 800c162:	3b01      	subs	r3, #1
 800c164:	b2db      	uxtb	r3, r3
 800c166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	dce9      	bgt.n	800c144 <prvUnlockQueue+0x60>
 800c170:	e000      	b.n	800c174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	22ff      	movs	r2, #255	; 0xff
 800c178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c17c:	f001 faf2 	bl	800d764 <vPortExitCritical>
}
 800c180:	bf00      	nop
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c190:	f001 fab4 	bl	800d6fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d102      	bne.n	800c1a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c19c:	2301      	movs	r3, #1
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	e001      	b.n	800c1a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1a6:	f001 fadd 	bl	800d764 <vPortExitCritical>

	return xReturn;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1bc:	f001 fa9e 	bl	800d6fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d102      	bne.n	800c1d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	60fb      	str	r3, [r7, #12]
 800c1d0:	e001      	b.n	800c1d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1d6:	f001 fac5 	bl	800d764 <vPortExitCritical>

	return xReturn;
 800c1da:	68fb      	ldr	r3, [r7, #12]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b08e      	sub	sp, #56	; 0x38
 800c1e8:	af04      	add	r7, sp, #16
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
 800c1f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d10c      	bne.n	800c212 <xTaskCreateStatic+0x2e>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	b672      	cpsid	i
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	b662      	cpsie	i
 800c20c:	623b      	str	r3, [r7, #32]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10c      	bne.n	800c232 <xTaskCreateStatic+0x4e>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21c:	b672      	cpsid	i
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	b662      	cpsie	i
 800c22c:	61fb      	str	r3, [r7, #28]
}
 800c22e:	bf00      	nop
 800c230:	e7fe      	b.n	800c230 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c232:	2358      	movs	r3, #88	; 0x58
 800c234:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	2b58      	cmp	r3, #88	; 0x58
 800c23a:	d00c      	beq.n	800c256 <xTaskCreateStatic+0x72>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c240:	b672      	cpsid	i
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	b662      	cpsie	i
 800c250:	61bb      	str	r3, [r7, #24]
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c256:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d01e      	beq.n	800c29c <xTaskCreateStatic+0xb8>
 800c25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c260:	2b00      	cmp	r3, #0
 800c262:	d01b      	beq.n	800c29c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c266:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c26c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c270:	2202      	movs	r2, #2
 800c272:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c276:	2300      	movs	r3, #0
 800c278:	9303      	str	r3, [sp, #12]
 800c27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27c:	9302      	str	r3, [sp, #8]
 800c27e:	f107 0314 	add.w	r3, r7, #20
 800c282:	9301      	str	r3, [sp, #4]
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	68b9      	ldr	r1, [r7, #8]
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f000 f850 	bl	800c334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c296:	f000 f8e1 	bl	800c45c <prvAddNewTaskToReadyList>
 800c29a:	e001      	b.n	800c2a0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c29c:	2300      	movs	r3, #0
 800c29e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2a0:	697b      	ldr	r3, [r7, #20]
	}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3728      	adds	r7, #40	; 0x28
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b08c      	sub	sp, #48	; 0x30
 800c2ae:	af04      	add	r7, sp, #16
 800c2b0:	60f8      	str	r0, [r7, #12]
 800c2b2:	60b9      	str	r1, [r7, #8]
 800c2b4:	603b      	str	r3, [r7, #0]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c2ba:	88fb      	ldrh	r3, [r7, #6]
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f001 fb04 	bl	800d8cc <pvPortMalloc>
 800c2c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00e      	beq.n	800c2ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c2cc:	2058      	movs	r0, #88	; 0x58
 800c2ce:	f001 fafd 	bl	800d8cc <pvPortMalloc>
 800c2d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d003      	beq.n	800c2e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	631a      	str	r2, [r3, #48]	; 0x30
 800c2e0:	e005      	b.n	800c2ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c2e2:	6978      	ldr	r0, [r7, #20]
 800c2e4:	f001 fbc2 	bl	800da6c <vPortFree>
 800c2e8:	e001      	b.n	800c2ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d017      	beq.n	800c324 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c2fc:	88fa      	ldrh	r2, [r7, #6]
 800c2fe:	2300      	movs	r3, #0
 800c300:	9303      	str	r3, [sp, #12]
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	9302      	str	r3, [sp, #8]
 800c306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	68b9      	ldr	r1, [r7, #8]
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f000 f80e 	bl	800c334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c318:	69f8      	ldr	r0, [r7, #28]
 800c31a:	f000 f89f 	bl	800c45c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c31e:	2301      	movs	r3, #1
 800c320:	61bb      	str	r3, [r7, #24]
 800c322:	e002      	b.n	800c32a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c324:	f04f 33ff 	mov.w	r3, #4294967295
 800c328:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c32a:	69bb      	ldr	r3, [r7, #24]
	}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3720      	adds	r7, #32
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b088      	sub	sp, #32
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	607a      	str	r2, [r7, #4]
 800c340:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c344:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	461a      	mov	r2, r3
 800c34c:	21a5      	movs	r1, #165	; 0xa5
 800c34e:	f001 fcd9 	bl	800dd04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c356:	6879      	ldr	r1, [r7, #4]
 800c358:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c35c:	440b      	add	r3, r1
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4413      	add	r3, r2
 800c362:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	f023 0307 	bic.w	r3, r3, #7
 800c36a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	f003 0307 	and.w	r3, r3, #7
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00c      	beq.n	800c390 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37a:	b672      	cpsid	i
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	b662      	cpsie	i
 800c38a:	617b      	str	r3, [r7, #20]
}
 800c38c:	bf00      	nop
 800c38e:	e7fe      	b.n	800c38e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d01f      	beq.n	800c3d6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c396:	2300      	movs	r3, #0
 800c398:	61fb      	str	r3, [r7, #28]
 800c39a:	e012      	b.n	800c3c2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	7819      	ldrb	r1, [r3, #0]
 800c3a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	3334      	adds	r3, #52	; 0x34
 800c3ac:	460a      	mov	r2, r1
 800c3ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d006      	beq.n	800c3ca <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	61fb      	str	r3, [r7, #28]
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	2b0f      	cmp	r3, #15
 800c3c6:	d9e9      	bls.n	800c39c <prvInitialiseNewTask+0x68>
 800c3c8:	e000      	b.n	800c3cc <prvInitialiseNewTask+0x98>
			{
				break;
 800c3ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3d4:	e003      	b.n	800c3de <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e0:	2b06      	cmp	r3, #6
 800c3e2:	d901      	bls.n	800c3e8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c3e4:	2306      	movs	r3, #6
 800c3e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fc:	3304      	adds	r3, #4
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7ff f9a5 	bl	800b74e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c406:	3318      	adds	r3, #24
 800c408:	4618      	mov	r0, r3
 800c40a:	f7ff f9a0 	bl	800b74e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	f1c3 0207 	rsb	r2, r3, #7
 800c41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c426:	2200      	movs	r2, #0
 800c428:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42c:	2200      	movs	r2, #0
 800c42e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c432:	2200      	movs	r2, #0
 800c434:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	68f9      	ldr	r1, [r7, #12]
 800c43c:	69b8      	ldr	r0, [r7, #24]
 800c43e:	f001 f84d 	bl	800d4dc <pxPortInitialiseStack>
 800c442:	4602      	mov	r2, r0
 800c444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c446:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d002      	beq.n	800c454 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c452:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c454:	bf00      	nop
 800c456:	3720      	adds	r7, #32
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c464:	f001 f94a 	bl	800d6fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c468:	4b2a      	ldr	r3, [pc, #168]	; (800c514 <prvAddNewTaskToReadyList+0xb8>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3301      	adds	r3, #1
 800c46e:	4a29      	ldr	r2, [pc, #164]	; (800c514 <prvAddNewTaskToReadyList+0xb8>)
 800c470:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c472:	4b29      	ldr	r3, [pc, #164]	; (800c518 <prvAddNewTaskToReadyList+0xbc>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d109      	bne.n	800c48e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c47a:	4a27      	ldr	r2, [pc, #156]	; (800c518 <prvAddNewTaskToReadyList+0xbc>)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c480:	4b24      	ldr	r3, [pc, #144]	; (800c514 <prvAddNewTaskToReadyList+0xb8>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b01      	cmp	r3, #1
 800c486:	d110      	bne.n	800c4aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c488:	f000 fd28 	bl	800cedc <prvInitialiseTaskLists>
 800c48c:	e00d      	b.n	800c4aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c48e:	4b23      	ldr	r3, [pc, #140]	; (800c51c <prvAddNewTaskToReadyList+0xc0>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d109      	bne.n	800c4aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c496:	4b20      	ldr	r3, [pc, #128]	; (800c518 <prvAddNewTaskToReadyList+0xbc>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d802      	bhi.n	800c4aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c4a4:	4a1c      	ldr	r2, [pc, #112]	; (800c518 <prvAddNewTaskToReadyList+0xbc>)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c4aa:	4b1d      	ldr	r3, [pc, #116]	; (800c520 <prvAddNewTaskToReadyList+0xc4>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	4a1b      	ldr	r2, [pc, #108]	; (800c520 <prvAddNewTaskToReadyList+0xc4>)
 800c4b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	409a      	lsls	r2, r3
 800c4bc:	4b19      	ldr	r3, [pc, #100]	; (800c524 <prvAddNewTaskToReadyList+0xc8>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	4a18      	ldr	r2, [pc, #96]	; (800c524 <prvAddNewTaskToReadyList+0xc8>)
 800c4c4:	6013      	str	r3, [r2, #0]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4413      	add	r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	4a15      	ldr	r2, [pc, #84]	; (800c528 <prvAddNewTaskToReadyList+0xcc>)
 800c4d4:	441a      	add	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	3304      	adds	r3, #4
 800c4da:	4619      	mov	r1, r3
 800c4dc:	4610      	mov	r0, r2
 800c4de:	f7ff f943 	bl	800b768 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4e2:	f001 f93f 	bl	800d764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c4e6:	4b0d      	ldr	r3, [pc, #52]	; (800c51c <prvAddNewTaskToReadyList+0xc0>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00e      	beq.n	800c50c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4ee:	4b0a      	ldr	r3, [pc, #40]	; (800c518 <prvAddNewTaskToReadyList+0xbc>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d207      	bcs.n	800c50c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4fc:	4b0b      	ldr	r3, [pc, #44]	; (800c52c <prvAddNewTaskToReadyList+0xd0>)
 800c4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c50c:	bf00      	nop
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	2000059c 	.word	0x2000059c
 800c518:	2000049c 	.word	0x2000049c
 800c51c:	200005a8 	.word	0x200005a8
 800c520:	200005b8 	.word	0x200005b8
 800c524:	200005a4 	.word	0x200005a4
 800c528:	200004a0 	.word	0x200004a0
 800c52c:	e000ed04 	.word	0xe000ed04

0800c530 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c530:	b580      	push	{r7, lr}
 800c532:	b08a      	sub	sp, #40	; 0x28
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c53a:	2300      	movs	r3, #0
 800c53c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10c      	bne.n	800c55e <vTaskDelayUntil+0x2e>
	__asm volatile
 800c544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c548:	b672      	cpsid	i
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	b662      	cpsie	i
 800c558:	617b      	str	r3, [r7, #20]
}
 800c55a:	bf00      	nop
 800c55c:	e7fe      	b.n	800c55c <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d10c      	bne.n	800c57e <vTaskDelayUntil+0x4e>
	__asm volatile
 800c564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c568:	b672      	cpsid	i
 800c56a:	f383 8811 	msr	BASEPRI, r3
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f3bf 8f4f 	dsb	sy
 800c576:	b662      	cpsie	i
 800c578:	613b      	str	r3, [r7, #16]
}
 800c57a:	bf00      	nop
 800c57c:	e7fe      	b.n	800c57c <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800c57e:	4b2b      	ldr	r3, [pc, #172]	; (800c62c <vTaskDelayUntil+0xfc>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00c      	beq.n	800c5a0 <vTaskDelayUntil+0x70>
	__asm volatile
 800c586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58a:	b672      	cpsid	i
 800c58c:	f383 8811 	msr	BASEPRI, r3
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	b662      	cpsie	i
 800c59a:	60fb      	str	r3, [r7, #12]
}
 800c59c:	bf00      	nop
 800c59e:	e7fe      	b.n	800c59e <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800c5a0:	f000 f978 	bl	800c894 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c5a4:	4b22      	ldr	r3, [pc, #136]	; (800c630 <vTaskDelayUntil+0x100>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	6a3a      	ldr	r2, [r7, #32]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d20b      	bcs.n	800c5d6 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	69fa      	ldr	r2, [r7, #28]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d211      	bcs.n	800c5ec <vTaskDelayUntil+0xbc>
 800c5c8:	69fa      	ldr	r2, [r7, #28]
 800c5ca:	6a3b      	ldr	r3, [r7, #32]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d90d      	bls.n	800c5ec <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	627b      	str	r3, [r7, #36]	; 0x24
 800c5d4:	e00a      	b.n	800c5ec <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	69fa      	ldr	r2, [r7, #28]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d303      	bcc.n	800c5e8 <vTaskDelayUntil+0xb8>
 800c5e0:	69fa      	ldr	r2, [r7, #28]
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d901      	bls.n	800c5ec <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	69fa      	ldr	r2, [r7, #28]
 800c5f0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d006      	beq.n	800c606 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c5f8:	69fa      	ldr	r2, [r7, #28]
 800c5fa:	6a3b      	ldr	r3, [r7, #32]
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	2100      	movs	r1, #0
 800c600:	4618      	mov	r0, r3
 800c602:	f000 ff05 	bl	800d410 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c606:	f000 f953 	bl	800c8b0 <xTaskResumeAll>
 800c60a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d107      	bne.n	800c622 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800c612:	4b08      	ldr	r3, [pc, #32]	; (800c634 <vTaskDelayUntil+0x104>)
 800c614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c622:	bf00      	nop
 800c624:	3728      	adds	r7, #40	; 0x28
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	200005c4 	.word	0x200005c4
 800c630:	200005a0 	.word	0x200005a0
 800c634:	e000ed04 	.word	0xe000ed04

0800c638 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c640:	2300      	movs	r3, #0
 800c642:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d019      	beq.n	800c67e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c64a:	4b14      	ldr	r3, [pc, #80]	; (800c69c <vTaskDelay+0x64>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00c      	beq.n	800c66c <vTaskDelay+0x34>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	b672      	cpsid	i
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	b662      	cpsie	i
 800c666:	60bb      	str	r3, [r7, #8]
}
 800c668:	bf00      	nop
 800c66a:	e7fe      	b.n	800c66a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c66c:	f000 f912 	bl	800c894 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c670:	2100      	movs	r1, #0
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 fecc 	bl	800d410 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c678:	f000 f91a 	bl	800c8b0 <xTaskResumeAll>
 800c67c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d107      	bne.n	800c694 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c684:	4b06      	ldr	r3, [pc, #24]	; (800c6a0 <vTaskDelay+0x68>)
 800c686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c68a:	601a      	str	r2, [r3, #0]
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c694:	bf00      	nop
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	200005c4 	.word	0x200005c4
 800c6a0:	e000ed04 	.word	0xe000ed04

0800c6a4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c6ac:	f001 f826 	bl	800d6fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d102      	bne.n	800c6bc <vTaskSuspend+0x18>
 800c6b6:	4b3d      	ldr	r3, [pc, #244]	; (800c7ac <vTaskSuspend+0x108>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	e000      	b.n	800c6be <vTaskSuspend+0x1a>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7ff f8ac 	bl	800b822 <uxListRemove>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d115      	bne.n	800c6fc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d4:	4936      	ldr	r1, [pc, #216]	; (800c7b0 <vTaskSuspend+0x10c>)
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	440b      	add	r3, r1
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10a      	bne.n	800c6fc <vTaskSuspend+0x58>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c6f0:	43da      	mvns	r2, r3
 800c6f2:	4b30      	ldr	r3, [pc, #192]	; (800c7b4 <vTaskSuspend+0x110>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4013      	ands	r3, r2
 800c6f8:	4a2e      	ldr	r2, [pc, #184]	; (800c7b4 <vTaskSuspend+0x110>)
 800c6fa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c700:	2b00      	cmp	r3, #0
 800c702:	d004      	beq.n	800c70e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	3318      	adds	r3, #24
 800c708:	4618      	mov	r0, r3
 800c70a:	f7ff f88a 	bl	800b822 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	3304      	adds	r3, #4
 800c712:	4619      	mov	r1, r3
 800c714:	4828      	ldr	r0, [pc, #160]	; (800c7b8 <vTaskSuspend+0x114>)
 800c716:	f7ff f827 	bl	800b768 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c720:	b2db      	uxtb	r3, r3
 800c722:	2b01      	cmp	r3, #1
 800c724:	d103      	bne.n	800c72e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c72e:	f001 f819 	bl	800d764 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c732:	4b22      	ldr	r3, [pc, #136]	; (800c7bc <vTaskSuspend+0x118>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d005      	beq.n	800c746 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c73a:	f000 ffdf 	bl	800d6fc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c73e:	f000 fc6d 	bl	800d01c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c742:	f001 f80f 	bl	800d764 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c746:	4b19      	ldr	r3, [pc, #100]	; (800c7ac <vTaskSuspend+0x108>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d129      	bne.n	800c7a4 <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 800c750:	4b1a      	ldr	r3, [pc, #104]	; (800c7bc <vTaskSuspend+0x118>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d019      	beq.n	800c78c <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c758:	4b19      	ldr	r3, [pc, #100]	; (800c7c0 <vTaskSuspend+0x11c>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00c      	beq.n	800c77a <vTaskSuspend+0xd6>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	b672      	cpsid	i
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	b662      	cpsie	i
 800c774:	60bb      	str	r3, [r7, #8]
}
 800c776:	bf00      	nop
 800c778:	e7fe      	b.n	800c778 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 800c77a:	4b12      	ldr	r3, [pc, #72]	; (800c7c4 <vTaskSuspend+0x120>)
 800c77c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c780:	601a      	str	r2, [r3, #0]
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c78a:	e00b      	b.n	800c7a4 <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c78c:	4b0a      	ldr	r3, [pc, #40]	; (800c7b8 <vTaskSuspend+0x114>)
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	4b0d      	ldr	r3, [pc, #52]	; (800c7c8 <vTaskSuspend+0x124>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	429a      	cmp	r2, r3
 800c796:	d103      	bne.n	800c7a0 <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 800c798:	4b04      	ldr	r3, [pc, #16]	; (800c7ac <vTaskSuspend+0x108>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	601a      	str	r2, [r3, #0]
	}
 800c79e:	e001      	b.n	800c7a4 <vTaskSuspend+0x100>
					vTaskSwitchContext();
 800c7a0:	f000 f9ee 	bl	800cb80 <vTaskSwitchContext>
	}
 800c7a4:	bf00      	nop
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	2000049c 	.word	0x2000049c
 800c7b0:	200004a0 	.word	0x200004a0
 800c7b4:	200005a4 	.word	0x200005a4
 800c7b8:	20000588 	.word	0x20000588
 800c7bc:	200005a8 	.word	0x200005a8
 800c7c0:	200005c4 	.word	0x200005c4
 800c7c4:	e000ed04 	.word	0xe000ed04
 800c7c8:	2000059c 	.word	0x2000059c

0800c7cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b08a      	sub	sp, #40	; 0x28
 800c7d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c7da:	463a      	mov	r2, r7
 800c7dc:	1d39      	adds	r1, r7, #4
 800c7de:	f107 0308 	add.w	r3, r7, #8
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7f3 feaa 	bl	800053c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	9202      	str	r2, [sp, #8]
 800c7f0:	9301      	str	r3, [sp, #4]
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	460a      	mov	r2, r1
 800c7fa:	4920      	ldr	r1, [pc, #128]	; (800c87c <vTaskStartScheduler+0xb0>)
 800c7fc:	4820      	ldr	r0, [pc, #128]	; (800c880 <vTaskStartScheduler+0xb4>)
 800c7fe:	f7ff fcf1 	bl	800c1e4 <xTaskCreateStatic>
 800c802:	4603      	mov	r3, r0
 800c804:	4a1f      	ldr	r2, [pc, #124]	; (800c884 <vTaskStartScheduler+0xb8>)
 800c806:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c808:	4b1e      	ldr	r3, [pc, #120]	; (800c884 <vTaskStartScheduler+0xb8>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d002      	beq.n	800c816 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c810:	2301      	movs	r3, #1
 800c812:	617b      	str	r3, [r7, #20]
 800c814:	e001      	b.n	800c81a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c816:	2300      	movs	r3, #0
 800c818:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d118      	bne.n	800c852 <vTaskStartScheduler+0x86>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	b672      	cpsid	i
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	b662      	cpsie	i
 800c834:	613b      	str	r3, [r7, #16]
}
 800c836:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c838:	4b13      	ldr	r3, [pc, #76]	; (800c888 <vTaskStartScheduler+0xbc>)
 800c83a:	f04f 32ff 	mov.w	r2, #4294967295
 800c83e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c840:	4b12      	ldr	r3, [pc, #72]	; (800c88c <vTaskStartScheduler+0xc0>)
 800c842:	2201      	movs	r2, #1
 800c844:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c846:	4b12      	ldr	r3, [pc, #72]	; (800c890 <vTaskStartScheduler+0xc4>)
 800c848:	2200      	movs	r2, #0
 800c84a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c84c:	f000 fed8 	bl	800d600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c850:	e010      	b.n	800c874 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c858:	d10c      	bne.n	800c874 <vTaskStartScheduler+0xa8>
	__asm volatile
 800c85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85e:	b672      	cpsid	i
 800c860:	f383 8811 	msr	BASEPRI, r3
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	f3bf 8f4f 	dsb	sy
 800c86c:	b662      	cpsie	i
 800c86e:	60fb      	str	r3, [r7, #12]
}
 800c870:	bf00      	nop
 800c872:	e7fe      	b.n	800c872 <vTaskStartScheduler+0xa6>
}
 800c874:	bf00      	nop
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	0800dde0 	.word	0x0800dde0
 800c880:	0800cea9 	.word	0x0800cea9
 800c884:	200005c0 	.word	0x200005c0
 800c888:	200005bc 	.word	0x200005bc
 800c88c:	200005a8 	.word	0x200005a8
 800c890:	200005a0 	.word	0x200005a0

0800c894 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c894:	b480      	push	{r7}
 800c896:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c898:	4b04      	ldr	r3, [pc, #16]	; (800c8ac <vTaskSuspendAll+0x18>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	3301      	adds	r3, #1
 800c89e:	4a03      	ldr	r2, [pc, #12]	; (800c8ac <vTaskSuspendAll+0x18>)
 800c8a0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c8a2:	bf00      	nop
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr
 800c8ac:	200005c4 	.word	0x200005c4

0800c8b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c8be:	4b42      	ldr	r3, [pc, #264]	; (800c9c8 <xTaskResumeAll+0x118>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d10c      	bne.n	800c8e0 <xTaskResumeAll+0x30>
	__asm volatile
 800c8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ca:	b672      	cpsid	i
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	b662      	cpsie	i
 800c8da:	603b      	str	r3, [r7, #0]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c8e0:	f000 ff0c 	bl	800d6fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c8e4:	4b38      	ldr	r3, [pc, #224]	; (800c9c8 <xTaskResumeAll+0x118>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	4a37      	ldr	r2, [pc, #220]	; (800c9c8 <xTaskResumeAll+0x118>)
 800c8ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8ee:	4b36      	ldr	r3, [pc, #216]	; (800c9c8 <xTaskResumeAll+0x118>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d161      	bne.n	800c9ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c8f6:	4b35      	ldr	r3, [pc, #212]	; (800c9cc <xTaskResumeAll+0x11c>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d05d      	beq.n	800c9ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8fe:	e02e      	b.n	800c95e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c900:	4b33      	ldr	r3, [pc, #204]	; (800c9d0 <xTaskResumeAll+0x120>)
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	3318      	adds	r3, #24
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fe ff88 	bl	800b822 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	3304      	adds	r3, #4
 800c916:	4618      	mov	r0, r3
 800c918:	f7fe ff83 	bl	800b822 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c920:	2201      	movs	r2, #1
 800c922:	409a      	lsls	r2, r3
 800c924:	4b2b      	ldr	r3, [pc, #172]	; (800c9d4 <xTaskResumeAll+0x124>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4313      	orrs	r3, r2
 800c92a:	4a2a      	ldr	r2, [pc, #168]	; (800c9d4 <xTaskResumeAll+0x124>)
 800c92c:	6013      	str	r3, [r2, #0]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c932:	4613      	mov	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	4a27      	ldr	r2, [pc, #156]	; (800c9d8 <xTaskResumeAll+0x128>)
 800c93c:	441a      	add	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	3304      	adds	r3, #4
 800c942:	4619      	mov	r1, r3
 800c944:	4610      	mov	r0, r2
 800c946:	f7fe ff0f 	bl	800b768 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c94e:	4b23      	ldr	r3, [pc, #140]	; (800c9dc <xTaskResumeAll+0x12c>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c954:	429a      	cmp	r2, r3
 800c956:	d302      	bcc.n	800c95e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c958:	4b21      	ldr	r3, [pc, #132]	; (800c9e0 <xTaskResumeAll+0x130>)
 800c95a:	2201      	movs	r2, #1
 800c95c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c95e:	4b1c      	ldr	r3, [pc, #112]	; (800c9d0 <xTaskResumeAll+0x120>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1cc      	bne.n	800c900 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c96c:	f000 fb56 	bl	800d01c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c970:	4b1c      	ldr	r3, [pc, #112]	; (800c9e4 <xTaskResumeAll+0x134>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d010      	beq.n	800c99e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c97c:	f000 f846 	bl	800ca0c <xTaskIncrementTick>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d002      	beq.n	800c98c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c986:	4b16      	ldr	r3, [pc, #88]	; (800c9e0 <xTaskResumeAll+0x130>)
 800c988:	2201      	movs	r2, #1
 800c98a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	3b01      	subs	r3, #1
 800c990:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d1f1      	bne.n	800c97c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800c998:	4b12      	ldr	r3, [pc, #72]	; (800c9e4 <xTaskResumeAll+0x134>)
 800c99a:	2200      	movs	r2, #0
 800c99c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c99e:	4b10      	ldr	r3, [pc, #64]	; (800c9e0 <xTaskResumeAll+0x130>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d009      	beq.n	800c9ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c9aa:	4b0f      	ldr	r3, [pc, #60]	; (800c9e8 <xTaskResumeAll+0x138>)
 800c9ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9b0:	601a      	str	r2, [r3, #0]
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9ba:	f000 fed3 	bl	800d764 <vPortExitCritical>

	return xAlreadyYielded;
 800c9be:	68bb      	ldr	r3, [r7, #8]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3710      	adds	r7, #16
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	200005c4 	.word	0x200005c4
 800c9cc:	2000059c 	.word	0x2000059c
 800c9d0:	2000055c 	.word	0x2000055c
 800c9d4:	200005a4 	.word	0x200005a4
 800c9d8:	200004a0 	.word	0x200004a0
 800c9dc:	2000049c 	.word	0x2000049c
 800c9e0:	200005b0 	.word	0x200005b0
 800c9e4:	200005ac 	.word	0x200005ac
 800c9e8:	e000ed04 	.word	0xe000ed04

0800c9ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c9f2:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <xTaskGetTickCount+0x1c>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c9f8:	687b      	ldr	r3, [r7, #4]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	370c      	adds	r7, #12
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	200005a0 	.word	0x200005a0

0800ca0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ca12:	2300      	movs	r3, #0
 800ca14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca16:	4b4f      	ldr	r3, [pc, #316]	; (800cb54 <xTaskIncrementTick+0x148>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f040 808a 	bne.w	800cb34 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ca20:	4b4d      	ldr	r3, [pc, #308]	; (800cb58 <xTaskIncrementTick+0x14c>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	3301      	adds	r3, #1
 800ca26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ca28:	4a4b      	ldr	r2, [pc, #300]	; (800cb58 <xTaskIncrementTick+0x14c>)
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d122      	bne.n	800ca7a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800ca34:	4b49      	ldr	r3, [pc, #292]	; (800cb5c <xTaskIncrementTick+0x150>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00c      	beq.n	800ca58 <xTaskIncrementTick+0x4c>
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca42:	b672      	cpsid	i
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	b662      	cpsie	i
 800ca52:	603b      	str	r3, [r7, #0]
}
 800ca54:	bf00      	nop
 800ca56:	e7fe      	b.n	800ca56 <xTaskIncrementTick+0x4a>
 800ca58:	4b40      	ldr	r3, [pc, #256]	; (800cb5c <xTaskIncrementTick+0x150>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	4b40      	ldr	r3, [pc, #256]	; (800cb60 <xTaskIncrementTick+0x154>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a3e      	ldr	r2, [pc, #248]	; (800cb5c <xTaskIncrementTick+0x150>)
 800ca64:	6013      	str	r3, [r2, #0]
 800ca66:	4a3e      	ldr	r2, [pc, #248]	; (800cb60 <xTaskIncrementTick+0x154>)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6013      	str	r3, [r2, #0]
 800ca6c:	4b3d      	ldr	r3, [pc, #244]	; (800cb64 <xTaskIncrementTick+0x158>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	3301      	adds	r3, #1
 800ca72:	4a3c      	ldr	r2, [pc, #240]	; (800cb64 <xTaskIncrementTick+0x158>)
 800ca74:	6013      	str	r3, [r2, #0]
 800ca76:	f000 fad1 	bl	800d01c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca7a:	4b3b      	ldr	r3, [pc, #236]	; (800cb68 <xTaskIncrementTick+0x15c>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	693a      	ldr	r2, [r7, #16]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d348      	bcc.n	800cb16 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca84:	4b35      	ldr	r3, [pc, #212]	; (800cb5c <xTaskIncrementTick+0x150>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d104      	bne.n	800ca98 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca8e:	4b36      	ldr	r3, [pc, #216]	; (800cb68 <xTaskIncrementTick+0x15c>)
 800ca90:	f04f 32ff 	mov.w	r2, #4294967295
 800ca94:	601a      	str	r2, [r3, #0]
					break;
 800ca96:	e03e      	b.n	800cb16 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca98:	4b30      	ldr	r3, [pc, #192]	; (800cb5c <xTaskIncrementTick+0x150>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800caa8:	693a      	ldr	r2, [r7, #16]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	429a      	cmp	r2, r3
 800caae:	d203      	bcs.n	800cab8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cab0:	4a2d      	ldr	r2, [pc, #180]	; (800cb68 <xTaskIncrementTick+0x15c>)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cab6:	e02e      	b.n	800cb16 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	3304      	adds	r3, #4
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7fe feb0 	bl	800b822 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d004      	beq.n	800cad4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	3318      	adds	r3, #24
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fe fea7 	bl	800b822 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad8:	2201      	movs	r2, #1
 800cada:	409a      	lsls	r2, r3
 800cadc:	4b23      	ldr	r3, [pc, #140]	; (800cb6c <xTaskIncrementTick+0x160>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	4a22      	ldr	r2, [pc, #136]	; (800cb6c <xTaskIncrementTick+0x160>)
 800cae4:	6013      	str	r3, [r2, #0]
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	4a1f      	ldr	r2, [pc, #124]	; (800cb70 <xTaskIncrementTick+0x164>)
 800caf4:	441a      	add	r2, r3
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	3304      	adds	r3, #4
 800cafa:	4619      	mov	r1, r3
 800cafc:	4610      	mov	r0, r2
 800cafe:	f7fe fe33 	bl	800b768 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb06:	4b1b      	ldr	r3, [pc, #108]	; (800cb74 <xTaskIncrementTick+0x168>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d3b9      	bcc.n	800ca84 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800cb10:	2301      	movs	r3, #1
 800cb12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb14:	e7b6      	b.n	800ca84 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cb16:	4b17      	ldr	r3, [pc, #92]	; (800cb74 <xTaskIncrementTick+0x168>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb1c:	4914      	ldr	r1, [pc, #80]	; (800cb70 <xTaskIncrementTick+0x164>)
 800cb1e:	4613      	mov	r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	4413      	add	r3, r2
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	440b      	add	r3, r1
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d907      	bls.n	800cb3e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	617b      	str	r3, [r7, #20]
 800cb32:	e004      	b.n	800cb3e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cb34:	4b10      	ldr	r3, [pc, #64]	; (800cb78 <xTaskIncrementTick+0x16c>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	4a0f      	ldr	r2, [pc, #60]	; (800cb78 <xTaskIncrementTick+0x16c>)
 800cb3c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cb3e:	4b0f      	ldr	r3, [pc, #60]	; (800cb7c <xTaskIncrementTick+0x170>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800cb46:	2301      	movs	r3, #1
 800cb48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cb4a:	697b      	ldr	r3, [r7, #20]
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	200005c4 	.word	0x200005c4
 800cb58:	200005a0 	.word	0x200005a0
 800cb5c:	20000554 	.word	0x20000554
 800cb60:	20000558 	.word	0x20000558
 800cb64:	200005b4 	.word	0x200005b4
 800cb68:	200005bc 	.word	0x200005bc
 800cb6c:	200005a4 	.word	0x200005a4
 800cb70:	200004a0 	.word	0x200004a0
 800cb74:	2000049c 	.word	0x2000049c
 800cb78:	200005ac 	.word	0x200005ac
 800cb7c:	200005b0 	.word	0x200005b0

0800cb80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b088      	sub	sp, #32
 800cb84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb86:	4b3a      	ldr	r3, [pc, #232]	; (800cc70 <vTaskSwitchContext+0xf0>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d003      	beq.n	800cb96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cb8e:	4b39      	ldr	r3, [pc, #228]	; (800cc74 <vTaskSwitchContext+0xf4>)
 800cb90:	2201      	movs	r2, #1
 800cb92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cb94:	e068      	b.n	800cc68 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800cb96:	4b37      	ldr	r3, [pc, #220]	; (800cc74 <vTaskSwitchContext+0xf4>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cb9c:	4b36      	ldr	r3, [pc, #216]	; (800cc78 <vTaskSwitchContext+0xf8>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba2:	61fb      	str	r3, [r7, #28]
 800cba4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cba8:	61bb      	str	r3, [r7, #24]
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	69ba      	ldr	r2, [r7, #24]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d111      	bne.n	800cbd8 <vTaskSwitchContext+0x58>
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	3304      	adds	r3, #4
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	69ba      	ldr	r2, [r7, #24]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d10b      	bne.n	800cbd8 <vTaskSwitchContext+0x58>
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	3308      	adds	r3, #8
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	69ba      	ldr	r2, [r7, #24]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d105      	bne.n	800cbd8 <vTaskSwitchContext+0x58>
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	330c      	adds	r3, #12
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	69ba      	ldr	r2, [r7, #24]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d008      	beq.n	800cbea <vTaskSwitchContext+0x6a>
 800cbd8:	4b27      	ldr	r3, [pc, #156]	; (800cc78 <vTaskSwitchContext+0xf8>)
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	4b26      	ldr	r3, [pc, #152]	; (800cc78 <vTaskSwitchContext+0xf8>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	3334      	adds	r3, #52	; 0x34
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	f7f3 fc96 	bl	8000516 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbea:	4b24      	ldr	r3, [pc, #144]	; (800cc7c <vTaskSwitchContext+0xfc>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	fab3 f383 	clz	r3, r3
 800cbf6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cbf8:	7afb      	ldrb	r3, [r7, #11]
 800cbfa:	f1c3 031f 	rsb	r3, r3, #31
 800cbfe:	617b      	str	r3, [r7, #20]
 800cc00:	491f      	ldr	r1, [pc, #124]	; (800cc80 <vTaskSwitchContext+0x100>)
 800cc02:	697a      	ldr	r2, [r7, #20]
 800cc04:	4613      	mov	r3, r2
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	4413      	add	r3, r2
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	440b      	add	r3, r1
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10c      	bne.n	800cc2e <vTaskSwitchContext+0xae>
	__asm volatile
 800cc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc18:	b672      	cpsid	i
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	b662      	cpsie	i
 800cc28:	607b      	str	r3, [r7, #4]
}
 800cc2a:	bf00      	nop
 800cc2c:	e7fe      	b.n	800cc2c <vTaskSwitchContext+0xac>
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	4613      	mov	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4413      	add	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	4a11      	ldr	r2, [pc, #68]	; (800cc80 <vTaskSwitchContext+0x100>)
 800cc3a:	4413      	add	r3, r2
 800cc3c:	613b      	str	r3, [r7, #16]
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	605a      	str	r2, [r3, #4]
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	3308      	adds	r3, #8
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d104      	bne.n	800cc5e <vTaskSwitchContext+0xde>
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	685a      	ldr	r2, [r3, #4]
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	605a      	str	r2, [r3, #4]
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	4a04      	ldr	r2, [pc, #16]	; (800cc78 <vTaskSwitchContext+0xf8>)
 800cc66:	6013      	str	r3, [r2, #0]
}
 800cc68:	bf00      	nop
 800cc6a:	3720      	adds	r7, #32
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	200005c4 	.word	0x200005c4
 800cc74:	200005b0 	.word	0x200005b0
 800cc78:	2000049c 	.word	0x2000049c
 800cc7c:	200005a4 	.word	0x200005a4
 800cc80:	200004a0 	.word	0x200004a0

0800cc84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10c      	bne.n	800ccae <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	b672      	cpsid	i
 800cc9a:	f383 8811 	msr	BASEPRI, r3
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f3bf 8f4f 	dsb	sy
 800cca6:	b662      	cpsie	i
 800cca8:	60fb      	str	r3, [r7, #12]
}
 800ccaa:	bf00      	nop
 800ccac:	e7fe      	b.n	800ccac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccae:	4b07      	ldr	r3, [pc, #28]	; (800cccc <vTaskPlaceOnEventList+0x48>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	3318      	adds	r3, #24
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7fe fd7a 	bl	800b7b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ccbc:	2101      	movs	r1, #1
 800ccbe:	6838      	ldr	r0, [r7, #0]
 800ccc0:	f000 fba6 	bl	800d410 <prvAddCurrentTaskToDelayedList>
}
 800ccc4:	bf00      	nop
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	2000049c 	.word	0x2000049c

0800ccd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d10c      	bne.n	800cd00 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccea:	b672      	cpsid	i
 800ccec:	f383 8811 	msr	BASEPRI, r3
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	b662      	cpsie	i
 800ccfa:	60fb      	str	r3, [r7, #12]
}
 800ccfc:	bf00      	nop
 800ccfe:	e7fe      	b.n	800ccfe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	3318      	adds	r3, #24
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7fe fd8c 	bl	800b822 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd0a:	4b1d      	ldr	r3, [pc, #116]	; (800cd80 <xTaskRemoveFromEventList+0xb0>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d11c      	bne.n	800cd4c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	3304      	adds	r3, #4
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fe fd83 	bl	800b822 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd20:	2201      	movs	r2, #1
 800cd22:	409a      	lsls	r2, r3
 800cd24:	4b17      	ldr	r3, [pc, #92]	; (800cd84 <xTaskRemoveFromEventList+0xb4>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	4a16      	ldr	r2, [pc, #88]	; (800cd84 <xTaskRemoveFromEventList+0xb4>)
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd32:	4613      	mov	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	4413      	add	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4a13      	ldr	r2, [pc, #76]	; (800cd88 <xTaskRemoveFromEventList+0xb8>)
 800cd3c:	441a      	add	r2, r3
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	3304      	adds	r3, #4
 800cd42:	4619      	mov	r1, r3
 800cd44:	4610      	mov	r0, r2
 800cd46:	f7fe fd0f 	bl	800b768 <vListInsertEnd>
 800cd4a:	e005      	b.n	800cd58 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	3318      	adds	r3, #24
 800cd50:	4619      	mov	r1, r3
 800cd52:	480e      	ldr	r0, [pc, #56]	; (800cd8c <xTaskRemoveFromEventList+0xbc>)
 800cd54:	f7fe fd08 	bl	800b768 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5c:	4b0c      	ldr	r3, [pc, #48]	; (800cd90 <xTaskRemoveFromEventList+0xc0>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d905      	bls.n	800cd72 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cd66:	2301      	movs	r3, #1
 800cd68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cd6a:	4b0a      	ldr	r3, [pc, #40]	; (800cd94 <xTaskRemoveFromEventList+0xc4>)
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	601a      	str	r2, [r3, #0]
 800cd70:	e001      	b.n	800cd76 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cd72:	2300      	movs	r3, #0
 800cd74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cd76:	697b      	ldr	r3, [r7, #20]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	200005c4 	.word	0x200005c4
 800cd84:	200005a4 	.word	0x200005a4
 800cd88:	200004a0 	.word	0x200004a0
 800cd8c:	2000055c 	.word	0x2000055c
 800cd90:	2000049c 	.word	0x2000049c
 800cd94:	200005b0 	.word	0x200005b0

0800cd98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cda0:	4b06      	ldr	r3, [pc, #24]	; (800cdbc <vTaskInternalSetTimeOutState+0x24>)
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cda8:	4b05      	ldr	r3, [pc, #20]	; (800cdc0 <vTaskInternalSetTimeOutState+0x28>)
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	605a      	str	r2, [r3, #4]
}
 800cdb0:	bf00      	nop
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	200005b4 	.word	0x200005b4
 800cdc0:	200005a0 	.word	0x200005a0

0800cdc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b088      	sub	sp, #32
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10c      	bne.n	800cdee <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800cdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd8:	b672      	cpsid	i
 800cdda:	f383 8811 	msr	BASEPRI, r3
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	b662      	cpsie	i
 800cde8:	613b      	str	r3, [r7, #16]
}
 800cdea:	bf00      	nop
 800cdec:	e7fe      	b.n	800cdec <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10c      	bne.n	800ce0e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800cdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf8:	b672      	cpsid	i
 800cdfa:	f383 8811 	msr	BASEPRI, r3
 800cdfe:	f3bf 8f6f 	isb	sy
 800ce02:	f3bf 8f4f 	dsb	sy
 800ce06:	b662      	cpsie	i
 800ce08:	60fb      	str	r3, [r7, #12]
}
 800ce0a:	bf00      	nop
 800ce0c:	e7fe      	b.n	800ce0c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ce0e:	f000 fc75 	bl	800d6fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ce12:	4b1d      	ldr	r3, [pc, #116]	; (800ce88 <xTaskCheckForTimeOut+0xc4>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	69ba      	ldr	r2, [r7, #24]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2a:	d102      	bne.n	800ce32 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	61fb      	str	r3, [r7, #28]
 800ce30:	e023      	b.n	800ce7a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	4b15      	ldr	r3, [pc, #84]	; (800ce8c <xTaskCheckForTimeOut+0xc8>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d007      	beq.n	800ce4e <xTaskCheckForTimeOut+0x8a>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	69ba      	ldr	r2, [r7, #24]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d302      	bcc.n	800ce4e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	61fb      	str	r3, [r7, #28]
 800ce4c:	e015      	b.n	800ce7a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d20b      	bcs.n	800ce70 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	1ad2      	subs	r2, r2, r3
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff ff97 	bl	800cd98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	61fb      	str	r3, [r7, #28]
 800ce6e:	e004      	b.n	800ce7a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	2200      	movs	r2, #0
 800ce74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ce76:	2301      	movs	r3, #1
 800ce78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ce7a:	f000 fc73 	bl	800d764 <vPortExitCritical>

	return xReturn;
 800ce7e:	69fb      	ldr	r3, [r7, #28]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3720      	adds	r7, #32
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	200005a0 	.word	0x200005a0
 800ce8c:	200005b4 	.word	0x200005b4

0800ce90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce90:	b480      	push	{r7}
 800ce92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce94:	4b03      	ldr	r3, [pc, #12]	; (800cea4 <vTaskMissedYield+0x14>)
 800ce96:	2201      	movs	r2, #1
 800ce98:	601a      	str	r2, [r3, #0]
}
 800ce9a:	bf00      	nop
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr
 800cea4:	200005b0 	.word	0x200005b0

0800cea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ceb0:	f000 f854 	bl	800cf5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ceb4:	4b07      	ldr	r3, [pc, #28]	; (800ced4 <prvIdleTask+0x2c>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d907      	bls.n	800cecc <prvIdleTask+0x24>
			{
				taskYIELD();
 800cebc:	4b06      	ldr	r3, [pc, #24]	; (800ced8 <prvIdleTask+0x30>)
 800cebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cec2:	601a      	str	r2, [r3, #0]
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800cecc:	f7f3 fb1c 	bl	8000508 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ced0:	e7ee      	b.n	800ceb0 <prvIdleTask+0x8>
 800ced2:	bf00      	nop
 800ced4:	200004a0 	.word	0x200004a0
 800ced8:	e000ed04 	.word	0xe000ed04

0800cedc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cee2:	2300      	movs	r3, #0
 800cee4:	607b      	str	r3, [r7, #4]
 800cee6:	e00c      	b.n	800cf02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	4613      	mov	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4413      	add	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	4a12      	ldr	r2, [pc, #72]	; (800cf3c <prvInitialiseTaskLists+0x60>)
 800cef4:	4413      	add	r3, r2
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe fc09 	bl	800b70e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	3301      	adds	r3, #1
 800cf00:	607b      	str	r3, [r7, #4]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b06      	cmp	r3, #6
 800cf06:	d9ef      	bls.n	800cee8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cf08:	480d      	ldr	r0, [pc, #52]	; (800cf40 <prvInitialiseTaskLists+0x64>)
 800cf0a:	f7fe fc00 	bl	800b70e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf0e:	480d      	ldr	r0, [pc, #52]	; (800cf44 <prvInitialiseTaskLists+0x68>)
 800cf10:	f7fe fbfd 	bl	800b70e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf14:	480c      	ldr	r0, [pc, #48]	; (800cf48 <prvInitialiseTaskLists+0x6c>)
 800cf16:	f7fe fbfa 	bl	800b70e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf1a:	480c      	ldr	r0, [pc, #48]	; (800cf4c <prvInitialiseTaskLists+0x70>)
 800cf1c:	f7fe fbf7 	bl	800b70e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf20:	480b      	ldr	r0, [pc, #44]	; (800cf50 <prvInitialiseTaskLists+0x74>)
 800cf22:	f7fe fbf4 	bl	800b70e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf26:	4b0b      	ldr	r3, [pc, #44]	; (800cf54 <prvInitialiseTaskLists+0x78>)
 800cf28:	4a05      	ldr	r2, [pc, #20]	; (800cf40 <prvInitialiseTaskLists+0x64>)
 800cf2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf2c:	4b0a      	ldr	r3, [pc, #40]	; (800cf58 <prvInitialiseTaskLists+0x7c>)
 800cf2e:	4a05      	ldr	r2, [pc, #20]	; (800cf44 <prvInitialiseTaskLists+0x68>)
 800cf30:	601a      	str	r2, [r3, #0]
}
 800cf32:	bf00      	nop
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	200004a0 	.word	0x200004a0
 800cf40:	2000052c 	.word	0x2000052c
 800cf44:	20000540 	.word	0x20000540
 800cf48:	2000055c 	.word	0x2000055c
 800cf4c:	20000570 	.word	0x20000570
 800cf50:	20000588 	.word	0x20000588
 800cf54:	20000554 	.word	0x20000554
 800cf58:	20000558 	.word	0x20000558

0800cf5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf62:	e019      	b.n	800cf98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cf64:	f000 fbca 	bl	800d6fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf68:	4b10      	ldr	r3, [pc, #64]	; (800cfac <prvCheckTasksWaitingTermination+0x50>)
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	3304      	adds	r3, #4
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7fe fc54 	bl	800b822 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf7a:	4b0d      	ldr	r3, [pc, #52]	; (800cfb0 <prvCheckTasksWaitingTermination+0x54>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	4a0b      	ldr	r2, [pc, #44]	; (800cfb0 <prvCheckTasksWaitingTermination+0x54>)
 800cf82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf84:	4b0b      	ldr	r3, [pc, #44]	; (800cfb4 <prvCheckTasksWaitingTermination+0x58>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	4a0a      	ldr	r2, [pc, #40]	; (800cfb4 <prvCheckTasksWaitingTermination+0x58>)
 800cf8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf8e:	f000 fbe9 	bl	800d764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 f810 	bl	800cfb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf98:	4b06      	ldr	r3, [pc, #24]	; (800cfb4 <prvCheckTasksWaitingTermination+0x58>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d1e1      	bne.n	800cf64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cfa0:	bf00      	nop
 800cfa2:	bf00      	nop
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	20000570 	.word	0x20000570
 800cfb0:	2000059c 	.word	0x2000059c
 800cfb4:	20000584 	.word	0x20000584

0800cfb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d108      	bne.n	800cfdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f000 fd4c 	bl	800da6c <vPortFree>
				vPortFree( pxTCB );
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 fd49 	bl	800da6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cfda:	e01a      	b.n	800d012 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d103      	bne.n	800cfee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fd40 	bl	800da6c <vPortFree>
	}
 800cfec:	e011      	b.n	800d012 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d00c      	beq.n	800d012 <prvDeleteTCB+0x5a>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	b672      	cpsid	i
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	b662      	cpsie	i
 800d00c:	60fb      	str	r3, [r7, #12]
}
 800d00e:	bf00      	nop
 800d010:	e7fe      	b.n	800d010 <prvDeleteTCB+0x58>
	}
 800d012:	bf00      	nop
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
	...

0800d01c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d022:	4b0c      	ldr	r3, [pc, #48]	; (800d054 <prvResetNextTaskUnblockTime+0x38>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d104      	bne.n	800d036 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d02c:	4b0a      	ldr	r3, [pc, #40]	; (800d058 <prvResetNextTaskUnblockTime+0x3c>)
 800d02e:	f04f 32ff 	mov.w	r2, #4294967295
 800d032:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d034:	e008      	b.n	800d048 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d036:	4b07      	ldr	r3, [pc, #28]	; (800d054 <prvResetNextTaskUnblockTime+0x38>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	68db      	ldr	r3, [r3, #12]
 800d03e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	4a04      	ldr	r2, [pc, #16]	; (800d058 <prvResetNextTaskUnblockTime+0x3c>)
 800d046:	6013      	str	r3, [r2, #0]
}
 800d048:	bf00      	nop
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	20000554 	.word	0x20000554
 800d058:	200005bc 	.word	0x200005bc

0800d05c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d062:	4b0b      	ldr	r3, [pc, #44]	; (800d090 <xTaskGetSchedulerState+0x34>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d102      	bne.n	800d070 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d06a:	2301      	movs	r3, #1
 800d06c:	607b      	str	r3, [r7, #4]
 800d06e:	e008      	b.n	800d082 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d070:	4b08      	ldr	r3, [pc, #32]	; (800d094 <xTaskGetSchedulerState+0x38>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d102      	bne.n	800d07e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d078:	2302      	movs	r3, #2
 800d07a:	607b      	str	r3, [r7, #4]
 800d07c:	e001      	b.n	800d082 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d07e:	2300      	movs	r3, #0
 800d080:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d082:	687b      	ldr	r3, [r7, #4]
	}
 800d084:	4618      	mov	r0, r3
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr
 800d090:	200005a8 	.word	0x200005a8
 800d094:	200005c4 	.word	0x200005c4

0800d098 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d069      	beq.n	800d182 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b2:	4b36      	ldr	r3, [pc, #216]	; (800d18c <xTaskPriorityInherit+0xf4>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d259      	bcs.n	800d170 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	db06      	blt.n	800d0d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0c4:	4b31      	ldr	r3, [pc, #196]	; (800d18c <xTaskPriorityInherit+0xf4>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ca:	f1c3 0207 	rsb	r2, r3, #7
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	6959      	ldr	r1, [r3, #20]
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0da:	4613      	mov	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4413      	add	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4a2b      	ldr	r2, [pc, #172]	; (800d190 <xTaskPriorityInherit+0xf8>)
 800d0e4:	4413      	add	r3, r2
 800d0e6:	4299      	cmp	r1, r3
 800d0e8:	d13a      	bne.n	800d160 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	3304      	adds	r3, #4
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fe fb97 	bl	800b822 <uxListRemove>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d115      	bne.n	800d126 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fe:	4924      	ldr	r1, [pc, #144]	; (800d190 <xTaskPriorityInherit+0xf8>)
 800d100:	4613      	mov	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4413      	add	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	440b      	add	r3, r1
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10a      	bne.n	800d126 <xTaskPriorityInherit+0x8e>
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d114:	2201      	movs	r2, #1
 800d116:	fa02 f303 	lsl.w	r3, r2, r3
 800d11a:	43da      	mvns	r2, r3
 800d11c:	4b1d      	ldr	r3, [pc, #116]	; (800d194 <xTaskPriorityInherit+0xfc>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4013      	ands	r3, r2
 800d122:	4a1c      	ldr	r2, [pc, #112]	; (800d194 <xTaskPriorityInherit+0xfc>)
 800d124:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d126:	4b19      	ldr	r3, [pc, #100]	; (800d18c <xTaskPriorityInherit+0xf4>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d134:	2201      	movs	r2, #1
 800d136:	409a      	lsls	r2, r3
 800d138:	4b16      	ldr	r3, [pc, #88]	; (800d194 <xTaskPriorityInherit+0xfc>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4313      	orrs	r3, r2
 800d13e:	4a15      	ldr	r2, [pc, #84]	; (800d194 <xTaskPriorityInherit+0xfc>)
 800d140:	6013      	str	r3, [r2, #0]
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d146:	4613      	mov	r3, r2
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	4413      	add	r3, r2
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	4a10      	ldr	r2, [pc, #64]	; (800d190 <xTaskPriorityInherit+0xf8>)
 800d150:	441a      	add	r2, r3
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	3304      	adds	r3, #4
 800d156:	4619      	mov	r1, r3
 800d158:	4610      	mov	r0, r2
 800d15a:	f7fe fb05 	bl	800b768 <vListInsertEnd>
 800d15e:	e004      	b.n	800d16a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d160:	4b0a      	ldr	r3, [pc, #40]	; (800d18c <xTaskPriorityInherit+0xf4>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d16a:	2301      	movs	r3, #1
 800d16c:	60fb      	str	r3, [r7, #12]
 800d16e:	e008      	b.n	800d182 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d174:	4b05      	ldr	r3, [pc, #20]	; (800d18c <xTaskPriorityInherit+0xf4>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d201      	bcs.n	800d182 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d17e:	2301      	movs	r3, #1
 800d180:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d182:	68fb      	ldr	r3, [r7, #12]
	}
 800d184:	4618      	mov	r0, r3
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	2000049c 	.word	0x2000049c
 800d190:	200004a0 	.word	0x200004a0
 800d194:	200005a4 	.word	0x200005a4

0800d198 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d072      	beq.n	800d294 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d1ae:	4b3c      	ldr	r3, [pc, #240]	; (800d2a0 <xTaskPriorityDisinherit+0x108>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	693a      	ldr	r2, [r7, #16]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d00c      	beq.n	800d1d2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1bc:	b672      	cpsid	i
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	b662      	cpsie	i
 800d1cc:	60fb      	str	r3, [r7, #12]
}
 800d1ce:	bf00      	nop
 800d1d0:	e7fe      	b.n	800d1d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d10c      	bne.n	800d1f4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1de:	b672      	cpsid	i
 800d1e0:	f383 8811 	msr	BASEPRI, r3
 800d1e4:	f3bf 8f6f 	isb	sy
 800d1e8:	f3bf 8f4f 	dsb	sy
 800d1ec:	b662      	cpsie	i
 800d1ee:	60bb      	str	r3, [r7, #8]
}
 800d1f0:	bf00      	nop
 800d1f2:	e7fe      	b.n	800d1f2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1f8:	1e5a      	subs	r2, r3, #1
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d206:	429a      	cmp	r2, r3
 800d208:	d044      	beq.n	800d294 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d140      	bne.n	800d294 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	3304      	adds	r3, #4
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe fb03 	bl	800b822 <uxListRemove>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d115      	bne.n	800d24e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d226:	491f      	ldr	r1, [pc, #124]	; (800d2a4 <xTaskPriorityDisinherit+0x10c>)
 800d228:	4613      	mov	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	4413      	add	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	440b      	add	r3, r1
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d10a      	bne.n	800d24e <xTaskPriorityDisinherit+0xb6>
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23c:	2201      	movs	r2, #1
 800d23e:	fa02 f303 	lsl.w	r3, r2, r3
 800d242:	43da      	mvns	r2, r3
 800d244:	4b18      	ldr	r3, [pc, #96]	; (800d2a8 <xTaskPriorityDisinherit+0x110>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4013      	ands	r3, r2
 800d24a:	4a17      	ldr	r2, [pc, #92]	; (800d2a8 <xTaskPriorityDisinherit+0x110>)
 800d24c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25a:	f1c3 0207 	rsb	r2, r3, #7
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d266:	2201      	movs	r2, #1
 800d268:	409a      	lsls	r2, r3
 800d26a:	4b0f      	ldr	r3, [pc, #60]	; (800d2a8 <xTaskPriorityDisinherit+0x110>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	4313      	orrs	r3, r2
 800d270:	4a0d      	ldr	r2, [pc, #52]	; (800d2a8 <xTaskPriorityDisinherit+0x110>)
 800d272:	6013      	str	r3, [r2, #0]
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d278:	4613      	mov	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	4413      	add	r3, r2
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	4a08      	ldr	r2, [pc, #32]	; (800d2a4 <xTaskPriorityDisinherit+0x10c>)
 800d282:	441a      	add	r2, r3
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	3304      	adds	r3, #4
 800d288:	4619      	mov	r1, r3
 800d28a:	4610      	mov	r0, r2
 800d28c:	f7fe fa6c 	bl	800b768 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d290:	2301      	movs	r3, #1
 800d292:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d294:	697b      	ldr	r3, [r7, #20]
	}
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	2000049c 	.word	0x2000049c
 800d2a4:	200004a0 	.word	0x200004a0
 800d2a8:	200005a4 	.word	0x200005a4

0800d2ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b088      	sub	sp, #32
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f000 8087 	beq.w	800d3d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10c      	bne.n	800d2e8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800d2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d2:	b672      	cpsid	i
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	b662      	cpsie	i
 800d2e2:	60fb      	str	r3, [r7, #12]
}
 800d2e4:	bf00      	nop
 800d2e6:	e7fe      	b.n	800d2e6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ec:	683a      	ldr	r2, [r7, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d902      	bls.n	800d2f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	61fb      	str	r3, [r7, #28]
 800d2f6:	e002      	b.n	800d2fe <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2fc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d302:	69fa      	ldr	r2, [r7, #28]
 800d304:	429a      	cmp	r2, r3
 800d306:	d065      	beq.n	800d3d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d30c:	697a      	ldr	r2, [r7, #20]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d160      	bne.n	800d3d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d312:	4b32      	ldr	r3, [pc, #200]	; (800d3dc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	69ba      	ldr	r2, [r7, #24]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d10c      	bne.n	800d336 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	b672      	cpsid	i
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	b662      	cpsie	i
 800d330:	60bb      	str	r3, [r7, #8]
}
 800d332:	bf00      	nop
 800d334:	e7fe      	b.n	800d334 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	69fa      	ldr	r2, [r7, #28]
 800d340:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	699b      	ldr	r3, [r3, #24]
 800d346:	2b00      	cmp	r3, #0
 800d348:	db04      	blt.n	800d354 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	f1c3 0207 	rsb	r2, r3, #7
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	6959      	ldr	r1, [r3, #20]
 800d358:	693a      	ldr	r2, [r7, #16]
 800d35a:	4613      	mov	r3, r2
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	4413      	add	r3, r2
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	4a1f      	ldr	r2, [pc, #124]	; (800d3e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d364:	4413      	add	r3, r2
 800d366:	4299      	cmp	r1, r3
 800d368:	d134      	bne.n	800d3d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	3304      	adds	r3, #4
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fe fa57 	bl	800b822 <uxListRemove>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d115      	bne.n	800d3a6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d37a:	69bb      	ldr	r3, [r7, #24]
 800d37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d37e:	4918      	ldr	r1, [pc, #96]	; (800d3e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d380:	4613      	mov	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4413      	add	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	440b      	add	r3, r1
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d10a      	bne.n	800d3a6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d394:	2201      	movs	r2, #1
 800d396:	fa02 f303 	lsl.w	r3, r2, r3
 800d39a:	43da      	mvns	r2, r3
 800d39c:	4b11      	ldr	r3, [pc, #68]	; (800d3e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4013      	ands	r3, r2
 800d3a2:	4a10      	ldr	r2, [pc, #64]	; (800d3e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d3a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	409a      	lsls	r2, r3
 800d3ae:	4b0d      	ldr	r3, [pc, #52]	; (800d3e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	4a0b      	ldr	r2, [pc, #44]	; (800d3e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d3b6:	6013      	str	r3, [r2, #0]
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3bc:	4613      	mov	r3, r2
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	4413      	add	r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	4a06      	ldr	r2, [pc, #24]	; (800d3e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d3c6:	441a      	add	r2, r3
 800d3c8:	69bb      	ldr	r3, [r7, #24]
 800d3ca:	3304      	adds	r3, #4
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4610      	mov	r0, r2
 800d3d0:	f7fe f9ca 	bl	800b768 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3d4:	bf00      	nop
 800d3d6:	3720      	adds	r7, #32
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	2000049c 	.word	0x2000049c
 800d3e0:	200004a0 	.word	0x200004a0
 800d3e4:	200005a4 	.word	0x200005a4

0800d3e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d3e8:	b480      	push	{r7}
 800d3ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d3ec:	4b07      	ldr	r3, [pc, #28]	; (800d40c <pvTaskIncrementMutexHeldCount+0x24>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d004      	beq.n	800d3fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d3f4:	4b05      	ldr	r3, [pc, #20]	; (800d40c <pvTaskIncrementMutexHeldCount+0x24>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d3fa:	3201      	adds	r2, #1
 800d3fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d3fe:	4b03      	ldr	r3, [pc, #12]	; (800d40c <pvTaskIncrementMutexHeldCount+0x24>)
 800d400:	681b      	ldr	r3, [r3, #0]
	}
 800d402:	4618      	mov	r0, r3
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr
 800d40c:	2000049c 	.word	0x2000049c

0800d410 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d41a:	4b29      	ldr	r3, [pc, #164]	; (800d4c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d420:	4b28      	ldr	r3, [pc, #160]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	3304      	adds	r3, #4
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe f9fb 	bl	800b822 <uxListRemove>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d10b      	bne.n	800d44a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d432:	4b24      	ldr	r3, [pc, #144]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d438:	2201      	movs	r2, #1
 800d43a:	fa02 f303 	lsl.w	r3, r2, r3
 800d43e:	43da      	mvns	r2, r3
 800d440:	4b21      	ldr	r3, [pc, #132]	; (800d4c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4013      	ands	r3, r2
 800d446:	4a20      	ldr	r2, [pc, #128]	; (800d4c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d448:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d450:	d10a      	bne.n	800d468 <prvAddCurrentTaskToDelayedList+0x58>
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d007      	beq.n	800d468 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d458:	4b1a      	ldr	r3, [pc, #104]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	3304      	adds	r3, #4
 800d45e:	4619      	mov	r1, r3
 800d460:	481a      	ldr	r0, [pc, #104]	; (800d4cc <prvAddCurrentTaskToDelayedList+0xbc>)
 800d462:	f7fe f981 	bl	800b768 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d466:	e026      	b.n	800d4b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d468:	68fa      	ldr	r2, [r7, #12]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4413      	add	r3, r2
 800d46e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d470:	4b14      	ldr	r3, [pc, #80]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d478:	68ba      	ldr	r2, [r7, #8]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d209      	bcs.n	800d494 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d480:	4b13      	ldr	r3, [pc, #76]	; (800d4d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	4b0f      	ldr	r3, [pc, #60]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3304      	adds	r3, #4
 800d48a:	4619      	mov	r1, r3
 800d48c:	4610      	mov	r0, r2
 800d48e:	f7fe f98f 	bl	800b7b0 <vListInsert>
}
 800d492:	e010      	b.n	800d4b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d494:	4b0f      	ldr	r3, [pc, #60]	; (800d4d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	4b0a      	ldr	r3, [pc, #40]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3304      	adds	r3, #4
 800d49e:	4619      	mov	r1, r3
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	f7fe f985 	bl	800b7b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d4a6:	4b0c      	ldr	r3, [pc, #48]	; (800d4d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d202      	bcs.n	800d4b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d4b0:	4a09      	ldr	r2, [pc, #36]	; (800d4d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	6013      	str	r3, [r2, #0]
}
 800d4b6:	bf00      	nop
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	200005a0 	.word	0x200005a0
 800d4c4:	2000049c 	.word	0x2000049c
 800d4c8:	200005a4 	.word	0x200005a4
 800d4cc:	20000588 	.word	0x20000588
 800d4d0:	20000558 	.word	0x20000558
 800d4d4:	20000554 	.word	0x20000554
 800d4d8:	200005bc 	.word	0x200005bc

0800d4dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	3b04      	subs	r3, #4
 800d4ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d4f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	3b04      	subs	r3, #4
 800d4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	f023 0201 	bic.w	r2, r3, #1
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	3b04      	subs	r3, #4
 800d50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d50c:	4a0c      	ldr	r2, [pc, #48]	; (800d540 <pxPortInitialiseStack+0x64>)
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	3b14      	subs	r3, #20
 800d516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3b04      	subs	r3, #4
 800d522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f06f 0202 	mvn.w	r2, #2
 800d52a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	3b20      	subs	r3, #32
 800d530:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d532:	68fb      	ldr	r3, [r7, #12]
}
 800d534:	4618      	mov	r0, r3
 800d536:	3714      	adds	r7, #20
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	0800d545 	.word	0x0800d545

0800d544 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d54a:	2300      	movs	r3, #0
 800d54c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d54e:	4b14      	ldr	r3, [pc, #80]	; (800d5a0 <prvTaskExitError+0x5c>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d556:	d00c      	beq.n	800d572 <prvTaskExitError+0x2e>
	__asm volatile
 800d558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55c:	b672      	cpsid	i
 800d55e:	f383 8811 	msr	BASEPRI, r3
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	f3bf 8f4f 	dsb	sy
 800d56a:	b662      	cpsie	i
 800d56c:	60fb      	str	r3, [r7, #12]
}
 800d56e:	bf00      	nop
 800d570:	e7fe      	b.n	800d570 <prvTaskExitError+0x2c>
	__asm volatile
 800d572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d576:	b672      	cpsid	i
 800d578:	f383 8811 	msr	BASEPRI, r3
 800d57c:	f3bf 8f6f 	isb	sy
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	b662      	cpsie	i
 800d586:	60bb      	str	r3, [r7, #8]
}
 800d588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d58a:	bf00      	nop
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d0fc      	beq.n	800d58c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d592:	bf00      	nop
 800d594:	bf00      	nop
 800d596:	3714      	adds	r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr
 800d5a0:	20000054 	.word	0x20000054
	...

0800d5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d5b0:	4b07      	ldr	r3, [pc, #28]	; (800d5d0 <pxCurrentTCBConst2>)
 800d5b2:	6819      	ldr	r1, [r3, #0]
 800d5b4:	6808      	ldr	r0, [r1, #0]
 800d5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ba:	f380 8809 	msr	PSP, r0
 800d5be:	f3bf 8f6f 	isb	sy
 800d5c2:	f04f 0000 	mov.w	r0, #0
 800d5c6:	f380 8811 	msr	BASEPRI, r0
 800d5ca:	4770      	bx	lr
 800d5cc:	f3af 8000 	nop.w

0800d5d0 <pxCurrentTCBConst2>:
 800d5d0:	2000049c 	.word	0x2000049c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d5d4:	bf00      	nop
 800d5d6:	bf00      	nop

0800d5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d5d8:	4808      	ldr	r0, [pc, #32]	; (800d5fc <prvPortStartFirstTask+0x24>)
 800d5da:	6800      	ldr	r0, [r0, #0]
 800d5dc:	6800      	ldr	r0, [r0, #0]
 800d5de:	f380 8808 	msr	MSP, r0
 800d5e2:	f04f 0000 	mov.w	r0, #0
 800d5e6:	f380 8814 	msr	CONTROL, r0
 800d5ea:	b662      	cpsie	i
 800d5ec:	b661      	cpsie	f
 800d5ee:	f3bf 8f4f 	dsb	sy
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	df00      	svc	0
 800d5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5fa:	bf00      	nop
 800d5fc:	e000ed08 	.word	0xe000ed08

0800d600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d606:	4b37      	ldr	r3, [pc, #220]	; (800d6e4 <xPortStartScheduler+0xe4>)
 800d608:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	22ff      	movs	r2, #255	; 0xff
 800d616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d620:	78fb      	ldrb	r3, [r7, #3]
 800d622:	b2db      	uxtb	r3, r3
 800d624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	4b2f      	ldr	r3, [pc, #188]	; (800d6e8 <xPortStartScheduler+0xe8>)
 800d62c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d62e:	4b2f      	ldr	r3, [pc, #188]	; (800d6ec <xPortStartScheduler+0xec>)
 800d630:	2207      	movs	r2, #7
 800d632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d634:	e009      	b.n	800d64a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d636:	4b2d      	ldr	r3, [pc, #180]	; (800d6ec <xPortStartScheduler+0xec>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3b01      	subs	r3, #1
 800d63c:	4a2b      	ldr	r2, [pc, #172]	; (800d6ec <xPortStartScheduler+0xec>)
 800d63e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d640:	78fb      	ldrb	r3, [r7, #3]
 800d642:	b2db      	uxtb	r3, r3
 800d644:	005b      	lsls	r3, r3, #1
 800d646:	b2db      	uxtb	r3, r3
 800d648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d64a:	78fb      	ldrb	r3, [r7, #3]
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d652:	2b80      	cmp	r3, #128	; 0x80
 800d654:	d0ef      	beq.n	800d636 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d656:	4b25      	ldr	r3, [pc, #148]	; (800d6ec <xPortStartScheduler+0xec>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f1c3 0307 	rsb	r3, r3, #7
 800d65e:	2b04      	cmp	r3, #4
 800d660:	d00c      	beq.n	800d67c <xPortStartScheduler+0x7c>
	__asm volatile
 800d662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d666:	b672      	cpsid	i
 800d668:	f383 8811 	msr	BASEPRI, r3
 800d66c:	f3bf 8f6f 	isb	sy
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	b662      	cpsie	i
 800d676:	60bb      	str	r3, [r7, #8]
}
 800d678:	bf00      	nop
 800d67a:	e7fe      	b.n	800d67a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d67c:	4b1b      	ldr	r3, [pc, #108]	; (800d6ec <xPortStartScheduler+0xec>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	021b      	lsls	r3, r3, #8
 800d682:	4a1a      	ldr	r2, [pc, #104]	; (800d6ec <xPortStartScheduler+0xec>)
 800d684:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d686:	4b19      	ldr	r3, [pc, #100]	; (800d6ec <xPortStartScheduler+0xec>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d68e:	4a17      	ldr	r2, [pc, #92]	; (800d6ec <xPortStartScheduler+0xec>)
 800d690:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	b2da      	uxtb	r2, r3
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d69a:	4b15      	ldr	r3, [pc, #84]	; (800d6f0 <xPortStartScheduler+0xf0>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a14      	ldr	r2, [pc, #80]	; (800d6f0 <xPortStartScheduler+0xf0>)
 800d6a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d6a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d6a6:	4b12      	ldr	r3, [pc, #72]	; (800d6f0 <xPortStartScheduler+0xf0>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a11      	ldr	r2, [pc, #68]	; (800d6f0 <xPortStartScheduler+0xf0>)
 800d6ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d6b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d6b2:	f000 f8dd 	bl	800d870 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d6b6:	4b0f      	ldr	r3, [pc, #60]	; (800d6f4 <xPortStartScheduler+0xf4>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d6bc:	f000 f8fc 	bl	800d8b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d6c0:	4b0d      	ldr	r3, [pc, #52]	; (800d6f8 <xPortStartScheduler+0xf8>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a0c      	ldr	r2, [pc, #48]	; (800d6f8 <xPortStartScheduler+0xf8>)
 800d6c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d6ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d6cc:	f7ff ff84 	bl	800d5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d6d0:	f7ff fa56 	bl	800cb80 <vTaskSwitchContext>
	prvTaskExitError();
 800d6d4:	f7ff ff36 	bl	800d544 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6d8:	2300      	movs	r3, #0
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	e000e400 	.word	0xe000e400
 800d6e8:	200005c8 	.word	0x200005c8
 800d6ec:	200005cc 	.word	0x200005cc
 800d6f0:	e000ed20 	.word	0xe000ed20
 800d6f4:	20000054 	.word	0x20000054
 800d6f8:	e000ef34 	.word	0xe000ef34

0800d6fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b083      	sub	sp, #12
 800d700:	af00      	add	r7, sp, #0
	__asm volatile
 800d702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d706:	b672      	cpsid	i
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	b662      	cpsie	i
 800d716:	607b      	str	r3, [r7, #4]
}
 800d718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d71a:	4b10      	ldr	r3, [pc, #64]	; (800d75c <vPortEnterCritical+0x60>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	3301      	adds	r3, #1
 800d720:	4a0e      	ldr	r2, [pc, #56]	; (800d75c <vPortEnterCritical+0x60>)
 800d722:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d724:	4b0d      	ldr	r3, [pc, #52]	; (800d75c <vPortEnterCritical+0x60>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d111      	bne.n	800d750 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d72c:	4b0c      	ldr	r3, [pc, #48]	; (800d760 <vPortEnterCritical+0x64>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	b2db      	uxtb	r3, r3
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00c      	beq.n	800d750 <vPortEnterCritical+0x54>
	__asm volatile
 800d736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73a:	b672      	cpsid	i
 800d73c:	f383 8811 	msr	BASEPRI, r3
 800d740:	f3bf 8f6f 	isb	sy
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	b662      	cpsie	i
 800d74a:	603b      	str	r3, [r7, #0]
}
 800d74c:	bf00      	nop
 800d74e:	e7fe      	b.n	800d74e <vPortEnterCritical+0x52>
	}
}
 800d750:	bf00      	nop
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr
 800d75c:	20000054 	.word	0x20000054
 800d760:	e000ed04 	.word	0xe000ed04

0800d764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d76a:	4b13      	ldr	r3, [pc, #76]	; (800d7b8 <vPortExitCritical+0x54>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10c      	bne.n	800d78c <vPortExitCritical+0x28>
	__asm volatile
 800d772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d776:	b672      	cpsid	i
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	b662      	cpsie	i
 800d786:	607b      	str	r3, [r7, #4]
}
 800d788:	bf00      	nop
 800d78a:	e7fe      	b.n	800d78a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d78c:	4b0a      	ldr	r3, [pc, #40]	; (800d7b8 <vPortExitCritical+0x54>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3b01      	subs	r3, #1
 800d792:	4a09      	ldr	r2, [pc, #36]	; (800d7b8 <vPortExitCritical+0x54>)
 800d794:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d796:	4b08      	ldr	r3, [pc, #32]	; (800d7b8 <vPortExitCritical+0x54>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d105      	bne.n	800d7aa <vPortExitCritical+0x46>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d7a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d7aa:	bf00      	nop
 800d7ac:	370c      	adds	r7, #12
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	20000054 	.word	0x20000054
 800d7bc:	00000000 	.word	0x00000000

0800d7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d7c0:	f3ef 8009 	mrs	r0, PSP
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	4b15      	ldr	r3, [pc, #84]	; (800d820 <pxCurrentTCBConst>)
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	f01e 0f10 	tst.w	lr, #16
 800d7d0:	bf08      	it	eq
 800d7d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d7d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7da:	6010      	str	r0, [r2, #0]
 800d7dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d7e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d7e4:	b672      	cpsid	i
 800d7e6:	f380 8811 	msr	BASEPRI, r0
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	b662      	cpsie	i
 800d7f4:	f7ff f9c4 	bl	800cb80 <vTaskSwitchContext>
 800d7f8:	f04f 0000 	mov.w	r0, #0
 800d7fc:	f380 8811 	msr	BASEPRI, r0
 800d800:	bc09      	pop	{r0, r3}
 800d802:	6819      	ldr	r1, [r3, #0]
 800d804:	6808      	ldr	r0, [r1, #0]
 800d806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d80a:	f01e 0f10 	tst.w	lr, #16
 800d80e:	bf08      	it	eq
 800d810:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d814:	f380 8809 	msr	PSP, r0
 800d818:	f3bf 8f6f 	isb	sy
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop

0800d820 <pxCurrentTCBConst>:
 800d820:	2000049c 	.word	0x2000049c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d824:	bf00      	nop
 800d826:	bf00      	nop

0800d828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
	__asm volatile
 800d82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d832:	b672      	cpsid	i
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	b662      	cpsie	i
 800d842:	607b      	str	r3, [r7, #4]
}
 800d844:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d846:	f7ff f8e1 	bl	800ca0c <xTaskIncrementTick>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d003      	beq.n	800d858 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d850:	4b06      	ldr	r3, [pc, #24]	; (800d86c <SysTick_Handler+0x44>)
 800d852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d856:	601a      	str	r2, [r3, #0]
 800d858:	2300      	movs	r3, #0
 800d85a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	f383 8811 	msr	BASEPRI, r3
}
 800d862:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d864:	bf00      	nop
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	e000ed04 	.word	0xe000ed04

0800d870 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d870:	b480      	push	{r7}
 800d872:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d874:	4b0b      	ldr	r3, [pc, #44]	; (800d8a4 <vPortSetupTimerInterrupt+0x34>)
 800d876:	2200      	movs	r2, #0
 800d878:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d87a:	4b0b      	ldr	r3, [pc, #44]	; (800d8a8 <vPortSetupTimerInterrupt+0x38>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d880:	4b0a      	ldr	r3, [pc, #40]	; (800d8ac <vPortSetupTimerInterrupt+0x3c>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a0a      	ldr	r2, [pc, #40]	; (800d8b0 <vPortSetupTimerInterrupt+0x40>)
 800d886:	fba2 2303 	umull	r2, r3, r2, r3
 800d88a:	099b      	lsrs	r3, r3, #6
 800d88c:	4a09      	ldr	r2, [pc, #36]	; (800d8b4 <vPortSetupTimerInterrupt+0x44>)
 800d88e:	3b01      	subs	r3, #1
 800d890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d892:	4b04      	ldr	r3, [pc, #16]	; (800d8a4 <vPortSetupTimerInterrupt+0x34>)
 800d894:	2207      	movs	r2, #7
 800d896:	601a      	str	r2, [r3, #0]
}
 800d898:	bf00      	nop
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	e000e010 	.word	0xe000e010
 800d8a8:	e000e018 	.word	0xe000e018
 800d8ac:	20000048 	.word	0x20000048
 800d8b0:	10624dd3 	.word	0x10624dd3
 800d8b4:	e000e014 	.word	0xe000e014

0800d8b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d8b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d8c8 <vPortEnableVFP+0x10>
 800d8bc:	6801      	ldr	r1, [r0, #0]
 800d8be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d8c2:	6001      	str	r1, [r0, #0]
 800d8c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d8c6:	bf00      	nop
 800d8c8:	e000ed88 	.word	0xe000ed88

0800d8cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b08a      	sub	sp, #40	; 0x28
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d8d8:	f7fe ffdc 	bl	800c894 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d8dc:	4b5e      	ldr	r3, [pc, #376]	; (800da58 <pvPortMalloc+0x18c>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d101      	bne.n	800d8e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d8e4:	f000 f920 	bl	800db28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d8e8:	4b5c      	ldr	r3, [pc, #368]	; (800da5c <pvPortMalloc+0x190>)
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4013      	ands	r3, r2
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f040 8092 	bne.w	800da1a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d01f      	beq.n	800d93c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d8fc:	2208      	movs	r2, #8
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	4413      	add	r3, r2
 800d902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f003 0307 	and.w	r3, r3, #7
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d016      	beq.n	800d93c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f023 0307 	bic.w	r3, r3, #7
 800d914:	3308      	adds	r3, #8
 800d916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f003 0307 	and.w	r3, r3, #7
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00c      	beq.n	800d93c <pvPortMalloc+0x70>
	__asm volatile
 800d922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d926:	b672      	cpsid	i
 800d928:	f383 8811 	msr	BASEPRI, r3
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	b662      	cpsie	i
 800d936:	617b      	str	r3, [r7, #20]
}
 800d938:	bf00      	nop
 800d93a:	e7fe      	b.n	800d93a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d06b      	beq.n	800da1a <pvPortMalloc+0x14e>
 800d942:	4b47      	ldr	r3, [pc, #284]	; (800da60 <pvPortMalloc+0x194>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d866      	bhi.n	800da1a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d94c:	4b45      	ldr	r3, [pc, #276]	; (800da64 <pvPortMalloc+0x198>)
 800d94e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d950:	4b44      	ldr	r3, [pc, #272]	; (800da64 <pvPortMalloc+0x198>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d956:	e004      	b.n	800d962 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d903      	bls.n	800d974 <pvPortMalloc+0xa8>
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d1f1      	bne.n	800d958 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d974:	4b38      	ldr	r3, [pc, #224]	; (800da58 <pvPortMalloc+0x18c>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d04d      	beq.n	800da1a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2208      	movs	r2, #8
 800d984:	4413      	add	r3, r2
 800d986:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	6a3b      	ldr	r3, [r7, #32]
 800d98e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d992:	685a      	ldr	r2, [r3, #4]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	1ad2      	subs	r2, r2, r3
 800d998:	2308      	movs	r3, #8
 800d99a:	005b      	lsls	r3, r3, #1
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d921      	bls.n	800d9e4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	f003 0307 	and.w	r3, r3, #7
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d00c      	beq.n	800d9cc <pvPortMalloc+0x100>
	__asm volatile
 800d9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b6:	b672      	cpsid	i
 800d9b8:	f383 8811 	msr	BASEPRI, r3
 800d9bc:	f3bf 8f6f 	isb	sy
 800d9c0:	f3bf 8f4f 	dsb	sy
 800d9c4:	b662      	cpsie	i
 800d9c6:	613b      	str	r3, [r7, #16]
}
 800d9c8:	bf00      	nop
 800d9ca:	e7fe      	b.n	800d9ca <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	1ad2      	subs	r2, r2, r3
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d9de:	69b8      	ldr	r0, [r7, #24]
 800d9e0:	f000 f904 	bl	800dbec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d9e4:	4b1e      	ldr	r3, [pc, #120]	; (800da60 <pvPortMalloc+0x194>)
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	1ad3      	subs	r3, r2, r3
 800d9ee:	4a1c      	ldr	r2, [pc, #112]	; (800da60 <pvPortMalloc+0x194>)
 800d9f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d9f2:	4b1b      	ldr	r3, [pc, #108]	; (800da60 <pvPortMalloc+0x194>)
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	4b1c      	ldr	r3, [pc, #112]	; (800da68 <pvPortMalloc+0x19c>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d203      	bcs.n	800da06 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d9fe:	4b18      	ldr	r3, [pc, #96]	; (800da60 <pvPortMalloc+0x194>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4a19      	ldr	r2, [pc, #100]	; (800da68 <pvPortMalloc+0x19c>)
 800da04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da08:	685a      	ldr	r2, [r3, #4]
 800da0a:	4b14      	ldr	r3, [pc, #80]	; (800da5c <pvPortMalloc+0x190>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	431a      	orrs	r2, r3
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da16:	2200      	movs	r2, #0
 800da18:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da1a:	f7fe ff49 	bl	800c8b0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d101      	bne.n	800da28 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800da24:	f7f2 fd82 	bl	800052c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	f003 0307 	and.w	r3, r3, #7
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d00c      	beq.n	800da4c <pvPortMalloc+0x180>
	__asm volatile
 800da32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da36:	b672      	cpsid	i
 800da38:	f383 8811 	msr	BASEPRI, r3
 800da3c:	f3bf 8f6f 	isb	sy
 800da40:	f3bf 8f4f 	dsb	sy
 800da44:	b662      	cpsie	i
 800da46:	60fb      	str	r3, [r7, #12]
}
 800da48:	bf00      	nop
 800da4a:	e7fe      	b.n	800da4a <pvPortMalloc+0x17e>
	return pvReturn;
 800da4c:	69fb      	ldr	r3, [r7, #28]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3728      	adds	r7, #40	; 0x28
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	200085d8 	.word	0x200085d8
 800da5c:	200085e4 	.word	0x200085e4
 800da60:	200085dc 	.word	0x200085dc
 800da64:	200085d0 	.word	0x200085d0
 800da68:	200085e0 	.word	0x200085e0

0800da6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b086      	sub	sp, #24
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d04c      	beq.n	800db18 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800da7e:	2308      	movs	r3, #8
 800da80:	425b      	negs	r3, r3
 800da82:	697a      	ldr	r2, [r7, #20]
 800da84:	4413      	add	r3, r2
 800da86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	685a      	ldr	r2, [r3, #4]
 800da90:	4b23      	ldr	r3, [pc, #140]	; (800db20 <vPortFree+0xb4>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4013      	ands	r3, r2
 800da96:	2b00      	cmp	r3, #0
 800da98:	d10c      	bne.n	800dab4 <vPortFree+0x48>
	__asm volatile
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	b672      	cpsid	i
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	b662      	cpsie	i
 800daae:	60fb      	str	r3, [r7, #12]
}
 800dab0:	bf00      	nop
 800dab2:	e7fe      	b.n	800dab2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d00c      	beq.n	800dad6 <vPortFree+0x6a>
	__asm volatile
 800dabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac0:	b672      	cpsid	i
 800dac2:	f383 8811 	msr	BASEPRI, r3
 800dac6:	f3bf 8f6f 	isb	sy
 800daca:	f3bf 8f4f 	dsb	sy
 800dace:	b662      	cpsie	i
 800dad0:	60bb      	str	r3, [r7, #8]
}
 800dad2:	bf00      	nop
 800dad4:	e7fe      	b.n	800dad4 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	685a      	ldr	r2, [r3, #4]
 800dada:	4b11      	ldr	r3, [pc, #68]	; (800db20 <vPortFree+0xb4>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4013      	ands	r3, r2
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d019      	beq.n	800db18 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d115      	bne.n	800db18 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	685a      	ldr	r2, [r3, #4]
 800daf0:	4b0b      	ldr	r3, [pc, #44]	; (800db20 <vPortFree+0xb4>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	43db      	mvns	r3, r3
 800daf6:	401a      	ands	r2, r3
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dafc:	f7fe feca 	bl	800c894 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	685a      	ldr	r2, [r3, #4]
 800db04:	4b07      	ldr	r3, [pc, #28]	; (800db24 <vPortFree+0xb8>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4413      	add	r3, r2
 800db0a:	4a06      	ldr	r2, [pc, #24]	; (800db24 <vPortFree+0xb8>)
 800db0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db0e:	6938      	ldr	r0, [r7, #16]
 800db10:	f000 f86c 	bl	800dbec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800db14:	f7fe fecc 	bl	800c8b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db18:	bf00      	nop
 800db1a:	3718      	adds	r7, #24
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	200085e4 	.word	0x200085e4
 800db24:	200085dc 	.word	0x200085dc

0800db28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db28:	b480      	push	{r7}
 800db2a:	b085      	sub	sp, #20
 800db2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db34:	4b27      	ldr	r3, [pc, #156]	; (800dbd4 <prvHeapInit+0xac>)
 800db36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f003 0307 	and.w	r3, r3, #7
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00c      	beq.n	800db5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	3307      	adds	r3, #7
 800db46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f023 0307 	bic.w	r3, r3, #7
 800db4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	1ad3      	subs	r3, r2, r3
 800db56:	4a1f      	ldr	r2, [pc, #124]	; (800dbd4 <prvHeapInit+0xac>)
 800db58:	4413      	add	r3, r2
 800db5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800db60:	4a1d      	ldr	r2, [pc, #116]	; (800dbd8 <prvHeapInit+0xb0>)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800db66:	4b1c      	ldr	r3, [pc, #112]	; (800dbd8 <prvHeapInit+0xb0>)
 800db68:	2200      	movs	r2, #0
 800db6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	4413      	add	r3, r2
 800db72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800db74:	2208      	movs	r2, #8
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	1a9b      	subs	r3, r3, r2
 800db7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f023 0307 	bic.w	r3, r3, #7
 800db82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	4a15      	ldr	r2, [pc, #84]	; (800dbdc <prvHeapInit+0xb4>)
 800db88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800db8a:	4b14      	ldr	r3, [pc, #80]	; (800dbdc <prvHeapInit+0xb4>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2200      	movs	r2, #0
 800db90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800db92:	4b12      	ldr	r3, [pc, #72]	; (800dbdc <prvHeapInit+0xb4>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2200      	movs	r2, #0
 800db98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	1ad2      	subs	r2, r2, r3
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dba8:	4b0c      	ldr	r3, [pc, #48]	; (800dbdc <prvHeapInit+0xb4>)
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	4a0a      	ldr	r2, [pc, #40]	; (800dbe0 <prvHeapInit+0xb8>)
 800dbb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	4a09      	ldr	r2, [pc, #36]	; (800dbe4 <prvHeapInit+0xbc>)
 800dbbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dbc0:	4b09      	ldr	r3, [pc, #36]	; (800dbe8 <prvHeapInit+0xc0>)
 800dbc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dbc6:	601a      	str	r2, [r3, #0]
}
 800dbc8:	bf00      	nop
 800dbca:	3714      	adds	r7, #20
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr
 800dbd4:	200005d0 	.word	0x200005d0
 800dbd8:	200085d0 	.word	0x200085d0
 800dbdc:	200085d8 	.word	0x200085d8
 800dbe0:	200085e0 	.word	0x200085e0
 800dbe4:	200085dc 	.word	0x200085dc
 800dbe8:	200085e4 	.word	0x200085e4

0800dbec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dbf4:	4b28      	ldr	r3, [pc, #160]	; (800dc98 <prvInsertBlockIntoFreeList+0xac>)
 800dbf6:	60fb      	str	r3, [r7, #12]
 800dbf8:	e002      	b.n	800dc00 <prvInsertBlockIntoFreeList+0x14>
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	60fb      	str	r3, [r7, #12]
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d8f7      	bhi.n	800dbfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	68ba      	ldr	r2, [r7, #8]
 800dc14:	4413      	add	r3, r2
 800dc16:	687a      	ldr	r2, [r7, #4]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d108      	bne.n	800dc2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	685a      	ldr	r2, [r3, #4]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	441a      	add	r2, r3
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	68ba      	ldr	r2, [r7, #8]
 800dc38:	441a      	add	r2, r3
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d118      	bne.n	800dc74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	4b15      	ldr	r3, [pc, #84]	; (800dc9c <prvInsertBlockIntoFreeList+0xb0>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d00d      	beq.n	800dc6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	685a      	ldr	r2, [r3, #4]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	441a      	add	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	601a      	str	r2, [r3, #0]
 800dc68:	e008      	b.n	800dc7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc6a:	4b0c      	ldr	r3, [pc, #48]	; (800dc9c <prvInsertBlockIntoFreeList+0xb0>)
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	e003      	b.n	800dc7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d002      	beq.n	800dc8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc8a:	bf00      	nop
 800dc8c:	3714      	adds	r7, #20
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	200085d0 	.word	0x200085d0
 800dc9c:	200085d8 	.word	0x200085d8

0800dca0 <__libc_init_array>:
 800dca0:	b570      	push	{r4, r5, r6, lr}
 800dca2:	4d0d      	ldr	r5, [pc, #52]	; (800dcd8 <__libc_init_array+0x38>)
 800dca4:	4c0d      	ldr	r4, [pc, #52]	; (800dcdc <__libc_init_array+0x3c>)
 800dca6:	1b64      	subs	r4, r4, r5
 800dca8:	10a4      	asrs	r4, r4, #2
 800dcaa:	2600      	movs	r6, #0
 800dcac:	42a6      	cmp	r6, r4
 800dcae:	d109      	bne.n	800dcc4 <__libc_init_array+0x24>
 800dcb0:	4d0b      	ldr	r5, [pc, #44]	; (800dce0 <__libc_init_array+0x40>)
 800dcb2:	4c0c      	ldr	r4, [pc, #48]	; (800dce4 <__libc_init_array+0x44>)
 800dcb4:	f000 f82e 	bl	800dd14 <_init>
 800dcb8:	1b64      	subs	r4, r4, r5
 800dcba:	10a4      	asrs	r4, r4, #2
 800dcbc:	2600      	movs	r6, #0
 800dcbe:	42a6      	cmp	r6, r4
 800dcc0:	d105      	bne.n	800dcce <__libc_init_array+0x2e>
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
 800dcc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcc8:	4798      	blx	r3
 800dcca:	3601      	adds	r6, #1
 800dccc:	e7ee      	b.n	800dcac <__libc_init_array+0xc>
 800dcce:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcd2:	4798      	blx	r3
 800dcd4:	3601      	adds	r6, #1
 800dcd6:	e7f2      	b.n	800dcbe <__libc_init_array+0x1e>
 800dcd8:	0800fd3c 	.word	0x0800fd3c
 800dcdc:	0800fd3c 	.word	0x0800fd3c
 800dce0:	0800fd3c 	.word	0x0800fd3c
 800dce4:	0800fd40 	.word	0x0800fd40

0800dce8 <memcpy>:
 800dce8:	440a      	add	r2, r1
 800dcea:	4291      	cmp	r1, r2
 800dcec:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcf0:	d100      	bne.n	800dcf4 <memcpy+0xc>
 800dcf2:	4770      	bx	lr
 800dcf4:	b510      	push	{r4, lr}
 800dcf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcfe:	4291      	cmp	r1, r2
 800dd00:	d1f9      	bne.n	800dcf6 <memcpy+0xe>
 800dd02:	bd10      	pop	{r4, pc}

0800dd04 <memset>:
 800dd04:	4402      	add	r2, r0
 800dd06:	4603      	mov	r3, r0
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d100      	bne.n	800dd0e <memset+0xa>
 800dd0c:	4770      	bx	lr
 800dd0e:	f803 1b01 	strb.w	r1, [r3], #1
 800dd12:	e7f9      	b.n	800dd08 <memset+0x4>

0800dd14 <_init>:
 800dd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd16:	bf00      	nop
 800dd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1a:	bc08      	pop	{r3}
 800dd1c:	469e      	mov	lr, r3
 800dd1e:	4770      	bx	lr

0800dd20 <_fini>:
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	bf00      	nop
 800dd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd26:	bc08      	pop	{r3}
 800dd28:	469e      	mov	lr, r3
 800dd2a:	4770      	bx	lr
